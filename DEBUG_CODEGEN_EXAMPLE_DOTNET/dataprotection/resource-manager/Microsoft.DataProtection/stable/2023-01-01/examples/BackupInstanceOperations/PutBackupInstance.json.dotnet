using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var backupInstance = new AzureNative.DataProtection.BackupInstance("backupInstance", new()
    {
        BackupInstanceName = "testInstance1",
        Properties = new AzureNative.DataProtection.Inputs.BackupInstanceArgs
        {
            DataSourceInfo = new AzureNative.DataProtection.Inputs.DatasourceArgs
            {
                DatasourceType = "Microsoft.DBforPostgreSQL/servers/databases",
                ObjectType = "Datasource",
                ResourceID = "/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest/databases/testdb",
                ResourceLocation = "",
                ResourceName = "testdb",
                ResourceType = "Microsoft.DBforPostgreSQL/servers/databases",
                ResourceUri = "",
            },
            DataSourceSetInfo = new AzureNative.DataProtection.Inputs.DatasourceSetArgs
            {
                DatasourceType = "Microsoft.DBforPostgreSQL/servers/databases",
                ObjectType = "DatasourceSet",
                ResourceID = "/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest/providers/Microsoft.DBforPostgreSQL/servers/viveksipgtest",
                ResourceLocation = "",
                ResourceName = "viveksipgtest",
                ResourceType = "Microsoft.DBforPostgreSQL/servers",
                ResourceUri = "",
            },
            DatasourceAuthCredentials = new AzureNative.DataProtection.Inputs.SecretStoreBasedAuthCredentialsArgs
            {
                ObjectType = "SecretStoreBasedAuthCredentials",
                SecretStoreResource = new AzureNative.DataProtection.Inputs.SecretStoreResourceArgs
                {
                    SecretStoreType = "AzureKeyVault",
                    Uri = "https://samplevault.vault.azure.net/secrets/credentials",
                },
            },
            FriendlyName = "harshitbi2",
            ObjectType = "BackupInstance",
            PolicyInfo = new AzureNative.DataProtection.Inputs.PolicyInfoArgs
            {
                PolicyId = "/subscriptions/04cf684a-d41f-4550-9f70-7708a3a2283b/resourceGroups/000pikumar/providers/Microsoft.DataProtection/Backupvaults/PratikPrivatePreviewVault1/backupPolicies/PratikPolicy1",
                PolicyParameters = new AzureNative.DataProtection.Inputs.PolicyParametersArgs
                {
                    DataStoreParametersList = new[]
                    {
                        new AzureNative.DataProtection.Inputs.AzureOperationalStoreParametersArgs
                        {
                            DataStoreType = "OperationalStore",
                            ObjectType = "AzureOperationalStoreParameters",
                            ResourceGroupId = "/subscriptions/f75d8d8b-6735-4697-82e1-1a7a3ff0d5d4/resourceGroups/viveksipgtest",
                        },
                    },
                },
            },
            ValidationType = "ShallowValidation",
        },
        ResourceGroupName = "000pikumar",
        Tags = 
        {
            { "key1", "val1" },
        },
        VaultName = "PratikPrivatePreviewVault1",
    });

});

