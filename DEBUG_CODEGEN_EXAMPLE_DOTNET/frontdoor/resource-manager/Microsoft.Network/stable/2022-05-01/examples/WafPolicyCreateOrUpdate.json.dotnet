using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var policy = new AzureNative.Network.Policy("policy", new()
    {
        CustomRules = new AzureNative.Network.Inputs.CustomRuleListArgs
        {
            Rules = new[]
            {
                new AzureNative.Network.Inputs.CustomRuleArgs
                {
                    Action = "Block",
                    MatchConditions = new[]
                    {
                        new AzureNative.Network.Inputs.FrontDoorMatchConditionArgs
                        {
                            MatchValue = new[]
                            {
                                "192.168.1.0/24",
                                "10.0.0.0/24",
                            },
                            MatchVariable = "RemoteAddr",
                            Operator = "IPMatch",
                        },
                    },
                    Name = "Rule1",
                    Priority = 1,
                    RateLimitThreshold = 1000,
                    RuleType = "RateLimitRule",
                },
                new AzureNative.Network.Inputs.CustomRuleArgs
                {
                    Action = "Block",
                    MatchConditions = new[]
                    {
                        new AzureNative.Network.Inputs.FrontDoorMatchConditionArgs
                        {
                            MatchValue = new[]
                            {
                                "CH",
                            },
                            MatchVariable = "RemoteAddr",
                            Operator = "GeoMatch",
                        },
                        new AzureNative.Network.Inputs.FrontDoorMatchConditionArgs
                        {
                            MatchValue = new[]
                            {
                                "windows",
                            },
                            MatchVariable = "RequestHeader",
                            Operator = "Contains",
                            Selector = "UserAgent",
                            Transforms = new[]
                            {
                                "Lowercase",
                            },
                        },
                    },
                    Name = "Rule2",
                    Priority = 2,
                    RuleType = "MatchRule",
                },
            },
        },
        Location = "WestUs",
        ManagedRules = new AzureNative.Network.Inputs.ManagedRuleSetListArgs
        {
            ManagedRuleSets = new[]
            {
                new AzureNative.Network.Inputs.FrontDoorManagedRuleSetArgs
                {
                    Exclusions = new[]
                    {
                        new AzureNative.Network.Inputs.ManagedRuleExclusionArgs
                        {
                            MatchVariable = "RequestHeaderNames",
                            Selector = "User-Agent",
                            SelectorMatchOperator = "Equals",
                        },
                    },
                    RuleGroupOverrides = new[]
                    {
                        new AzureNative.Network.Inputs.FrontDoorManagedRuleGroupOverrideArgs
                        {
                            Exclusions = new[]
                            {
                                new AzureNative.Network.Inputs.ManagedRuleExclusionArgs
                                {
                                    MatchVariable = "RequestCookieNames",
                                    Selector = "token",
                                    SelectorMatchOperator = "StartsWith",
                                },
                            },
                            RuleGroupName = "SQLI",
                            Rules = new[]
                            {
                                new AzureNative.Network.Inputs.FrontDoorManagedRuleOverrideArgs
                                {
                                    Action = "Redirect",
                                    EnabledState = "Enabled",
                                    Exclusions = new[]
                                    {
                                        new AzureNative.Network.Inputs.ManagedRuleExclusionArgs
                                        {
                                            MatchVariable = "QueryStringArgNames",
                                            Selector = "query",
                                            SelectorMatchOperator = "Equals",
                                        },
                                    },
                                    RuleId = "942100",
                                },
                                new AzureNative.Network.Inputs.FrontDoorManagedRuleOverrideArgs
                                {
                                    EnabledState = "Disabled",
                                    RuleId = "942110",
                                },
                            },
                        },
                    },
                    RuleSetAction = "Block",
                    RuleSetType = "DefaultRuleSet",
                    RuleSetVersion = "1.0",
                },
            },
        },
        PolicyName = "Policy1",
        PolicySettings = new AzureNative.Network.Inputs.FrontDoorPolicySettingsArgs
        {
            CustomBlockResponseBody = "PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==",
            CustomBlockResponseStatusCode = 429,
            EnabledState = "Enabled",
            Mode = "Prevention",
            RedirectUrl = "http://www.bing.com",
            RequestBodyCheck = "Disabled",
        },
        ResourceGroupName = "rg1",
        Sku = new AzureNative.Network.Inputs.SkuArgs
        {
            Name = "Classic_AzureFrontDoor",
        },
    });

});

