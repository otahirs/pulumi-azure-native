using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var rulesEngine = new AzureNative.Network.RulesEngine("rulesEngine", new()
    {
        FrontDoorName = "frontDoor1",
        ResourceGroupName = "rg1",
        Rules = new[]
        {
            new AzureNative.Network.Inputs.RulesEngineRuleArgs
            {
                Action = new AzureNative.Network.Inputs.RulesEngineActionArgs
                {
                    RouteConfigurationOverride = new AzureNative.Network.Inputs.RedirectConfigurationArgs
                    {
                        CustomFragment = "fragment",
                        CustomHost = "www.bing.com",
                        CustomPath = "/api",
                        CustomQueryString = "a=b",
                        OdataType = "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration",
                        RedirectProtocol = "HttpsOnly",
                        RedirectType = "Moved",
                    },
                },
                MatchConditions = new[]
                {
                    new AzureNative.Network.Inputs.RulesEngineMatchConditionArgs
                    {
                        RulesEngineMatchValue = new[]
                        {
                            "CH",
                        },
                        RulesEngineMatchVariable = "RemoteAddr",
                        RulesEngineOperator = "GeoMatch",
                    },
                },
                MatchProcessingBehavior = "Stop",
                Name = "Rule1",
                Priority = 1,
            },
            new AzureNative.Network.Inputs.RulesEngineRuleArgs
            {
                Action = new AzureNative.Network.Inputs.RulesEngineActionArgs
                {
                    ResponseHeaderActions = new[]
                    {
                        new AzureNative.Network.Inputs.HeaderActionArgs
                        {
                            HeaderActionType = "Overwrite",
                            HeaderName = "Cache-Control",
                            Value = "public, max-age=31536000",
                        },
                    },
                },
                MatchConditions = new[]
                {
                    new AzureNative.Network.Inputs.RulesEngineMatchConditionArgs
                    {
                        RulesEngineMatchValue = new[]
                        {
                            "jpg",
                        },
                        RulesEngineMatchVariable = "RequestFilenameExtension",
                        RulesEngineOperator = "Equal",
                        Transforms = new[]
                        {
                            "Lowercase",
                        },
                    },
                },
                Name = "Rule2",
                Priority = 2,
            },
            new AzureNative.Network.Inputs.RulesEngineRuleArgs
            {
                Action = new AzureNative.Network.Inputs.RulesEngineActionArgs
                {
                    RouteConfigurationOverride = new AzureNative.Network.Inputs.ForwardingConfigurationArgs
                    {
                        BackendPool = new AzureNative.Network.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1",
                        },
                        CacheConfiguration = new AzureNative.Network.Inputs.CacheConfigurationArgs
                        {
                            CacheDuration = "P1DT12H20M30S",
                            DynamicCompression = "Disabled",
                            QueryParameterStripDirective = "StripOnly",
                            QueryParameters = "a=b,p=q",
                        },
                        ForwardingProtocol = "HttpsOnly",
                        OdataType = "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                    },
                },
                MatchConditions = new[]
                {
                    new AzureNative.Network.Inputs.RulesEngineMatchConditionArgs
                    {
                        NegateCondition = false,
                        RulesEngineMatchValue = new[]
                        {
                            "allowoverride",
                        },
                        RulesEngineMatchVariable = "RequestHeader",
                        RulesEngineOperator = "Equal",
                        Selector = "Rules-Engine-Route-Forward",
                        Transforms = new[]
                        {
                            "Lowercase",
                        },
                    },
                },
                Name = "Rule3",
                Priority = 3,
            },
        },
        RulesEngineName = "rulesEngine1",
    });

});

