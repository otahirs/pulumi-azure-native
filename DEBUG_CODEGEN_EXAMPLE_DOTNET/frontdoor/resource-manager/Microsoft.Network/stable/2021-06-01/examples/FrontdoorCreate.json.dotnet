using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var frontDoor = new AzureNative.Network.FrontDoor("frontDoor", new()
    {
        BackendPools = new[]
        {
            new AzureNative.Network.Inputs.BackendPoolArgs
            {
                Backends = new[]
                {
                    new AzureNative.Network.Inputs.BackendArgs
                    {
                        Address = "w3.contoso.com",
                        HttpPort = 80,
                        HttpsPort = 443,
                        Priority = 2,
                        Weight = 1,
                    },
                    new AzureNative.Network.Inputs.BackendArgs
                    {
                        Address = "contoso.com.website-us-west-2.othercloud.net",
                        HttpPort = 80,
                        HttpsPort = 443,
                        Priority = 1,
                        PrivateLinkApprovalMessage = "Please approve the connection request for this Private Link",
                        PrivateLinkLocation = "eastus",
                        PrivateLinkResourceId = "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1",
                        Weight = 2,
                    },
                    new AzureNative.Network.Inputs.BackendArgs
                    {
                        Address = "10.0.1.5",
                        HttpPort = 80,
                        HttpsPort = 443,
                        Priority = 1,
                        PrivateLinkAlias = "APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice",
                        PrivateLinkApprovalMessage = "Please approve this request to connect to the Private Link",
                        Weight = 1,
                    },
                },
                HealthProbeSettings = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1",
                },
                LoadBalancingSettings = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1",
                },
                Name = "backendPool1",
            },
        },
        BackendPoolsSettings = new AzureNative.Network.Inputs.BackendPoolsSettingsArgs
        {
            EnforceCertificateNameCheck = "Enabled",
            SendRecvTimeoutSeconds = 60,
        },
        EnabledState = "Enabled",
        FrontDoorName = "frontDoor1",
        FrontendEndpoints = new[]
        {
            new AzureNative.Network.Inputs.FrontendEndpointArgs
            {
                HostName = "www.contoso.com",
                Name = "frontendEndpoint1",
                SessionAffinityEnabledState = "Enabled",
                SessionAffinityTtlSeconds = 60,
                WebApplicationFirewallPolicyLink = new AzureNative.Network.Inputs.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1",
                },
            },
            new AzureNative.Network.Inputs.FrontendEndpointArgs
            {
                HostName = "frontDoor1.azurefd.net",
                Name = "default",
            },
        },
        HealthProbeSettings = new[]
        {
            new AzureNative.Network.Inputs.HealthProbeSettingsModelArgs
            {
                EnabledState = "Enabled",
                HealthProbeMethod = "HEAD",
                IntervalInSeconds = 120,
                Name = "healthProbeSettings1",
                Path = "/",
                Protocol = "Http",
            },
        },
        LoadBalancingSettings = new[]
        {
            new AzureNative.Network.Inputs.LoadBalancingSettingsModelArgs
            {
                Name = "loadBalancingSettings1",
                SampleSize = 4,
                SuccessfulSamplesRequired = 2,
            },
        },
        Location = "westus",
        ResourceGroupName = "rg1",
        RoutingRules = new[]
        {
            new AzureNative.Network.Inputs.RoutingRuleArgs
            {
                AcceptedProtocols = new[]
                {
                    "Http",
                },
                EnabledState = "Enabled",
                FrontendEndpoints = new[]
                {
                    new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1",
                    },
                    new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default",
                    },
                },
                Name = "routingRule1",
                PatternsToMatch = new[]
                {
                    "/*",
                },
                RouteConfiguration = new AzureNative.Network.Inputs.ForwardingConfigurationArgs
                {
                    BackendPool = new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1",
                    },
                    OdataType = "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                },
                RulesEngine = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1",
                },
                WebApplicationFirewallPolicyLink = new AzureNative.Network.Inputs.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLinkArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1",
                },
            },
        },
        Tags = 
        {
            { "tag1", "value1" },
            { "tag2", "value2" },
        },
    });

});

