using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var domainService = new AzureNative.Aad.DomainService("domainService", new()
    {
        DomainName = "TestDomainService.com",
        DomainSecuritySettings = new AzureNative.Aad.Inputs.DomainSecuritySettingsArgs
        {
            NtlmV1 = "Enabled",
            SyncNtlmPasswords = "Enabled",
            TlsV1 = "Disabled",
        },
        DomainServiceName = "TestDomainService.com",
        FilteredSync = "Enabled",
        LdapsSettings = new AzureNative.Aad.Inputs.LdapsSettingsArgs
        {
            ExternalAccess = "Enabled",
            Ldaps = "Enabled",
            PfxCertificate = "MIIDPDCCAiSgAwIBAgIQQUI9P6tq2p9OFIJa7DLNvTANBgkqhkiG9w0BAQsFADAgMR4w...",
            PfxCertificatePassword = "<pfxCertificatePassword>",
        },
        NotificationSettings = new AzureNative.Aad.Inputs.NotificationSettingsArgs
        {
            AdditionalRecipients = new[]
            {
                "jicha@microsoft.com",
                "caalmont@microsoft.com",
            },
            NotifyDcAdmins = "Enabled",
            NotifyGlobalAdmins = "Enabled",
        },
        ReplicaSets = new[]
        {
            new AzureNative.Aad.Inputs.ReplicaSetArgs
            {
                Location = "West US",
                SubnetId = "/subscriptions/1639790a-76a2-4ac4-98d9-8562f5dfcb4d/resourceGroups/TestNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/TestVnetWUS/subnets/TestSubnetWUS",
            },
        },
        ResourceGroupName = "TestResourceGroup",
    });

});

