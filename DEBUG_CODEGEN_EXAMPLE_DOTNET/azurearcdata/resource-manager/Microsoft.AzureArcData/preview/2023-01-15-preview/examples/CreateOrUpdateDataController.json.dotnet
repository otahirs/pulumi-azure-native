using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var dataController = new AzureNative.AzureArcData.DataController("dataController", new()
    {
        DataControllerName = "testdataController",
        ExtendedLocation = new AzureNative.AzureArcData.Inputs.ExtendedLocationArgs
        {
            Name = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.ExtendedLocation/customLocations/arclocation",
            Type = "CustomLocation",
        },
        Location = "northeurope",
        Properties = new AzureNative.AzureArcData.Inputs.DataControllerPropertiesArgs
        {
            BasicLoginInformation = new AzureNative.AzureArcData.Inputs.BasicLoginInformationArgs
            {
                Password = "********",
                Username = "username",
            },
            ClusterId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s",
            ExtensionId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Kubernetes/connectedClusters/connectedk8s/providers/Microsoft.KubernetesConfiguration/extensions/extension",
            Infrastructure = AzureNative.AzureArcData.Infrastructure.Onpremises,
            LogAnalyticsWorkspaceConfig = new AzureNative.AzureArcData.Inputs.LogAnalyticsWorkspaceConfigArgs
            {
                PrimaryKey = "********",
                WorkspaceId = "00000000-1111-2222-3333-444444444444",
            },
            LogsDashboardCredential = new AzureNative.AzureArcData.Inputs.BasicLoginInformationArgs
            {
                Password = "********",
                Username = "username",
            },
            MetricsDashboardCredential = new AzureNative.AzureArcData.Inputs.BasicLoginInformationArgs
            {
                Password = "********",
                Username = "username",
            },
            OnPremiseProperty = new AzureNative.AzureArcData.Inputs.OnPremisePropertyArgs
            {
                Id = "12345678-1234-1234-ab12-1a2b3c4d5e6f",
                PublicSigningKey = "publicOnPremSigningKey",
            },
            UploadServicePrincipal = new AzureNative.AzureArcData.Inputs.UploadServicePrincipalArgs
            {
                Authority = "https://login.microsoftonline.com/",
                ClientId = "00000000-1111-2222-3333-444444444444",
                ClientSecret = "********",
                TenantId = "00000000-1111-2222-3333-444444444444",
            },
            UploadWatermark = new AzureNative.AzureArcData.Inputs.UploadWatermarkArgs
            {
                Logs = "2020-01-01T17:18:19.1234567Z",
                Metrics = "2020-01-01T17:18:19.1234567Z",
                Usages = "2020-01-01T17:18:19.1234567Z",
            },
        },
        ResourceGroupName = "testrg",
        Tags = 
        {
            { "mytag", "myval" },
        },
    });

});

