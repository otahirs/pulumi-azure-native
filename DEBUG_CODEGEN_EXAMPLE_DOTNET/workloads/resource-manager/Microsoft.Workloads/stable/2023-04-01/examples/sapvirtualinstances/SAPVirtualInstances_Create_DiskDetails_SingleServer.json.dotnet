using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var sapVirtualInstance = new AzureNative.Workloads.SAPVirtualInstance("sapVirtualInstance", new()
    {
        Configuration = new AzureNative.Workloads.Inputs.DeploymentWithOSConfigurationArgs
        {
            AppLocation = "eastus",
            ConfigurationType = "DeploymentWithOSConfig",
            InfrastructureConfiguration = new AzureNative.Workloads.Inputs.SingleServerConfigurationArgs
            {
                AppResourceGroup = "X00-RG",
                DatabaseType = "HANA",
                DbDiskConfiguration = new AzureNative.Workloads.Inputs.DiskConfigurationArgs
                {
                    DiskVolumeConfigurations = 
                    {
                        { "backup", new AzureNative.Workloads.Inputs.DiskVolumeConfigurationArgs
                        {
                            Count = 2,
                            SizeGB = 256,
                            Sku = new AzureNative.Workloads.Inputs.DiskSkuArgs
                            {
                                Name = "StandardSSD_LRS",
                            },
                        } },
                        { "hana/data", new AzureNative.Workloads.Inputs.DiskVolumeConfigurationArgs
                        {
                            Count = 4,
                            SizeGB = 128,
                            Sku = new AzureNative.Workloads.Inputs.DiskSkuArgs
                            {
                                Name = "Premium_LRS",
                            },
                        } },
                        { "hana/log", new AzureNative.Workloads.Inputs.DiskVolumeConfigurationArgs
                        {
                            Count = 3,
                            SizeGB = 128,
                            Sku = new AzureNative.Workloads.Inputs.DiskSkuArgs
                            {
                                Name = "Premium_LRS",
                            },
                        } },
                        { "hana/shared", new AzureNative.Workloads.Inputs.DiskVolumeConfigurationArgs
                        {
                            Count = 1,
                            SizeGB = 256,
                            Sku = new AzureNative.Workloads.Inputs.DiskSkuArgs
                            {
                                Name = "StandardSSD_LRS",
                            },
                        } },
                        { "os", new AzureNative.Workloads.Inputs.DiskVolumeConfigurationArgs
                        {
                            Count = 1,
                            SizeGB = 64,
                            Sku = new AzureNative.Workloads.Inputs.DiskSkuArgs
                            {
                                Name = "StandardSSD_LRS",
                            },
                        } },
                        { "usr/sap", new AzureNative.Workloads.Inputs.DiskVolumeConfigurationArgs
                        {
                            Count = 1,
                            SizeGB = 128,
                            Sku = new AzureNative.Workloads.Inputs.DiskSkuArgs
                            {
                                Name = "Premium_LRS",
                            },
                        } },
                    },
                },
                DeploymentType = "SingleServer",
                NetworkConfiguration = new AzureNative.Workloads.Inputs.NetworkConfigurationArgs
                {
                    IsSecondaryIpEnabled = true,
                },
                SubnetId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet",
                VirtualMachineConfiguration = new AzureNative.Workloads.Inputs.VirtualMachineConfigurationArgs
                {
                    ImageReference = new AzureNative.Workloads.Inputs.ImageReferenceArgs
                    {
                        Offer = "RHEL-SAP",
                        Publisher = "RedHat",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    },
                    OsProfile = new AzureNative.Workloads.Inputs.OSProfileArgs
                    {
                        AdminUsername = "{your-username}",
                        OsConfiguration = new AzureNative.Workloads.Inputs.LinuxConfigurationArgs
                        {
                            DisablePasswordAuthentication = true,
                            OsType = "Linux",
                            SshKeyPair = new AzureNative.Workloads.Inputs.SshKeyPairArgs
                            {
                                PrivateKey = "xyz",
                                PublicKey = "abc",
                            },
                        },
                    },
                    VmSize = "Standard_E32ds_v4",
                },
            },
            OsSapConfiguration = new AzureNative.Workloads.Inputs.OsSapConfigurationArgs
            {
                SapFqdn = "xyz.test.com",
            },
        },
        Environment = "NonProd",
        Location = "westcentralus",
        ResourceGroupName = "test-rg",
        SapProduct = "S4HANA",
        SapVirtualInstanceName = "X00",
        Tags = null,
    });

});

