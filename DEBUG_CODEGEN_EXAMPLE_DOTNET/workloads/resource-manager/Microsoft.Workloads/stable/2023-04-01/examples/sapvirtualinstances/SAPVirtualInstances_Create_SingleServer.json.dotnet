using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var sapVirtualInstance = new AzureNative.Workloads.SAPVirtualInstance("sapVirtualInstance", new()
    {
        Configuration = new AzureNative.Workloads.Inputs.DeploymentConfigurationArgs
        {
            AppLocation = "eastus",
            ConfigurationType = "Deployment",
            InfrastructureConfiguration = new AzureNative.Workloads.Inputs.SingleServerConfigurationArgs
            {
                AppResourceGroup = "X00-RG",
                DatabaseType = "HANA",
                DeploymentType = "SingleServer",
                NetworkConfiguration = new AzureNative.Workloads.Inputs.NetworkConfigurationArgs
                {
                    IsSecondaryIpEnabled = true,
                },
                SubnetId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet",
                VirtualMachineConfiguration = new AzureNative.Workloads.Inputs.VirtualMachineConfigurationArgs
                {
                    ImageReference = new AzureNative.Workloads.Inputs.ImageReferenceArgs
                    {
                        Offer = "RHEL-SAP",
                        Publisher = "RedHat",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    },
                    OsProfile = new AzureNative.Workloads.Inputs.OSProfileArgs
                    {
                        AdminUsername = "{your-username}",
                        OsConfiguration = new AzureNative.Workloads.Inputs.LinuxConfigurationArgs
                        {
                            DisablePasswordAuthentication = true,
                            OsType = "Linux",
                            Ssh = new AzureNative.Workloads.Inputs.SshConfigurationArgs
                            {
                                PublicKeys = new[]
                                {
                                    new AzureNative.Workloads.Inputs.SshPublicKeyArgs
                                    {
                                        KeyData = "ssh-rsa public key",
                                    },
                                },
                            },
                        },
                    },
                    VmSize = "Standard_E32ds_v4",
                },
            },
        },
        Environment = "NonProd",
        Location = "westcentralus",
        ResourceGroupName = "test-rg",
        SapProduct = "S4HANA",
        SapVirtualInstanceName = "X00",
        Tags = null,
    });

});

