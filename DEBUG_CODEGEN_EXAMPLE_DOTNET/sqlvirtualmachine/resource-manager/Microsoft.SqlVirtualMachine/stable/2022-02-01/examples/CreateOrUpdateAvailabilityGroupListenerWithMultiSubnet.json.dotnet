using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var availabilityGroupListener = new AzureNative.SqlVirtualMachine.AvailabilityGroupListener("availabilityGroupListener", new()
    {
        AvailabilityGroupListenerName = "agl-test",
        AvailabilityGroupName = "ag-test",
        MultiSubnetIpConfigurations = new[]
        {
            new AzureNative.SqlVirtualMachine.Inputs.MultiSubnetIpConfigurationArgs
            {
                PrivateIpAddress = new AzureNative.SqlVirtualMachine.Inputs.PrivateIPAddressArgs
                {
                    IpAddress = "10.0.0.112",
                    SubnetResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default",
                },
                SqlVirtualMachineInstance = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2",
            },
            new AzureNative.SqlVirtualMachine.Inputs.MultiSubnetIpConfigurationArgs
            {
                PrivateIpAddress = new AzureNative.SqlVirtualMachine.Inputs.PrivateIPAddressArgs
                {
                    IpAddress = "10.0.1.112",
                    SubnetResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/alternate",
                },
                SqlVirtualMachineInstance = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm1",
            },
        },
        Port = 1433,
        ResourceGroupName = "testrg",
        SqlVirtualMachineGroupName = "testvmgroup",
    });

});

