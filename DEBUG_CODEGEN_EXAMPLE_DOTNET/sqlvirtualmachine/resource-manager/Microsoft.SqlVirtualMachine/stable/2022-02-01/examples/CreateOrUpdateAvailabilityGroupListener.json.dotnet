using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var availabilityGroupListener = new AzureNative.SqlVirtualMachine.AvailabilityGroupListener("availabilityGroupListener", new()
    {
        AvailabilityGroupListenerName = "agl-test",
        AvailabilityGroupName = "ag-test",
        LoadBalancerConfigurations = new[]
        {
            new AzureNative.SqlVirtualMachine.Inputs.LoadBalancerConfigurationArgs
            {
                LoadBalancerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb-test",
                PrivateIpAddress = new AzureNative.SqlVirtualMachine.Inputs.PrivateIPAddressArgs
                {
                    IpAddress = "10.1.0.112",
                    SubnetResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default",
                },
                ProbePort = 59983,
                SqlVirtualMachineInstances = new[]
                {
                    "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm2",
                    "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm3",
                },
            },
        },
        Port = 1433,
        ResourceGroupName = "testrg",
        SqlVirtualMachineGroupName = "testvmgroup",
    });

});

