using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var loadBalancer = new AzureNative.Network.LoadBalancer("loadBalancer", new()
    {
        BackendAddressPools = new[]
        {
            new AzureNative.Network.Inputs.BackendAddressPoolArgs
            {
                LoadBalancerBackendAddresses = new[]
                {
                    new AzureNative.Network.Inputs.LoadBalancerBackendAddressArgs
                    {
                        LoadBalancerFrontendIPConfiguration = new AzureNative.Network.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb",
                        },
                        Name = "regional-lb1-address",
                    },
                },
                Name = "be-lb",
            },
        },
        FrontendIPConfigurations = new[]
        {
            new AzureNative.Network.Inputs.FrontendIPConfigurationArgs
            {
                Name = "fe-lb",
                Subnet = new AzureNative.Network.Inputs.SubnetArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
                },
            },
        },
        LoadBalancerName = "lb",
        LoadBalancingRules = new[]
        {
            new AzureNative.Network.Inputs.LoadBalancingRuleArgs
            {
                BackendAddressPool = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
                },
                BackendPort = 80,
                EnableFloatingIP = false,
                FrontendIPConfiguration = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
                },
                FrontendPort = 80,
                IdleTimeoutInMinutes = 15,
                LoadDistribution = "Default",
                Name = "rulelb",
                Probe = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
                },
                Protocol = "Tcp",
            },
        },
        Location = "eastus",
        Probes = new[]
        {
            new AzureNative.Network.Inputs.ProbeArgs
            {
                IntervalInSeconds = 15,
                Name = "probe-lb",
                NumberOfProbes = 2,
                Port = 80,
                ProbeThreshold = 1,
                Protocol = "Http",
                RequestPath = "healthcheck.aspx",
            },
        },
        ResourceGroupName = "rg1",
        Sku = new AzureNative.Network.Inputs.LoadBalancerSkuArgs
        {
            Name = "Standard",
            Tier = "Global",
        },
    });

});

