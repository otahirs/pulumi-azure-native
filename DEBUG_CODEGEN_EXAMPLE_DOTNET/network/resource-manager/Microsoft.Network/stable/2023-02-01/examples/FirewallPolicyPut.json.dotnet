using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var firewallPolicy = new AzureNative.Network.FirewallPolicy("firewallPolicy", new()
    {
        DnsSettings = new AzureNative.Network.Inputs.DnsSettingsArgs
        {
            EnableProxy = true,
            RequireProxyForNetworkRules = false,
            Servers = new[]
            {
                "30.3.4.5",
            },
        },
        ExplicitProxy = new AzureNative.Network.Inputs.ExplicitProxyArgs
        {
            EnableExplicitProxy = true,
            EnablePacFile = true,
            HttpPort = 8087,
            HttpsPort = 8087,
            PacFile = "https://tinawstorage.file.core.windows.net/?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacuptfx&se=2021-06-04T07:01:12Z&st=2021-06-03T23:01:12Z&sip=68.65.171.11&spr=https&sig=Plsa0RRVpGbY0IETZZOT6znOHcSro71LLTTbzquYPgs%3D",
            PacFilePort = 8087,
        },
        FirewallPolicyName = "firewallPolicy",
        Insights = new AzureNative.Network.Inputs.FirewallPolicyInsightsArgs
        {
            IsEnabled = true,
            LogAnalyticsResources = new AzureNative.Network.Inputs.FirewallPolicyLogAnalyticsResourcesArgs
            {
                DefaultWorkspaceId = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace",
                },
                Workspaces = new[]
                {
                    new AzureNative.Network.Inputs.FirewallPolicyLogAnalyticsWorkspaceArgs
                    {
                        Region = "westus",
                        WorkspaceId = new AzureNative.Network.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1",
                        },
                    },
                    new AzureNative.Network.Inputs.FirewallPolicyLogAnalyticsWorkspaceArgs
                    {
                        Region = "eastus",
                        WorkspaceId = new AzureNative.Network.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2",
                        },
                    },
                },
            },
            RetentionDays = 100,
        },
        IntrusionDetection = new AzureNative.Network.Inputs.FirewallPolicyIntrusionDetectionArgs
        {
            Configuration = new AzureNative.Network.Inputs.FirewallPolicyIntrusionDetectionConfigurationArgs
            {
                BypassTrafficSettings = new[]
                {
                    new AzureNative.Network.Inputs.FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs
                    {
                        Description = "Rule 1",
                        DestinationAddresses = new[]
                        {
                            "5.6.7.8",
                        },
                        DestinationPorts = new[]
                        {
                            "*",
                        },
                        Name = "bypassRule1",
                        Protocol = "TCP",
                        SourceAddresses = new[]
                        {
                            "1.2.3.4",
                        },
                    },
                },
                SignatureOverrides = new[]
                {
                    new AzureNative.Network.Inputs.FirewallPolicyIntrusionDetectionSignatureSpecificationArgs
                    {
                        Id = "2525004",
                        Mode = "Deny",
                    },
                },
            },
            Mode = "Alert",
        },
        Location = "West US",
        ResourceGroupName = "rg1",
        Sku = new AzureNative.Network.Inputs.FirewallPolicySkuArgs
        {
            Tier = "Premium",
        },
        Snat = new AzureNative.Network.Inputs.FirewallPolicySNATArgs
        {
            PrivateRanges = new[]
            {
                "IANAPrivateRanges",
            },
        },
        Sql = new AzureNative.Network.Inputs.FirewallPolicySQLArgs
        {
            AllowSqlRedirect = true,
        },
        Tags = 
        {
            { "key1", "value1" },
        },
        ThreatIntelMode = "Alert",
        ThreatIntelWhitelist = new AzureNative.Network.Inputs.FirewallPolicyThreatIntelWhitelistArgs
        {
            Fqdns = new[]
            {
                "*.microsoft.com",
            },
            IpAddresses = new[]
            {
                "20.3.4.5",
            },
        },
        TransportSecurity = new AzureNative.Network.Inputs.FirewallPolicyTransportSecurityArgs
        {
            CertificateAuthority = new AzureNative.Network.Inputs.FirewallPolicyCertificateAuthorityArgs
            {
                KeyVaultSecretId = "https://kv/secret",
                Name = "clientcert",
            },
        },
    });

});

