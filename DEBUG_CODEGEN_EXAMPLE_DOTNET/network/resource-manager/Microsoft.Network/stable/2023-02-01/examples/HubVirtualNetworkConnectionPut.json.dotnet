using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var hubVirtualNetworkConnection = new AzureNative.Network.HubVirtualNetworkConnection("hubVirtualNetworkConnection", new()
    {
        ConnectionName = "connection1",
        EnableInternetSecurity = false,
        RemoteVirtualNetwork = new AzureNative.Network.Inputs.SubResourceArgs
        {
            Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1",
        },
        ResourceGroupName = "rg1",
        RoutingConfiguration = new AzureNative.Network.Inputs.RoutingConfigurationArgs
        {
            AssociatedRouteTable = new AzureNative.Network.Inputs.SubResourceArgs
            {
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
            },
            InboundRouteMap = new AzureNative.Network.Inputs.SubResourceArgs
            {
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeMaps/routeMap1",
            },
            OutboundRouteMap = new AzureNative.Network.Inputs.SubResourceArgs
            {
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeMaps/routeMap2",
            },
            PropagatedRouteTables = new AzureNative.Network.Inputs.PropagatedRouteTableArgs
            {
                Ids = new[]
                {
                    new AzureNative.Network.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
                    },
                },
                Labels = new[]
                {
                    "label1",
                    "label2",
                },
            },
            VnetRoutes = new AzureNative.Network.Inputs.VnetRouteArgs
            {
                StaticRoutes = new[]
                {
                    new AzureNative.Network.Inputs.StaticRouteArgs
                    {
                        AddressPrefixes = new[]
                        {
                            "10.1.0.0/16",
                            "10.2.0.0/16",
                        },
                        Name = "route1",
                        NextHopIpAddress = "10.0.0.68",
                    },
                    new AzureNative.Network.Inputs.StaticRouteArgs
                    {
                        AddressPrefixes = new[]
                        {
                            "10.3.0.0/16",
                            "10.4.0.0/16",
                        },
                        Name = "route2",
                        NextHopIpAddress = "10.0.0.65",
                    },
                },
                StaticRoutesConfig = new AzureNative.Network.Inputs.StaticRoutesConfigArgs
                {
                    VnetLocalRouteOverrideCriteria = "Equal",
                },
            },
        },
        VirtualHubName = "virtualHub1",
    });

});

