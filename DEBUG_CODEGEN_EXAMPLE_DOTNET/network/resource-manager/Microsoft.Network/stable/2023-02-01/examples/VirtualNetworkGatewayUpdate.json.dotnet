using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var virtualNetworkGateway = new AzureNative.Network.VirtualNetworkGateway("virtualNetworkGateway", new()
    {
        ActiveActive = false,
        AllowRemoteVnetTraffic = false,
        AllowVirtualWanTraffic = false,
        BgpSettings = new AzureNative.Network.Inputs.BgpSettingsArgs
        {
            Asn = 65515,
            BgpPeeringAddress = "10.0.1.30",
            PeerWeight = 0,
        },
        CustomRoutes = new AzureNative.Network.Inputs.AddressSpaceArgs
        {
            AddressPrefixes = new[]
            {
                "101.168.0.6/32",
            },
        },
        DisableIPSecReplayProtection = false,
        EnableBgp = false,
        EnableBgpRouteTranslationForNat = false,
        EnableDnsForwarding = true,
        GatewayType = "Vpn",
        IpConfigurations = new[]
        {
            new AzureNative.Network.Inputs.VirtualNetworkGatewayIPConfigurationArgs
            {
                Name = "gwipconfig1",
                PrivateIPAllocationMethod = "Dynamic",
                PublicIPAddress = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/gwpip",
                },
                Subnet = new AzureNative.Network.Inputs.SubResourceArgs
                {
                    Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/GatewaySubnet",
                },
            },
        },
        Location = "centralus",
        NatRules = new[]
        {
            new AzureNative.Network.Inputs.VirtualNetworkGatewayNatRuleArgs
            {
                ExternalMappings = new[]
                {
                    new AzureNative.Network.Inputs.VpnNatRuleMappingArgs
                    {
                        AddressSpace = "50.0.0.0/24",
                    },
                },
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule1",
                InternalMappings = new[]
                {
                    new AzureNative.Network.Inputs.VpnNatRuleMappingArgs
                    {
                        AddressSpace = "10.10.0.0/24",
                    },
                },
                IpConfigurationId = "",
                Mode = "EgressSnat",
                Name = "natRule1",
                Type = "Static",
            },
            new AzureNative.Network.Inputs.VirtualNetworkGatewayNatRuleArgs
            {
                ExternalMappings = new[]
                {
                    new AzureNative.Network.Inputs.VpnNatRuleMappingArgs
                    {
                        AddressSpace = "30.0.0.0/24",
                    },
                },
                Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw/natRules/natRule2",
                InternalMappings = new[]
                {
                    new AzureNative.Network.Inputs.VpnNatRuleMappingArgs
                    {
                        AddressSpace = "20.10.0.0/24",
                    },
                },
                IpConfigurationId = "",
                Mode = "IngressSnat",
                Name = "natRule2",
                Type = "Static",
            },
        },
        ResourceGroupName = "rg1",
        Sku = new AzureNative.Network.Inputs.VirtualNetworkGatewaySkuArgs
        {
            Name = "VpnGw1",
            Tier = "VpnGw1",
        },
        VirtualNetworkGatewayName = "vpngw",
        VpnClientConfiguration = new AzureNative.Network.Inputs.VpnClientConfigurationArgs
        {
            RadiusServers = new[]
            {
                new AzureNative.Network.Inputs.RadiusServerArgs
                {
                    RadiusServerAddress = "10.2.0.0",
                    RadiusServerScore = 20,
                    RadiusServerSecret = "radiusServerSecret",
                },
            },
            VpnClientProtocols = new[]
            {
                "OpenVPN",
            },
            VpnClientRevokedCertificates = new() { },
            VpnClientRootCertificates = new() { },
        },
        VpnType = "RouteBased",
    });

});

