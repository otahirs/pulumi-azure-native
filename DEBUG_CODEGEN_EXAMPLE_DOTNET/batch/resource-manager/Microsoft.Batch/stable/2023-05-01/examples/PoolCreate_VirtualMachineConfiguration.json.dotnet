using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var pool = new AzureNative.Batch.Pool("pool", new()
    {
        AccountName = "sampleacct",
        DeploymentConfiguration = new AzureNative.Batch.Inputs.DeploymentConfigurationArgs
        {
            VirtualMachineConfiguration = new AzureNative.Batch.Inputs.VirtualMachineConfigurationArgs
            {
                DataDisks = new[]
                {
                    new AzureNative.Batch.Inputs.DataDiskArgs
                    {
                        Caching = AzureNative.Batch.CachingType.ReadWrite,
                        DiskSizeGB = 30,
                        Lun = 0,
                        StorageAccountType = AzureNative.Batch.StorageAccountType.Premium_LRS,
                    },
                    new AzureNative.Batch.Inputs.DataDiskArgs
                    {
                        Caching = AzureNative.Batch.CachingType.None,
                        DiskSizeGB = 200,
                        Lun = 1,
                        StorageAccountType = AzureNative.Batch.StorageAccountType.Standard_LRS,
                    },
                },
                DiskEncryptionConfiguration = new AzureNative.Batch.Inputs.DiskEncryptionConfigurationArgs
                {
                    Targets = new[]
                    {
                        AzureNative.Batch.DiskEncryptionTarget.OsDisk,
                        AzureNative.Batch.DiskEncryptionTarget.TemporaryDisk,
                    },
                },
                ImageReference = new AzureNative.Batch.Inputs.ImageReferenceArgs
                {
                    Offer = "WindowsServer",
                    Publisher = "MicrosoftWindowsServer",
                    Sku = "2016-Datacenter-SmallDisk",
                    Version = "latest",
                },
                LicenseType = "Windows_Server",
                NodeAgentSkuId = "batch.node.windows amd64",
                NodePlacementConfiguration = new AzureNative.Batch.Inputs.NodePlacementConfigurationArgs
                {
                    Policy = AzureNative.Batch.NodePlacementPolicyType.Zonal,
                },
                OsDisk = new AzureNative.Batch.Inputs.OSDiskArgs
                {
                    EphemeralOSDiskSettings = new AzureNative.Batch.Inputs.DiffDiskSettingsArgs
                    {
                        Placement = AzureNative.Batch.DiffDiskPlacement.CacheDisk,
                    },
                },
                WindowsConfiguration = new AzureNative.Batch.Inputs.WindowsConfigurationArgs
                {
                    EnableAutomaticUpdates = false,
                },
            },
        },
        NetworkConfiguration = new AzureNative.Batch.Inputs.NetworkConfigurationArgs
        {
            EndpointConfiguration = new AzureNative.Batch.Inputs.PoolEndpointConfigurationArgs
            {
                InboundNatPools = new[]
                {
                    new AzureNative.Batch.Inputs.InboundNatPoolArgs
                    {
                        BackendPort = 12001,
                        FrontendPortRangeEnd = 15100,
                        FrontendPortRangeStart = 15000,
                        Name = "testnat",
                        NetworkSecurityGroupRules = new[]
                        {
                            new AzureNative.Batch.Inputs.NetworkSecurityGroupRuleArgs
                            {
                                Access = AzureNative.Batch.NetworkSecurityGroupRuleAccess.Allow,
                                Priority = 150,
                                SourceAddressPrefix = "192.100.12.45",
                                SourcePortRanges = new[]
                                {
                                    "1",
                                    "2",
                                },
                            },
                            new AzureNative.Batch.Inputs.NetworkSecurityGroupRuleArgs
                            {
                                Access = AzureNative.Batch.NetworkSecurityGroupRuleAccess.Deny,
                                Priority = 3500,
                                SourceAddressPrefix = "*",
                                SourcePortRanges = new[]
                                {
                                    "*",
                                },
                            },
                        },
                        Protocol = AzureNative.Batch.InboundEndpointProtocol.TCP,
                    },
                },
            },
        },
        PoolName = "testpool",
        ResourceGroupName = "default-azurebatch-japaneast",
        ScaleSettings = new AzureNative.Batch.Inputs.ScaleSettingsArgs
        {
            AutoScale = new AzureNative.Batch.Inputs.AutoScaleSettingsArgs
            {
                EvaluationInterval = "PT5M",
                Formula = "$TargetDedicatedNodes=1",
            },
        },
        VmSize = "STANDARD_D4",
    });

});

