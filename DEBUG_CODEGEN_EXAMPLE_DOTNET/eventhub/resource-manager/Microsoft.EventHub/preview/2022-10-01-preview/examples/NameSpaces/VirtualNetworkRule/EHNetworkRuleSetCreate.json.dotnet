using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var namespaceNetworkRuleSet = new AzureNative.EventHub.NamespaceNetworkRuleSet("namespaceNetworkRuleSet", new()
    {
        DefaultAction = "Deny",
        IpRules = new[]
        {
            new AzureNative.EventHub.Inputs.NWRuleSetIpRulesArgs
            {
                Action = "Allow",
                IpMask = "1.1.1.1",
            },
            new AzureNative.EventHub.Inputs.NWRuleSetIpRulesArgs
            {
                Action = "Allow",
                IpMask = "1.1.1.2",
            },
            new AzureNative.EventHub.Inputs.NWRuleSetIpRulesArgs
            {
                Action = "Allow",
                IpMask = "1.1.1.3",
            },
            new AzureNative.EventHub.Inputs.NWRuleSetIpRulesArgs
            {
                Action = "Allow",
                IpMask = "1.1.1.4",
            },
            new AzureNative.EventHub.Inputs.NWRuleSetIpRulesArgs
            {
                Action = "Allow",
                IpMask = "1.1.1.5",
            },
        },
        NamespaceName = "sdk-Namespace-6019",
        ResourceGroupName = "ResourceGroup",
        VirtualNetworkRules = new[]
        {
            new AzureNative.EventHub.Inputs.NWRuleSetVirtualNetworkRulesArgs
            {
                IgnoreMissingVnetServiceEndpoint = true,
                Subnet = new AzureNative.EventHub.Inputs.SubnetArgs
                {
                    Id = "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2",
                },
            },
            new AzureNative.EventHub.Inputs.NWRuleSetVirtualNetworkRulesArgs
            {
                IgnoreMissingVnetServiceEndpoint = false,
                Subnet = new AzureNative.EventHub.Inputs.SubnetArgs
                {
                    Id = "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3",
                },
            },
            new AzureNative.EventHub.Inputs.NWRuleSetVirtualNetworkRulesArgs
            {
                IgnoreMissingVnetServiceEndpoint = false,
                Subnet = new AzureNative.EventHub.Inputs.SubnetArgs
                {
                    Id = "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6",
                },
            },
        },
    });

});

