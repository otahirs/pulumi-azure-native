using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var cluster = new AzureNative.HDInsight.Cluster("cluster", new()
    {
        ClusterName = "cluster1",
        Properties = new AzureNative.HDInsight.Inputs.ClusterCreatePropertiesArgs
        {
            ClusterDefinition = new AzureNative.HDInsight.Inputs.ClusterDefinitionArgs
            {
                ComponentVersion = 
                {
                    { "Kafka", "2.1" },
                },
                Configurations = 
                {
                    { "gateway", 
                    {
                        { "restAuthCredential.isEnabled", true },
                        { "restAuthCredential.password", "**********" },
                        { "restAuthCredential.username", "admin" },
                    } },
                },
                Kind = "kafka",
            },
            ClusterVersion = "4.0",
            ComputeProfile = new AzureNative.HDInsight.Inputs.ComputeProfileArgs
            {
                Roles = new[]
                {
                    new AzureNative.HDInsight.Inputs.RoleArgs
                    {
                        HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                        {
                            VmSize = "Large",
                        },
                        Name = "headnode",
                        OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                        {
                            LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                            {
                                Password = "**********",
                                Username = "sshuser",
                            },
                        },
                        TargetInstanceCount = 2,
                    },
                    new AzureNative.HDInsight.Inputs.RoleArgs
                    {
                        DataDisksGroups = new[]
                        {
                            new AzureNative.HDInsight.Inputs.DataDisksGroupsArgs
                            {
                                DisksPerNode = 8,
                            },
                        },
                        HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                        {
                            VmSize = "Large",
                        },
                        Name = "workernode",
                        OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                        {
                            LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                            {
                                Password = "**********",
                                Username = "sshuser",
                            },
                        },
                        TargetInstanceCount = 3,
                    },
                    new AzureNative.HDInsight.Inputs.RoleArgs
                    {
                        HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                        {
                            VmSize = "Small",
                        },
                        Name = "zookeepernode",
                        OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                        {
                            LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                            {
                                Password = "**********",
                                Username = "sshuser",
                            },
                        },
                        TargetInstanceCount = 3,
                    },
                    new AzureNative.HDInsight.Inputs.RoleArgs
                    {
                        HardwareProfile = new AzureNative.HDInsight.Inputs.HardwareProfileArgs
                        {
                            VmSize = "Standard_D4_v2",
                        },
                        Name = "kafkamanagementnode",
                        OsProfile = new AzureNative.HDInsight.Inputs.OsProfileArgs
                        {
                            LinuxOperatingSystemProfile = new AzureNative.HDInsight.Inputs.LinuxOperatingSystemProfileArgs
                            {
                                Password = "**********",
                                Username = "kafkauser",
                            },
                        },
                        TargetInstanceCount = 2,
                    },
                },
            },
            KafkaRestProperties = new AzureNative.HDInsight.Inputs.KafkaRestPropertiesArgs
            {
                ClientGroupInfo = new AzureNative.HDInsight.Inputs.ClientGroupInfoArgs
                {
                    GroupId = "00000000-0000-0000-0000-111111111111",
                    GroupName = "Kafka security group name",
                },
            },
            OsType = "Linux",
            StorageProfile = new AzureNative.HDInsight.Inputs.StorageProfileArgs
            {
                Storageaccounts = new[]
                {
                    new AzureNative.HDInsight.Inputs.StorageAccountArgs
                    {
                        Container = "containername",
                        IsDefault = true,
                        Key = "storagekey",
                        Name = "mystorage.blob.core.windows.net",
                    },
                },
            },
            Tier = "Standard",
        },
        ResourceGroupName = "rg1",
    });

});

