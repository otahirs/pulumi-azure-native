using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var account = new AzureNative.DataLakeAnalytics.Account("account", new()
    {
        AccountName = "contosoadla",
        ComputePolicies = new[]
        {
            new AzureNative.DataLakeAnalytics.Inputs.CreateComputePolicyWithAccountParametersArgs
            {
                MaxDegreeOfParallelismPerJob = 1,
                MinPriorityPerJob = 1,
                Name = "test_policy",
                ObjectId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345",
                ObjectType = "User",
            },
        },
        DataLakeStoreAccounts = new[]
        {
            new AzureNative.DataLakeAnalytics.Inputs.AddDataLakeStoreWithAccountParametersArgs
            {
                Name = "test_adls",
                Suffix = "test_suffix",
            },
        },
        DefaultDataLakeStoreAccount = "test_adls",
        FirewallAllowAzureIps = AzureNative.DataLakeAnalytics.FirewallAllowAzureIpsState.Enabled,
        FirewallRules = new[]
        {
            new AzureNative.DataLakeAnalytics.Inputs.CreateFirewallRuleWithAccountParametersArgs
            {
                EndIpAddress = "2.2.2.2",
                Name = "test_rule",
                StartIpAddress = "1.1.1.1",
            },
        },
        FirewallState = AzureNative.DataLakeAnalytics.FirewallState.Enabled,
        Location = "eastus2",
        MaxDegreeOfParallelism = 30,
        MaxDegreeOfParallelismPerJob = 1,
        MaxJobCount = 3,
        MinPriorityPerJob = 1,
        NewTier = AzureNative.DataLakeAnalytics.TierType.Consumption,
        QueryStoreRetention = 30,
        ResourceGroupName = "contosorg",
        StorageAccounts = new[]
        {
            new AzureNative.DataLakeAnalytics.Inputs.AddStorageAccountWithAccountParametersArgs
            {
                AccessKey = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab346",
                Name = "test_storage",
                Suffix = "test_suffix",
            },
        },
        Tags = 
        {
            { "test_key", "test_value" },
        },
    });

});

