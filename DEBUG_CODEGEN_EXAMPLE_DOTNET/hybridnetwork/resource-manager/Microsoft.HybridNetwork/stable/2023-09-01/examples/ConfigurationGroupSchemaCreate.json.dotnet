using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var configurationGroupSchema = new AzureNative.HybridNetwork.ConfigurationGroupSchema("configurationGroupSchema", new()
    {
        ConfigurationGroupSchemaName = "testConfigurationGroupSchema",
        Location = "westUs2",
        Properties = new AzureNative.HybridNetwork.Inputs.ConfigurationGroupSchemaPropertiesFormatArgs
        {
            Description = "Schema with no secrets",
            SchemaDefinition = "{\"type\":\"object\",\"properties\":{\"interconnect-groups\":{\"type\":\"object\",\"properties\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"international-interconnects\":{\"type\":\"array\",\"item\":{\"type\":\"string\"}},\"domestic-interconnects\":{\"type\":\"array\",\"item\":{\"type\":\"string\"}}}}},\"interconnect-group-assignments\":{\"type\":\"object\",\"properties\":{\"type\":\"object\",\"properties\":{\"ssc\":{\"type\":\"string\"},\"interconnects-interconnects\":{\"type\":\"string\"}}}}},\"required\":[\"interconnect-groups\",\"interconnect-group-assignments\"]}",
        },
        PublisherName = "testPublisher",
        ResourceGroupName = "rg1",
    });

});

