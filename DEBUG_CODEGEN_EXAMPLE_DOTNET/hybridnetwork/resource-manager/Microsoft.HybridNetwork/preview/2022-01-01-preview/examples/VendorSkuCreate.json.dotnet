using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var vendorSkus = new AzureNative.HybridNetwork.VendorSkus("vendorSkus", new()
    {
        DeploymentMode = "PrivateEdgeZone",
        ManagedApplicationTemplate = null,
        NetworkFunctionTemplate = new AzureNative.HybridNetwork.Inputs.NetworkFunctionTemplateArgs
        {
            NetworkFunctionRoleConfigurations = new[]
            {
                new AzureNative.HybridNetwork.Inputs.NetworkFunctionRoleConfigurationArgs
                {
                    CustomProfile = new AzureNative.HybridNetwork.Inputs.CustomProfileArgs
                    {
                        MetadataConfigurationPath = "/var/logs/network.cfg",
                    },
                    NetworkInterfaces = new[]
                    {
                        new AzureNative.HybridNetwork.Inputs.NetworkInterfaceArgs
                        {
                            IpConfigurations = new[]
                            {
                                new AzureNative.HybridNetwork.Inputs.NetworkInterfaceIPConfigurationArgs
                                {
                                    Gateway = "",
                                    IpAddress = "",
                                    IpAllocationMethod = "Dynamic",
                                    IpVersion = "IPv4",
                                    Subnet = "",
                                },
                            },
                            MacAddress = "",
                            NetworkInterfaceName = "nic1",
                            VmSwitchType = "Wan",
                        },
                        new AzureNative.HybridNetwork.Inputs.NetworkInterfaceArgs
                        {
                            IpConfigurations = new[]
                            {
                                new AzureNative.HybridNetwork.Inputs.NetworkInterfaceIPConfigurationArgs
                                {
                                    Gateway = "",
                                    IpAddress = "",
                                    IpAllocationMethod = "Dynamic",
                                    IpVersion = "IPv4",
                                    Subnet = "",
                                },
                            },
                            MacAddress = "",
                            NetworkInterfaceName = "nic2",
                            VmSwitchType = "Management",
                        },
                    },
                    OsProfile = new AzureNative.HybridNetwork.Inputs.OsProfileArgs
                    {
                        AdminUsername = "dummyuser",
                        CustomData = "base-64 encoded string of custom data",
                        LinuxConfiguration = new AzureNative.HybridNetwork.Inputs.LinuxConfigurationArgs
                        {
                            Ssh = new AzureNative.HybridNetwork.Inputs.SshConfigurationArgs
                            {
                                PublicKeys = new[]
                                {
                                    new AzureNative.HybridNetwork.Inputs.SshPublicKeyArgs
                                    {
                                        KeyData = "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH",
                                        Path = "home/user/.ssh/authorized_keys",
                                    },
                                },
                            },
                        },
                    },
                    RoleName = "test",
                    RoleType = "VirtualMachine",
                    StorageProfile = new AzureNative.HybridNetwork.Inputs.StorageProfileArgs
                    {
                        DataDisks = new[]
                        {
                            new AzureNative.HybridNetwork.Inputs.DataDiskArgs
                            {
                                CreateOption = "Empty",
                                DiskSizeGB = 10,
                                Name = "DataDisk1",
                            },
                        },
                        ImageReference = new AzureNative.HybridNetwork.Inputs.ImageReferenceArgs
                        {
                            Offer = "UbuntuServer",
                            Publisher = "Canonical",
                            Sku = "18.04-LTS",
                            Version = "18.04.201804262",
                        },
                        OsDisk = new AzureNative.HybridNetwork.Inputs.OsDiskArgs
                        {
                            DiskSizeGB = 30,
                            Name = "vhdName",
                            OsType = "Linux",
                            Vhd = new AzureNative.HybridNetwork.Inputs.VirtualHardDiskArgs
                            {
                                Uri = "https://contoso.net/link/vnd.vhd?sp=rl&st=2020-10-08T20:38:19Z&se=2020-12-09T19:38:00Z&sv=2019-12-12&sr=b&sig=7BM2f4yOw%3D",
                            },
                        },
                    },
                    VirtualMachineSize = "Standard_D3_v2",
                },
            },
        },
        NetworkFunctionType = "VirtualNetworkFunction",
        Preview = true,
        SkuName = "TestSku",
        VendorName = "TestVendor",
    });

});

