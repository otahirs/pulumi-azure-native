using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var cloudService = new AzureNative.Compute.CloudService("cloudService", new()
    {
        CloudServiceName = "{cs-name}",
        Location = "westus",
        Properties = new AzureNative.Compute.Inputs.CloudServicePropertiesArgs
        {
            Configuration = "{ServiceConfiguration}",
            NetworkProfile = new AzureNative.Compute.Inputs.CloudServiceNetworkProfileArgs
            {
                LoadBalancerConfigurations = new[]
                {
                    new AzureNative.Compute.Inputs.LoadBalancerConfigurationArgs
                    {
                        Name = "contosolb",
                        Properties = new AzureNative.Compute.Inputs.LoadBalancerConfigurationPropertiesArgs
                        {
                            FrontendIpConfigurations = new[]
                            {
                                new AzureNative.Compute.Inputs.LoadBalancerFrontendIpConfigurationArgs
                                {
                                    Name = "contosofe",
                                    Properties = new AzureNative.Compute.Inputs.LoadBalancerFrontendIpConfigurationPropertiesArgs
                                    {
                                        PublicIPAddress = new AzureNative.Compute.Inputs.SubResourceArgs
                                        {
                                            Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
            OsProfile = new AzureNative.Compute.Inputs.CloudServiceOsProfileArgs
            {
                Secrets = new[]
                {
                    new AzureNative.Compute.Inputs.CloudServiceVaultSecretGroupArgs
                    {
                        SourceVault = new AzureNative.Compute.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
                        },
                        VaultCertificates = new[]
                        {
                            new AzureNative.Compute.Inputs.CloudServiceVaultCertificateArgs
                            {
                                CertificateUrl = "https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
                            },
                        },
                    },
                },
            },
            PackageUrl = "{PackageUrl}",
            RoleProfile = new AzureNative.Compute.Inputs.CloudServiceRoleProfileArgs
            {
                Roles = new[]
                {
                    new AzureNative.Compute.Inputs.CloudServiceRoleProfilePropertiesArgs
                    {
                        Name = "ContosoFrontend",
                        Sku = new AzureNative.Compute.Inputs.CloudServiceRoleSkuArgs
                        {
                            Capacity = 1,
                            Name = "Standard_D1_v2",
                            Tier = "Standard",
                        },
                    },
                },
            },
            UpgradeMode = "Auto",
        },
        ResourceGroupName = "ConstosoRG",
    });

});

