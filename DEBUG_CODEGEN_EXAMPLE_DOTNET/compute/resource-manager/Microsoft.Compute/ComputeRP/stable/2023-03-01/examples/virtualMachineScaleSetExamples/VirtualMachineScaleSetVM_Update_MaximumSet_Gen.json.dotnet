using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var virtualMachineScaleSetVM = new AzureNative.Compute.VirtualMachineScaleSetVM("virtualMachineScaleSetVM", new()
    {
        AdditionalCapabilities = new AzureNative.Compute.Inputs.AdditionalCapabilitiesArgs
        {
            HibernationEnabled = true,
            UltraSSDEnabled = true,
        },
        AvailabilitySet = new AzureNative.Compute.Inputs.SubResourceArgs
        {
            Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        },
        DiagnosticsProfile = new AzureNative.Compute.Inputs.DiagnosticsProfileArgs
        {
            BootDiagnostics = new AzureNative.Compute.Inputs.BootDiagnosticsArgs
            {
                Enabled = true,
                StorageUri = "aaaaaaaaaaaaa",
            },
        },
        HardwareProfile = new AzureNative.Compute.Inputs.HardwareProfileArgs
        {
            VmSize = "Basic_A0",
            VmSizeProperties = new AzureNative.Compute.Inputs.VMSizePropertiesArgs
            {
                VCPUsAvailable = 9,
                VCPUsPerCore = 12,
            },
        },
        InstanceId = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        LicenseType = "aaaaaaaaaa",
        Location = "westus",
        NetworkProfile = new AzureNative.Compute.Inputs.NetworkProfileArgs
        {
            NetworkApiVersion = "2020-11-01",
            NetworkInterfaceConfigurations = new[]
            {
                new AzureNative.Compute.Inputs.VirtualMachineNetworkInterfaceConfigurationArgs
                {
                    DeleteOption = "Delete",
                    DnsSettings = new AzureNative.Compute.Inputs.VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs
                    {
                        DnsServers = new[]
                        {
                            "aaaaaa",
                        },
                    },
                    DscpConfiguration = new AzureNative.Compute.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                    },
                    EnableAcceleratedNetworking = true,
                    EnableFpga = true,
                    EnableIPForwarding = true,
                    IpConfigurations = new[]
                    {
                        new AzureNative.Compute.Inputs.VirtualMachineNetworkInterfaceIPConfigurationArgs
                        {
                            ApplicationGatewayBackendAddressPools = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            ApplicationSecurityGroups = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            LoadBalancerBackendAddressPools = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            Name = "aa",
                            Primary = true,
                            PrivateIPAddressVersion = "IPv4",
                            PublicIPAddressConfiguration = new AzureNative.Compute.Inputs.VirtualMachinePublicIPAddressConfigurationArgs
                            {
                                DeleteOption = "Delete",
                                DnsSettings = new AzureNative.Compute.Inputs.VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs
                                {
                                    DomainNameLabel = "aaaaaaaaaaaaaaaaaaaaaaaaa",
                                },
                                IdleTimeoutInMinutes = 2,
                                IpTags = new[]
                                {
                                    new AzureNative.Compute.Inputs.VirtualMachineIpTagArgs
                                    {
                                        IpTagType = "aaaaaaaaaaaaaaaaaaaaaaaaa",
                                        Tag = "aaaaaaaaaaaaaaaaaaaa",
                                    },
                                },
                                Name = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                                PublicIPAddressVersion = "IPv4",
                                PublicIPAllocationMethod = "Dynamic",
                                PublicIPPrefix = new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                                Sku = new AzureNative.Compute.Inputs.PublicIPAddressSkuArgs
                                {
                                    Name = "Basic",
                                    Tier = "Regional",
                                },
                            },
                            Subnet = new AzureNative.Compute.Inputs.SubResourceArgs
                            {
                                Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                            },
                        },
                    },
                    Name = "aaaaaaaaaaa",
                    NetworkSecurityGroup = new AzureNative.Compute.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                    },
                    Primary = true,
                },
            },
            NetworkInterfaces = new[]
            {
                new AzureNative.Compute.Inputs.NetworkInterfaceReferenceArgs
                {
                    DeleteOption = "Delete",
                    Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415",
                    Primary = true,
                },
            },
        },
        NetworkProfileConfiguration = new AzureNative.Compute.Inputs.VirtualMachineScaleSetVMNetworkProfileConfigurationArgs
        {
            NetworkInterfaceConfigurations = new[]
            {
                new AzureNative.Compute.Inputs.VirtualMachineScaleSetNetworkConfigurationArgs
                {
                    DeleteOption = "Delete",
                    DnsSettings = new AzureNative.Compute.Inputs.VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs
                    {
                        DnsServers = new() { },
                    },
                    EnableAcceleratedNetworking = true,
                    EnableFpga = true,
                    EnableIPForwarding = true,
                    IpConfigurations = new[]
                    {
                        new AzureNative.Compute.Inputs.VirtualMachineScaleSetIPConfigurationArgs
                        {
                            ApplicationGatewayBackendAddressPools = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            ApplicationSecurityGroups = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            LoadBalancerBackendAddressPools = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            LoadBalancerInboundNatPools = new[]
                            {
                                new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                            },
                            Name = "vmsstestnetconfig9693",
                            Primary = true,
                            PrivateIPAddressVersion = "IPv4",
                            PublicIPAddressConfiguration = new AzureNative.Compute.Inputs.VirtualMachineScaleSetPublicIPAddressConfigurationArgs
                            {
                                DeleteOption = "Delete",
                                DnsSettings = new AzureNative.Compute.Inputs.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs
                                {
                                    DomainNameLabel = "aaaaaaaaaaaaaaaaaa",
                                },
                                IdleTimeoutInMinutes = 18,
                                IpTags = new[]
                                {
                                    new AzureNative.Compute.Inputs.VirtualMachineScaleSetIpTagArgs
                                    {
                                        IpTagType = "aaaaaaa",
                                        Tag = "aaaaaaaaaaaaaaaaaaaaaaaaaaa",
                                    },
                                },
                                Name = "aaaaaaaaaaaaaaaaaa",
                                PublicIPAddressVersion = "IPv4",
                                PublicIPPrefix = new AzureNative.Compute.Inputs.SubResourceArgs
                                {
                                    Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                                },
                                Sku = new AzureNative.Compute.Inputs.PublicIPAddressSkuArgs
                                {
                                    Name = "Basic",
                                    Tier = "Regional",
                                },
                            },
                            Subnet = new AzureNative.Compute.Inputs.ApiEntityReferenceArgs
                            {
                                Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503",
                            },
                        },
                    },
                    Name = "vmsstestnetconfig5415",
                    NetworkSecurityGroup = new AzureNative.Compute.Inputs.SubResourceArgs
                    {
                        Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                    },
                    Primary = true,
                },
            },
        },
        OsProfile = new AzureNative.Compute.Inputs.OSProfileArgs
        {
            AdminPassword = "aaaaaaaaaaaaaaaa",
            AdminUsername = "Foo12",
            AllowExtensionOperations = true,
            ComputerName = "test000000",
            CustomData = "aaaa",
            LinuxConfiguration = new AzureNative.Compute.Inputs.LinuxConfigurationArgs
            {
                DisablePasswordAuthentication = true,
                PatchSettings = new AzureNative.Compute.Inputs.LinuxPatchSettingsArgs
                {
                    AssessmentMode = "ImageDefault",
                    PatchMode = "ImageDefault",
                },
                ProvisionVMAgent = true,
                Ssh = new AzureNative.Compute.Inputs.SshConfigurationArgs
                {
                    PublicKeys = new[]
                    {
                        new AzureNative.Compute.Inputs.SshPublicKeyArgs
                        {
                            KeyData = "aaaaaa",
                            Path = "aaa",
                        },
                    },
                },
            },
            RequireGuestProvisionSignal = true,
            Secrets = new() { },
            WindowsConfiguration = new AzureNative.Compute.Inputs.WindowsConfigurationArgs
            {
                AdditionalUnattendContent = new[]
                {
                    new AzureNative.Compute.Inputs.AdditionalUnattendContentArgs
                    {
                        ComponentName = AzureNative.Compute.ComponentNames.Microsoft_Windows_Shell_Setup,
                        Content = "aaaaaaaaaaaaaaaaaaaa",
                        PassName = AzureNative.Compute.PassNames.OobeSystem,
                        SettingName = AzureNative.Compute.SettingNames.AutoLogon,
                    },
                },
                EnableAutomaticUpdates = true,
                PatchSettings = new AzureNative.Compute.Inputs.PatchSettingsArgs
                {
                    AssessmentMode = "ImageDefault",
                    EnableHotpatching = true,
                    PatchMode = "Manual",
                },
                ProvisionVMAgent = true,
                TimeZone = "aaaaaaaaaaaaaaaaaaaaaaaaaaa",
                WinRM = new AzureNative.Compute.Inputs.WinRMConfigurationArgs
                {
                    Listeners = new[]
                    {
                        new AzureNative.Compute.Inputs.WinRMListenerArgs
                        {
                            CertificateUrl = "aaaaaaaaaaaaaaaaaaaaaa",
                            Protocol = AzureNative.Compute.ProtocolTypes.Http,
                        },
                    },
                },
            },
        },
        Plan = new AzureNative.Compute.Inputs.PlanArgs
        {
            Name = "aaaaaaaaaa",
            Product = "aaaaaaaaaaaaaaaaaaaa",
            PromotionCode = "aaaaaaaaaaaaaaaaaaaa",
            Publisher = "aaaaaaaaaaaaaaaaaaaaaa",
        },
        ProtectionPolicy = new AzureNative.Compute.Inputs.VirtualMachineScaleSetVMProtectionPolicyArgs
        {
            ProtectFromScaleIn = true,
            ProtectFromScaleSetActions = true,
        },
        ResourceGroupName = "rgcompute",
        SecurityProfile = new AzureNative.Compute.Inputs.SecurityProfileArgs
        {
            EncryptionAtHost = true,
            SecurityType = "TrustedLaunch",
            UefiSettings = new AzureNative.Compute.Inputs.UefiSettingsArgs
            {
                SecureBootEnabled = true,
                VTpmEnabled = true,
            },
        },
        StorageProfile = new AzureNative.Compute.Inputs.StorageProfileArgs
        {
            DataDisks = new[]
            {
                new AzureNative.Compute.Inputs.DataDiskArgs
                {
                    Caching = AzureNative.Compute.CachingTypes.None,
                    CreateOption = "Empty",
                    DeleteOption = "Delete",
                    DetachOption = "ForceDetach",
                    DiskSizeGB = 128,
                    Image = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
                    {
                        Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
                    },
                    Lun = 1,
                    ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
                    {
                        DiskEncryptionSet = new AzureNative.Compute.Inputs.DiskEncryptionSetParametersArgs
                        {
                            Id = "aaaaaaaaaaaa",
                        },
                        Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d",
                        StorageAccountType = "Standard_LRS",
                    },
                    Name = "vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d",
                    ToBeDetached = true,
                    Vhd = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
                    {
                        Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
                    },
                    WriteAcceleratorEnabled = true,
                },
            },
            ImageReference = new AzureNative.Compute.Inputs.ImageReferenceArgs
            {
                Id = "a",
                Offer = "WindowsServer",
                Publisher = "MicrosoftWindowsServer",
                SharedGalleryImageId = "aaaaaaaaaaaaaaaaaaaa",
                Sku = "2012-R2-Datacenter",
                Version = "4.127.20180315",
            },
            OsDisk = new AzureNative.Compute.Inputs.OSDiskArgs
            {
                Caching = AzureNative.Compute.CachingTypes.None,
                CreateOption = "FromImage",
                DeleteOption = "Delete",
                DiffDiskSettings = new AzureNative.Compute.Inputs.DiffDiskSettingsArgs
                {
                    Option = "Local",
                    Placement = "CacheDisk",
                },
                DiskSizeGB = 127,
                EncryptionSettings = new AzureNative.Compute.Inputs.DiskEncryptionSettingsArgs
                {
                    DiskEncryptionKey = new AzureNative.Compute.Inputs.KeyVaultSecretReferenceArgs
                    {
                        SecretUrl = "aaaaaaaa",
                        SourceVault = new AzureNative.Compute.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                        },
                    },
                    Enabled = true,
                    KeyEncryptionKey = new AzureNative.Compute.Inputs.KeyVaultKeyReferenceArgs
                    {
                        KeyUrl = "aaaaaaaaaaaaaa",
                        SourceVault = new AzureNative.Compute.Inputs.SubResourceArgs
                        {
                            Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
                        },
                    },
                },
                Image = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
                {
                    Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
                },
                ManagedDisk = new AzureNative.Compute.Inputs.ManagedDiskParametersArgs
                {
                    DiskEncryptionSet = new AzureNative.Compute.Inputs.DiskEncryptionSetParametersArgs
                    {
                        Id = "aaaaaaaaaaaa",
                    },
                    Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc",
                    StorageAccountType = "Standard_LRS",
                },
                Name = "vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc",
                OsType = AzureNative.Compute.OperatingSystemTypes.Windows,
                Vhd = new AzureNative.Compute.Inputs.VirtualHardDiskArgs
                {
                    Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
                },
                WriteAcceleratorEnabled = true,
            },
        },
        Tags = null,
        UserData = "RXhhbXBsZSBVc2VyRGF0YQ==",
        VmScaleSetName = "aaaaaaaaaaaaaa",
    });

});

