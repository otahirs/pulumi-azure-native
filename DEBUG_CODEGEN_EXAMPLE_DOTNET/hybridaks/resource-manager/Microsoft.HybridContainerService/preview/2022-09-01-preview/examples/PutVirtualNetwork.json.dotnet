using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var virtualNetworkRetrieve = new AzureNative.HybridContainerService.VirtualNetworkRetrieve("virtualNetworkRetrieve", new()
    {
        ExtendedLocation = new AzureNative.HybridContainerService.Inputs.VirtualNetworksExtendedLocationArgs
        {
            Name = "/subscriptions/a3e42606-29b1-4d7d-b1d9-9ff6b9d3c71b/resourcegroups/test-arcappliance-resgrp/providers/microsoft.extendedlocation/customlocations/testcustomlocation",
            Type = "CustomLocation",
        },
        Location = "westus",
        Properties = new AzureNative.HybridContainerService.Inputs.VirtualNetworksPropertiesArgs
        {
            InfraVnetProfile = new AzureNative.HybridContainerService.Inputs.VirtualNetworksPropertiesInfraVnetProfileArgs
            {
                Hci = new AzureNative.HybridContainerService.Inputs.VirtualNetworksPropertiesHciArgs
                {
                    MocGroup = "target-group",
                    MocLocation = "MocLocation",
                    MocVnetName = "test-vnet",
                },
            },
            VipPool = new[]
            {
                new AzureNative.HybridContainerService.Inputs.VirtualNetworksPropertiesVipPoolArgs
                {
                    EndIP = "192.168.0.50",
                    StartIP = "192.168.0.10",
                },
            },
            VmipPool = new[]
            {
                new AzureNative.HybridContainerService.Inputs.VirtualNetworksPropertiesVmipPoolArgs
                {
                    EndIP = "192.168.0.130",
                    StartIP = "192.168.0.110",
                },
            },
        },
        ResourceGroupName = "test-arcappliance-resgrp",
        VirtualNetworksName = "test-vnet-static",
    });

});

