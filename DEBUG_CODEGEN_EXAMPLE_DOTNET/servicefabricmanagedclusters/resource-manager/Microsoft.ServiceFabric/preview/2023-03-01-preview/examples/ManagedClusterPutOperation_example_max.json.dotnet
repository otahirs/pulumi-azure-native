using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var managedCluster = new AzureNative.ServiceFabric.ManagedCluster("managedCluster", new()
    {
        AddonFeatures = new[]
        {
            "DnsService",
            "BackupRestoreService",
            "ResourceMonitorService",
        },
        AdminPassword = "{vm-password}",
        AdminUserName = "vmadmin",
        AllowRdpAccess = true,
        ApplicationTypeVersionsCleanupPolicy = new AzureNative.ServiceFabric.Inputs.ApplicationTypeVersionsCleanupPolicyArgs
        {
            MaxUnusedVersionsToKeep = 3,
        },
        AuxiliarySubnets = new[]
        {
            new AzureNative.ServiceFabric.Inputs.SubnetArgs
            {
                EnableIpv6 = true,
                Name = "testSubnet1",
                NetworkSecurityGroupId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1",
                PrivateEndpointNetworkPolicies = "enabled",
                PrivateLinkServiceNetworkPolicies = "enabled",
            },
        },
        ClientConnectionPort = 19000,
        ClusterCodeVersion = "7.1.168.9494",
        ClusterName = "myCluster",
        ClusterUpgradeMode = "Manual",
        DnsName = "myCluster",
        EnableAutoOSUpgrade = true,
        EnableIpv6 = true,
        FabricSettings = new[]
        {
            new AzureNative.ServiceFabric.Inputs.SettingsSectionDescriptionArgs
            {
                Name = "ManagedIdentityTokenService",
                Parameters = new[]
                {
                    new AzureNative.ServiceFabric.Inputs.SettingsParameterDescriptionArgs
                    {
                        Name = "IsEnabled",
                        Value = "true",
                    },
                },
            },
        },
        HttpGatewayConnectionPort = 19080,
        IpTags = new[]
        {
            new AzureNative.ServiceFabric.Inputs.IPTagArgs
            {
                IpTagType = "FirstPartyUsage",
                Tag = "SQL",
            },
        },
        LoadBalancingRules = new[]
        {
            new AzureNative.ServiceFabric.Inputs.LoadBalancingRuleArgs
            {
                BackendPort = 80,
                FrontendPort = 80,
                ProbePort = 80,
                ProbeProtocol = "http",
                Protocol = "http",
            },
            new AzureNative.ServiceFabric.Inputs.LoadBalancingRuleArgs
            {
                BackendPort = 443,
                FrontendPort = 443,
                ProbePort = 443,
                ProbeProtocol = "http",
                Protocol = "http",
            },
            new AzureNative.ServiceFabric.Inputs.LoadBalancingRuleArgs
            {
                BackendPort = 10000,
                FrontendPort = 10000,
                LoadDistribution = "Default",
                ProbePort = 10000,
                ProbeProtocol = "http",
                Protocol = "tcp",
            },
        },
        Location = "eastus",
        NetworkSecurityRules = new[]
        {
            new AzureNative.ServiceFabric.Inputs.NetworkSecurityRuleArgs
            {
                Access = "allow",
                Description = "Test description",
                DestinationAddressPrefixes = new[]
                {
                    "*",
                },
                DestinationPortRanges = new[]
                {
                    "*",
                },
                Direction = "inbound",
                Name = "TestName",
                Priority = 1010,
                Protocol = "tcp",
                SourceAddressPrefixes = new[]
                {
                    "*",
                },
                SourcePortRanges = new[]
                {
                    "*",
                },
            },
            new AzureNative.ServiceFabric.Inputs.NetworkSecurityRuleArgs
            {
                Access = "allow",
                DestinationAddressPrefix = "*",
                DestinationPortRange = "33500-33699",
                Direction = "inbound",
                Name = "AllowARM",
                Priority = 2002,
                Protocol = "*",
                SourceAddressPrefix = "AzureResourceManager",
                SourcePortRange = "*",
            },
        },
        PublicIPPrefixId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix",
        ResourceGroupName = "resRg",
        ServiceEndpoints = new[]
        {
            new AzureNative.ServiceFabric.Inputs.ServiceEndpointArgs
            {
                Locations = new[]
                {
                    "eastus2",
                    "usnorth",
                },
                Service = "Microsoft.Storage",
            },
        },
        Sku = new AzureNative.ServiceFabric.Inputs.SkuArgs
        {
            Name = "Basic",
        },
        Tags = null,
        UseCustomVnet = true,
        ZonalResiliency = true,
        ZonalUpdateMode = "Fast",
    });

});

