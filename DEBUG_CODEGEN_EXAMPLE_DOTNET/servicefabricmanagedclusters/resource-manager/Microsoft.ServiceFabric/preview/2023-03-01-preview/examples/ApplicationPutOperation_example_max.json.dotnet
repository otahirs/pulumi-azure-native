using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var managedClusterApplication = new AzureNative.ServiceFabric.ManagedClusterApplication("managedClusterApplication", new()
    {
        ApplicationName = "myApp",
        ClusterName = "myCluster",
        Location = "eastus",
        Parameters = 
        {
            { "param1", "value1" },
        },
        ResourceGroupName = "resRg",
        Tags = 
        {
            { "a", "b" },
        },
        UpgradePolicy = new AzureNative.ServiceFabric.Inputs.ApplicationUpgradePolicyArgs
        {
            ApplicationHealthPolicy = new AzureNative.ServiceFabric.Inputs.ApplicationHealthPolicyArgs
            {
                ConsiderWarningAsError = true,
                DefaultServiceTypeHealthPolicy = new AzureNative.ServiceFabric.Inputs.ServiceTypeHealthPolicyArgs
                {
                    MaxPercentUnhealthyPartitionsPerService = 0,
                    MaxPercentUnhealthyReplicasPerPartition = 0,
                    MaxPercentUnhealthyServices = 0,
                },
                MaxPercentUnhealthyDeployedApplications = 0,
                ServiceTypeHealthPolicyMap = 
                {
                    { "myService", new AzureNative.ServiceFabric.Inputs.ServiceTypeHealthPolicyArgs
                    {
                        MaxPercentUnhealthyPartitionsPerService = 30,
                        MaxPercentUnhealthyReplicasPerPartition = 30,
                        MaxPercentUnhealthyServices = 30,
                    } },
                },
            },
            ForceRestart = false,
            InstanceCloseDelayDuration = 600,
            RecreateApplication = false,
            RollingUpgradeMonitoringPolicy = new AzureNative.ServiceFabric.Inputs.RollingUpgradeMonitoringPolicyArgs
            {
                FailureAction = "Rollback",
                HealthCheckRetryTimeout = "00:10:00",
                HealthCheckStableDuration = "00:05:00",
                HealthCheckWaitDuration = "00:02:00",
                UpgradeDomainTimeout = "00:15:00",
                UpgradeTimeout = "01:00:00",
            },
            UpgradeMode = "UnmonitoredAuto",
            UpgradeReplicaSetCheckTimeout = 3600,
        },
        Version = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedclusters/myCluster/applicationTypes/myAppType/versions/1.0",
    });

});

