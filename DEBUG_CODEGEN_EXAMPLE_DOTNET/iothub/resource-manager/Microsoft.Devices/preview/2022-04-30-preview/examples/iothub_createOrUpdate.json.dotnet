using System.Collections.Generic;
using System.Linq;
using Pulumi;
using AzureNative = Pulumi.AzureNative;

return await Deployment.RunAsync(() => 
{
    var iotHubResource = new AzureNative.Devices.IotHubResource("iotHubResource", new()
    {
        Location = "centraluseuap",
        Properties = new AzureNative.Devices.Inputs.IotHubPropertiesArgs
        {
            CloudToDevice = new AzureNative.Devices.Inputs.CloudToDevicePropertiesArgs
            {
                DefaultTtlAsIso8601 = "PT1H",
                Feedback = new AzureNative.Devices.Inputs.FeedbackPropertiesArgs
                {
                    LockDurationAsIso8601 = "PT1M",
                    MaxDeliveryCount = 10,
                    TtlAsIso8601 = "PT1H",
                },
                MaxDeliveryCount = 10,
            },
            EnableDataResidency = true,
            EnableFileUploadNotifications = false,
            EventHubEndpoints = 
            {
                { "events", new AzureNative.Devices.Inputs.EventHubPropertiesArgs
                {
                    PartitionCount = 2,
                    RetentionTimeInDays = 1,
                } },
            },
            Features = "None",
            IpFilterRules = new() { },
            MessagingEndpoints = 
            {
                { "fileNotifications", new AzureNative.Devices.Inputs.MessagingEndpointPropertiesArgs
                {
                    LockDurationAsIso8601 = "PT1M",
                    MaxDeliveryCount = 10,
                    TtlAsIso8601 = "PT1H",
                } },
            },
            MinTlsVersion = "1.2",
            NetworkRuleSets = new AzureNative.Devices.Inputs.NetworkRuleSetPropertiesArgs
            {
                ApplyToBuiltInEventHubEndpoint = true,
                DefaultAction = "Deny",
                IpRules = new[]
                {
                    new AzureNative.Devices.Inputs.NetworkRuleSetIpRuleArgs
                    {
                        Action = "Allow",
                        FilterName = "rule1",
                        IpMask = "131.117.159.53",
                    },
                    new AzureNative.Devices.Inputs.NetworkRuleSetIpRuleArgs
                    {
                        Action = "Allow",
                        FilterName = "rule2",
                        IpMask = "157.55.59.128/25",
                    },
                },
            },
            RootCertificate = new AzureNative.Devices.Inputs.RootCertificatePropertiesArgs
            {
                EnableRootCertificateV2 = true,
            },
            Routing = new AzureNative.Devices.Inputs.RoutingPropertiesArgs
            {
                Endpoints = new AzureNative.Devices.Inputs.RoutingEndpointsArgs
                {
                    EventHubs = new[] {},
                    ServiceBusQueues = new[] {},
                    ServiceBusTopics = new[] {},
                    StorageContainers = new[] {},
                },
                FallbackRoute = new AzureNative.Devices.Inputs.FallbackRoutePropertiesArgs
                {
                    Condition = "true",
                    EndpointNames = new[]
                    {
                        "events",
                    },
                    IsEnabled = true,
                    Name = "$fallback",
                    Source = "DeviceMessages",
                },
                Routes = new[] {},
            },
            StorageEndpoints = 
            {
                { "$default", new AzureNative.Devices.Inputs.StorageEndpointPropertiesArgs
                {
                    ConnectionString = "",
                    ContainerName = "",
                    SasTtlAsIso8601 = "PT1H",
                } },
            },
        },
        ResourceGroupName = "myResourceGroup",
        ResourceName = "testHub",
        Sku = new AzureNative.Devices.Inputs.IotHubSkuInfoArgs
        {
            Capacity = 1,
            Name = "S1",
        },
        Tags = null,
    });

});

