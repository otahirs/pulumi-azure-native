import pulumi
import pulumi_azure_native as azure_native

pool = azure_native.batch.Pool("pool",
    account_name="sampleacct",
    deployment_configuration=azure_native.batch.DeploymentConfigurationResponseArgs(
        virtual_machine_configuration={
            "dataDisks": [
                azure_native.batch.DataDiskArgs(
                    caching=azure_native.batch.CachingType.READ_WRITE,
                    disk_size_gb=30,
                    lun=0,
                    storage_account_type=azure_native.batch.StorageAccountType.PREMIUM_LRS,
                ),
                azure_native.batch.DataDiskArgs(
                    caching=azure_native.batch.CachingType.NONE,
                    disk_size_gb=200,
                    lun=1,
                    storage_account_type=azure_native.batch.StorageAccountType.STANDARD_LRS,
                ),
            ],
            "diskEncryptionConfiguration": azure_native.batch.DiskEncryptionConfigurationArgs(
                targets=[
                    azure_native.batch.DiskEncryptionTarget.OS_DISK,
                    azure_native.batch.DiskEncryptionTarget.TEMPORARY_DISK,
                ],
            ),
            "imageReference": azure_native.batch.ImageReferenceArgs(
                offer="WindowsServer",
                publisher="MicrosoftWindowsServer",
                sku="2016-Datacenter-SmallDisk",
                version="latest",
            ),
            "licenseType": "Windows_Server",
            "nodeAgentSkuId": "batch.node.windows amd64",
            "nodePlacementConfiguration": azure_native.batch.NodePlacementConfigurationArgs(
                policy=azure_native.batch.NodePlacementPolicyType.ZONAL,
            ),
            "osDisk": {
                "ephemeralOSDiskSettings": azure_native.batch.DiffDiskSettingsArgs(
                    placement=azure_native.batch.DiffDiskPlacement.CACHE_DISK,
                ),
            },
            "windowsConfiguration": azure_native.batch.WindowsConfigurationArgs(
                enable_automatic_updates=False,
            ),
        },
    ),
    network_configuration=azure_native.batch.NetworkConfigurationResponseArgs(
        endpoint_configuration={
            "inboundNatPools": [{
                "backendPort": 12001,
                "frontendPortRangeEnd": 15100,
                "frontendPortRangeStart": 15000,
                "name": "testnat",
                "networkSecurityGroupRules": [
                    azure_native.batch.NetworkSecurityGroupRuleArgs(
                        access=azure_native.batch.NetworkSecurityGroupRuleAccess.ALLOW,
                        priority=150,
                        source_address_prefix="192.100.12.45",
                        source_port_ranges=[
                            "1",
                            "2",
                        ],
                    ),
                    azure_native.batch.NetworkSecurityGroupRuleArgs(
                        access=azure_native.batch.NetworkSecurityGroupRuleAccess.DENY,
                        priority=3500,
                        source_address_prefix="*",
                        source_port_ranges=["*"],
                    ),
                ],
                "protocol": azure_native.batch.InboundEndpointProtocol.TCP,
            }],
        },
    ),
    pool_name="testpool",
    resource_group_name="default-azurebatch-japaneast",
    scale_settings=azure_native.batch.ScaleSettingsResponseArgs(
        auto_scale=azure_native.batch.AutoScaleSettingsArgs(
            evaluation_interval="PT5M",
            formula="$TargetDedicatedNodes=1",
        ),
    ),
    vm_size="STANDARD_D4")
