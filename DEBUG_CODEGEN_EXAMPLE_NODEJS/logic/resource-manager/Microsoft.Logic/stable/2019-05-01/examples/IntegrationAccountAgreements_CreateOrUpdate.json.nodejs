import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const integrationAccountAgreement = new azure_native.logic.IntegrationAccountAgreement("integrationAccountAgreement", {
    agreementName: "testAgreement",
    agreementType: azure_native.logic.AgreementType.AS2,
    content: {
        aS2: {
            receiveAgreement: {
                protocolSettings: {
                    acknowledgementConnectionSettings: {
                        ignoreCertificateNameMismatch: true,
                        keepHttpConnectionAlive: true,
                        supportHttpStatusCodeContinue: true,
                        unfoldHttpHeaders: true,
                    },
                    envelopeSettings: {
                        autogenerateFileName: true,
                        fileNameTemplate: "Test",
                        messageContentType: "text/plain",
                        suspendMessageOnFileNameGenerationError: true,
                        transmitFileNameInMimeHeader: true,
                    },
                    errorSettings: {
                        resendIfMDNNotReceived: true,
                        suspendDuplicateMessage: true,
                    },
                    mdnSettings: {
                        dispositionNotificationTo: "http://tempuri.org",
                        mdnText: "Sample",
                        micHashingAlgorithm: "SHA1",
                        needMDN: true,
                        receiptDeliveryUrl: "http://tempuri.org",
                        sendInboundMDNToMessageBox: true,
                        sendMDNAsynchronously: true,
                        signMDN: true,
                        signOutboundMDNIfOptional: true,
                    },
                    messageConnectionSettings: {
                        ignoreCertificateNameMismatch: true,
                        keepHttpConnectionAlive: true,
                        supportHttpStatusCodeContinue: true,
                        unfoldHttpHeaders: true,
                    },
                    securitySettings: {
                        enableNRRForInboundDecodedMessages: true,
                        enableNRRForInboundEncodedMessages: true,
                        enableNRRForInboundMDN: true,
                        enableNRRForOutboundDecodedMessages: true,
                        enableNRRForOutboundEncodedMessages: true,
                        enableNRRForOutboundMDN: true,
                        overrideGroupSigningCertificate: false,
                    },
                    validationSettings: {
                        checkCertificateRevocationListOnReceive: true,
                        checkCertificateRevocationListOnSend: true,
                        checkDuplicateMessage: true,
                        compressMessage: true,
                        encryptMessage: false,
                        encryptionAlgorithm: "AES128",
                        interchangeDuplicatesValidityDays: 100,
                        overrideMessageProperties: true,
                        signMessage: false,
                    },
                },
                receiverBusinessIdentity: {
                    qualifier: "ZZ",
                    value: "ZZ",
                },
                senderBusinessIdentity: {
                    qualifier: "AA",
                    value: "AA",
                },
            },
            sendAgreement: {
                protocolSettings: {
                    acknowledgementConnectionSettings: {
                        ignoreCertificateNameMismatch: true,
                        keepHttpConnectionAlive: true,
                        supportHttpStatusCodeContinue: true,
                        unfoldHttpHeaders: true,
                    },
                    envelopeSettings: {
                        autogenerateFileName: true,
                        fileNameTemplate: "Test",
                        messageContentType: "text/plain",
                        suspendMessageOnFileNameGenerationError: true,
                        transmitFileNameInMimeHeader: true,
                    },
                    errorSettings: {
                        resendIfMDNNotReceived: true,
                        suspendDuplicateMessage: true,
                    },
                    mdnSettings: {
                        dispositionNotificationTo: "http://tempuri.org",
                        mdnText: "Sample",
                        micHashingAlgorithm: "SHA1",
                        needMDN: true,
                        receiptDeliveryUrl: "http://tempuri.org",
                        sendInboundMDNToMessageBox: true,
                        sendMDNAsynchronously: true,
                        signMDN: true,
                        signOutboundMDNIfOptional: true,
                    },
                    messageConnectionSettings: {
                        ignoreCertificateNameMismatch: true,
                        keepHttpConnectionAlive: true,
                        supportHttpStatusCodeContinue: true,
                        unfoldHttpHeaders: true,
                    },
                    securitySettings: {
                        enableNRRForInboundDecodedMessages: true,
                        enableNRRForInboundEncodedMessages: true,
                        enableNRRForInboundMDN: true,
                        enableNRRForOutboundDecodedMessages: true,
                        enableNRRForOutboundEncodedMessages: true,
                        enableNRRForOutboundMDN: true,
                        overrideGroupSigningCertificate: false,
                    },
                    validationSettings: {
                        checkCertificateRevocationListOnReceive: true,
                        checkCertificateRevocationListOnSend: true,
                        checkDuplicateMessage: true,
                        compressMessage: true,
                        encryptMessage: false,
                        encryptionAlgorithm: "AES128",
                        interchangeDuplicatesValidityDays: 100,
                        overrideMessageProperties: true,
                        signMessage: false,
                    },
                },
                receiverBusinessIdentity: {
                    qualifier: "AA",
                    value: "AA",
                },
                senderBusinessIdentity: {
                    qualifier: "ZZ",
                    value: "ZZ",
                },
            },
        },
    },
    guestIdentity: {
        qualifier: "AA",
        value: "AA",
    },
    guestPartner: "GuestPartner",
    hostIdentity: {
        qualifier: "ZZ",
        value: "ZZ",
    },
    hostPartner: "HostPartner",
    integrationAccountName: "testIntegrationAccount",
    location: "westus",
    metadata: {},
    resourceGroupName: "testResourceGroup",
    tags: {
        IntegrationAccountAgreement: "<IntegrationAccountAgreementName>",
    },
});
