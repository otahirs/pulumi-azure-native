import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const pool = new azure_native.batch.Pool("pool", {
    accountName: "sampleacct",
    applicationLicenses: [
        "app-license0",
        "app-license1",
    ],
    applicationPackages: [{
        id: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234",
        version: "asdf",
    }],
    certificates: [{
        id: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567",
        storeLocation: azure_native.batch.CertificateStoreLocation.LocalMachine,
        storeName: "MY",
        visibility: [azure_native.batch.CertificateVisibility.RemoteUser],
    }],
    deploymentConfiguration: {
        cloudServiceConfiguration: {
            osFamily: "4",
            osVersion: "WA-GUEST-OS-4.45_201708-01",
        },
    },
    displayName: "my-pool-name",
    interNodeCommunication: azure_native.batch.InterNodeCommunicationState.Enabled,
    metadata: [
        {
            name: "metadata-1",
            value: "value-1",
        },
        {
            name: "metadata-2",
            value: "value-2",
        },
    ],
    networkConfiguration: {
        publicIPAddressConfiguration: {
            ipAddressIds: [
                "/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135",
                "/subscriptions/subid2/resourceGroups/rg24/providers/Microsoft.Network/publicIPAddresses/ip268",
            ],
            provision: azure_native.batch.IPAddressProvisioningType.UserManaged,
        },
        subnetId: "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
    },
    poolName: "testpool",
    resourceGroupName: "default-azurebatch-japaneast",
    scaleSettings: {
        fixedScale: {
            nodeDeallocationOption: azure_native.batch.ComputeNodeDeallocationOption.TaskCompletion,
            resizeTimeout: "PT8M",
            targetDedicatedNodes: 6,
            targetLowPriorityNodes: 28,
        },
    },
    startTask: {
        commandLine: "cmd /c SET",
        environmentSettings: [{
            name: "MYSET",
            value: "1234",
        }],
        maxTaskRetryCount: 6,
        resourceFiles: [{
            fileMode: "777",
            filePath: "c:\\temp\\gohere",
            httpUrl: "https://testaccount.blob.core.windows.net/example-blob-file",
        }],
        userIdentity: {
            autoUser: {
                elevationLevel: azure_native.batch.ElevationLevel.Admin,
                scope: azure_native.batch.AutoUserScope.Pool,
            },
        },
        waitForSuccess: true,
    },
    taskSchedulingPolicy: {
        nodeFillType: azure_native.batch.ComputeNodeFillType.Pack,
    },
    taskSlotsPerNode: 13,
    userAccounts: [{
        elevationLevel: azure_native.batch.ElevationLevel.Admin,
        linuxUserConfiguration: {
            gid: 4567,
            sshPrivateKey: "sshprivatekeyvalue",
            uid: 1234,
        },
        name: "username1",
        password: "<ExamplePassword>",
    }],
    vmSize: "STANDARD_D4",
});
