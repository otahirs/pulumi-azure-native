import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const frontDoor = new azure_native.network.FrontDoor("frontDoor", {
    backendPools: [{
        backends: [
            {
                address: "w3.contoso.com",
                httpPort: 80,
                httpsPort: 443,
                priority: 2,
                weight: 1,
            },
            {
                address: "contoso.com.website-us-west-2.othercloud.net",
                httpPort: 80,
                httpsPort: 443,
                priority: 1,
                privateLinkApprovalMessage: "Please approve the connection request for this Private Link",
                privateLinkLocation: "eastus",
                privateLinkResourceId: "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.Network/privateLinkServices/pls1",
                weight: 2,
            },
            {
                address: "10.0.1.5",
                httpPort: 80,
                httpsPort: 443,
                priority: 1,
                privateLinkAlias: "APPSERVER.d84e61f0-0870-4d24-9746-7438fa0019d1.westus2.azure.privatelinkservice",
                privateLinkApprovalMessage: "Please approve this request to connect to the Private Link",
                weight: 1,
            },
        ],
        healthProbeSettings: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/healthProbeSettings/healthProbeSettings1",
        },
        loadBalancingSettings: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/loadBalancingSettings/loadBalancingSettings1",
        },
        name: "backendPool1",
    }],
    backendPoolsSettings: {
        enforceCertificateNameCheck: "Enabled",
        sendRecvTimeoutSeconds: 60,
    },
    enabledState: "Enabled",
    frontDoorName: "frontDoor1",
    frontendEndpoints: [
        {
            hostName: "www.contoso.com",
            name: "frontendEndpoint1",
            sessionAffinityEnabledState: "Enabled",
            sessionAffinityTtlSeconds: 60,
            webApplicationFirewallPolicyLink: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1",
            },
        },
        {
            hostName: "frontDoor1.azurefd.net",
            name: "default",
        },
    ],
    healthProbeSettings: [{
        enabledState: "Enabled",
        healthProbeMethod: "HEAD",
        intervalInSeconds: 120,
        name: "healthProbeSettings1",
        path: "/",
        protocol: "Http",
    }],
    loadBalancingSettings: [{
        name: "loadBalancingSettings1",
        sampleSize: 4,
        successfulSamplesRequired: 2,
    }],
    location: "westus",
    resourceGroupName: "rg1",
    routingRules: [{
        acceptedProtocols: ["Http"],
        enabledState: "Enabled",
        frontendEndpoints: [
            {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/frontendEndpoint1",
            },
            {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/frontendEndpoints/default",
            },
        ],
        name: "routingRule1",
        patternsToMatch: ["/*"],
        routeConfiguration: {
            backendPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/backendPools/backendPool1",
            },
            odataType: "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
        },
        rulesEngine: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoors/frontDoor1/rulesEngines/rulesEngine1",
        },
        webApplicationFirewallPolicyLink: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/policy1",
        },
    }],
    tags: {
        tag1: "value1",
        tag2: "value2",
    },
});
