import * as pulumi from "@pulumi/pulumi";
import * as azure_native from "@pulumi/azure-native";

const webApplicationFirewallPolicy = new azure_native.network.WebApplicationFirewallPolicy("webApplicationFirewallPolicy", {
    customRules: [
        {
            action: "Block",
            matchConditions: [{
                matchValues: [
                    "192.168.1.0/24",
                    "10.0.0.0/24",
                ],
                matchVariables: [{
                    variableName: "RemoteAddr",
                }],
                operator: "IPMatch",
            }],
            name: "Rule1",
            priority: 1,
            ruleType: "MatchRule",
        },
        {
            action: "Block",
            matchConditions: [
                {
                    matchValues: ["192.168.1.0/24"],
                    matchVariables: [{
                        variableName: "RemoteAddr",
                    }],
                    operator: "IPMatch",
                },
                {
                    matchValues: ["Windows"],
                    matchVariables: [{
                        selector: "UserAgent",
                        variableName: "RequestHeaders",
                    }],
                    operator: "Contains",
                },
            ],
            name: "Rule2",
            priority: 2,
            ruleType: "MatchRule",
        },
        {
            action: "Block",
            groupByUserSession: [{
                groupByVariables: [{
                    variableName: "ClientAddr",
                }],
            }],
            matchConditions: [{
                matchValues: [
                    "192.168.1.0/24",
                    "10.0.0.0/24",
                ],
                matchVariables: [{
                    variableName: "RemoteAddr",
                }],
                negationConditon: true,
                operator: "IPMatch",
            }],
            name: "RateLimitRule3",
            priority: 3,
            rateLimitDuration: "OneMin",
            rateLimitThreshold: 10,
            ruleType: "RateLimitRule",
        },
    ],
    location: "WestUs",
    managedRules: {
        exclusions: [
            {
                exclusionManagedRuleSets: [{
                    ruleGroups: [
                        {
                            ruleGroupName: "REQUEST-930-APPLICATION-ATTACK-LFI",
                            rules: [{
                                ruleId: "930120",
                            }],
                        },
                        {
                            ruleGroupName: "REQUEST-932-APPLICATION-ATTACK-RCE",
                        },
                    ],
                    ruleSetType: "OWASP",
                    ruleSetVersion: "3.2",
                }],
                matchVariable: "RequestArgNames",
                selector: "hello",
                selectorMatchOperator: "StartsWith",
            },
            {
                exclusionManagedRuleSets: [{
                    ruleGroups: [],
                    ruleSetType: "OWASP",
                    ruleSetVersion: "3.1",
                }],
                matchVariable: "RequestArgNames",
                selector: "hello",
                selectorMatchOperator: "EndsWith",
            },
            {
                matchVariable: "RequestArgNames",
                selector: "test",
                selectorMatchOperator: "StartsWith",
            },
            {
                matchVariable: "RequestArgValues",
                selector: "test",
                selectorMatchOperator: "StartsWith",
            },
        ],
        managedRuleSets: [{
            ruleGroupOverrides: [{
                ruleGroupName: "REQUEST-931-APPLICATION-ATTACK-RFI",
                rules: [
                    {
                        action: "Log",
                        ruleId: "931120",
                        state: "Enabled",
                    },
                    {
                        action: "AnomalyScoring",
                        ruleId: "931130",
                        state: "Disabled",
                    },
                ],
            }],
            ruleSetType: "OWASP",
            ruleSetVersion: "3.2",
        }],
    },
    policyName: "Policy1",
    policySettings: {
        logScrubbing: {
            scrubbingRules: [
                {
                    matchVariable: "RequestArgNames",
                    selector: "test",
                    selectorMatchOperator: "Equals",
                    state: "Enabled",
                },
                {
                    matchVariable: "RequestIPAddress",
                    selectorMatchOperator: "EqualsAny",
                    state: "Enabled",
                },
            ],
            state: "Enabled",
        },
    },
    resourceGroupName: "rg1",
});
