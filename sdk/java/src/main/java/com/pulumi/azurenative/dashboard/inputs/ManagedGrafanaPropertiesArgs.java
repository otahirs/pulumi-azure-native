// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dashboard.inputs;

import com.pulumi.azurenative.dashboard.enums.ApiKey;
import com.pulumi.azurenative.dashboard.enums.AutoGeneratedDomainNameLabelScope;
import com.pulumi.azurenative.dashboard.enums.DeterministicOutboundIP;
import com.pulumi.azurenative.dashboard.enums.PublicNetworkAccess;
import com.pulumi.azurenative.dashboard.enums.ZoneRedundancy;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties specific to the grafana resource.
 * 
 */
public final class ManagedGrafanaPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedGrafanaPropertiesArgs Empty = new ManagedGrafanaPropertiesArgs();

    /**
     * The api key setting of the Grafana instance.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<Either<String,ApiKey>> apiKey;

    /**
     * @return The api key setting of the Grafana instance.
     * 
     */
    public Optional<Output<Either<String,ApiKey>>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * Scope for dns deterministic name hash calculation.
     * 
     */
    @Import(name="autoGeneratedDomainNameLabelScope")
    private @Nullable Output<Either<String,AutoGeneratedDomainNameLabelScope>> autoGeneratedDomainNameLabelScope;

    /**
     * @return Scope for dns deterministic name hash calculation.
     * 
     */
    public Optional<Output<Either<String,AutoGeneratedDomainNameLabelScope>>> autoGeneratedDomainNameLabelScope() {
        return Optional.ofNullable(this.autoGeneratedDomainNameLabelScope);
    }

    /**
     * Whether a Grafana instance uses deterministic outbound IPs.
     * 
     */
    @Import(name="deterministicOutboundIP")
    private @Nullable Output<Either<String,DeterministicOutboundIP>> deterministicOutboundIP;

    /**
     * @return Whether a Grafana instance uses deterministic outbound IPs.
     * 
     */
    public Optional<Output<Either<String,DeterministicOutboundIP>>> deterministicOutboundIP() {
        return Optional.ofNullable(this.deterministicOutboundIP);
    }

    /**
     * Indicate the state for enable or disable traffic over the public interface.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    /**
     * @return Indicate the state for enable or disable traffic over the public interface.
     * 
     */
    public Optional<Output<Either<String,PublicNetworkAccess>>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The zone redundancy setting of the Grafana instance.
     * 
     */
    @Import(name="zoneRedundancy")
    private @Nullable Output<Either<String,ZoneRedundancy>> zoneRedundancy;

    /**
     * @return The zone redundancy setting of the Grafana instance.
     * 
     */
    public Optional<Output<Either<String,ZoneRedundancy>>> zoneRedundancy() {
        return Optional.ofNullable(this.zoneRedundancy);
    }

    private ManagedGrafanaPropertiesArgs() {}

    private ManagedGrafanaPropertiesArgs(ManagedGrafanaPropertiesArgs $) {
        this.apiKey = $.apiKey;
        this.autoGeneratedDomainNameLabelScope = $.autoGeneratedDomainNameLabelScope;
        this.deterministicOutboundIP = $.deterministicOutboundIP;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.zoneRedundancy = $.zoneRedundancy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedGrafanaPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedGrafanaPropertiesArgs $;

        public Builder() {
            $ = new ManagedGrafanaPropertiesArgs();
        }

        public Builder(ManagedGrafanaPropertiesArgs defaults) {
            $ = new ManagedGrafanaPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The api key setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<Either<String,ApiKey>> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The api key setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Either<String,ApiKey> apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param apiKey The api key setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Either.ofLeft(apiKey));
        }

        /**
         * @param apiKey The api key setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(ApiKey apiKey) {
            return apiKey(Either.ofRight(apiKey));
        }

        /**
         * @param autoGeneratedDomainNameLabelScope Scope for dns deterministic name hash calculation.
         * 
         * @return builder
         * 
         */
        public Builder autoGeneratedDomainNameLabelScope(@Nullable Output<Either<String,AutoGeneratedDomainNameLabelScope>> autoGeneratedDomainNameLabelScope) {
            $.autoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
            return this;
        }

        /**
         * @param autoGeneratedDomainNameLabelScope Scope for dns deterministic name hash calculation.
         * 
         * @return builder
         * 
         */
        public Builder autoGeneratedDomainNameLabelScope(Either<String,AutoGeneratedDomainNameLabelScope> autoGeneratedDomainNameLabelScope) {
            return autoGeneratedDomainNameLabelScope(Output.of(autoGeneratedDomainNameLabelScope));
        }

        /**
         * @param autoGeneratedDomainNameLabelScope Scope for dns deterministic name hash calculation.
         * 
         * @return builder
         * 
         */
        public Builder autoGeneratedDomainNameLabelScope(String autoGeneratedDomainNameLabelScope) {
            return autoGeneratedDomainNameLabelScope(Either.ofLeft(autoGeneratedDomainNameLabelScope));
        }

        /**
         * @param autoGeneratedDomainNameLabelScope Scope for dns deterministic name hash calculation.
         * 
         * @return builder
         * 
         */
        public Builder autoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope) {
            return autoGeneratedDomainNameLabelScope(Either.ofRight(autoGeneratedDomainNameLabelScope));
        }

        /**
         * @param deterministicOutboundIP Whether a Grafana instance uses deterministic outbound IPs.
         * 
         * @return builder
         * 
         */
        public Builder deterministicOutboundIP(@Nullable Output<Either<String,DeterministicOutboundIP>> deterministicOutboundIP) {
            $.deterministicOutboundIP = deterministicOutboundIP;
            return this;
        }

        /**
         * @param deterministicOutboundIP Whether a Grafana instance uses deterministic outbound IPs.
         * 
         * @return builder
         * 
         */
        public Builder deterministicOutboundIP(Either<String,DeterministicOutboundIP> deterministicOutboundIP) {
            return deterministicOutboundIP(Output.of(deterministicOutboundIP));
        }

        /**
         * @param deterministicOutboundIP Whether a Grafana instance uses deterministic outbound IPs.
         * 
         * @return builder
         * 
         */
        public Builder deterministicOutboundIP(String deterministicOutboundIP) {
            return deterministicOutboundIP(Either.ofLeft(deterministicOutboundIP));
        }

        /**
         * @param deterministicOutboundIP Whether a Grafana instance uses deterministic outbound IPs.
         * 
         * @return builder
         * 
         */
        public Builder deterministicOutboundIP(DeterministicOutboundIP deterministicOutboundIP) {
            return deterministicOutboundIP(Either.ofRight(deterministicOutboundIP));
        }

        /**
         * @param publicNetworkAccess Indicate the state for enable or disable traffic over the public interface.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        /**
         * @param publicNetworkAccess Indicate the state for enable or disable traffic over the public interface.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(Either<String,PublicNetworkAccess> publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        /**
         * @param publicNetworkAccess Indicate the state for enable or disable traffic over the public interface.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Either.ofLeft(publicNetworkAccess));
        }

        /**
         * @param publicNetworkAccess Indicate the state for enable or disable traffic over the public interface.
         * 
         * @return builder
         * 
         */
        public Builder publicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
            return publicNetworkAccess(Either.ofRight(publicNetworkAccess));
        }

        /**
         * @param zoneRedundancy The zone redundancy setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneRedundancy(@Nullable Output<Either<String,ZoneRedundancy>> zoneRedundancy) {
            $.zoneRedundancy = zoneRedundancy;
            return this;
        }

        /**
         * @param zoneRedundancy The zone redundancy setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneRedundancy(Either<String,ZoneRedundancy> zoneRedundancy) {
            return zoneRedundancy(Output.of(zoneRedundancy));
        }

        /**
         * @param zoneRedundancy The zone redundancy setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneRedundancy(String zoneRedundancy) {
            return zoneRedundancy(Either.ofLeft(zoneRedundancy));
        }

        /**
         * @param zoneRedundancy The zone redundancy setting of the Grafana instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneRedundancy(ZoneRedundancy zoneRedundancy) {
            return zoneRedundancy(Either.ofRight(zoneRedundancy));
        }

        public ManagedGrafanaPropertiesArgs build() {
            return $;
        }
    }

}
