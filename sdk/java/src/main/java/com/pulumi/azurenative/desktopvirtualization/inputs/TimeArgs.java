// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.desktopvirtualization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


/**
 * The time for a scaling action to occur.
 * 
 */
public final class TimeArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimeArgs Empty = new TimeArgs();

    /**
     * The hour.
     * 
     */
    @Import(name="hour", required=true)
    private Output<Integer> hour;

    /**
     * @return The hour.
     * 
     */
    public Output<Integer> hour() {
        return this.hour;
    }

    /**
     * The minute.
     * 
     */
    @Import(name="minute", required=true)
    private Output<Integer> minute;

    /**
     * @return The minute.
     * 
     */
    public Output<Integer> minute() {
        return this.minute;
    }

    private TimeArgs() {}

    private TimeArgs(TimeArgs $) {
        this.hour = $.hour;
        this.minute = $.minute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TimeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TimeArgs $;

        public Builder() {
            $ = new TimeArgs();
        }

        public Builder(TimeArgs defaults) {
            $ = new TimeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hour The hour.
         * 
         * @return builder
         * 
         */
        public Builder hour(Output<Integer> hour) {
            $.hour = hour;
            return this;
        }

        /**
         * @param hour The hour.
         * 
         * @return builder
         * 
         */
        public Builder hour(Integer hour) {
            return hour(Output.of(hour));
        }

        /**
         * @param minute The minute.
         * 
         * @return builder
         * 
         */
        public Builder minute(Output<Integer> minute) {
            $.minute = minute;
            return this;
        }

        /**
         * @param minute The minute.
         * 
         * @return builder
         * 
         */
        public Builder minute(Integer minute) {
            return minute(Output.of(minute));
        }

        public TimeArgs build() {
            $.hour = Objects.requireNonNull($.hour, "expected parameter 'hour' to be non-null");
            $.minute = Objects.requireNonNull($.minute, "expected parameter 'minute' to be non-null");
            return $;
        }
    }

}
