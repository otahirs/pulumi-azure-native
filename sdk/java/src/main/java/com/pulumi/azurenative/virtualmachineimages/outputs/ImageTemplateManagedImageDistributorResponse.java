// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ImageTemplateManagedImageDistributorResponse {
    /**
     * @return Tags that will be applied to the artifact once it has been created/updated by the distributor.
     * 
     */
    private @Nullable Map<String,String> artifactTags;
    /**
     * @return Resource Id of the Managed Disk Image
     * 
     */
    private String imageId;
    /**
     * @return Azure location for the image, should match if image already exists
     * 
     */
    private String location;
    /**
     * @return The name to be used for the associated RunOutput.
     * 
     */
    private String runOutputName;
    /**
     * @return Type of distribution.
     * Expected value is &#39;ManagedImage&#39;.
     * 
     */
    private String type;

    private ImageTemplateManagedImageDistributorResponse() {}
    /**
     * @return Tags that will be applied to the artifact once it has been created/updated by the distributor.
     * 
     */
    public Map<String,String> artifactTags() {
        return this.artifactTags == null ? Map.of() : this.artifactTags;
    }
    /**
     * @return Resource Id of the Managed Disk Image
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return Azure location for the image, should match if image already exists
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name to be used for the associated RunOutput.
     * 
     */
    public String runOutputName() {
        return this.runOutputName;
    }
    /**
     * @return Type of distribution.
     * Expected value is &#39;ManagedImage&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageTemplateManagedImageDistributorResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,String> artifactTags;
        private String imageId;
        private String location;
        private String runOutputName;
        private String type;
        public Builder() {}
        public Builder(ImageTemplateManagedImageDistributorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactTags = defaults.artifactTags;
    	      this.imageId = defaults.imageId;
    	      this.location = defaults.location;
    	      this.runOutputName = defaults.runOutputName;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder artifactTags(@Nullable Map<String,String> artifactTags) {
            this.artifactTags = artifactTags;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder runOutputName(String runOutputName) {
            this.runOutputName = Objects.requireNonNull(runOutputName);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ImageTemplateManagedImageDistributorResponse build() {
            final var o = new ImageTemplateManagedImageDistributorResponse();
            o.artifactTags = artifactTags;
            o.imageId = imageId;
            o.location = location;
            o.runOutputName = runOutputName;
            o.type = type;
            return o;
        }
    }
}
