// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.enums.DatabaseTier;
import com.pulumi.azurenative.workloads.enums.DatabaseType;
import com.pulumi.azurenative.workloads.enums.EnableSslEnforcement;
import com.pulumi.azurenative.workloads.enums.HAEnabled;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Workload database profile
 * 
 */
public final class DatabaseProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseProfileArgs Empty = new DatabaseProfileArgs();

    /**
     * Backup retention days for the server
     * 
     */
    @Import(name="backupRetentionDays")
    private @Nullable Output<Integer> backupRetentionDays;

    /**
     * @return Backup retention days for the server
     * 
     */
    public Optional<Output<Integer>> backupRetentionDays() {
        return Optional.ofNullable(this.backupRetentionDays);
    }

    /**
     * Whether to enable HA for the server
     * 
     */
    @Import(name="haEnabled")
    private @Nullable Output<Either<String,HAEnabled>> haEnabled;

    /**
     * @return Whether to enable HA for the server
     * 
     */
    public Optional<Output<Either<String,HAEnabled>>> haEnabled() {
        return Optional.ofNullable(this.haEnabled);
    }

    /**
     * Database server name
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return Database server name
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * The name of the server SKU, e.g. Standard_D32s_v4
     * 
     */
    @Import(name="sku", required=true)
    private Output<String> sku;

    /**
     * @return The name of the server SKU, e.g. Standard_D32s_v4
     * 
     */
    public Output<String> sku() {
        return this.sku;
    }

    /**
     * Whether to enable SSL enforcement on the database
     * 
     */
    @Import(name="sslEnforcementEnabled")
    private @Nullable Output<Either<String,EnableSslEnforcement>> sslEnforcementEnabled;

    /**
     * @return Whether to enable SSL enforcement on the database
     * 
     */
    public Optional<Output<Either<String,EnableSslEnforcement>>> sslEnforcementEnabled() {
        return Optional.ofNullable(this.sslEnforcementEnabled);
    }

    /**
     * Database storage size in GB
     * 
     */
    @Import(name="storageInGB")
    private @Nullable Output<Double> storageInGB;

    /**
     * @return Database storage size in GB
     * 
     */
    public Optional<Output<Double>> storageInGB() {
        return Optional.ofNullable(this.storageInGB);
    }

    /**
     * Storage IOPS for the server
     * 
     */
    @Import(name="storageIops")
    private @Nullable Output<Double> storageIops;

    /**
     * @return Storage IOPS for the server
     * 
     */
    public Optional<Output<Double>> storageIops() {
        return Optional.ofNullable(this.storageIops);
    }

    /**
     * SKU name for database storage
     * 
     */
    @Import(name="storageSku")
    private @Nullable Output<String> storageSku;

    /**
     * @return SKU name for database storage
     * 
     */
    public Optional<Output<String>> storageSku() {
        return Optional.ofNullable(this.storageSku);
    }

    /**
     * Tier of the server SKU
     * 
     */
    @Import(name="tier", required=true)
    private Output<DatabaseTier> tier;

    /**
     * @return Tier of the server SKU
     * 
     */
    public Output<DatabaseTier> tier() {
        return this.tier;
    }

    /**
     * Database type
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,DatabaseType>> type;

    /**
     * @return Database type
     * 
     */
    public Output<Either<String,DatabaseType>> type() {
        return this.type;
    }

    /**
     * Database version
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Database version
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatabaseProfileArgs() {}

    private DatabaseProfileArgs(DatabaseProfileArgs $) {
        this.backupRetentionDays = $.backupRetentionDays;
        this.haEnabled = $.haEnabled;
        this.serverName = $.serverName;
        this.sku = $.sku;
        this.sslEnforcementEnabled = $.sslEnforcementEnabled;
        this.storageInGB = $.storageInGB;
        this.storageIops = $.storageIops;
        this.storageSku = $.storageSku;
        this.tier = $.tier;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseProfileArgs $;

        public Builder() {
            $ = new DatabaseProfileArgs();
        }

        public Builder(DatabaseProfileArgs defaults) {
            $ = new DatabaseProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupRetentionDays Backup retention days for the server
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionDays(@Nullable Output<Integer> backupRetentionDays) {
            $.backupRetentionDays = backupRetentionDays;
            return this;
        }

        /**
         * @param backupRetentionDays Backup retention days for the server
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionDays(Integer backupRetentionDays) {
            return backupRetentionDays(Output.of(backupRetentionDays));
        }

        /**
         * @param haEnabled Whether to enable HA for the server
         * 
         * @return builder
         * 
         */
        public Builder haEnabled(@Nullable Output<Either<String,HAEnabled>> haEnabled) {
            $.haEnabled = haEnabled;
            return this;
        }

        /**
         * @param haEnabled Whether to enable HA for the server
         * 
         * @return builder
         * 
         */
        public Builder haEnabled(Either<String,HAEnabled> haEnabled) {
            return haEnabled(Output.of(haEnabled));
        }

        /**
         * @param haEnabled Whether to enable HA for the server
         * 
         * @return builder
         * 
         */
        public Builder haEnabled(String haEnabled) {
            return haEnabled(Either.ofLeft(haEnabled));
        }

        /**
         * @param haEnabled Whether to enable HA for the server
         * 
         * @return builder
         * 
         */
        public Builder haEnabled(HAEnabled haEnabled) {
            return haEnabled(Either.ofRight(haEnabled));
        }

        /**
         * @param serverName Database server name
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Database server name
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param sku The name of the server SKU, e.g. Standard_D32s_v4
         * 
         * @return builder
         * 
         */
        public Builder sku(Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The name of the server SKU, e.g. Standard_D32s_v4
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param sslEnforcementEnabled Whether to enable SSL enforcement on the database
         * 
         * @return builder
         * 
         */
        public Builder sslEnforcementEnabled(@Nullable Output<Either<String,EnableSslEnforcement>> sslEnforcementEnabled) {
            $.sslEnforcementEnabled = sslEnforcementEnabled;
            return this;
        }

        /**
         * @param sslEnforcementEnabled Whether to enable SSL enforcement on the database
         * 
         * @return builder
         * 
         */
        public Builder sslEnforcementEnabled(Either<String,EnableSslEnforcement> sslEnforcementEnabled) {
            return sslEnforcementEnabled(Output.of(sslEnforcementEnabled));
        }

        /**
         * @param sslEnforcementEnabled Whether to enable SSL enforcement on the database
         * 
         * @return builder
         * 
         */
        public Builder sslEnforcementEnabled(String sslEnforcementEnabled) {
            return sslEnforcementEnabled(Either.ofLeft(sslEnforcementEnabled));
        }

        /**
         * @param sslEnforcementEnabled Whether to enable SSL enforcement on the database
         * 
         * @return builder
         * 
         */
        public Builder sslEnforcementEnabled(EnableSslEnforcement sslEnforcementEnabled) {
            return sslEnforcementEnabled(Either.ofRight(sslEnforcementEnabled));
        }

        /**
         * @param storageInGB Database storage size in GB
         * 
         * @return builder
         * 
         */
        public Builder storageInGB(@Nullable Output<Double> storageInGB) {
            $.storageInGB = storageInGB;
            return this;
        }

        /**
         * @param storageInGB Database storage size in GB
         * 
         * @return builder
         * 
         */
        public Builder storageInGB(Double storageInGB) {
            return storageInGB(Output.of(storageInGB));
        }

        /**
         * @param storageIops Storage IOPS for the server
         * 
         * @return builder
         * 
         */
        public Builder storageIops(@Nullable Output<Double> storageIops) {
            $.storageIops = storageIops;
            return this;
        }

        /**
         * @param storageIops Storage IOPS for the server
         * 
         * @return builder
         * 
         */
        public Builder storageIops(Double storageIops) {
            return storageIops(Output.of(storageIops));
        }

        /**
         * @param storageSku SKU name for database storage
         * 
         * @return builder
         * 
         */
        public Builder storageSku(@Nullable Output<String> storageSku) {
            $.storageSku = storageSku;
            return this;
        }

        /**
         * @param storageSku SKU name for database storage
         * 
         * @return builder
         * 
         */
        public Builder storageSku(String storageSku) {
            return storageSku(Output.of(storageSku));
        }

        /**
         * @param tier Tier of the server SKU
         * 
         * @return builder
         * 
         */
        public Builder tier(Output<DatabaseTier> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier Tier of the server SKU
         * 
         * @return builder
         * 
         */
        public Builder tier(DatabaseTier tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param type Database type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,DatabaseType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Database type
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,DatabaseType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Database type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Database type
         * 
         * @return builder
         * 
         */
        public Builder type(DatabaseType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param version Database version
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Database version
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DatabaseProfileArgs build() {
            $.sku = Objects.requireNonNull($.sku, "expected parameter 'sku' to be non-null");
            $.tier = Objects.requireNonNull($.tier, "expected parameter 'tier' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
