// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.outputs;

import com.pulumi.azurenative.devtestlab.outputs.ArtifactInstallPropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.BulkCreationParametersResponse;
import com.pulumi.azurenative.devtestlab.outputs.DataDiskPropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.GalleryImageReferenceResponse;
import com.pulumi.azurenative.devtestlab.outputs.NetworkInterfacePropertiesResponse;
import com.pulumi.azurenative.devtestlab.outputs.ScheduleCreationParameterResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LabVirtualMachineCreationParameterResponse {
    /**
     * @return Indicates whether another user can take ownership of the virtual machine
     * 
     */
    private @Nullable Boolean allowClaim;
    /**
     * @return The artifacts to be installed on the virtual machine.
     * 
     */
    private @Nullable List<ArtifactInstallPropertiesResponse> artifacts;
    /**
     * @return The number of virtual machine instances to create.
     * 
     */
    private @Nullable BulkCreationParametersResponse bulkCreationParameters;
    /**
     * @return The creation date of the virtual machine.
     * 
     */
    private @Nullable String createdDate;
    /**
     * @return The custom image identifier of the virtual machine.
     * 
     */
    private @Nullable String customImageId;
    /**
     * @return New or existing data disks to attach to the virtual machine after creation
     * 
     */
    private @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;
    /**
     * @return Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    private @Nullable Boolean disallowPublicIpAddress;
    /**
     * @return The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    private @Nullable String environmentId;
    /**
     * @return The expiration date for VM.
     * 
     */
    private @Nullable String expirationDate;
    /**
     * @return The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    private @Nullable GalleryImageReferenceResponse galleryImageReference;
    /**
     * @return Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    private @Nullable Boolean isAuthenticationWithSshKey;
    /**
     * @return The lab subnet name of the virtual machine.
     * 
     */
    private @Nullable String labSubnetName;
    /**
     * @return The lab virtual network identifier of the virtual machine.
     * 
     */
    private @Nullable String labVirtualNetworkId;
    /**
     * @return The location of the new virtual machine or environment
     * 
     */
    private @Nullable String location;
    /**
     * @return The name of the virtual machine or environment
     * 
     */
    private @Nullable String name;
    /**
     * @return The network interface properties.
     * 
     */
    private @Nullable NetworkInterfacePropertiesResponse networkInterface;
    /**
     * @return The notes of the virtual machine.
     * 
     */
    private @Nullable String notes;
    /**
     * @return The object identifier of the owner of the virtual machine.
     * 
     */
    private @Nullable String ownerObjectId;
    /**
     * @return The user principal name of the virtual machine owner.
     * 
     */
    private @Nullable String ownerUserPrincipalName;
    /**
     * @return The password of the virtual machine administrator.
     * 
     */
    private @Nullable String password;
    /**
     * @return The id of the plan associated with the virtual machine image
     * 
     */
    private @Nullable String planId;
    /**
     * @return Virtual Machine schedules to be created
     * 
     */
    private @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;
    /**
     * @return The size of the virtual machine.
     * 
     */
    private @Nullable String size;
    /**
     * @return The SSH key of the virtual machine administrator.
     * 
     */
    private @Nullable String sshKey;
    /**
     * @return Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    private @Nullable String storageType;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The user name of the virtual machine.
     * 
     */
    private @Nullable String userName;

    private LabVirtualMachineCreationParameterResponse() {}
    /**
     * @return Indicates whether another user can take ownership of the virtual machine
     * 
     */
    public Optional<Boolean> allowClaim() {
        return Optional.ofNullable(this.allowClaim);
    }
    /**
     * @return The artifacts to be installed on the virtual machine.
     * 
     */
    public List<ArtifactInstallPropertiesResponse> artifacts() {
        return this.artifacts == null ? List.of() : this.artifacts;
    }
    /**
     * @return The number of virtual machine instances to create.
     * 
     */
    public Optional<BulkCreationParametersResponse> bulkCreationParameters() {
        return Optional.ofNullable(this.bulkCreationParameters);
    }
    /**
     * @return The creation date of the virtual machine.
     * 
     */
    public Optional<String> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }
    /**
     * @return The custom image identifier of the virtual machine.
     * 
     */
    public Optional<String> customImageId() {
        return Optional.ofNullable(this.customImageId);
    }
    /**
     * @return New or existing data disks to attach to the virtual machine after creation
     * 
     */
    public List<DataDiskPropertiesResponse> dataDiskParameters() {
        return this.dataDiskParameters == null ? List.of() : this.dataDiskParameters;
    }
    /**
     * @return Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    public Optional<Boolean> disallowPublicIpAddress() {
        return Optional.ofNullable(this.disallowPublicIpAddress);
    }
    /**
     * @return The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    public Optional<String> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }
    /**
     * @return The expiration date for VM.
     * 
     */
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * @return The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    public Optional<GalleryImageReferenceResponse> galleryImageReference() {
        return Optional.ofNullable(this.galleryImageReference);
    }
    /**
     * @return Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    public Optional<Boolean> isAuthenticationWithSshKey() {
        return Optional.ofNullable(this.isAuthenticationWithSshKey);
    }
    /**
     * @return The lab subnet name of the virtual machine.
     * 
     */
    public Optional<String> labSubnetName() {
        return Optional.ofNullable(this.labSubnetName);
    }
    /**
     * @return The lab virtual network identifier of the virtual machine.
     * 
     */
    public Optional<String> labVirtualNetworkId() {
        return Optional.ofNullable(this.labVirtualNetworkId);
    }
    /**
     * @return The location of the new virtual machine or environment
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The name of the virtual machine or environment
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The network interface properties.
     * 
     */
    public Optional<NetworkInterfacePropertiesResponse> networkInterface() {
        return Optional.ofNullable(this.networkInterface);
    }
    /**
     * @return The notes of the virtual machine.
     * 
     */
    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }
    /**
     * @return The object identifier of the owner of the virtual machine.
     * 
     */
    public Optional<String> ownerObjectId() {
        return Optional.ofNullable(this.ownerObjectId);
    }
    /**
     * @return The user principal name of the virtual machine owner.
     * 
     */
    public Optional<String> ownerUserPrincipalName() {
        return Optional.ofNullable(this.ownerUserPrincipalName);
    }
    /**
     * @return The password of the virtual machine administrator.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The id of the plan associated with the virtual machine image
     * 
     */
    public Optional<String> planId() {
        return Optional.ofNullable(this.planId);
    }
    /**
     * @return Virtual Machine schedules to be created
     * 
     */
    public List<ScheduleCreationParameterResponse> scheduleParameters() {
        return this.scheduleParameters == null ? List.of() : this.scheduleParameters;
    }
    /**
     * @return The size of the virtual machine.
     * 
     */
    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return The SSH key of the virtual machine administrator.
     * 
     */
    public Optional<String> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }
    /**
     * @return Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    public Optional<String> storageType() {
        return Optional.ofNullable(this.storageType);
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The user name of the virtual machine.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LabVirtualMachineCreationParameterResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowClaim;
        private @Nullable List<ArtifactInstallPropertiesResponse> artifacts;
        private @Nullable BulkCreationParametersResponse bulkCreationParameters;
        private @Nullable String createdDate;
        private @Nullable String customImageId;
        private @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;
        private @Nullable Boolean disallowPublicIpAddress;
        private @Nullable String environmentId;
        private @Nullable String expirationDate;
        private @Nullable GalleryImageReferenceResponse galleryImageReference;
        private @Nullable Boolean isAuthenticationWithSshKey;
        private @Nullable String labSubnetName;
        private @Nullable String labVirtualNetworkId;
        private @Nullable String location;
        private @Nullable String name;
        private @Nullable NetworkInterfacePropertiesResponse networkInterface;
        private @Nullable String notes;
        private @Nullable String ownerObjectId;
        private @Nullable String ownerUserPrincipalName;
        private @Nullable String password;
        private @Nullable String planId;
        private @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;
        private @Nullable String size;
        private @Nullable String sshKey;
        private @Nullable String storageType;
        private @Nullable Map<String,String> tags;
        private @Nullable String userName;
        public Builder() {}
        public Builder(LabVirtualMachineCreationParameterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowClaim = defaults.allowClaim;
    	      this.artifacts = defaults.artifacts;
    	      this.bulkCreationParameters = defaults.bulkCreationParameters;
    	      this.createdDate = defaults.createdDate;
    	      this.customImageId = defaults.customImageId;
    	      this.dataDiskParameters = defaults.dataDiskParameters;
    	      this.disallowPublicIpAddress = defaults.disallowPublicIpAddress;
    	      this.environmentId = defaults.environmentId;
    	      this.expirationDate = defaults.expirationDate;
    	      this.galleryImageReference = defaults.galleryImageReference;
    	      this.isAuthenticationWithSshKey = defaults.isAuthenticationWithSshKey;
    	      this.labSubnetName = defaults.labSubnetName;
    	      this.labVirtualNetworkId = defaults.labVirtualNetworkId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkInterface = defaults.networkInterface;
    	      this.notes = defaults.notes;
    	      this.ownerObjectId = defaults.ownerObjectId;
    	      this.ownerUserPrincipalName = defaults.ownerUserPrincipalName;
    	      this.password = defaults.password;
    	      this.planId = defaults.planId;
    	      this.scheduleParameters = defaults.scheduleParameters;
    	      this.size = defaults.size;
    	      this.sshKey = defaults.sshKey;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder allowClaim(@Nullable Boolean allowClaim) {
            this.allowClaim = allowClaim;
            return this;
        }
        @CustomType.Setter
        public Builder artifacts(@Nullable List<ArtifactInstallPropertiesResponse> artifacts) {
            this.artifacts = artifacts;
            return this;
        }
        public Builder artifacts(ArtifactInstallPropertiesResponse... artifacts) {
            return artifacts(List.of(artifacts));
        }
        @CustomType.Setter
        public Builder bulkCreationParameters(@Nullable BulkCreationParametersResponse bulkCreationParameters) {
            this.bulkCreationParameters = bulkCreationParameters;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(@Nullable String createdDate) {
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder customImageId(@Nullable String customImageId) {
            this.customImageId = customImageId;
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskParameters(@Nullable List<DataDiskPropertiesResponse> dataDiskParameters) {
            this.dataDiskParameters = dataDiskParameters;
            return this;
        }
        public Builder dataDiskParameters(DataDiskPropertiesResponse... dataDiskParameters) {
            return dataDiskParameters(List.of(dataDiskParameters));
        }
        @CustomType.Setter
        public Builder disallowPublicIpAddress(@Nullable Boolean disallowPublicIpAddress) {
            this.disallowPublicIpAddress = disallowPublicIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder environmentId(@Nullable String environmentId) {
            this.environmentId = environmentId;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder galleryImageReference(@Nullable GalleryImageReferenceResponse galleryImageReference) {
            this.galleryImageReference = galleryImageReference;
            return this;
        }
        @CustomType.Setter
        public Builder isAuthenticationWithSshKey(@Nullable Boolean isAuthenticationWithSshKey) {
            this.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
            return this;
        }
        @CustomType.Setter
        public Builder labSubnetName(@Nullable String labSubnetName) {
            this.labSubnetName = labSubnetName;
            return this;
        }
        @CustomType.Setter
        public Builder labVirtualNetworkId(@Nullable String labVirtualNetworkId) {
            this.labVirtualNetworkId = labVirtualNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkInterface(@Nullable NetworkInterfacePropertiesResponse networkInterface) {
            this.networkInterface = networkInterface;
            return this;
        }
        @CustomType.Setter
        public Builder notes(@Nullable String notes) {
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder ownerObjectId(@Nullable String ownerObjectId) {
            this.ownerObjectId = ownerObjectId;
            return this;
        }
        @CustomType.Setter
        public Builder ownerUserPrincipalName(@Nullable String ownerUserPrincipalName) {
            this.ownerUserPrincipalName = ownerUserPrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder planId(@Nullable String planId) {
            this.planId = planId;
            return this;
        }
        @CustomType.Setter
        public Builder scheduleParameters(@Nullable List<ScheduleCreationParameterResponse> scheduleParameters) {
            this.scheduleParameters = scheduleParameters;
            return this;
        }
        public Builder scheduleParameters(ScheduleCreationParameterResponse... scheduleParameters) {
            return scheduleParameters(List.of(scheduleParameters));
        }
        @CustomType.Setter
        public Builder size(@Nullable String size) {
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sshKey(@Nullable String sshKey) {
            this.sshKey = sshKey;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(@Nullable String storageType) {
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public LabVirtualMachineCreationParameterResponse build() {
            final var o = new LabVirtualMachineCreationParameterResponse();
            o.allowClaim = allowClaim;
            o.artifacts = artifacts;
            o.bulkCreationParameters = bulkCreationParameters;
            o.createdDate = createdDate;
            o.customImageId = customImageId;
            o.dataDiskParameters = dataDiskParameters;
            o.disallowPublicIpAddress = disallowPublicIpAddress;
            o.environmentId = environmentId;
            o.expirationDate = expirationDate;
            o.galleryImageReference = galleryImageReference;
            o.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
            o.labSubnetName = labSubnetName;
            o.labVirtualNetworkId = labVirtualNetworkId;
            o.location = location;
            o.name = name;
            o.networkInterface = networkInterface;
            o.notes = notes;
            o.ownerObjectId = ownerObjectId;
            o.ownerUserPrincipalName = ownerUserPrincipalName;
            o.password = password;
            o.planId = planId;
            o.scheduleParameters = scheduleParameters;
            o.size = size;
            o.sshKey = sshKey;
            o.storageType = storageType;
            o.tags = tags;
            o.userName = userName;
            return o;
        }
    }
}
