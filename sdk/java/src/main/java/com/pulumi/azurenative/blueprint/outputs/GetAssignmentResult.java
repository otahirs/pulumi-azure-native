// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.blueprint.outputs;

import com.pulumi.azurenative.blueprint.outputs.AssignmentLockSettingsResponse;
import com.pulumi.azurenative.blueprint.outputs.AssignmentStatusResponse;
import com.pulumi.azurenative.blueprint.outputs.ManagedServiceIdentityResponse;
import com.pulumi.azurenative.blueprint.outputs.ParameterValueResponse;
import com.pulumi.azurenative.blueprint.outputs.ResourceGroupValueResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAssignmentResult {
    /**
     * @return ID of the published version of a blueprint definition.
     * 
     */
    private @Nullable String blueprintId;
    /**
     * @return Multi-line explain this resource.
     * 
     */
    private @Nullable String description;
    /**
     * @return One-liner string explain this resource.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return String Id used to locate any resource on Azure.
     * 
     */
    private String id;
    /**
     * @return Managed identity for this blueprint assignment.
     * 
     */
    private ManagedServiceIdentityResponse identity;
    /**
     * @return The location of this blueprint assignment.
     * 
     */
    private String location;
    /**
     * @return Defines how resources deployed by a blueprint assignment are locked.
     * 
     */
    private @Nullable AssignmentLockSettingsResponse locks;
    /**
     * @return Name of this resource.
     * 
     */
    private String name;
    /**
     * @return Blueprint assignment parameter values.
     * 
     */
    private Map<String,ParameterValueResponse> parameters;
    /**
     * @return State of the blueprint assignment.
     * 
     */
    private String provisioningState;
    /**
     * @return Names and locations of resource group placeholders.
     * 
     */
    private Map<String,ResourceGroupValueResponse> resourceGroups;
    /**
     * @return The target subscription scope of the blueprint assignment (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments, the property is required.
     * 
     */
    private @Nullable String scope;
    /**
     * @return Status of blueprint assignment. This field is readonly.
     * 
     */
    private AssignmentStatusResponse status;
    /**
     * @return Type of this resource.
     * 
     */
    private String type;

    private GetAssignmentResult() {}
    /**
     * @return ID of the published version of a blueprint definition.
     * 
     */
    public Optional<String> blueprintId() {
        return Optional.ofNullable(this.blueprintId);
    }
    /**
     * @return Multi-line explain this resource.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return One-liner string explain this resource.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return String Id used to locate any resource on Azure.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Managed identity for this blueprint assignment.
     * 
     */
    public ManagedServiceIdentityResponse identity() {
        return this.identity;
    }
    /**
     * @return The location of this blueprint assignment.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Defines how resources deployed by a blueprint assignment are locked.
     * 
     */
    public Optional<AssignmentLockSettingsResponse> locks() {
        return Optional.ofNullable(this.locks);
    }
    /**
     * @return Name of this resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Blueprint assignment parameter values.
     * 
     */
    public Map<String,ParameterValueResponse> parameters() {
        return this.parameters;
    }
    /**
     * @return State of the blueprint assignment.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Names and locations of resource group placeholders.
     * 
     */
    public Map<String,ResourceGroupValueResponse> resourceGroups() {
        return this.resourceGroups;
    }
    /**
     * @return The target subscription scope of the blueprint assignment (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments, the property is required.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Status of blueprint assignment. This field is readonly.
     * 
     */
    public AssignmentStatusResponse status() {
        return this.status;
    }
    /**
     * @return Type of this resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAssignmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String blueprintId;
        private @Nullable String description;
        private @Nullable String displayName;
        private String id;
        private ManagedServiceIdentityResponse identity;
        private String location;
        private @Nullable AssignmentLockSettingsResponse locks;
        private String name;
        private Map<String,ParameterValueResponse> parameters;
        private String provisioningState;
        private Map<String,ResourceGroupValueResponse> resourceGroups;
        private @Nullable String scope;
        private AssignmentStatusResponse status;
        private String type;
        public Builder() {}
        public Builder(GetAssignmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blueprintId = defaults.blueprintId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.locks = defaults.locks;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroups = defaults.resourceGroups;
    	      this.scope = defaults.scope;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder blueprintId(@Nullable String blueprintId) {
            this.blueprintId = blueprintId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(ManagedServiceIdentityResponse identity) {
            this.identity = Objects.requireNonNull(identity);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder locks(@Nullable AssignmentLockSettingsResponse locks) {
            this.locks = locks;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parameters(Map<String,ParameterValueResponse> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroups(Map<String,ResourceGroupValueResponse> resourceGroups) {
            this.resourceGroups = Objects.requireNonNull(resourceGroups);
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder status(AssignmentStatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetAssignmentResult build() {
            final var o = new GetAssignmentResult();
            o.blueprintId = blueprintId;
            o.description = description;
            o.displayName = displayName;
            o.id = id;
            o.identity = identity;
            o.location = location;
            o.locks = locks;
            o.name = name;
            o.parameters = parameters;
            o.provisioningState = provisioningState;
            o.resourceGroups = resourceGroups;
            o.scope = scope;
            o.status = status;
            o.type = type;
            return o;
        }
    }
}
