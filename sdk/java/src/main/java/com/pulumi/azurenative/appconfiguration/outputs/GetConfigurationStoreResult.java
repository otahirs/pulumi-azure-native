// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appconfiguration.outputs;

import com.pulumi.azurenative.appconfiguration.outputs.EncryptionPropertiesResponse;
import com.pulumi.azurenative.appconfiguration.outputs.PrivateEndpointConnectionReferenceResponse;
import com.pulumi.azurenative.appconfiguration.outputs.ResourceIdentityResponse;
import com.pulumi.azurenative.appconfiguration.outputs.SkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConfigurationStoreResult {
    /**
     * @return The creation date of configuration store.
     * 
     */
    private String creationDate;
    /**
     * @return The encryption settings of the configuration store.
     * 
     */
    private @Nullable EncryptionPropertiesResponse encryption;
    /**
     * @return The DNS endpoint where the configuration store API will be available.
     * 
     */
    private String endpoint;
    /**
     * @return The resource ID.
     * 
     */
    private String id;
    /**
     * @return The managed identity information, if configured.
     * 
     */
    private @Nullable ResourceIdentityResponse identity;
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    private String location;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The list of private endpoint connections that are set up for this resource.
     * 
     */
    private List<PrivateEndpointConnectionReferenceResponse> privateEndpointConnections;
    /**
     * @return The provisioning state of the configuration store.
     * 
     */
    private String provisioningState;
    /**
     * @return Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     * 
     */
    private @Nullable String publicNetworkAccess;
    /**
     * @return The sku of the configuration store.
     * 
     */
    private SkuResponse sku;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;

    private GetConfigurationStoreResult() {}
    /**
     * @return The creation date of configuration store.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The encryption settings of the configuration store.
     * 
     */
    public Optional<EncryptionPropertiesResponse> encryption() {
        return Optional.ofNullable(this.encryption);
    }
    /**
     * @return The DNS endpoint where the configuration store API will be available.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The managed identity information, if configured.
     * 
     */
    public Optional<ResourceIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of private endpoint connections that are set up for this resource.
     * 
     */
    public List<PrivateEndpointConnectionReferenceResponse> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * @return The provisioning state of the configuration store.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     * 
     */
    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }
    /**
     * @return The sku of the configuration store.
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigurationStoreResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationDate;
        private @Nullable EncryptionPropertiesResponse encryption;
        private String endpoint;
        private String id;
        private @Nullable ResourceIdentityResponse identity;
        private String location;
        private String name;
        private List<PrivateEndpointConnectionReferenceResponse> privateEndpointConnections;
        private String provisioningState;
        private @Nullable String publicNetworkAccess;
        private SkuResponse sku;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetConfigurationStoreResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationDate = defaults.creationDate;
    	      this.encryption = defaults.encryption;
    	      this.endpoint = defaults.endpoint;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder encryption(@Nullable EncryptionPropertiesResponse encryption) {
            this.encryption = encryption;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable ResourceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointConnections(List<PrivateEndpointConnectionReferenceResponse> privateEndpointConnections) {
            this.privateEndpointConnections = Objects.requireNonNull(privateEndpointConnections);
            return this;
        }
        public Builder privateEndpointConnections(PrivateEndpointConnectionReferenceResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetConfigurationStoreResult build() {
            final var o = new GetConfigurationStoreResult();
            o.creationDate = creationDate;
            o.encryption = encryption;
            o.endpoint = endpoint;
            o.id = id;
            o.identity = identity;
            o.location = location;
            o.name = name;
            o.privateEndpointConnections = privateEndpointConnections;
            o.provisioningState = provisioningState;
            o.publicNetworkAccess = publicNetworkAccess;
            o.sku = sku;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
