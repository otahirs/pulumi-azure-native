// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.azurenative.machinelearningservices.outputs.DatasetResponseDataPath;
import com.pulumi.azurenative.machinelearningservices.outputs.DatasetStateResponse;
import com.pulumi.azurenative.machinelearningservices.outputs.UserInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetResponseLatest {
    /**
     * @return User who created.
     * 
     */
    private @Nullable UserInfoResponse createdBy;
    /**
     * @return The dataset creation time (UTC).
     * 
     */
    private String createdTime;
    /**
     * @return  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     * 
     */
    private @Nullable DatasetResponseDataPath dataPath;
    /**
     * @return Dataflow Json
     * 
     */
    private String dataflow;
    /**
     * @return Dataset state
     * 
     */
    private @Nullable DatasetStateResponse datasetDefinitionState;
    /**
     * @return Unique Dataset identifier.
     * 
     */
    private String datasetId;
    /**
     * @return Description about the dataset.
     * 
     */
    private String description;
    /**
     * @return eTag description
     * 
     */
    private String etag;
    /**
     * @return Dataset FileType, specified by user.
     * 
     */
    private String fileType;
    /**
     * @return The dataset last modified time (UTC).
     * 
     */
    private String modifiedTime;
    /**
     * @return Summary of Definition changes.
     * 
     */
    private String notes;
    /**
     * @return Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     * 
     */
    private Boolean partitionFormatInPath;
    /**
     * @return Properties stores information like name of time series column for time series dataset.
     * 
     */
    private @Nullable Map<String,Object> properties;
    /**
     * @return Indicates the saved dataset this definition is mapping to, populated on Get.
     * 
     */
    private String savedDatasetId;
    /**
     * @return Tags associated with the dataset.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return  Telemetry information about the dataset including information like which service the dataset was created from.
     * 
     */
    private Map<String,String> telemetryInfo;
    /**
     * @return  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     * 
     */
    private Boolean useDescriptionTagsFromDefinition;
    /**
     * @return An identifier uniquely identifies a definition change.
     * 
     */
    private String versionId;

    private DatasetResponseLatest() {}
    /**
     * @return User who created.
     * 
     */
    public Optional<UserInfoResponse> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return The dataset creation time (UTC).
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return  Datastore and reference to location of data such as relativePath, Sql Query and etc.
     * 
     */
    public Optional<DatasetResponseDataPath> dataPath() {
        return Optional.ofNullable(this.dataPath);
    }
    /**
     * @return Dataflow Json
     * 
     */
    public String dataflow() {
        return this.dataflow;
    }
    /**
     * @return Dataset state
     * 
     */
    public Optional<DatasetStateResponse> datasetDefinitionState() {
        return Optional.ofNullable(this.datasetDefinitionState);
    }
    /**
     * @return Unique Dataset identifier.
     * 
     */
    public String datasetId() {
        return this.datasetId;
    }
    /**
     * @return Description about the dataset.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return eTag description
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Dataset FileType, specified by user.
     * 
     */
    public String fileType() {
        return this.fileType;
    }
    /**
     * @return The dataset last modified time (UTC).
     * 
     */
    public String modifiedTime() {
        return this.modifiedTime;
    }
    /**
     * @return Summary of Definition changes.
     * 
     */
    public String notes() {
        return this.notes;
    }
    /**
     * @return Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
     * 
     */
    public Boolean partitionFormatInPath() {
        return this.partitionFormatInPath;
    }
    /**
     * @return Properties stores information like name of time series column for time series dataset.
     * 
     */
    public Map<String,Object> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }
    /**
     * @return Indicates the saved dataset this definition is mapping to, populated on Get.
     * 
     */
    public String savedDatasetId() {
        return this.savedDatasetId;
    }
    /**
     * @return Tags associated with the dataset.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return  Telemetry information about the dataset including information like which service the dataset was created from.
     * 
     */
    public Map<String,String> telemetryInfo() {
        return this.telemetryInfo;
    }
    /**
     * @return  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
     * 
     */
    public Boolean useDescriptionTagsFromDefinition() {
        return this.useDescriptionTagsFromDefinition;
    }
    /**
     * @return An identifier uniquely identifies a definition change.
     * 
     */
    public String versionId() {
        return this.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetResponseLatest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable UserInfoResponse createdBy;
        private String createdTime;
        private @Nullable DatasetResponseDataPath dataPath;
        private String dataflow;
        private @Nullable DatasetStateResponse datasetDefinitionState;
        private String datasetId;
        private String description;
        private String etag;
        private String fileType;
        private String modifiedTime;
        private String notes;
        private Boolean partitionFormatInPath;
        private @Nullable Map<String,Object> properties;
        private String savedDatasetId;
        private Map<String,String> tags;
        private Map<String,String> telemetryInfo;
        private Boolean useDescriptionTagsFromDefinition;
        private String versionId;
        public Builder() {}
        public Builder(DatasetResponseLatest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBy = defaults.createdBy;
    	      this.createdTime = defaults.createdTime;
    	      this.dataPath = defaults.dataPath;
    	      this.dataflow = defaults.dataflow;
    	      this.datasetDefinitionState = defaults.datasetDefinitionState;
    	      this.datasetId = defaults.datasetId;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.fileType = defaults.fileType;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.notes = defaults.notes;
    	      this.partitionFormatInPath = defaults.partitionFormatInPath;
    	      this.properties = defaults.properties;
    	      this.savedDatasetId = defaults.savedDatasetId;
    	      this.tags = defaults.tags;
    	      this.telemetryInfo = defaults.telemetryInfo;
    	      this.useDescriptionTagsFromDefinition = defaults.useDescriptionTagsFromDefinition;
    	      this.versionId = defaults.versionId;
        }

        @CustomType.Setter
        public Builder createdBy(@Nullable UserInfoResponse createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        @CustomType.Setter
        public Builder dataPath(@Nullable DatasetResponseDataPath dataPath) {
            this.dataPath = dataPath;
            return this;
        }
        @CustomType.Setter
        public Builder dataflow(String dataflow) {
            this.dataflow = Objects.requireNonNull(dataflow);
            return this;
        }
        @CustomType.Setter
        public Builder datasetDefinitionState(@Nullable DatasetStateResponse datasetDefinitionState) {
            this.datasetDefinitionState = datasetDefinitionState;
            return this;
        }
        @CustomType.Setter
        public Builder datasetId(String datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder fileType(String fileType) {
            this.fileType = Objects.requireNonNull(fileType);
            return this;
        }
        @CustomType.Setter
        public Builder modifiedTime(String modifiedTime) {
            this.modifiedTime = Objects.requireNonNull(modifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder notes(String notes) {
            this.notes = Objects.requireNonNull(notes);
            return this;
        }
        @CustomType.Setter
        public Builder partitionFormatInPath(Boolean partitionFormatInPath) {
            this.partitionFormatInPath = Objects.requireNonNull(partitionFormatInPath);
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable Map<String,Object> properties) {
            this.properties = properties;
            return this;
        }
        @CustomType.Setter
        public Builder savedDatasetId(String savedDatasetId) {
            this.savedDatasetId = Objects.requireNonNull(savedDatasetId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder telemetryInfo(Map<String,String> telemetryInfo) {
            this.telemetryInfo = Objects.requireNonNull(telemetryInfo);
            return this;
        }
        @CustomType.Setter
        public Builder useDescriptionTagsFromDefinition(Boolean useDescriptionTagsFromDefinition) {
            this.useDescriptionTagsFromDefinition = Objects.requireNonNull(useDescriptionTagsFromDefinition);
            return this;
        }
        @CustomType.Setter
        public Builder versionId(String versionId) {
            this.versionId = Objects.requireNonNull(versionId);
            return this;
        }
        public DatasetResponseLatest build() {
            final var o = new DatasetResponseLatest();
            o.createdBy = createdBy;
            o.createdTime = createdTime;
            o.dataPath = dataPath;
            o.dataflow = dataflow;
            o.datasetDefinitionState = datasetDefinitionState;
            o.datasetId = datasetId;
            o.description = description;
            o.etag = etag;
            o.fileType = fileType;
            o.modifiedTime = modifiedTime;
            o.notes = notes;
            o.partitionFormatInPath = partitionFormatInPath;
            o.properties = properties;
            o.savedDatasetId = savedDatasetId;
            o.tags = tags;
            o.telemetryInfo = telemetryInfo;
            o.useDescriptionTagsFromDefinition = useDescriptionTagsFromDefinition;
            o.versionId = versionId;
            return o;
        }
    }
}
