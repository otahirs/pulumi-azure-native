// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.avs.outputs;

import com.pulumi.azurenative.avs.outputs.CircuitResponse;
import com.pulumi.azurenative.avs.outputs.EndpointsResponse;
import com.pulumi.azurenative.avs.outputs.IdentitySourceResponse;
import com.pulumi.azurenative.avs.outputs.ManagementClusterResponse;
import com.pulumi.azurenative.avs.outputs.SkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPrivateCloudResult {
    /**
     * @return An ExpressRoute Circuit
     * 
     */
    private @Nullable CircuitResponse circuit;
    /**
     * @return The endpoints
     * 
     */
    private EndpointsResponse endpoints;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return vCenter Single Sign On Identity Sources
     * 
     */
    private @Nullable List<IdentitySourceResponse> identitySources;
    /**
     * @return Connectivity to internet is enabled or disabled
     * 
     */
    private @Nullable String internet;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return The default cluster used for management
     * 
     */
    private ManagementClusterResponse managementCluster;
    /**
     * @return Network used to access vCenter Server and NSX-T Manager
     * 
     */
    private String managementNetwork;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
     * 
     */
    private String networkBlock;
    /**
     * @return Thumbprint of the NSX-T Manager SSL certificate
     * 
     */
    private String nsxtCertificateThumbprint;
    /**
     * @return Optionally, set the NSX-T Manager password when the private cloud is created
     * 
     */
    private @Nullable String nsxtPassword;
    /**
     * @return Used for virtual machine cold migration, cloning, and snapshot migration
     * 
     */
    private String provisioningNetwork;
    /**
     * @return The provisioning state
     * 
     */
    private String provisioningState;
    /**
     * @return The private cloud SKU
     * 
     */
    private SkuResponse sku;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return Thumbprint of the vCenter Server SSL certificate
     * 
     */
    private String vcenterCertificateThumbprint;
    /**
     * @return Optionally, set the vCenter admin password when the private cloud is created
     * 
     */
    private @Nullable String vcenterPassword;
    /**
     * @return Used for live migration of virtual machines
     * 
     */
    private String vmotionNetwork;

    private GetPrivateCloudResult() {}
    /**
     * @return An ExpressRoute Circuit
     * 
     */
    public Optional<CircuitResponse> circuit() {
        return Optional.ofNullable(this.circuit);
    }
    /**
     * @return The endpoints
     * 
     */
    public EndpointsResponse endpoints() {
        return this.endpoints;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return vCenter Single Sign On Identity Sources
     * 
     */
    public List<IdentitySourceResponse> identitySources() {
        return this.identitySources == null ? List.of() : this.identitySources;
    }
    /**
     * @return Connectivity to internet is enabled or disabled
     * 
     */
    public Optional<String> internet() {
        return Optional.ofNullable(this.internet);
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The default cluster used for management
     * 
     */
    public ManagementClusterResponse managementCluster() {
        return this.managementCluster;
    }
    /**
     * @return Network used to access vCenter Server and NSX-T Manager
     * 
     */
    public String managementNetwork() {
        return this.managementNetwork;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
     * 
     */
    public String networkBlock() {
        return this.networkBlock;
    }
    /**
     * @return Thumbprint of the NSX-T Manager SSL certificate
     * 
     */
    public String nsxtCertificateThumbprint() {
        return this.nsxtCertificateThumbprint;
    }
    /**
     * @return Optionally, set the NSX-T Manager password when the private cloud is created
     * 
     */
    public Optional<String> nsxtPassword() {
        return Optional.ofNullable(this.nsxtPassword);
    }
    /**
     * @return Used for virtual machine cold migration, cloning, and snapshot migration
     * 
     */
    public String provisioningNetwork() {
        return this.provisioningNetwork;
    }
    /**
     * @return The provisioning state
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The private cloud SKU
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Thumbprint of the vCenter Server SSL certificate
     * 
     */
    public String vcenterCertificateThumbprint() {
        return this.vcenterCertificateThumbprint;
    }
    /**
     * @return Optionally, set the vCenter admin password when the private cloud is created
     * 
     */
    public Optional<String> vcenterPassword() {
        return Optional.ofNullable(this.vcenterPassword);
    }
    /**
     * @return Used for live migration of virtual machines
     * 
     */
    public String vmotionNetwork() {
        return this.vmotionNetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateCloudResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable CircuitResponse circuit;
        private EndpointsResponse endpoints;
        private String id;
        private @Nullable List<IdentitySourceResponse> identitySources;
        private @Nullable String internet;
        private String location;
        private ManagementClusterResponse managementCluster;
        private String managementNetwork;
        private String name;
        private String networkBlock;
        private String nsxtCertificateThumbprint;
        private @Nullable String nsxtPassword;
        private String provisioningNetwork;
        private String provisioningState;
        private SkuResponse sku;
        private @Nullable Map<String,String> tags;
        private String type;
        private String vcenterCertificateThumbprint;
        private @Nullable String vcenterPassword;
        private String vmotionNetwork;
        public Builder() {}
        public Builder(GetPrivateCloudResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.circuit = defaults.circuit;
    	      this.endpoints = defaults.endpoints;
    	      this.id = defaults.id;
    	      this.identitySources = defaults.identitySources;
    	      this.internet = defaults.internet;
    	      this.location = defaults.location;
    	      this.managementCluster = defaults.managementCluster;
    	      this.managementNetwork = defaults.managementNetwork;
    	      this.name = defaults.name;
    	      this.networkBlock = defaults.networkBlock;
    	      this.nsxtCertificateThumbprint = defaults.nsxtCertificateThumbprint;
    	      this.nsxtPassword = defaults.nsxtPassword;
    	      this.provisioningNetwork = defaults.provisioningNetwork;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vcenterCertificateThumbprint = defaults.vcenterCertificateThumbprint;
    	      this.vcenterPassword = defaults.vcenterPassword;
    	      this.vmotionNetwork = defaults.vmotionNetwork;
        }

        @CustomType.Setter
        public Builder circuit(@Nullable CircuitResponse circuit) {
            this.circuit = circuit;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(EndpointsResponse endpoints) {
            this.endpoints = Objects.requireNonNull(endpoints);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identitySources(@Nullable List<IdentitySourceResponse> identitySources) {
            this.identitySources = identitySources;
            return this;
        }
        public Builder identitySources(IdentitySourceResponse... identitySources) {
            return identitySources(List.of(identitySources));
        }
        @CustomType.Setter
        public Builder internet(@Nullable String internet) {
            this.internet = internet;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder managementCluster(ManagementClusterResponse managementCluster) {
            this.managementCluster = Objects.requireNonNull(managementCluster);
            return this;
        }
        @CustomType.Setter
        public Builder managementNetwork(String managementNetwork) {
            this.managementNetwork = Objects.requireNonNull(managementNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkBlock(String networkBlock) {
            this.networkBlock = Objects.requireNonNull(networkBlock);
            return this;
        }
        @CustomType.Setter
        public Builder nsxtCertificateThumbprint(String nsxtCertificateThumbprint) {
            this.nsxtCertificateThumbprint = Objects.requireNonNull(nsxtCertificateThumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder nsxtPassword(@Nullable String nsxtPassword) {
            this.nsxtPassword = nsxtPassword;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningNetwork(String provisioningNetwork) {
            this.provisioningNetwork = Objects.requireNonNull(provisioningNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder vcenterCertificateThumbprint(String vcenterCertificateThumbprint) {
            this.vcenterCertificateThumbprint = Objects.requireNonNull(vcenterCertificateThumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder vcenterPassword(@Nullable String vcenterPassword) {
            this.vcenterPassword = vcenterPassword;
            return this;
        }
        @CustomType.Setter
        public Builder vmotionNetwork(String vmotionNetwork) {
            this.vmotionNetwork = Objects.requireNonNull(vmotionNetwork);
            return this;
        }
        public GetPrivateCloudResult build() {
            final var o = new GetPrivateCloudResult();
            o.circuit = circuit;
            o.endpoints = endpoints;
            o.id = id;
            o.identitySources = identitySources;
            o.internet = internet;
            o.location = location;
            o.managementCluster = managementCluster;
            o.managementNetwork = managementNetwork;
            o.name = name;
            o.networkBlock = networkBlock;
            o.nsxtCertificateThumbprint = nsxtCertificateThumbprint;
            o.nsxtPassword = nsxtPassword;
            o.provisioningNetwork = provisioningNetwork;
            o.provisioningState = provisioningState;
            o.sku = sku;
            o.tags = tags;
            o.type = type;
            o.vcenterCertificateThumbprint = vcenterCertificateThumbprint;
            o.vcenterPassword = vcenterPassword;
            o.vmotionNetwork = vmotionNetwork;
            return o;
        }
    }
}
