// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLinkedServiceResult {
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return The provisioning state of the linked service.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
     * 
     */
    private @Nullable String resourceId;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;
    /**
     * @return The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
     * 
     */
    private @Nullable String writeAccessResourceId;

    private GetLinkedServiceResult() {}
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning state of the linked service.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
     * 
     */
    public Optional<String> writeAccessResourceId() {
        return Optional.ofNullable(this.writeAccessResourceId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLinkedServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String name;
        private @Nullable String provisioningState;
        private @Nullable String resourceId;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable String writeAccessResourceId;
        public Builder() {}
        public Builder(GetLinkedServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceId = defaults.resourceId;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.writeAccessResourceId = defaults.writeAccessResourceId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(@Nullable String resourceId) {
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder writeAccessResourceId(@Nullable String writeAccessResourceId) {
            this.writeAccessResourceId = writeAccessResourceId;
            return this;
        }
        public GetLinkedServiceResult build() {
            final var o = new GetLinkedServiceResult();
            o.id = id;
            o.name = name;
            o.provisioningState = provisioningState;
            o.resourceId = resourceId;
            o.tags = tags;
            o.type = type;
            o.writeAccessResourceId = writeAccessResourceId;
            return o;
        }
    }
}
