// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecutePipelineActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.outputs.PipelineReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.UserPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExecutePipelineActivityResponse {
    /**
     * @return Activity depends on condition.
     * 
     */
    private @Nullable List<ActivityDependencyResponse> dependsOn;
    /**
     * @return Activity description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Activity name.
     * 
     */
    private String name;
    /**
     * @return Pipeline parameters.
     * 
     */
    private @Nullable Map<String,Object> parameters;
    /**
     * @return Pipeline reference.
     * 
     */
    private PipelineReferenceResponse pipeline;
    /**
     * @return Execute pipeline activity policy.
     * 
     */
    private @Nullable ExecutePipelineActivityPolicyResponse policy;
    /**
     * @return Type of activity.
     * Expected value is &#39;ExecutePipeline&#39;.
     * 
     */
    private String type;
    /**
     * @return Activity user properties.
     * 
     */
    private @Nullable List<UserPropertyResponse> userProperties;
    /**
     * @return Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
     * 
     */
    private @Nullable Boolean waitOnCompletion;

    private ExecutePipelineActivityResponse() {}
    /**
     * @return Activity depends on condition.
     * 
     */
    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Pipeline parameters.
     * 
     */
    public Map<String,Object> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Pipeline reference.
     * 
     */
    public PipelineReferenceResponse pipeline() {
        return this.pipeline;
    }
    /**
     * @return Execute pipeline activity policy.
     * 
     */
    public Optional<ExecutePipelineActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return Type of activity.
     * Expected value is &#39;ExecutePipeline&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Activity user properties.
     * 
     */
    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }
    /**
     * @return Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
     * 
     */
    public Optional<Boolean> waitOnCompletion() {
        return Optional.ofNullable(this.waitOnCompletion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutePipelineActivityResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private String name;
        private @Nullable Map<String,Object> parameters;
        private PipelineReferenceResponse pipeline;
        private @Nullable ExecutePipelineActivityPolicyResponse policy;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;
        private @Nullable Boolean waitOnCompletion;
        public Builder() {}
        public Builder(ExecutePipelineActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.pipeline = defaults.pipeline;
    	      this.policy = defaults.policy;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
    	      this.waitOnCompletion = defaults.waitOnCompletion;
        }

        @CustomType.Setter
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,Object> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder pipeline(PipelineReferenceResponse pipeline) {
            this.pipeline = Objects.requireNonNull(pipeline);
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable ExecutePipelineActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }
        @CustomType.Setter
        public Builder waitOnCompletion(@Nullable Boolean waitOnCompletion) {
            this.waitOnCompletion = waitOnCompletion;
            return this;
        }
        public ExecutePipelineActivityResponse build() {
            final var o = new ExecutePipelineActivityResponse();
            o.dependsOn = dependsOn;
            o.description = description;
            o.name = name;
            o.parameters = parameters;
            o.pipeline = pipeline;
            o.policy = policy;
            o.type = type;
            o.userProperties = userProperties;
            o.waitOnCompletion = waitOnCompletion;
            return o;
        }
    }
}
