// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AzureFileStorageLinkedServiceResponse {
    /**
     * @return The Azure key vault secret reference of accountKey in connection string.
     * 
     */
    private @Nullable AzureKeyVaultSecretReferenceResponse accountKey;
    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return The integration runtime reference.
     * 
     */
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;
    /**
     * @return The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    private @Nullable Object connectionString;
    /**
     * @return Linked service description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object encryptedCredential;
    /**
     * @return The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object fileShare;
    /**
     * @return Host name of the server. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object host;
    /**
     * @return Parameters for linked service.
     * 
     */
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;
    /**
     * @return Password to logon the server.
     * 
     */
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;
    /**
     * @return The Azure key vault secret reference of sasToken in sas uri.
     * 
     */
    private @Nullable AzureKeyVaultSecretReferenceResponse sasToken;
    /**
     * @return SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    private @Nullable Object sasUri;
    /**
     * @return The azure file share snapshot version. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object snapshot;
    /**
     * @return Type of linked service.
     * Expected value is &#39;AzureFileStorage&#39;.
     * 
     */
    private String type;
    /**
     * @return User ID to logon the server. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object userId;

    private AzureFileStorageLinkedServiceResponse() {}
    /**
     * @return The Azure key vault secret reference of accountKey in connection string.
     * 
     */
    public Optional<AzureKeyVaultSecretReferenceResponse> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }
    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }
    /**
     * @return The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    public Optional<Object> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }
    /**
     * @return Linked service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }
    /**
     * @return The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> fileShare() {
        return Optional.ofNullable(this.fileShare);
    }
    /**
     * @return Host name of the server. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Parameters for linked service.
     * 
     */
    public Map<String,ParameterSpecificationResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Password to logon the server.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The Azure key vault secret reference of sasToken in sas uri.
     * 
     */
    public Optional<AzureKeyVaultSecretReferenceResponse> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }
    /**
     * @return SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    public Optional<Object> sasUri() {
        return Optional.ofNullable(this.sasUri);
    }
    /**
     * @return The azure file share snapshot version. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }
    /**
     * @return Type of linked service.
     * Expected value is &#39;AzureFileStorage&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return User ID to logon the server. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> userId() {
        return Optional.ofNullable(this.userId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureFileStorageLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AzureKeyVaultSecretReferenceResponse accountKey;
        private @Nullable List<Object> annotations;
        private @Nullable IntegrationRuntimeReferenceResponse connectVia;
        private @Nullable Object connectionString;
        private @Nullable String description;
        private @Nullable Object encryptedCredential;
        private @Nullable Object fileShare;
        private @Nullable Object host;
        private @Nullable Map<String,ParameterSpecificationResponse> parameters;
        private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;
        private @Nullable AzureKeyVaultSecretReferenceResponse sasToken;
        private @Nullable Object sasUri;
        private @Nullable Object snapshot;
        private String type;
        private @Nullable Object userId;
        public Builder() {}
        public Builder(AzureFileStorageLinkedServiceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountKey = defaults.accountKey;
    	      this.annotations = defaults.annotations;
    	      this.connectVia = defaults.connectVia;
    	      this.connectionString = defaults.connectionString;
    	      this.description = defaults.description;
    	      this.encryptedCredential = defaults.encryptedCredential;
    	      this.fileShare = defaults.fileShare;
    	      this.host = defaults.host;
    	      this.parameters = defaults.parameters;
    	      this.password = defaults.password;
    	      this.sasToken = defaults.sasToken;
    	      this.sasUri = defaults.sasUri;
    	      this.snapshot = defaults.snapshot;
    	      this.type = defaults.type;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder accountKey(@Nullable AzureKeyVaultSecretReferenceResponse accountKey) {
            this.accountKey = accountKey;
            return this;
        }
        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            this.connectVia = connectVia;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(@Nullable Object connectionString) {
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            this.encryptedCredential = encryptedCredential;
            return this;
        }
        @CustomType.Setter
        public Builder fileShare(@Nullable Object fileShare) {
            this.fileShare = fileShare;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable Object host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sasToken(@Nullable AzureKeyVaultSecretReferenceResponse sasToken) {
            this.sasToken = sasToken;
            return this;
        }
        @CustomType.Setter
        public Builder sasUri(@Nullable Object sasUri) {
            this.sasUri = sasUri;
            return this;
        }
        @CustomType.Setter
        public Builder snapshot(@Nullable Object snapshot) {
            this.snapshot = snapshot;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable Object userId) {
            this.userId = userId;
            return this;
        }
        public AzureFileStorageLinkedServiceResponse build() {
            final var o = new AzureFileStorageLinkedServiceResponse();
            o.accountKey = accountKey;
            o.annotations = annotations;
            o.connectVia = connectVia;
            o.connectionString = connectionString;
            o.description = description;
            o.encryptedCredential = encryptedCredential;
            o.fileShare = fileShare;
            o.host = host;
            o.parameters = parameters;
            o.password = password;
            o.sasToken = sasToken;
            o.sasUri = sasUri;
            o.snapshot = snapshot;
            o.type = type;
            o.userId = userId;
            return o;
        }
    }
}
