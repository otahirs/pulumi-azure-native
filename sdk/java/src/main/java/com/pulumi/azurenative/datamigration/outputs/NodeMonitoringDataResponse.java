// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class NodeMonitoringDataResponse {
    /**
     * @return  Unmatched properties from the message are deserialized in this collection.
     * 
     */
    private Map<String,Object> additionalProperties;
    /**
     * @return Available memory (MB) on the integration runtime node.
     * 
     */
    private Integer availableMemoryInMB;
    /**
     * @return Maximum concurrent jobs on the integration runtime node.
     * 
     */
    private Integer concurrentJobsLimit;
    /**
     * @return The number of jobs currently running on the integration runtime node.
     * 
     */
    private Integer concurrentJobsRunning;
    /**
     * @return CPU percentage on the integration runtime node.
     * 
     */
    private Integer cpuUtilization;
    /**
     * @return The maximum concurrent jobs in this integration runtime.
     * 
     */
    private Integer maxConcurrentJobs;
    /**
     * @return Name of the integration runtime node.
     * 
     */
    private String nodeName;
    /**
     * @return Received bytes on the integration runtime node.
     * 
     */
    private Double receivedBytes;
    /**
     * @return Sent bytes on the integration runtime node.
     * 
     */
    private Double sentBytes;

    private NodeMonitoringDataResponse() {}
    /**
     * @return  Unmatched properties from the message are deserialized in this collection.
     * 
     */
    public Map<String,Object> additionalProperties() {
        return this.additionalProperties;
    }
    /**
     * @return Available memory (MB) on the integration runtime node.
     * 
     */
    public Integer availableMemoryInMB() {
        return this.availableMemoryInMB;
    }
    /**
     * @return Maximum concurrent jobs on the integration runtime node.
     * 
     */
    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }
    /**
     * @return The number of jobs currently running on the integration runtime node.
     * 
     */
    public Integer concurrentJobsRunning() {
        return this.concurrentJobsRunning;
    }
    /**
     * @return CPU percentage on the integration runtime node.
     * 
     */
    public Integer cpuUtilization() {
        return this.cpuUtilization;
    }
    /**
     * @return The maximum concurrent jobs in this integration runtime.
     * 
     */
    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }
    /**
     * @return Name of the integration runtime node.
     * 
     */
    public String nodeName() {
        return this.nodeName;
    }
    /**
     * @return Received bytes on the integration runtime node.
     * 
     */
    public Double receivedBytes() {
        return this.receivedBytes;
    }
    /**
     * @return Sent bytes on the integration runtime node.
     * 
     */
    public Double sentBytes() {
        return this.sentBytes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeMonitoringDataResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> additionalProperties;
        private Integer availableMemoryInMB;
        private Integer concurrentJobsLimit;
        private Integer concurrentJobsRunning;
        private Integer cpuUtilization;
        private Integer maxConcurrentJobs;
        private String nodeName;
        private Double receivedBytes;
        private Double sentBytes;
        public Builder() {}
        public Builder(NodeMonitoringDataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalProperties = defaults.additionalProperties;
    	      this.availableMemoryInMB = defaults.availableMemoryInMB;
    	      this.concurrentJobsLimit = defaults.concurrentJobsLimit;
    	      this.concurrentJobsRunning = defaults.concurrentJobsRunning;
    	      this.cpuUtilization = defaults.cpuUtilization;
    	      this.maxConcurrentJobs = defaults.maxConcurrentJobs;
    	      this.nodeName = defaults.nodeName;
    	      this.receivedBytes = defaults.receivedBytes;
    	      this.sentBytes = defaults.sentBytes;
        }

        @CustomType.Setter
        public Builder additionalProperties(Map<String,Object> additionalProperties) {
            this.additionalProperties = Objects.requireNonNull(additionalProperties);
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryInMB(Integer availableMemoryInMB) {
            this.availableMemoryInMB = Objects.requireNonNull(availableMemoryInMB);
            return this;
        }
        @CustomType.Setter
        public Builder concurrentJobsLimit(Integer concurrentJobsLimit) {
            this.concurrentJobsLimit = Objects.requireNonNull(concurrentJobsLimit);
            return this;
        }
        @CustomType.Setter
        public Builder concurrentJobsRunning(Integer concurrentJobsRunning) {
            this.concurrentJobsRunning = Objects.requireNonNull(concurrentJobsRunning);
            return this;
        }
        @CustomType.Setter
        public Builder cpuUtilization(Integer cpuUtilization) {
            this.cpuUtilization = Objects.requireNonNull(cpuUtilization);
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentJobs(Integer maxConcurrentJobs) {
            this.maxConcurrentJobs = Objects.requireNonNull(maxConcurrentJobs);
            return this;
        }
        @CustomType.Setter
        public Builder nodeName(String nodeName) {
            this.nodeName = Objects.requireNonNull(nodeName);
            return this;
        }
        @CustomType.Setter
        public Builder receivedBytes(Double receivedBytes) {
            this.receivedBytes = Objects.requireNonNull(receivedBytes);
            return this;
        }
        @CustomType.Setter
        public Builder sentBytes(Double sentBytes) {
            this.sentBytes = Objects.requireNonNull(sentBytes);
            return this;
        }
        public NodeMonitoringDataResponse build() {
            final var o = new NodeMonitoringDataResponse();
            o.additionalProperties = additionalProperties;
            o.availableMemoryInMB = availableMemoryInMB;
            o.concurrentJobsLimit = concurrentJobsLimit;
            o.concurrentJobsRunning = concurrentJobsRunning;
            o.cpuUtilization = cpuUtilization;
            o.maxConcurrentJobs = maxConcurrentJobs;
            o.nodeName = nodeName;
            o.receivedBytes = receivedBytes;
            o.sentBytes = sentBytes;
            return o;
        }
    }
}
