// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.HlsSettingsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TextTrackResponse {
    /**
     * @return The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The file name to the source file. This file is located in the storage container of the asset.
     * 
     */
    private @Nullable String fileName;
    /**
     * @return The HLS specific setting for the text track.
     * 
     */
    private @Nullable HlsSettingsResponse hlsSettings;
    /**
     * @return The RFC5646 language code for the text track.
     * 
     */
    private String languageCode;
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.TextTrack&#39;.
     * 
     */
    private String odataType;
    /**
     * @return When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
     * 
     */
    private @Nullable String playerVisibility;

    private TextTrackResponse() {}
    /**
     * @return The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The file name to the source file. This file is located in the storage container of the asset.
     * 
     */
    public Optional<String> fileName() {
        return Optional.ofNullable(this.fileName);
    }
    /**
     * @return The HLS specific setting for the text track.
     * 
     */
    public Optional<HlsSettingsResponse> hlsSettings() {
        return Optional.ofNullable(this.hlsSettings);
    }
    /**
     * @return The RFC5646 language code for the text track.
     * 
     */
    public String languageCode() {
        return this.languageCode;
    }
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.TextTrack&#39;.
     * 
     */
    public String odataType() {
        return this.odataType;
    }
    /**
     * @return When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
     * 
     */
    public Optional<String> playerVisibility() {
        return Optional.ofNullable(this.playerVisibility);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TextTrackResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String displayName;
        private @Nullable String fileName;
        private @Nullable HlsSettingsResponse hlsSettings;
        private String languageCode;
        private String odataType;
        private @Nullable String playerVisibility;
        public Builder() {}
        public Builder(TextTrackResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayName = defaults.displayName;
    	      this.fileName = defaults.fileName;
    	      this.hlsSettings = defaults.hlsSettings;
    	      this.languageCode = defaults.languageCode;
    	      this.odataType = defaults.odataType;
    	      this.playerVisibility = defaults.playerVisibility;
        }

        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(@Nullable String fileName) {
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder hlsSettings(@Nullable HlsSettingsResponse hlsSettings) {
            this.hlsSettings = hlsSettings;
            return this;
        }
        @CustomType.Setter
        public Builder languageCode(String languageCode) {
            this.languageCode = Objects.requireNonNull(languageCode);
            return this;
        }
        @CustomType.Setter
        public Builder odataType(String odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        @CustomType.Setter
        public Builder playerVisibility(@Nullable String playerVisibility) {
            this.playerVisibility = playerVisibility;
            return this;
        }
        public TextTrackResponse build() {
            final var o = new TextTrackResponse();
            o.displayName = displayName;
            o.fileName = fileName;
            o.hlsSettings = hlsSettings;
            o.languageCode = languageCode;
            o.odataType = odataType;
            o.playerVisibility = playerVisibility;
            return o;
        }
    }
}
