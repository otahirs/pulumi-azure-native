// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.timeseriesinsights.outputs;

import com.pulumi.azurenative.timeseriesinsights.outputs.EnvironmentStatusResponse;
import com.pulumi.azurenative.timeseriesinsights.outputs.SkuResponse;
import com.pulumi.azurenative.timeseriesinsights.outputs.TimeSeriesIdPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGen1EnvironmentResult {
    /**
     * @return The time the resource was created.
     * 
     */
    private String creationTime;
    /**
     * @return The fully qualified domain name used to access the environment data, e.g. to query the environment&#39;s events or upload reference data for the environment.
     * 
     */
    private String dataAccessFqdn;
    /**
     * @return An id used to access the environment data, e.g. to query the environment&#39;s events or upload reference data for the environment.
     * 
     */
    private String dataAccessId;
    /**
     * @return ISO8601 timespan specifying the minimum number of days the environment&#39;s events will be available for query.
     * 
     */
    private String dataRetentionTime;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return The kind of the environment.
     * Expected value is &#39;Gen1&#39;.
     * 
     */
    private String kind;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
     * 
     */
    private @Nullable List<TimeSeriesIdPropertyResponse> partitionKeyProperties;
    /**
     * @return Provisioning state of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
     * 
     */
    private SkuResponse sku;
    /**
     * @return An object that represents the status of the environment, and its internal state in the Time Series Insights service.
     * 
     */
    private EnvironmentStatusResponse status;
    /**
     * @return The behavior the Time Series Insights service should take when the environment&#39;s capacity has been exceeded. If &#34;PauseIngress&#34; is specified, new events will not be read from the event source. If &#34;PurgeOldData&#34; is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
     * 
     */
    private @Nullable String storageLimitExceededBehavior;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type
     * 
     */
    private String type;

    private GetGen1EnvironmentResult() {}
    /**
     * @return The time the resource was created.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return The fully qualified domain name used to access the environment data, e.g. to query the environment&#39;s events or upload reference data for the environment.
     * 
     */
    public String dataAccessFqdn() {
        return this.dataAccessFqdn;
    }
    /**
     * @return An id used to access the environment data, e.g. to query the environment&#39;s events or upload reference data for the environment.
     * 
     */
    public String dataAccessId() {
        return this.dataAccessId;
    }
    /**
     * @return ISO8601 timespan specifying the minimum number of days the environment&#39;s events will be available for query.
     * 
     */
    public String dataRetentionTime() {
        return this.dataRetentionTime;
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The kind of the environment.
     * Expected value is &#39;Gen1&#39;.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
     * 
     */
    public List<TimeSeriesIdPropertyResponse> partitionKeyProperties() {
        return this.partitionKeyProperties == null ? List.of() : this.partitionKeyProperties;
    }
    /**
     * @return Provisioning state of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return An object that represents the status of the environment, and its internal state in the Time Series Insights service.
     * 
     */
    public EnvironmentStatusResponse status() {
        return this.status;
    }
    /**
     * @return The behavior the Time Series Insights service should take when the environment&#39;s capacity has been exceeded. If &#34;PauseIngress&#34; is specified, new events will not be read from the event source. If &#34;PurgeOldData&#34; is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
     * 
     */
    public Optional<String> storageLimitExceededBehavior() {
        return Optional.ofNullable(this.storageLimitExceededBehavior);
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGen1EnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationTime;
        private String dataAccessFqdn;
        private String dataAccessId;
        private String dataRetentionTime;
        private String id;
        private String kind;
        private String location;
        private String name;
        private @Nullable List<TimeSeriesIdPropertyResponse> partitionKeyProperties;
        private String provisioningState;
        private SkuResponse sku;
        private EnvironmentStatusResponse status;
        private @Nullable String storageLimitExceededBehavior;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetGen1EnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.dataAccessFqdn = defaults.dataAccessFqdn;
    	      this.dataAccessId = defaults.dataAccessId;
    	      this.dataRetentionTime = defaults.dataRetentionTime;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.partitionKeyProperties = defaults.partitionKeyProperties;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sku = defaults.sku;
    	      this.status = defaults.status;
    	      this.storageLimitExceededBehavior = defaults.storageLimitExceededBehavior;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder dataAccessFqdn(String dataAccessFqdn) {
            this.dataAccessFqdn = Objects.requireNonNull(dataAccessFqdn);
            return this;
        }
        @CustomType.Setter
        public Builder dataAccessId(String dataAccessId) {
            this.dataAccessId = Objects.requireNonNull(dataAccessId);
            return this;
        }
        @CustomType.Setter
        public Builder dataRetentionTime(String dataRetentionTime) {
            this.dataRetentionTime = Objects.requireNonNull(dataRetentionTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder partitionKeyProperties(@Nullable List<TimeSeriesIdPropertyResponse> partitionKeyProperties) {
            this.partitionKeyProperties = partitionKeyProperties;
            return this;
        }
        public Builder partitionKeyProperties(TimeSeriesIdPropertyResponse... partitionKeyProperties) {
            return partitionKeyProperties(List.of(partitionKeyProperties));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder status(EnvironmentStatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder storageLimitExceededBehavior(@Nullable String storageLimitExceededBehavior) {
            this.storageLimitExceededBehavior = storageLimitExceededBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetGen1EnvironmentResult build() {
            final var o = new GetGen1EnvironmentResult();
            o.creationTime = creationTime;
            o.dataAccessFqdn = dataAccessFqdn;
            o.dataAccessId = dataAccessId;
            o.dataRetentionTime = dataRetentionTime;
            o.id = id;
            o.kind = kind;
            o.location = location;
            o.name = name;
            o.partitionKeyProperties = partitionKeyProperties;
            o.provisioningState = provisioningState;
            o.sku = sku;
            o.status = status;
            o.storageLimitExceededBehavior = storageLimitExceededBehavior;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
