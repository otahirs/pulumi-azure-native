// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.enums.ApplicationSourceResourceType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityConnectorApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityConnectorApplicationArgs Empty = new SecurityConnectorApplicationArgs();

    /**
     * The security Application key - unique key for the standard application
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The security Application key - unique key for the standard application
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * description of the application
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return description of the application
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * display name of the application
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return display name of the application
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security connector name.
     * 
     */
    @Import(name="securityConnectorName", required=true)
    private Output<String> securityConnectorName;

    /**
     * @return The security connector name.
     * 
     */
    public Output<String> securityConnectorName() {
        return this.securityConnectorName;
    }

    /**
     * The application source, what it affects, e.g. Assessments
     * 
     */
    @Import(name="sourceResourceType", required=true)
    private Output<Either<String,ApplicationSourceResourceType>> sourceResourceType;

    /**
     * @return The application source, what it affects, e.g. Assessments
     * 
     */
    public Output<Either<String,ApplicationSourceResourceType>> sourceResourceType() {
        return this.sourceResourceType;
    }

    private SecurityConnectorApplicationArgs() {}

    private SecurityConnectorApplicationArgs(SecurityConnectorApplicationArgs $) {
        this.applicationId = $.applicationId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.resourceGroupName = $.resourceGroupName;
        this.securityConnectorName = $.securityConnectorName;
        this.sourceResourceType = $.sourceResourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityConnectorApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityConnectorApplicationArgs $;

        public Builder() {
            $ = new SecurityConnectorApplicationArgs();
        }

        public Builder(SecurityConnectorApplicationArgs defaults) {
            $ = new SecurityConnectorApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The security Application key - unique key for the standard application
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The security Application key - unique key for the standard application
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param description description of the application
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description description of the application
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName display name of the application
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName display name of the application
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param securityConnectorName The security connector name.
         * 
         * @return builder
         * 
         */
        public Builder securityConnectorName(Output<String> securityConnectorName) {
            $.securityConnectorName = securityConnectorName;
            return this;
        }

        /**
         * @param securityConnectorName The security connector name.
         * 
         * @return builder
         * 
         */
        public Builder securityConnectorName(String securityConnectorName) {
            return securityConnectorName(Output.of(securityConnectorName));
        }

        /**
         * @param sourceResourceType The application source, what it affects, e.g. Assessments
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceType(Output<Either<String,ApplicationSourceResourceType>> sourceResourceType) {
            $.sourceResourceType = sourceResourceType;
            return this;
        }

        /**
         * @param sourceResourceType The application source, what it affects, e.g. Assessments
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceType(Either<String,ApplicationSourceResourceType> sourceResourceType) {
            return sourceResourceType(Output.of(sourceResourceType));
        }

        /**
         * @param sourceResourceType The application source, what it affects, e.g. Assessments
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceType(String sourceResourceType) {
            return sourceResourceType(Either.ofLeft(sourceResourceType));
        }

        /**
         * @param sourceResourceType The application source, what it affects, e.g. Assessments
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceType(ApplicationSourceResourceType sourceResourceType) {
            return sourceResourceType(Either.ofRight(sourceResourceType));
        }

        public SecurityConnectorApplicationArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.securityConnectorName = Objects.requireNonNull($.securityConnectorName, "expected parameter 'securityConnectorName' to be non-null");
            $.sourceResourceType = Objects.requireNonNull($.sourceResourceType, "expected parameter 'sourceResourceType' to be non-null");
            return $;
        }
    }

}
