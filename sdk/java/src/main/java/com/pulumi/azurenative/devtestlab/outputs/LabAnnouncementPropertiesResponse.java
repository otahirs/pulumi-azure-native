// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LabAnnouncementPropertiesResponse {
    /**
     * @return Is the lab announcement active/enabled at this time?
     * 
     */
    private @Nullable String enabled;
    /**
     * @return The time at which the announcement expires (null for never)
     * 
     */
    private @Nullable String expirationDate;
    /**
     * @return Has this announcement expired?
     * 
     */
    private @Nullable Boolean expired;
    /**
     * @return The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
     * 
     */
    private @Nullable String markdown;
    /**
     * @return The provisioning status of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The plain text title for the lab announcement
     * 
     */
    private @Nullable String title;
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    private String uniqueIdentifier;

    private LabAnnouncementPropertiesResponse() {}
    /**
     * @return Is the lab announcement active/enabled at this time?
     * 
     */
    public Optional<String> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The time at which the announcement expires (null for never)
     * 
     */
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * @return Has this announcement expired?
     * 
     */
    public Optional<Boolean> expired() {
        return Optional.ofNullable(this.expired);
    }
    /**
     * @return The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
     * 
     */
    public Optional<String> markdown() {
        return Optional.ofNullable(this.markdown);
    }
    /**
     * @return The provisioning status of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The plain text title for the lab announcement
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LabAnnouncementPropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String enabled;
        private @Nullable String expirationDate;
        private @Nullable Boolean expired;
        private @Nullable String markdown;
        private String provisioningState;
        private @Nullable String title;
        private String uniqueIdentifier;
        public Builder() {}
        public Builder(LabAnnouncementPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.expirationDate = defaults.expirationDate;
    	      this.expired = defaults.expired;
    	      this.markdown = defaults.markdown;
    	      this.provisioningState = defaults.provisioningState;
    	      this.title = defaults.title;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable String enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder expired(@Nullable Boolean expired) {
            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder markdown(@Nullable String markdown) {
            this.markdown = markdown;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }
        public LabAnnouncementPropertiesResponse build() {
            final var o = new LabAnnouncementPropertiesResponse();
            o.enabled = enabled;
            o.expirationDate = expirationDate;
            o.expired = expired;
            o.markdown = markdown;
            o.provisioningState = provisioningState;
            o.title = title;
            o.uniqueIdentifier = uniqueIdentifier;
            return o;
        }
    }
}
