// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.outputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.outputs.AmazonS3CompatibleReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.AmazonS3ReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureBlobFSReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureBlobStorageReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureDataLakeStoreReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureFileStorageReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.DatasetReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.FileServerReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.FtpReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.GoogleCloudStorageReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.HdfsReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.HttpReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.LogStorageSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.OracleCloudStorageReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.SftpReadSettingsResponse;
import com.pulumi.azurenative.datafactory.outputs.UserPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeleteActivityResponse {
    /**
     * @return Delete activity dataset reference.
     * 
     */
    private DatasetReferenceResponse dataset;
    /**
     * @return Activity depends on condition.
     * 
     */
    private @Nullable List<ActivityDependencyResponse> dependsOn;
    /**
     * @return Activity description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private @Nullable Object enableLogging;
    /**
     * @return Linked service reference.
     * 
     */
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;
    /**
     * @return Log storage settings customer need to provide when enableLogging is true.
     * 
     */
    private @Nullable LogStorageSettingsResponse logStorageSettings;
    /**
     * @return The max concurrent connections to connect data source at the same time.
     * 
     */
    private @Nullable Integer maxConcurrentConnections;
    /**
     * @return Activity name.
     * 
     */
    private String name;
    /**
     * @return Activity policy.
     * 
     */
    private @Nullable ActivityPolicyResponse policy;
    /**
     * @return If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private @Nullable Object recursive;
    /**
     * @return Delete activity store settings.
     * 
     */
    private @Nullable Object storeSettings;
    /**
     * @return Type of activity.
     * Expected value is &#39;Delete&#39;.
     * 
     */
    private String type;
    /**
     * @return Activity user properties.
     * 
     */
    private @Nullable List<UserPropertyResponse> userProperties;

    private DeleteActivityResponse() {}
    /**
     * @return Delete activity dataset reference.
     * 
     */
    public DatasetReferenceResponse dataset() {
        return this.dataset;
    }
    /**
     * @return Activity depends on condition.
     * 
     */
    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> enableLogging() {
        return Optional.ofNullable(this.enableLogging);
    }
    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }
    /**
     * @return Log storage settings customer need to provide when enableLogging is true.
     * 
     */
    public Optional<LogStorageSettingsResponse> logStorageSettings() {
        return Optional.ofNullable(this.logStorageSettings);
    }
    /**
     * @return The max concurrent connections to connect data source at the same time.
     * 
     */
    public Optional<Integer> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }
    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> recursive() {
        return Optional.ofNullable(this.recursive);
    }
    /**
     * @return Delete activity store settings.
     * 
     */
    public Optional<Object> storeSettings() {
        return Optional.ofNullable(this.storeSettings);
    }
    /**
     * @return Type of activity.
     * Expected value is &#39;Delete&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Activity user properties.
     * 
     */
    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeleteActivityResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private DatasetReferenceResponse dataset;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private @Nullable Object enableLogging;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private @Nullable LogStorageSettingsResponse logStorageSettings;
        private @Nullable Integer maxConcurrentConnections;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Object recursive;
        private @Nullable Object storeSettings;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;
        public Builder() {}
        public Builder(DeleteActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.enableLogging = defaults.enableLogging;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.logStorageSettings = defaults.logStorageSettings;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.recursive = defaults.recursive;
    	      this.storeSettings = defaults.storeSettings;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        @CustomType.Setter
        public Builder dataset(DatasetReferenceResponse dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }
        @CustomType.Setter
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableLogging(@Nullable Object enableLogging) {
            this.enableLogging = enableLogging;
            return this;
        }
        @CustomType.Setter
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder logStorageSettings(@Nullable LogStorageSettingsResponse logStorageSettings) {
            this.logStorageSettings = logStorageSettings;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentConnections(@Nullable Integer maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder recursive(@Nullable Object recursive) {
            this.recursive = recursive;
            return this;
        }
        @CustomType.Setter
        public Builder storeSettings(@Nullable Object storeSettings) {
            this.storeSettings = storeSettings;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }
        public DeleteActivityResponse build() {
            final var o = new DeleteActivityResponse();
            o.dataset = dataset;
            o.dependsOn = dependsOn;
            o.description = description;
            o.enableLogging = enableLogging;
            o.linkedServiceName = linkedServiceName;
            o.logStorageSettings = logStorageSettings;
            o.maxConcurrentConnections = maxConcurrentConnections;
            o.name = name;
            o.policy = policy;
            o.recursive = recursive;
            o.storeSettings = storeSettings;
            o.type = type;
            o.userProperties = userProperties;
            return o;
        }
    }
}
