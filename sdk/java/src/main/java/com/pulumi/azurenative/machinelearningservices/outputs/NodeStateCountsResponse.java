// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class NodeStateCountsResponse {
    /**
     * @return Number of compute nodes in idle state.
     * 
     */
    private Integer idleNodeCount;
    /**
     * @return Number of compute nodes which are leaving the amlCompute.
     * 
     */
    private Integer leavingNodeCount;
    /**
     * @return Number of compute nodes which are in preempted state.
     * 
     */
    private Integer preemptedNodeCount;
    /**
     * @return Number of compute nodes which are being prepared.
     * 
     */
    private Integer preparingNodeCount;
    /**
     * @return Number of compute nodes which are running jobs.
     * 
     */
    private Integer runningNodeCount;
    /**
     * @return Number of compute nodes which are in unusable state.
     * 
     */
    private Integer unusableNodeCount;

    private NodeStateCountsResponse() {}
    /**
     * @return Number of compute nodes in idle state.
     * 
     */
    public Integer idleNodeCount() {
        return this.idleNodeCount;
    }
    /**
     * @return Number of compute nodes which are leaving the amlCompute.
     * 
     */
    public Integer leavingNodeCount() {
        return this.leavingNodeCount;
    }
    /**
     * @return Number of compute nodes which are in preempted state.
     * 
     */
    public Integer preemptedNodeCount() {
        return this.preemptedNodeCount;
    }
    /**
     * @return Number of compute nodes which are being prepared.
     * 
     */
    public Integer preparingNodeCount() {
        return this.preparingNodeCount;
    }
    /**
     * @return Number of compute nodes which are running jobs.
     * 
     */
    public Integer runningNodeCount() {
        return this.runningNodeCount;
    }
    /**
     * @return Number of compute nodes which are in unusable state.
     * 
     */
    public Integer unusableNodeCount() {
        return this.unusableNodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeStateCountsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer idleNodeCount;
        private Integer leavingNodeCount;
        private Integer preemptedNodeCount;
        private Integer preparingNodeCount;
        private Integer runningNodeCount;
        private Integer unusableNodeCount;
        public Builder() {}
        public Builder(NodeStateCountsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.idleNodeCount = defaults.idleNodeCount;
    	      this.leavingNodeCount = defaults.leavingNodeCount;
    	      this.preemptedNodeCount = defaults.preemptedNodeCount;
    	      this.preparingNodeCount = defaults.preparingNodeCount;
    	      this.runningNodeCount = defaults.runningNodeCount;
    	      this.unusableNodeCount = defaults.unusableNodeCount;
        }

        @CustomType.Setter
        public Builder idleNodeCount(Integer idleNodeCount) {
            this.idleNodeCount = Objects.requireNonNull(idleNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder leavingNodeCount(Integer leavingNodeCount) {
            this.leavingNodeCount = Objects.requireNonNull(leavingNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder preemptedNodeCount(Integer preemptedNodeCount) {
            this.preemptedNodeCount = Objects.requireNonNull(preemptedNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder preparingNodeCount(Integer preparingNodeCount) {
            this.preparingNodeCount = Objects.requireNonNull(preparingNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder runningNodeCount(Integer runningNodeCount) {
            this.runningNodeCount = Objects.requireNonNull(runningNodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder unusableNodeCount(Integer unusableNodeCount) {
            this.unusableNodeCount = Objects.requireNonNull(unusableNodeCount);
            return this;
        }
        public NodeStateCountsResponse build() {
            final var o = new NodeStateCountsResponse();
            o.idleNodeCount = idleNodeCount;
            o.leavingNodeCount = leavingNodeCount;
            o.preemptedNodeCount = preemptedNodeCount;
            o.preparingNodeCount = preparingNodeCount;
            o.runningNodeCount = runningNodeCount;
            o.unusableNodeCount = unusableNodeCount;
            return o;
        }
    }
}
