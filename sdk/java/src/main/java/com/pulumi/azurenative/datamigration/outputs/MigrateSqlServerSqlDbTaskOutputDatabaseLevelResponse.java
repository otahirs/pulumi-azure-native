// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.DataItemMigrationSummaryResultResponse;
import com.pulumi.azurenative.datamigration.outputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse {
    /**
     * @return Name of the item
     * 
     */
    private String databaseName;
    /**
     * @return Migration end time
     * 
     */
    private String endedOn;
    /**
     * @return Number of database/object errors.
     * 
     */
    private Double errorCount;
    /**
     * @return Wildcard string prefix to use for querying all errors of the item
     * 
     */
    private String errorPrefix;
    /**
     * @return Migration exceptions and warnings.
     * 
     */
    private List<ReportableExceptionResponse> exceptionsAndWarnings;
    /**
     * @return Result identifier
     * 
     */
    private String id;
    /**
     * @return Migration progress message
     * 
     */
    private String message;
    /**
     * @return Number of objects
     * 
     */
    private Double numberOfObjects;
    /**
     * @return Number of successfully completed objects
     * 
     */
    private Double numberOfObjectsCompleted;
    /**
     * @return Summary of object results in the migration
     * 
     */
    private Map<String,DataItemMigrationSummaryResultResponse> objectSummary;
    /**
     * @return Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    private String resultPrefix;
    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    private String resultType;
    /**
     * @return Migration stage that this database is in
     * 
     */
    private String stage;
    /**
     * @return Migration start time
     * 
     */
    private String startedOn;
    /**
     * @return Current state of migration
     * 
     */
    private String state;
    /**
     * @return Status message
     * 
     */
    private String statusMessage;

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse() {}
    /**
     * @return Name of the item
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }
    /**
     * @return Number of database/object errors.
     * 
     */
    public Double errorCount() {
        return this.errorCount;
    }
    /**
     * @return Wildcard string prefix to use for querying all errors of the item
     * 
     */
    public String errorPrefix() {
        return this.errorPrefix;
    }
    /**
     * @return Migration exceptions and warnings.
     * 
     */
    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }
    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Migration progress message
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return Number of objects
     * 
     */
    public Double numberOfObjects() {
        return this.numberOfObjects;
    }
    /**
     * @return Number of successfully completed objects
     * 
     */
    public Double numberOfObjectsCompleted() {
        return this.numberOfObjectsCompleted;
    }
    /**
     * @return Summary of object results in the migration
     * 
     */
    public Map<String,DataItemMigrationSummaryResultResponse> objectSummary() {
        return this.objectSummary;
    }
    /**
     * @return Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    public String resultPrefix() {
        return this.resultPrefix;
    }
    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }
    /**
     * @return Migration stage that this database is in
     * 
     */
    public String stage() {
        return this.stage;
    }
    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }
    /**
     * @return Current state of migration
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Status message
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String databaseName;
        private String endedOn;
        private Double errorCount;
        private String errorPrefix;
        private List<ReportableExceptionResponse> exceptionsAndWarnings;
        private String id;
        private String message;
        private Double numberOfObjects;
        private Double numberOfObjectsCompleted;
        private Map<String,DataItemMigrationSummaryResultResponse> objectSummary;
        private String resultPrefix;
        private String resultType;
        private String stage;
        private String startedOn;
        private String state;
        private String statusMessage;
        public Builder() {}
        public Builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.endedOn = defaults.endedOn;
    	      this.errorCount = defaults.errorCount;
    	      this.errorPrefix = defaults.errorPrefix;
    	      this.exceptionsAndWarnings = defaults.exceptionsAndWarnings;
    	      this.id = defaults.id;
    	      this.message = defaults.message;
    	      this.numberOfObjects = defaults.numberOfObjects;
    	      this.numberOfObjectsCompleted = defaults.numberOfObjectsCompleted;
    	      this.objectSummary = defaults.objectSummary;
    	      this.resultPrefix = defaults.resultPrefix;
    	      this.resultType = defaults.resultType;
    	      this.stage = defaults.stage;
    	      this.startedOn = defaults.startedOn;
    	      this.state = defaults.state;
    	      this.statusMessage = defaults.statusMessage;
        }

        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder endedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }
        @CustomType.Setter
        public Builder errorCount(Double errorCount) {
            this.errorCount = Objects.requireNonNull(errorCount);
            return this;
        }
        @CustomType.Setter
        public Builder errorPrefix(String errorPrefix) {
            this.errorPrefix = Objects.requireNonNull(errorPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings);
            return this;
        }
        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfObjects(Double numberOfObjects) {
            this.numberOfObjects = Objects.requireNonNull(numberOfObjects);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfObjectsCompleted(Double numberOfObjectsCompleted) {
            this.numberOfObjectsCompleted = Objects.requireNonNull(numberOfObjectsCompleted);
            return this;
        }
        @CustomType.Setter
        public Builder objectSummary(Map<String,DataItemMigrationSummaryResultResponse> objectSummary) {
            this.objectSummary = Objects.requireNonNull(objectSummary);
            return this;
        }
        @CustomType.Setter
        public Builder resultPrefix(String resultPrefix) {
            this.resultPrefix = Objects.requireNonNull(resultPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        @CustomType.Setter
        public Builder stage(String stage) {
            this.stage = Objects.requireNonNull(stage);
            return this;
        }
        @CustomType.Setter
        public Builder startedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        public MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse build() {
            final var o = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse();
            o.databaseName = databaseName;
            o.endedOn = endedOn;
            o.errorCount = errorCount;
            o.errorPrefix = errorPrefix;
            o.exceptionsAndWarnings = exceptionsAndWarnings;
            o.id = id;
            o.message = message;
            o.numberOfObjects = numberOfObjects;
            o.numberOfObjectsCompleted = numberOfObjectsCompleted;
            o.objectSummary = objectSummary;
            o.resultPrefix = resultPrefix;
            o.resultType = resultType;
            o.stage = stage;
            o.startedOn = startedOn;
            o.state = state;
            o.statusMessage = statusMessage;
            return o;
        }
    }
}
