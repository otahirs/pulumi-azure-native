// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.AzureActiveDirectoryAppResponse;
import com.pulumi.azurenative.datamigration.outputs.FileShareResponse;
import com.pulumi.azurenative.datamigration.outputs.MiSqlConnectionInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.MigrateSqlServerSqlMIDatabaseInputResponse;
import com.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MigrateSqlServerSqlMISyncTaskInputResponse {
    /**
     * @return Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
     * 
     */
    private AzureActiveDirectoryAppResponse azureApp;
    /**
     * @return Backup file share information for all selected databases.
     * 
     */
    private @Nullable FileShareResponse backupFileShare;
    /**
     * @return Databases to migrate
     * 
     */
    private List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases;
    /**
     * @return Connection information for source SQL Server
     * 
     */
    private SqlConnectionInfoResponse sourceConnectionInfo;
    /**
     * @return Fully qualified resourceId of storage
     * 
     */
    private String storageResourceId;
    /**
     * @return Connection information for Azure SQL Database Managed Instance
     * 
     */
    private MiSqlConnectionInfoResponse targetConnectionInfo;

    private MigrateSqlServerSqlMISyncTaskInputResponse() {}
    /**
     * @return Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
     * 
     */
    public AzureActiveDirectoryAppResponse azureApp() {
        return this.azureApp;
    }
    /**
     * @return Backup file share information for all selected databases.
     * 
     */
    public Optional<FileShareResponse> backupFileShare() {
        return Optional.ofNullable(this.backupFileShare);
    }
    /**
     * @return Databases to migrate
     * 
     */
    public List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases() {
        return this.selectedDatabases;
    }
    /**
     * @return Connection information for source SQL Server
     * 
     */
    public SqlConnectionInfoResponse sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }
    /**
     * @return Fully qualified resourceId of storage
     * 
     */
    public String storageResourceId() {
        return this.storageResourceId;
    }
    /**
     * @return Connection information for Azure SQL Database Managed Instance
     * 
     */
    public MiSqlConnectionInfoResponse targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlMISyncTaskInputResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private AzureActiveDirectoryAppResponse azureApp;
        private @Nullable FileShareResponse backupFileShare;
        private List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases;
        private SqlConnectionInfoResponse sourceConnectionInfo;
        private String storageResourceId;
        private MiSqlConnectionInfoResponse targetConnectionInfo;
        public Builder() {}
        public Builder(MigrateSqlServerSqlMISyncTaskInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureApp = defaults.azureApp;
    	      this.backupFileShare = defaults.backupFileShare;
    	      this.selectedDatabases = defaults.selectedDatabases;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.storageResourceId = defaults.storageResourceId;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
        }

        @CustomType.Setter
        public Builder azureApp(AzureActiveDirectoryAppResponse azureApp) {
            this.azureApp = Objects.requireNonNull(azureApp);
            return this;
        }
        @CustomType.Setter
        public Builder backupFileShare(@Nullable FileShareResponse backupFileShare) {
            this.backupFileShare = backupFileShare;
            return this;
        }
        @CustomType.Setter
        public Builder selectedDatabases(List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }
        public Builder selectedDatabases(MigrateSqlServerSqlMIDatabaseInputResponse... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }
        @CustomType.Setter
        public Builder sourceConnectionInfo(SqlConnectionInfoResponse sourceConnectionInfo) {
            this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo);
            return this;
        }
        @CustomType.Setter
        public Builder storageResourceId(String storageResourceId) {
            this.storageResourceId = Objects.requireNonNull(storageResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder targetConnectionInfo(MiSqlConnectionInfoResponse targetConnectionInfo) {
            this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo);
            return this;
        }
        public MigrateSqlServerSqlMISyncTaskInputResponse build() {
            final var o = new MigrateSqlServerSqlMISyncTaskInputResponse();
            o.azureApp = azureApp;
            o.backupFileShare = backupFileShare;
            o.selectedDatabases = selectedDatabases;
            o.sourceConnectionInfo = sourceConnectionInfo;
            o.storageResourceId = storageResourceId;
            o.targetConnectionInfo = targetConnectionInfo;
            return o;
        }
    }
}
