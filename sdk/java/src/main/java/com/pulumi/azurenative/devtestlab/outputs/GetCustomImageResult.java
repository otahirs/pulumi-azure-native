// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.outputs;

import com.pulumi.azurenative.devtestlab.outputs.CustomImagePropertiesCustomResponse;
import com.pulumi.azurenative.devtestlab.outputs.CustomImagePropertiesFromPlanResponse;
import com.pulumi.azurenative.devtestlab.outputs.CustomImagePropertiesFromVmResponse;
import com.pulumi.azurenative.devtestlab.outputs.DataDiskStorageTypeInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCustomImageResult {
    /**
     * @return The author of the custom image.
     * 
     */
    private @Nullable String author;
    /**
     * @return The creation date of the custom image.
     * 
     */
    private String creationDate;
    /**
     * @return Storage information about the plan related to this custom image
     * 
     */
    private @Nullable CustomImagePropertiesFromPlanResponse customImagePlan;
    /**
     * @return Storage information about the data disks present in the custom image
     * 
     */
    private @Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo;
    /**
     * @return The description of the custom image.
     * 
     */
    private @Nullable String description;
    /**
     * @return The identifier of the resource.
     * 
     */
    private String id;
    /**
     * @return Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     * 
     */
    private @Nullable Boolean isPlanAuthorized;
    /**
     * @return The location of the resource.
     * 
     */
    private @Nullable String location;
    /**
     * @return The Managed Image Id backing the custom image.
     * 
     */
    private @Nullable String managedImageId;
    /**
     * @return The Managed Snapshot Id backing the custom image.
     * 
     */
    private @Nullable String managedSnapshotId;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The provisioning status of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    private String uniqueIdentifier;
    /**
     * @return The VHD from which the image is to be created.
     * 
     */
    private @Nullable CustomImagePropertiesCustomResponse vhd;
    /**
     * @return The virtual machine from which the image is to be created.
     * 
     */
    private @Nullable CustomImagePropertiesFromVmResponse vm;

    private GetCustomImageResult() {}
    /**
     * @return The author of the custom image.
     * 
     */
    public Optional<String> author() {
        return Optional.ofNullable(this.author);
    }
    /**
     * @return The creation date of the custom image.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return Storage information about the plan related to this custom image
     * 
     */
    public Optional<CustomImagePropertiesFromPlanResponse> customImagePlan() {
        return Optional.ofNullable(this.customImagePlan);
    }
    /**
     * @return Storage information about the data disks present in the custom image
     * 
     */
    public List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo() {
        return this.dataDiskStorageInfo == null ? List.of() : this.dataDiskStorageInfo;
    }
    /**
     * @return The description of the custom image.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     * 
     */
    public Optional<Boolean> isPlanAuthorized() {
        return Optional.ofNullable(this.isPlanAuthorized);
    }
    /**
     * @return The location of the resource.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The Managed Image Id backing the custom image.
     * 
     */
    public Optional<String> managedImageId() {
        return Optional.ofNullable(this.managedImageId);
    }
    /**
     * @return The Managed Snapshot Id backing the custom image.
     * 
     */
    public Optional<String> managedSnapshotId() {
        return Optional.ofNullable(this.managedSnapshotId);
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning status of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }
    /**
     * @return The VHD from which the image is to be created.
     * 
     */
    public Optional<CustomImagePropertiesCustomResponse> vhd() {
        return Optional.ofNullable(this.vhd);
    }
    /**
     * @return The virtual machine from which the image is to be created.
     * 
     */
    public Optional<CustomImagePropertiesFromVmResponse> vm() {
        return Optional.ofNullable(this.vm);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String author;
        private String creationDate;
        private @Nullable CustomImagePropertiesFromPlanResponse customImagePlan;
        private @Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo;
        private @Nullable String description;
        private String id;
        private @Nullable Boolean isPlanAuthorized;
        private @Nullable String location;
        private @Nullable String managedImageId;
        private @Nullable String managedSnapshotId;
        private String name;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private String uniqueIdentifier;
        private @Nullable CustomImagePropertiesCustomResponse vhd;
        private @Nullable CustomImagePropertiesFromVmResponse vm;
        public Builder() {}
        public Builder(GetCustomImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.author = defaults.author;
    	      this.creationDate = defaults.creationDate;
    	      this.customImagePlan = defaults.customImagePlan;
    	      this.dataDiskStorageInfo = defaults.dataDiskStorageInfo;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isPlanAuthorized = defaults.isPlanAuthorized;
    	      this.location = defaults.location;
    	      this.managedImageId = defaults.managedImageId;
    	      this.managedSnapshotId = defaults.managedSnapshotId;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
    	      this.vhd = defaults.vhd;
    	      this.vm = defaults.vm;
        }

        @CustomType.Setter
        public Builder author(@Nullable String author) {
            this.author = author;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder customImagePlan(@Nullable CustomImagePropertiesFromPlanResponse customImagePlan) {
            this.customImagePlan = customImagePlan;
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskStorageInfo(@Nullable List<DataDiskStorageTypeInfoResponse> dataDiskStorageInfo) {
            this.dataDiskStorageInfo = dataDiskStorageInfo;
            return this;
        }
        public Builder dataDiskStorageInfo(DataDiskStorageTypeInfoResponse... dataDiskStorageInfo) {
            return dataDiskStorageInfo(List.of(dataDiskStorageInfo));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isPlanAuthorized(@Nullable Boolean isPlanAuthorized) {
            this.isPlanAuthorized = isPlanAuthorized;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managedImageId(@Nullable String managedImageId) {
            this.managedImageId = managedImageId;
            return this;
        }
        @CustomType.Setter
        public Builder managedSnapshotId(@Nullable String managedSnapshotId) {
            this.managedSnapshotId = managedSnapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder vhd(@Nullable CustomImagePropertiesCustomResponse vhd) {
            this.vhd = vhd;
            return this;
        }
        @CustomType.Setter
        public Builder vm(@Nullable CustomImagePropertiesFromVmResponse vm) {
            this.vm = vm;
            return this;
        }
        public GetCustomImageResult build() {
            final var o = new GetCustomImageResult();
            o.author = author;
            o.creationDate = creationDate;
            o.customImagePlan = customImagePlan;
            o.dataDiskStorageInfo = dataDiskStorageInfo;
            o.description = description;
            o.id = id;
            o.isPlanAuthorized = isPlanAuthorized;
            o.location = location;
            o.managedImageId = managedImageId;
            o.managedSnapshotId = managedSnapshotId;
            o.name = name;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.uniqueIdentifier = uniqueIdentifier;
            o.vhd = vhd;
            o.vm = vm;
            return o;
        }
    }
}
