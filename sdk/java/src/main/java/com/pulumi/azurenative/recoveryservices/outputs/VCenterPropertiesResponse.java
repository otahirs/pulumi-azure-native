// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.outputs;

import com.pulumi.azurenative.recoveryservices.outputs.HealthErrorResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VCenterPropertiesResponse {
    /**
     * @return The VCenter discovery status.
     * 
     */
    private @Nullable String discoveryStatus;
    /**
     * @return The ARM resource name of the fabric containing this VCenter.
     * 
     */
    private @Nullable String fabricArmResourceName;
    /**
     * @return Friendly name of the vCenter.
     * 
     */
    private @Nullable String friendlyName;
    /**
     * @return The health errors for this VCenter.
     * 
     */
    private @Nullable List<HealthErrorResponse> healthErrors;
    /**
     * @return The infrastructure Id of vCenter.
     * 
     */
    private @Nullable String infrastructureId;
    /**
     * @return VCenter internal ID.
     * 
     */
    private @Nullable String internalId;
    /**
     * @return The IP address of the vCenter.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return The time when the last heartbeat was received by vCenter.
     * 
     */
    private @Nullable String lastHeartbeat;
    /**
     * @return The port number for discovery.
     * 
     */
    private @Nullable String port;
    /**
     * @return The process server Id.
     * 
     */
    private @Nullable String processServerId;
    /**
     * @return The account Id which has privileges to discover the vCenter.
     * 
     */
    private @Nullable String runAsAccountId;

    private VCenterPropertiesResponse() {}
    /**
     * @return The VCenter discovery status.
     * 
     */
    public Optional<String> discoveryStatus() {
        return Optional.ofNullable(this.discoveryStatus);
    }
    /**
     * @return The ARM resource name of the fabric containing this VCenter.
     * 
     */
    public Optional<String> fabricArmResourceName() {
        return Optional.ofNullable(this.fabricArmResourceName);
    }
    /**
     * @return Friendly name of the vCenter.
     * 
     */
    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    /**
     * @return The health errors for this VCenter.
     * 
     */
    public List<HealthErrorResponse> healthErrors() {
        return this.healthErrors == null ? List.of() : this.healthErrors;
    }
    /**
     * @return The infrastructure Id of vCenter.
     * 
     */
    public Optional<String> infrastructureId() {
        return Optional.ofNullable(this.infrastructureId);
    }
    /**
     * @return VCenter internal ID.
     * 
     */
    public Optional<String> internalId() {
        return Optional.ofNullable(this.internalId);
    }
    /**
     * @return The IP address of the vCenter.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return The time when the last heartbeat was received by vCenter.
     * 
     */
    public Optional<String> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }
    /**
     * @return The port number for discovery.
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The process server Id.
     * 
     */
    public Optional<String> processServerId() {
        return Optional.ofNullable(this.processServerId);
    }
    /**
     * @return The account Id which has privileges to discover the vCenter.
     * 
     */
    public Optional<String> runAsAccountId() {
        return Optional.ofNullable(this.runAsAccountId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VCenterPropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String discoveryStatus;
        private @Nullable String fabricArmResourceName;
        private @Nullable String friendlyName;
        private @Nullable List<HealthErrorResponse> healthErrors;
        private @Nullable String infrastructureId;
        private @Nullable String internalId;
        private @Nullable String ipAddress;
        private @Nullable String lastHeartbeat;
        private @Nullable String port;
        private @Nullable String processServerId;
        private @Nullable String runAsAccountId;
        public Builder() {}
        public Builder(VCenterPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.discoveryStatus = defaults.discoveryStatus;
    	      this.fabricArmResourceName = defaults.fabricArmResourceName;
    	      this.friendlyName = defaults.friendlyName;
    	      this.healthErrors = defaults.healthErrors;
    	      this.infrastructureId = defaults.infrastructureId;
    	      this.internalId = defaults.internalId;
    	      this.ipAddress = defaults.ipAddress;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.port = defaults.port;
    	      this.processServerId = defaults.processServerId;
    	      this.runAsAccountId = defaults.runAsAccountId;
        }

        @CustomType.Setter
        public Builder discoveryStatus(@Nullable String discoveryStatus) {
            this.discoveryStatus = discoveryStatus;
            return this;
        }
        @CustomType.Setter
        public Builder fabricArmResourceName(@Nullable String fabricArmResourceName) {
            this.fabricArmResourceName = fabricArmResourceName;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder healthErrors(@Nullable List<HealthErrorResponse> healthErrors) {
            this.healthErrors = healthErrors;
            return this;
        }
        public Builder healthErrors(HealthErrorResponse... healthErrors) {
            return healthErrors(List.of(healthErrors));
        }
        @CustomType.Setter
        public Builder infrastructureId(@Nullable String infrastructureId) {
            this.infrastructureId = infrastructureId;
            return this;
        }
        @CustomType.Setter
        public Builder internalId(@Nullable String internalId) {
            this.internalId = internalId;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            this.lastHeartbeat = lastHeartbeat;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder processServerId(@Nullable String processServerId) {
            this.processServerId = processServerId;
            return this;
        }
        @CustomType.Setter
        public Builder runAsAccountId(@Nullable String runAsAccountId) {
            this.runAsAccountId = runAsAccountId;
            return this;
        }
        public VCenterPropertiesResponse build() {
            final var o = new VCenterPropertiesResponse();
            o.discoveryStatus = discoveryStatus;
            o.fabricArmResourceName = fabricArmResourceName;
            o.friendlyName = friendlyName;
            o.healthErrors = healthErrors;
            o.infrastructureId = infrastructureId;
            o.internalId = internalId;
            o.ipAddress = ipAddress;
            o.lastHeartbeat = lastHeartbeat;
            o.port = port;
            o.processServerId = processServerId;
            o.runAsAccountId = runAsAccountId;
            return o;
        }
    }
}
