// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SizeInfoResponse {
    /**
     * @return Represents the actual compute size, e.g. Standard_A2_v2.
     * 
     */
    private @Nullable String computeSize;
    /**
     * @return The amount of memory available (in GB).
     * 
     */
    private @Nullable Double memory;
    /**
     * @return The number of cores a VM of this size has.
     * 
     */
    private @Nullable Integer numberOfCores;
    /**
     * @return The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
     * 
     */
    private @Nullable Double price;

    private SizeInfoResponse() {}
    /**
     * @return Represents the actual compute size, e.g. Standard_A2_v2.
     * 
     */
    public Optional<String> computeSize() {
        return Optional.ofNullable(this.computeSize);
    }
    /**
     * @return The amount of memory available (in GB).
     * 
     */
    public Optional<Double> memory() {
        return Optional.ofNullable(this.memory);
    }
    /**
     * @return The number of cores a VM of this size has.
     * 
     */
    public Optional<Integer> numberOfCores() {
        return Optional.ofNullable(this.numberOfCores);
    }
    /**
     * @return The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
     * 
     */
    public Optional<Double> price() {
        return Optional.ofNullable(this.price);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SizeInfoResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String computeSize;
        private @Nullable Double memory;
        private @Nullable Integer numberOfCores;
        private @Nullable Double price;
        public Builder() {}
        public Builder(SizeInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computeSize = defaults.computeSize;
    	      this.memory = defaults.memory;
    	      this.numberOfCores = defaults.numberOfCores;
    	      this.price = defaults.price;
        }

        @CustomType.Setter
        public Builder computeSize(@Nullable String computeSize) {
            this.computeSize = computeSize;
            return this;
        }
        @CustomType.Setter
        public Builder memory(@Nullable Double memory) {
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfCores(@Nullable Integer numberOfCores) {
            this.numberOfCores = numberOfCores;
            return this;
        }
        @CustomType.Setter
        public Builder price(@Nullable Double price) {
            this.price = price;
            return this;
        }
        public SizeInfoResponse build() {
            final var o = new SizeInfoResponse();
            o.computeSize = computeSize;
            o.memory = memory;
            o.numberOfCores = numberOfCores;
            o.price = price;
            return o;
        }
    }
}
