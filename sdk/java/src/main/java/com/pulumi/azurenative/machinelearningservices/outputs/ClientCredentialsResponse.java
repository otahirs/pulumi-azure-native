// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClientCredentialsResponse {
    /**
     * @return The authority URL used for authentication.
     * 
     */
    private @Nullable String authorityUrl;
    /**
     * @return The content of the certificate used for authentication.
     * 
     */
    private @Nullable String certificate;
    /**
     * @return The Client ID/Application ID
     * 
     */
    private @Nullable String clientId;
    /**
     * @return The client secret.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return  Is it using certificate to authenticate. If false then use client secret.
     * 
     */
    private @Nullable Boolean isCertAuth;
    /**
     * @return Resource Group.
     * 
     */
    private @Nullable String resourceGroup;
    /**
     * @return The resource the service principal/app has access to.
     * 
     */
    private @Nullable String resourceUri;
    /**
     * @return Indicates which identity to use to authenticate service data access to customer&#39;s storage.
     * 
     */
    private @Nullable String serviceDataAccessAuthIdentity;
    /**
     * @return Subscription ID.
     * 
     */
    private @Nullable String subscriptionId;
    /**
     * @return The ID of the tenant the service principal/app belongs to.
     * 
     */
    private @Nullable String tenantId;
    /**
     * @return The thumbprint of the certificate above.
     * 
     */
    private @Nullable String thumbprint;

    private ClientCredentialsResponse() {}
    /**
     * @return The authority URL used for authentication.
     * 
     */
    public Optional<String> authorityUrl() {
        return Optional.ofNullable(this.authorityUrl);
    }
    /**
     * @return The content of the certificate used for authentication.
     * 
     */
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    /**
     * @return The Client ID/Application ID
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return The client secret.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return  Is it using certificate to authenticate. If false then use client secret.
     * 
     */
    public Optional<Boolean> isCertAuth() {
        return Optional.ofNullable(this.isCertAuth);
    }
    /**
     * @return Resource Group.
     * 
     */
    public Optional<String> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }
    /**
     * @return The resource the service principal/app has access to.
     * 
     */
    public Optional<String> resourceUri() {
        return Optional.ofNullable(this.resourceUri);
    }
    /**
     * @return Indicates which identity to use to authenticate service data access to customer&#39;s storage.
     * 
     */
    public Optional<String> serviceDataAccessAuthIdentity() {
        return Optional.ofNullable(this.serviceDataAccessAuthIdentity);
    }
    /**
     * @return Subscription ID.
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    /**
     * @return The ID of the tenant the service principal/app belongs to.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return The thumbprint of the certificate above.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientCredentialsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorityUrl;
        private @Nullable String certificate;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable Boolean isCertAuth;
        private @Nullable String resourceGroup;
        private @Nullable String resourceUri;
        private @Nullable String serviceDataAccessAuthIdentity;
        private @Nullable String subscriptionId;
        private @Nullable String tenantId;
        private @Nullable String thumbprint;
        public Builder() {}
        public Builder(ClientCredentialsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorityUrl = defaults.authorityUrl;
    	      this.certificate = defaults.certificate;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.isCertAuth = defaults.isCertAuth;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.resourceUri = defaults.resourceUri;
    	      this.serviceDataAccessAuthIdentity = defaults.serviceDataAccessAuthIdentity;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tenantId = defaults.tenantId;
    	      this.thumbprint = defaults.thumbprint;
        }

        @CustomType.Setter
        public Builder authorityUrl(@Nullable String authorityUrl) {
            this.authorityUrl = authorityUrl;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(@Nullable String certificate) {
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder isCertAuth(@Nullable Boolean isCertAuth) {
            this.isCertAuth = isCertAuth;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(@Nullable String resourceGroup) {
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder resourceUri(@Nullable String resourceUri) {
            this.resourceUri = resourceUri;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDataAccessAuthIdentity(@Nullable String serviceDataAccessAuthIdentity) {
            this.serviceDataAccessAuthIdentity = serviceDataAccessAuthIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(@Nullable String thumbprint) {
            this.thumbprint = thumbprint;
            return this;
        }
        public ClientCredentialsResponse build() {
            final var o = new ClientCredentialsResponse();
            o.authorityUrl = authorityUrl;
            o.certificate = certificate;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.isCertAuth = isCertAuth;
            o.resourceGroup = resourceGroup;
            o.resourceUri = resourceUri;
            o.serviceDataAccessAuthIdentity = serviceDataAccessAuthIdentity;
            o.subscriptionId = subscriptionId;
            o.tenantId = tenantId;
            o.thumbprint = thumbprint;
            return o;
        }
    }
}
