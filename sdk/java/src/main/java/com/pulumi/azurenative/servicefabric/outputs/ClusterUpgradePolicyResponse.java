// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.outputs;

import com.pulumi.azurenative.servicefabric.outputs.ClusterHealthPolicyResponse;
import com.pulumi.azurenative.servicefabric.outputs.ClusterUpgradeDeltaHealthPolicyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterUpgradePolicyResponse {
    /**
     * @return The cluster delta health policy used when upgrading the cluster.
     * 
     */
    private @Nullable ClusterUpgradeDeltaHealthPolicyResponse deltaHealthPolicy;
    /**
     * @return If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     * 
     */
    private @Nullable Boolean forceRestart;
    /**
     * @return The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    private String healthCheckRetryTimeout;
    /**
     * @return The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    private String healthCheckStableDuration;
    /**
     * @return The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    private String healthCheckWaitDuration;
    /**
     * @return The cluster health policy used when upgrading the cluster.
     * 
     */
    private ClusterHealthPolicyResponse healthPolicy;
    /**
     * @return The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    private String upgradeDomainTimeout;
    /**
     * @return The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    private String upgradeReplicaSetCheckTimeout;
    /**
     * @return The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    private String upgradeTimeout;

    private ClusterUpgradePolicyResponse() {}
    /**
     * @return The cluster delta health policy used when upgrading the cluster.
     * 
     */
    public Optional<ClusterUpgradeDeltaHealthPolicyResponse> deltaHealthPolicy() {
        return Optional.ofNullable(this.deltaHealthPolicy);
    }
    /**
     * @return If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     * 
     */
    public Optional<Boolean> forceRestart() {
        return Optional.ofNullable(this.forceRestart);
    }
    /**
     * @return The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    public String healthCheckRetryTimeout() {
        return this.healthCheckRetryTimeout;
    }
    /**
     * @return The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    public String healthCheckStableDuration() {
        return this.healthCheckStableDuration;
    }
    /**
     * @return The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    public String healthCheckWaitDuration() {
        return this.healthCheckWaitDuration;
    }
    /**
     * @return The cluster health policy used when upgrading the cluster.
     * 
     */
    public ClusterHealthPolicyResponse healthPolicy() {
        return this.healthPolicy;
    }
    /**
     * @return The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    public String upgradeDomainTimeout() {
        return this.upgradeDomainTimeout;
    }
    /**
     * @return The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    public String upgradeReplicaSetCheckTimeout() {
        return this.upgradeReplicaSetCheckTimeout;
    }
    /**
     * @return The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * 
     */
    public String upgradeTimeout() {
        return this.upgradeTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterUpgradePolicyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterUpgradeDeltaHealthPolicyResponse deltaHealthPolicy;
        private @Nullable Boolean forceRestart;
        private String healthCheckRetryTimeout;
        private String healthCheckStableDuration;
        private String healthCheckWaitDuration;
        private ClusterHealthPolicyResponse healthPolicy;
        private String upgradeDomainTimeout;
        private String upgradeReplicaSetCheckTimeout;
        private String upgradeTimeout;
        public Builder() {}
        public Builder(ClusterUpgradePolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deltaHealthPolicy = defaults.deltaHealthPolicy;
    	      this.forceRestart = defaults.forceRestart;
    	      this.healthCheckRetryTimeout = defaults.healthCheckRetryTimeout;
    	      this.healthCheckStableDuration = defaults.healthCheckStableDuration;
    	      this.healthCheckWaitDuration = defaults.healthCheckWaitDuration;
    	      this.healthPolicy = defaults.healthPolicy;
    	      this.upgradeDomainTimeout = defaults.upgradeDomainTimeout;
    	      this.upgradeReplicaSetCheckTimeout = defaults.upgradeReplicaSetCheckTimeout;
    	      this.upgradeTimeout = defaults.upgradeTimeout;
        }

        @CustomType.Setter
        public Builder deltaHealthPolicy(@Nullable ClusterUpgradeDeltaHealthPolicyResponse deltaHealthPolicy) {
            this.deltaHealthPolicy = deltaHealthPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder forceRestart(@Nullable Boolean forceRestart) {
            this.forceRestart = forceRestart;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckRetryTimeout(String healthCheckRetryTimeout) {
            this.healthCheckRetryTimeout = Objects.requireNonNull(healthCheckRetryTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckStableDuration(String healthCheckStableDuration) {
            this.healthCheckStableDuration = Objects.requireNonNull(healthCheckStableDuration);
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckWaitDuration(String healthCheckWaitDuration) {
            this.healthCheckWaitDuration = Objects.requireNonNull(healthCheckWaitDuration);
            return this;
        }
        @CustomType.Setter
        public Builder healthPolicy(ClusterHealthPolicyResponse healthPolicy) {
            this.healthPolicy = Objects.requireNonNull(healthPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeDomainTimeout(String upgradeDomainTimeout) {
            this.upgradeDomainTimeout = Objects.requireNonNull(upgradeDomainTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeReplicaSetCheckTimeout(String upgradeReplicaSetCheckTimeout) {
            this.upgradeReplicaSetCheckTimeout = Objects.requireNonNull(upgradeReplicaSetCheckTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeTimeout(String upgradeTimeout) {
            this.upgradeTimeout = Objects.requireNonNull(upgradeTimeout);
            return this;
        }
        public ClusterUpgradePolicyResponse build() {
            final var o = new ClusterUpgradePolicyResponse();
            o.deltaHealthPolicy = deltaHealthPolicy;
            o.forceRestart = forceRestart;
            o.healthCheckRetryTimeout = healthCheckRetryTimeout;
            o.healthCheckStableDuration = healthCheckStableDuration;
            o.healthCheckWaitDuration = healthCheckWaitDuration;
            o.healthPolicy = healthPolicy;
            o.upgradeDomainTimeout = upgradeDomainTimeout;
            o.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            o.upgradeTimeout = upgradeTimeout;
            return o;
        }
    }
}
