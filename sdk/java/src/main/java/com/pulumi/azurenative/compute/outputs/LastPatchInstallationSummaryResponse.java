// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.ApiErrorResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LastPatchInstallationSummaryResponse {
    /**
     * @return The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    private ApiErrorResponse error;
    /**
     * @return The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
     * 
     */
    private Integer excludedPatchCount;
    /**
     * @return The count of patches that failed installation.
     * 
     */
    private Integer failedPatchCount;
    /**
     * @return The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    private String installationActivityId;
    /**
     * @return The count of patches that successfully installed.
     * 
     */
    private Integer installedPatchCount;
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    private String lastModifiedTime;
    /**
     * @return Describes whether the operation ran out of time before it completed all its intended actions
     * 
     */
    private Boolean maintenanceWindowExceeded;
    /**
     * @return The number of all available patches but not going to be installed because it didn&#39;t match a classification or inclusion list entry.
     * 
     */
    private Integer notSelectedPatchCount;
    /**
     * @return The number of all available patches expected to be installed over the course of the patch installation operation.
     * 
     */
    private Integer pendingPatchCount;
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    private String startTime;
    /**
     * @return The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    private String status;

    private LastPatchInstallationSummaryResponse() {}
    /**
     * @return The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    public ApiErrorResponse error() {
        return this.error;
    }
    /**
     * @return The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
     * 
     */
    public Integer excludedPatchCount() {
        return this.excludedPatchCount;
    }
    /**
     * @return The count of patches that failed installation.
     * 
     */
    public Integer failedPatchCount() {
        return this.failedPatchCount;
    }
    /**
     * @return The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    public String installationActivityId() {
        return this.installationActivityId;
    }
    /**
     * @return The count of patches that successfully installed.
     * 
     */
    public Integer installedPatchCount() {
        return this.installedPatchCount;
    }
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return Describes whether the operation ran out of time before it completed all its intended actions
     * 
     */
    public Boolean maintenanceWindowExceeded() {
        return this.maintenanceWindowExceeded;
    }
    /**
     * @return The number of all available patches but not going to be installed because it didn&#39;t match a classification or inclusion list entry.
     * 
     */
    public Integer notSelectedPatchCount() {
        return this.notSelectedPatchCount;
    }
    /**
     * @return The number of all available patches expected to be installed over the course of the patch installation operation.
     * 
     */
    public Integer pendingPatchCount() {
        return this.pendingPatchCount;
    }
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LastPatchInstallationSummaryResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ApiErrorResponse error;
        private Integer excludedPatchCount;
        private Integer failedPatchCount;
        private String installationActivityId;
        private Integer installedPatchCount;
        private String lastModifiedTime;
        private Boolean maintenanceWindowExceeded;
        private Integer notSelectedPatchCount;
        private Integer pendingPatchCount;
        private String startTime;
        private String status;
        public Builder() {}
        public Builder(LastPatchInstallationSummaryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.error = defaults.error;
    	      this.excludedPatchCount = defaults.excludedPatchCount;
    	      this.failedPatchCount = defaults.failedPatchCount;
    	      this.installationActivityId = defaults.installationActivityId;
    	      this.installedPatchCount = defaults.installedPatchCount;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.maintenanceWindowExceeded = defaults.maintenanceWindowExceeded;
    	      this.notSelectedPatchCount = defaults.notSelectedPatchCount;
    	      this.pendingPatchCount = defaults.pendingPatchCount;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder error(ApiErrorResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        @CustomType.Setter
        public Builder excludedPatchCount(Integer excludedPatchCount) {
            this.excludedPatchCount = Objects.requireNonNull(excludedPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder failedPatchCount(Integer failedPatchCount) {
            this.failedPatchCount = Objects.requireNonNull(failedPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder installationActivityId(String installationActivityId) {
            this.installationActivityId = Objects.requireNonNull(installationActivityId);
            return this;
        }
        @CustomType.Setter
        public Builder installedPatchCount(Integer installedPatchCount) {
            this.installedPatchCount = Objects.requireNonNull(installedPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindowExceeded(Boolean maintenanceWindowExceeded) {
            this.maintenanceWindowExceeded = Objects.requireNonNull(maintenanceWindowExceeded);
            return this;
        }
        @CustomType.Setter
        public Builder notSelectedPatchCount(Integer notSelectedPatchCount) {
            this.notSelectedPatchCount = Objects.requireNonNull(notSelectedPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder pendingPatchCount(Integer pendingPatchCount) {
            this.pendingPatchCount = Objects.requireNonNull(pendingPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public LastPatchInstallationSummaryResponse build() {
            final var o = new LastPatchInstallationSummaryResponse();
            o.error = error;
            o.excludedPatchCount = excludedPatchCount;
            o.failedPatchCount = failedPatchCount;
            o.installationActivityId = installationActivityId;
            o.installedPatchCount = installedPatchCount;
            o.lastModifiedTime = lastModifiedTime;
            o.maintenanceWindowExceeded = maintenanceWindowExceeded;
            o.notSelectedPatchCount = notSelectedPatchCount;
            o.pendingPatchCount = pendingPatchCount;
            o.startTime = startTime;
            o.status = status;
            return o;
        }
    }
}
