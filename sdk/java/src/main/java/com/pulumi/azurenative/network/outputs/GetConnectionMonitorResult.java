// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.ConnectionMonitorDestinationResponse;
import com.pulumi.azurenative.network.outputs.ConnectionMonitorEndpointResponse;
import com.pulumi.azurenative.network.outputs.ConnectionMonitorOutputResponse;
import com.pulumi.azurenative.network.outputs.ConnectionMonitorSourceResponse;
import com.pulumi.azurenative.network.outputs.ConnectionMonitorTestConfigurationResponse;
import com.pulumi.azurenative.network.outputs.ConnectionMonitorTestGroupResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectionMonitorResult {
    /**
     * @return Determines if the connection monitor will start automatically once created.
     * 
     */
    private @Nullable Boolean autoStart;
    /**
     * @return Type of connection monitor.
     * 
     */
    private String connectionMonitorType;
    /**
     * @return Describes the destination of connection monitor.
     * 
     */
    private @Nullable ConnectionMonitorDestinationResponse destination;
    /**
     * @return List of connection monitor endpoints.
     * 
     */
    private @Nullable List<ConnectionMonitorEndpointResponse> endpoints;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return ID of the connection monitor.
     * 
     */
    private String id;
    /**
     * @return Connection monitor location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Monitoring interval in seconds.
     * 
     */
    private @Nullable Integer monitoringIntervalInSeconds;
    /**
     * @return The monitoring status of the connection monitor.
     * 
     */
    private String monitoringStatus;
    /**
     * @return Name of the connection monitor.
     * 
     */
    private String name;
    /**
     * @return Optional notes to be associated with the connection monitor.
     * 
     */
    private @Nullable String notes;
    /**
     * @return List of connection monitor outputs.
     * 
     */
    private @Nullable List<ConnectionMonitorOutputResponse> outputs;
    /**
     * @return The provisioning state of the connection monitor.
     * 
     */
    private String provisioningState;
    /**
     * @return Describes the source of connection monitor.
     * 
     */
    private @Nullable ConnectionMonitorSourceResponse source;
    /**
     * @return The date and time when the connection monitor was started.
     * 
     */
    private String startTime;
    /**
     * @return Connection monitor tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return List of connection monitor test configurations.
     * 
     */
    private @Nullable List<ConnectionMonitorTestConfigurationResponse> testConfigurations;
    /**
     * @return List of connection monitor test groups.
     * 
     */
    private @Nullable List<ConnectionMonitorTestGroupResponse> testGroups;
    /**
     * @return Connection monitor type.
     * 
     */
    private String type;

    private GetConnectionMonitorResult() {}
    /**
     * @return Determines if the connection monitor will start automatically once created.
     * 
     */
    public Optional<Boolean> autoStart() {
        return Optional.ofNullable(this.autoStart);
    }
    /**
     * @return Type of connection monitor.
     * 
     */
    public String connectionMonitorType() {
        return this.connectionMonitorType;
    }
    /**
     * @return Describes the destination of connection monitor.
     * 
     */
    public Optional<ConnectionMonitorDestinationResponse> destination() {
        return Optional.ofNullable(this.destination);
    }
    /**
     * @return List of connection monitor endpoints.
     * 
     */
    public List<ConnectionMonitorEndpointResponse> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return ID of the connection monitor.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Connection monitor location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Monitoring interval in seconds.
     * 
     */
    public Optional<Integer> monitoringIntervalInSeconds() {
        return Optional.ofNullable(this.monitoringIntervalInSeconds);
    }
    /**
     * @return The monitoring status of the connection monitor.
     * 
     */
    public String monitoringStatus() {
        return this.monitoringStatus;
    }
    /**
     * @return Name of the connection monitor.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional notes to be associated with the connection monitor.
     * 
     */
    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }
    /**
     * @return List of connection monitor outputs.
     * 
     */
    public List<ConnectionMonitorOutputResponse> outputs() {
        return this.outputs == null ? List.of() : this.outputs;
    }
    /**
     * @return The provisioning state of the connection monitor.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Describes the source of connection monitor.
     * 
     */
    public Optional<ConnectionMonitorSourceResponse> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return The date and time when the connection monitor was started.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return Connection monitor tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return List of connection monitor test configurations.
     * 
     */
    public List<ConnectionMonitorTestConfigurationResponse> testConfigurations() {
        return this.testConfigurations == null ? List.of() : this.testConfigurations;
    }
    /**
     * @return List of connection monitor test groups.
     * 
     */
    public List<ConnectionMonitorTestGroupResponse> testGroups() {
        return this.testGroups == null ? List.of() : this.testGroups;
    }
    /**
     * @return Connection monitor type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectionMonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoStart;
        private String connectionMonitorType;
        private @Nullable ConnectionMonitorDestinationResponse destination;
        private @Nullable List<ConnectionMonitorEndpointResponse> endpoints;
        private String etag;
        private String id;
        private @Nullable String location;
        private @Nullable Integer monitoringIntervalInSeconds;
        private String monitoringStatus;
        private String name;
        private @Nullable String notes;
        private @Nullable List<ConnectionMonitorOutputResponse> outputs;
        private String provisioningState;
        private @Nullable ConnectionMonitorSourceResponse source;
        private String startTime;
        private @Nullable Map<String,String> tags;
        private @Nullable List<ConnectionMonitorTestConfigurationResponse> testConfigurations;
        private @Nullable List<ConnectionMonitorTestGroupResponse> testGroups;
        private String type;
        public Builder() {}
        public Builder(GetConnectionMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoStart = defaults.autoStart;
    	      this.connectionMonitorType = defaults.connectionMonitorType;
    	      this.destination = defaults.destination;
    	      this.endpoints = defaults.endpoints;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.monitoringIntervalInSeconds = defaults.monitoringIntervalInSeconds;
    	      this.monitoringStatus = defaults.monitoringStatus;
    	      this.name = defaults.name;
    	      this.notes = defaults.notes;
    	      this.outputs = defaults.outputs;
    	      this.provisioningState = defaults.provisioningState;
    	      this.source = defaults.source;
    	      this.startTime = defaults.startTime;
    	      this.tags = defaults.tags;
    	      this.testConfigurations = defaults.testConfigurations;
    	      this.testGroups = defaults.testGroups;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder autoStart(@Nullable Boolean autoStart) {
            this.autoStart = autoStart;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMonitorType(String connectionMonitorType) {
            this.connectionMonitorType = Objects.requireNonNull(connectionMonitorType);
            return this;
        }
        @CustomType.Setter
        public Builder destination(@Nullable ConnectionMonitorDestinationResponse destination) {
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<ConnectionMonitorEndpointResponse> endpoints) {
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(ConnectionMonitorEndpointResponse... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringIntervalInSeconds(@Nullable Integer monitoringIntervalInSeconds) {
            this.monitoringIntervalInSeconds = monitoringIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringStatus(String monitoringStatus) {
            this.monitoringStatus = Objects.requireNonNull(monitoringStatus);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notes(@Nullable String notes) {
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder outputs(@Nullable List<ConnectionMonitorOutputResponse> outputs) {
            this.outputs = outputs;
            return this;
        }
        public Builder outputs(ConnectionMonitorOutputResponse... outputs) {
            return outputs(List.of(outputs));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable ConnectionMonitorSourceResponse source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder testConfigurations(@Nullable List<ConnectionMonitorTestConfigurationResponse> testConfigurations) {
            this.testConfigurations = testConfigurations;
            return this;
        }
        public Builder testConfigurations(ConnectionMonitorTestConfigurationResponse... testConfigurations) {
            return testConfigurations(List.of(testConfigurations));
        }
        @CustomType.Setter
        public Builder testGroups(@Nullable List<ConnectionMonitorTestGroupResponse> testGroups) {
            this.testGroups = testGroups;
            return this;
        }
        public Builder testGroups(ConnectionMonitorTestGroupResponse... testGroups) {
            return testGroups(List.of(testGroups));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetConnectionMonitorResult build() {
            final var o = new GetConnectionMonitorResult();
            o.autoStart = autoStart;
            o.connectionMonitorType = connectionMonitorType;
            o.destination = destination;
            o.endpoints = endpoints;
            o.etag = etag;
            o.id = id;
            o.location = location;
            o.monitoringIntervalInSeconds = monitoringIntervalInSeconds;
            o.monitoringStatus = monitoringStatus;
            o.name = name;
            o.notes = notes;
            o.outputs = outputs;
            o.provisioningState = provisioningState;
            o.source = source;
            o.startTime = startTime;
            o.tags = tags;
            o.testConfigurations = testConfigurations;
            o.testGroups = testGroups;
            o.type = type;
            return o;
        }
    }
}
