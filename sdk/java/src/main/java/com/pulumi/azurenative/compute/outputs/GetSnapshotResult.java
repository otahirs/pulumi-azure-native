// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.CreationDataResponse;
import com.pulumi.azurenative.compute.outputs.EncryptionResponse;
import com.pulumi.azurenative.compute.outputs.EncryptionSettingsCollectionResponse;
import com.pulumi.azurenative.compute.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.compute.outputs.PurchasePlanResponse;
import com.pulumi.azurenative.compute.outputs.SnapshotSkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSnapshotResult {
    /**
     * @return Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    private CreationDataResponse creationData;
    /**
     * @return ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    private @Nullable String diskAccessId;
    /**
     * @return The size of the disk in bytes. This field is read only.
     * 
     */
    private Double diskSizeBytes;
    /**
     * @return If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    private @Nullable Integer diskSizeGB;
    /**
     * @return The state of the snapshot.
     * 
     */
    private String diskState;
    /**
     * @return Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    private @Nullable EncryptionResponse encryption;
    /**
     * @return Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    private @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection;
    /**
     * @return The extended location where the snapshot will be created. Extended location cannot be changed.
     * 
     */
    private @Nullable ExtendedLocationResponse extendedLocation;
    /**
     * @return The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    private @Nullable String hyperVGeneration;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
     * 
     */
    private @Nullable Boolean incremental;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return Unused. Always Null.
     * 
     */
    private String managedBy;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    private @Nullable String networkAccessPolicy;
    /**
     * @return The Operating System type.
     * 
     */
    private @Nullable String osType;
    /**
     * @return The disk provisioning state.
     * 
     */
    private String provisioningState;
    /**
     * @return Purchase plan information for the image from which the source disk for the snapshot was originally created.
     * 
     */
    private @Nullable PurchasePlanResponse purchasePlan;
    /**
     * @return The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
     * 
     */
    private @Nullable SnapshotSkuResponse sku;
    /**
     * @return Indicates the OS on a snapshot supports hibernation.
     * 
     */
    private @Nullable Boolean supportsHibernation;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The time when the snapshot was created.
     * 
     */
    private String timeCreated;
    /**
     * @return Resource type
     * 
     */
    private String type;
    /**
     * @return Unique Guid identifying the resource.
     * 
     */
    private String uniqueId;

    private GetSnapshotResult() {}
    /**
     * @return Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    public CreationDataResponse creationData() {
        return this.creationData;
    }
    /**
     * @return ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    public Optional<String> diskAccessId() {
        return Optional.ofNullable(this.diskAccessId);
    }
    /**
     * @return The size of the disk in bytes. This field is read only.
     * 
     */
    public Double diskSizeBytes() {
        return this.diskSizeBytes;
    }
    /**
     * @return If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    public Optional<Integer> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }
    /**
     * @return The state of the snapshot.
     * 
     */
    public String diskState() {
        return this.diskState;
    }
    /**
     * @return Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    public Optional<EncryptionResponse> encryption() {
        return Optional.ofNullable(this.encryption);
    }
    /**
     * @return Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    public Optional<EncryptionSettingsCollectionResponse> encryptionSettingsCollection() {
        return Optional.ofNullable(this.encryptionSettingsCollection);
    }
    /**
     * @return The extended location where the snapshot will be created. Extended location cannot be changed.
     * 
     */
    public Optional<ExtendedLocationResponse> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }
    /**
     * @return The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    public Optional<String> hyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
     * 
     */
    public Optional<Boolean> incremental() {
        return Optional.ofNullable(this.incremental);
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Unused. Always Null.
     * 
     */
    public String managedBy() {
        return this.managedBy;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    public Optional<String> networkAccessPolicy() {
        return Optional.ofNullable(this.networkAccessPolicy);
    }
    /**
     * @return The Operating System type.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }
    /**
     * @return The disk provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Purchase plan information for the image from which the source disk for the snapshot was originally created.
     * 
     */
    public Optional<PurchasePlanResponse> purchasePlan() {
        return Optional.ofNullable(this.purchasePlan);
    }
    /**
     * @return The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
     * 
     */
    public Optional<SnapshotSkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Indicates the OS on a snapshot supports hibernation.
     * 
     */
    public Optional<Boolean> supportsHibernation() {
        return Optional.ofNullable(this.supportsHibernation);
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The time when the snapshot was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Unique Guid identifying the resource.
     * 
     */
    public String uniqueId() {
        return this.uniqueId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private CreationDataResponse creationData;
        private @Nullable String diskAccessId;
        private Double diskSizeBytes;
        private @Nullable Integer diskSizeGB;
        private String diskState;
        private @Nullable EncryptionResponse encryption;
        private @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection;
        private @Nullable ExtendedLocationResponse extendedLocation;
        private @Nullable String hyperVGeneration;
        private String id;
        private @Nullable Boolean incremental;
        private String location;
        private String managedBy;
        private String name;
        private @Nullable String networkAccessPolicy;
        private @Nullable String osType;
        private String provisioningState;
        private @Nullable PurchasePlanResponse purchasePlan;
        private @Nullable SnapshotSkuResponse sku;
        private @Nullable Boolean supportsHibernation;
        private @Nullable Map<String,String> tags;
        private String timeCreated;
        private String type;
        private String uniqueId;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationData = defaults.creationData;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskSizeBytes = defaults.diskSizeBytes;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.diskState = defaults.diskState;
    	      this.encryption = defaults.encryption;
    	      this.encryptionSettingsCollection = defaults.encryptionSettingsCollection;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.id = defaults.id;
    	      this.incremental = defaults.incremental;
    	      this.location = defaults.location;
    	      this.managedBy = defaults.managedBy;
    	      this.name = defaults.name;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.sku = defaults.sku;
    	      this.supportsHibernation = defaults.supportsHibernation;
    	      this.tags = defaults.tags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.type = defaults.type;
    	      this.uniqueId = defaults.uniqueId;
        }

        @CustomType.Setter
        public Builder creationData(CreationDataResponse creationData) {
            this.creationData = Objects.requireNonNull(creationData);
            return this;
        }
        @CustomType.Setter
        public Builder diskAccessId(@Nullable String diskAccessId) {
            this.diskAccessId = diskAccessId;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeBytes(Double diskSizeBytes) {
            this.diskSizeBytes = Objects.requireNonNull(diskSizeBytes);
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        @CustomType.Setter
        public Builder diskState(String diskState) {
            this.diskState = Objects.requireNonNull(diskState);
            return this;
        }
        @CustomType.Setter
        public Builder encryption(@Nullable EncryptionResponse encryption) {
            this.encryption = encryption;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionSettingsCollection(@Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection) {
            this.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }
        @CustomType.Setter
        public Builder extendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        @CustomType.Setter
        public Builder hyperVGeneration(@Nullable String hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder incremental(@Nullable Boolean incremental) {
            this.incremental = incremental;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder managedBy(String managedBy) {
            this.managedBy = Objects.requireNonNull(managedBy);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkAccessPolicy(@Nullable String networkAccessPolicy) {
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder purchasePlan(@Nullable PurchasePlanResponse purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable SnapshotSkuResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder supportsHibernation(@Nullable Boolean supportsHibernation) {
            this.supportsHibernation = supportsHibernation;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(String uniqueId) {
            this.uniqueId = Objects.requireNonNull(uniqueId);
            return this;
        }
        public GetSnapshotResult build() {
            final var o = new GetSnapshotResult();
            o.creationData = creationData;
            o.diskAccessId = diskAccessId;
            o.diskSizeBytes = diskSizeBytes;
            o.diskSizeGB = diskSizeGB;
            o.diskState = diskState;
            o.encryption = encryption;
            o.encryptionSettingsCollection = encryptionSettingsCollection;
            o.extendedLocation = extendedLocation;
            o.hyperVGeneration = hyperVGeneration;
            o.id = id;
            o.incremental = incremental;
            o.location = location;
            o.managedBy = managedBy;
            o.name = name;
            o.networkAccessPolicy = networkAccessPolicy;
            o.osType = osType;
            o.provisioningState = provisioningState;
            o.purchasePlan = purchasePlan;
            o.sku = sku;
            o.supportsHibernation = supportsHibernation;
            o.tags = tags;
            o.timeCreated = timeCreated;
            o.type = type;
            o.uniqueId = uniqueId;
            return o;
        }
    }
}
