// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.inputs.ApplicationServerConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.CentralServerConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.DatabaseConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.HighAvailabilityConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.NetworkConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Gets or sets the three tier SAP configuration.
 * 
 */
public final class ThreeTierConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThreeTierConfigurationArgs Empty = new ThreeTierConfigurationArgs();

    /**
     * The application resource group where SAP system resources will be deployed.
     * 
     */
    @Import(name="appResourceGroup", required=true)
    private Output<String> appResourceGroup;

    /**
     * @return The application resource group where SAP system resources will be deployed.
     * 
     */
    public Output<String> appResourceGroup() {
        return this.appResourceGroup;
    }

    /**
     * The application server configuration.
     * 
     */
    @Import(name="applicationServer", required=true)
    private Output<ApplicationServerConfigurationArgs> applicationServer;

    /**
     * @return The application server configuration.
     * 
     */
    public Output<ApplicationServerConfigurationArgs> applicationServer() {
        return this.applicationServer;
    }

    /**
     * The central server configuration.
     * 
     */
    @Import(name="centralServer", required=true)
    private Output<CentralServerConfigurationArgs> centralServer;

    /**
     * @return The central server configuration.
     * 
     */
    public Output<CentralServerConfigurationArgs> centralServer() {
        return this.centralServer;
    }

    /**
     * The database configuration.
     * 
     */
    @Import(name="databaseServer", required=true)
    private Output<DatabaseConfigurationArgs> databaseServer;

    /**
     * @return The database configuration.
     * 
     */
    public Output<DatabaseConfigurationArgs> databaseServer() {
        return this.databaseServer;
    }

    /**
     * The deployment Type.
     * Expected value is &#39;ThreeTier&#39;.
     * 
     */
    @Import(name="deploymentType", required=true)
    private Output<String> deploymentType;

    /**
     * @return The deployment Type.
     * Expected value is &#39;ThreeTier&#39;.
     * 
     */
    public Output<String> deploymentType() {
        return this.deploymentType;
    }

    /**
     * The high availability configuration.
     * 
     */
    @Import(name="highAvailabilityConfig")
    private @Nullable Output<HighAvailabilityConfigurationArgs> highAvailabilityConfig;

    /**
     * @return The high availability configuration.
     * 
     */
    public Optional<Output<HighAvailabilityConfigurationArgs>> highAvailabilityConfig() {
        return Optional.ofNullable(this.highAvailabilityConfig);
    }

    /**
     * Network configuration common to all servers
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<NetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Network configuration common to all servers
     * 
     */
    public Optional<Output<NetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    private ThreeTierConfigurationArgs() {}

    private ThreeTierConfigurationArgs(ThreeTierConfigurationArgs $) {
        this.appResourceGroup = $.appResourceGroup;
        this.applicationServer = $.applicationServer;
        this.centralServer = $.centralServer;
        this.databaseServer = $.databaseServer;
        this.deploymentType = $.deploymentType;
        this.highAvailabilityConfig = $.highAvailabilityConfig;
        this.networkConfiguration = $.networkConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThreeTierConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThreeTierConfigurationArgs $;

        public Builder() {
            $ = new ThreeTierConfigurationArgs();
        }

        public Builder(ThreeTierConfigurationArgs defaults) {
            $ = new ThreeTierConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appResourceGroup The application resource group where SAP system resources will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder appResourceGroup(Output<String> appResourceGroup) {
            $.appResourceGroup = appResourceGroup;
            return this;
        }

        /**
         * @param appResourceGroup The application resource group where SAP system resources will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder appResourceGroup(String appResourceGroup) {
            return appResourceGroup(Output.of(appResourceGroup));
        }

        /**
         * @param applicationServer The application server configuration.
         * 
         * @return builder
         * 
         */
        public Builder applicationServer(Output<ApplicationServerConfigurationArgs> applicationServer) {
            $.applicationServer = applicationServer;
            return this;
        }

        /**
         * @param applicationServer The application server configuration.
         * 
         * @return builder
         * 
         */
        public Builder applicationServer(ApplicationServerConfigurationArgs applicationServer) {
            return applicationServer(Output.of(applicationServer));
        }

        /**
         * @param centralServer The central server configuration.
         * 
         * @return builder
         * 
         */
        public Builder centralServer(Output<CentralServerConfigurationArgs> centralServer) {
            $.centralServer = centralServer;
            return this;
        }

        /**
         * @param centralServer The central server configuration.
         * 
         * @return builder
         * 
         */
        public Builder centralServer(CentralServerConfigurationArgs centralServer) {
            return centralServer(Output.of(centralServer));
        }

        /**
         * @param databaseServer The database configuration.
         * 
         * @return builder
         * 
         */
        public Builder databaseServer(Output<DatabaseConfigurationArgs> databaseServer) {
            $.databaseServer = databaseServer;
            return this;
        }

        /**
         * @param databaseServer The database configuration.
         * 
         * @return builder
         * 
         */
        public Builder databaseServer(DatabaseConfigurationArgs databaseServer) {
            return databaseServer(Output.of(databaseServer));
        }

        /**
         * @param deploymentType The deployment Type.
         * Expected value is &#39;ThreeTier&#39;.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The deployment Type.
         * Expected value is &#39;ThreeTier&#39;.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param highAvailabilityConfig The high availability configuration.
         * 
         * @return builder
         * 
         */
        public Builder highAvailabilityConfig(@Nullable Output<HighAvailabilityConfigurationArgs> highAvailabilityConfig) {
            $.highAvailabilityConfig = highAvailabilityConfig;
            return this;
        }

        /**
         * @param highAvailabilityConfig The high availability configuration.
         * 
         * @return builder
         * 
         */
        public Builder highAvailabilityConfig(HighAvailabilityConfigurationArgs highAvailabilityConfig) {
            return highAvailabilityConfig(Output.of(highAvailabilityConfig));
        }

        /**
         * @param networkConfiguration Network configuration common to all servers
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<NetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Network configuration common to all servers
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(NetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        public ThreeTierConfigurationArgs build() {
            $.appResourceGroup = Objects.requireNonNull($.appResourceGroup, "expected parameter 'appResourceGroup' to be non-null");
            $.applicationServer = Objects.requireNonNull($.applicationServer, "expected parameter 'applicationServer' to be non-null");
            $.centralServer = Objects.requireNonNull($.centralServer, "expected parameter 'centralServer' to be non-null");
            $.databaseServer = Objects.requireNonNull($.databaseServer, "expected parameter 'databaseServer' to be non-null");
            $.deploymentType = Codegen.stringProp("deploymentType").output().arg($.deploymentType).require();
            return $;
        }
    }

}
