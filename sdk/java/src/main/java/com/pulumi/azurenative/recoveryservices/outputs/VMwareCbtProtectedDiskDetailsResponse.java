// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VMwareCbtProtectedDiskDetailsResponse {
    /**
     * @return The disk capacity in bytes.
     * 
     */
    private Double capacityInBytes;
    /**
     * @return The disk id.
     * 
     */
    private String diskId;
    /**
     * @return The disk name.
     * 
     */
    private String diskName;
    /**
     * @return The disk path.
     * 
     */
    private String diskPath;
    /**
     * @return The disk type.
     * 
     */
    private @Nullable String diskType;
    /**
     * @return A value indicating whether the disk is the OS disk.
     * 
     */
    private String isOSDisk;
    /**
     * @return The log storage account ARM Id.
     * 
     */
    private String logStorageAccountId;
    /**
     * @return The key vault secret name of the log storage account.
     * 
     */
    private String logStorageAccountSasSecretName;
    /**
     * @return The ARM Id of the seed managed disk.
     * 
     */
    private String seedManagedDiskId;
    /**
     * @return The ARM Id of the target managed disk.
     * 
     */
    private String targetManagedDiskId;

    private VMwareCbtProtectedDiskDetailsResponse() {}
    /**
     * @return The disk capacity in bytes.
     * 
     */
    public Double capacityInBytes() {
        return this.capacityInBytes;
    }
    /**
     * @return The disk id.
     * 
     */
    public String diskId() {
        return this.diskId;
    }
    /**
     * @return The disk name.
     * 
     */
    public String diskName() {
        return this.diskName;
    }
    /**
     * @return The disk path.
     * 
     */
    public String diskPath() {
        return this.diskPath;
    }
    /**
     * @return The disk type.
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return A value indicating whether the disk is the OS disk.
     * 
     */
    public String isOSDisk() {
        return this.isOSDisk;
    }
    /**
     * @return The log storage account ARM Id.
     * 
     */
    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }
    /**
     * @return The key vault secret name of the log storage account.
     * 
     */
    public String logStorageAccountSasSecretName() {
        return this.logStorageAccountSasSecretName;
    }
    /**
     * @return The ARM Id of the seed managed disk.
     * 
     */
    public String seedManagedDiskId() {
        return this.seedManagedDiskId;
    }
    /**
     * @return The ARM Id of the target managed disk.
     * 
     */
    public String targetManagedDiskId() {
        return this.targetManagedDiskId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VMwareCbtProtectedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double capacityInBytes;
        private String diskId;
        private String diskName;
        private String diskPath;
        private @Nullable String diskType;
        private String isOSDisk;
        private String logStorageAccountId;
        private String logStorageAccountSasSecretName;
        private String seedManagedDiskId;
        private String targetManagedDiskId;
        public Builder() {}
        public Builder(VMwareCbtProtectedDiskDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityInBytes = defaults.capacityInBytes;
    	      this.diskId = defaults.diskId;
    	      this.diskName = defaults.diskName;
    	      this.diskPath = defaults.diskPath;
    	      this.diskType = defaults.diskType;
    	      this.isOSDisk = defaults.isOSDisk;
    	      this.logStorageAccountId = defaults.logStorageAccountId;
    	      this.logStorageAccountSasSecretName = defaults.logStorageAccountSasSecretName;
    	      this.seedManagedDiskId = defaults.seedManagedDiskId;
    	      this.targetManagedDiskId = defaults.targetManagedDiskId;
        }

        @CustomType.Setter
        public Builder capacityInBytes(Double capacityInBytes) {
            this.capacityInBytes = Objects.requireNonNull(capacityInBytes);
            return this;
        }
        @CustomType.Setter
        public Builder diskId(String diskId) {
            this.diskId = Objects.requireNonNull(diskId);
            return this;
        }
        @CustomType.Setter
        public Builder diskName(String diskName) {
            this.diskName = Objects.requireNonNull(diskName);
            return this;
        }
        @CustomType.Setter
        public Builder diskPath(String diskPath) {
            this.diskPath = Objects.requireNonNull(diskPath);
            return this;
        }
        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder isOSDisk(String isOSDisk) {
            this.isOSDisk = Objects.requireNonNull(isOSDisk);
            return this;
        }
        @CustomType.Setter
        public Builder logStorageAccountId(String logStorageAccountId) {
            this.logStorageAccountId = Objects.requireNonNull(logStorageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder logStorageAccountSasSecretName(String logStorageAccountSasSecretName) {
            this.logStorageAccountSasSecretName = Objects.requireNonNull(logStorageAccountSasSecretName);
            return this;
        }
        @CustomType.Setter
        public Builder seedManagedDiskId(String seedManagedDiskId) {
            this.seedManagedDiskId = Objects.requireNonNull(seedManagedDiskId);
            return this;
        }
        @CustomType.Setter
        public Builder targetManagedDiskId(String targetManagedDiskId) {
            this.targetManagedDiskId = Objects.requireNonNull(targetManagedDiskId);
            return this;
        }
        public VMwareCbtProtectedDiskDetailsResponse build() {
            final var o = new VMwareCbtProtectedDiskDetailsResponse();
            o.capacityInBytes = capacityInBytes;
            o.diskId = diskId;
            o.diskName = diskName;
            o.diskPath = diskPath;
            o.diskType = diskType;
            o.isOSDisk = isOSDisk;
            o.logStorageAccountId = logStorageAccountId;
            o.logStorageAccountSasSecretName = logStorageAccountSasSecretName;
            o.seedManagedDiskId = seedManagedDiskId;
            o.targetManagedDiskId = targetManagedDiskId;
            return o;
        }
    }
}
