// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProbeSettingsResponse {
    /**
     * @return The number of failures to allow before returning an unhealthy status.
     * 
     */
    private @Nullable Integer failureThreshold;
    /**
     * @return The delay before the first probe in ISO 8601 format.
     * 
     */
    private @Nullable String initialDelay;
    /**
     * @return The length of time between probes in ISO 8601 format.
     * 
     */
    private @Nullable String period;
    /**
     * @return The number of successful probes before returning a healthy status.
     * 
     */
    private @Nullable Integer successThreshold;
    /**
     * @return The probe timeout in ISO 8601 format.
     * 
     */
    private @Nullable String timeout;

    private ProbeSettingsResponse() {}
    /**
     * @return The number of failures to allow before returning an unhealthy status.
     * 
     */
    public Optional<Integer> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    /**
     * @return The delay before the first probe in ISO 8601 format.
     * 
     */
    public Optional<String> initialDelay() {
        return Optional.ofNullable(this.initialDelay);
    }
    /**
     * @return The length of time between probes in ISO 8601 format.
     * 
     */
    public Optional<String> period() {
        return Optional.ofNullable(this.period);
    }
    /**
     * @return The number of successful probes before returning a healthy status.
     * 
     */
    public Optional<Integer> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    /**
     * @return The probe timeout in ISO 8601 format.
     * 
     */
    public Optional<String> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer failureThreshold;
        private @Nullable String initialDelay;
        private @Nullable String period;
        private @Nullable Integer successThreshold;
        private @Nullable String timeout;
        public Builder() {}
        public Builder(ProbeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.initialDelay = defaults.initialDelay;
    	      this.period = defaults.period;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder failureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder initialDelay(@Nullable String initialDelay) {
            this.initialDelay = initialDelay;
            return this;
        }
        @CustomType.Setter
        public Builder period(@Nullable String period) {
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(@Nullable Integer successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable String timeout) {
            this.timeout = timeout;
            return this;
        }
        public ProbeSettingsResponse build() {
            final var o = new ProbeSettingsResponse();
            o.failureThreshold = failureThreshold;
            o.initialDelay = initialDelay;
            o.period = period;
            o.successThreshold = successThreshold;
            o.timeout = timeout;
            return o;
        }
    }
}
