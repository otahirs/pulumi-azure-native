// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.ApplicationGatewayConnectionDrainingResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationGatewayBackendHttpSettingsResponse {
    /**
     * @return Cookie name to use for the affinity cookie.
     * 
     */
    private @Nullable String affinityCookieName;
    /**
     * @return Array of references to application gateway authentication certificates.
     * 
     */
    private @Nullable List<SubResourceResponse> authenticationCertificates;
    /**
     * @return Connection draining of the backend http settings resource.
     * 
     */
    private @Nullable ApplicationGatewayConnectionDrainingResponse connectionDraining;
    /**
     * @return Cookie based affinity.
     * 
     */
    private @Nullable String cookieBasedAffinity;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Host header to be sent to the backend servers.
     * 
     */
    private @Nullable String hostName;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the backend http settings that is unique within an Application Gateway.
     * 
     */
    private @Nullable String name;
    /**
     * @return Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     * 
     */
    private @Nullable String path;
    /**
     * @return Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     * 
     */
    private @Nullable Boolean pickHostNameFromBackendAddress;
    /**
     * @return The destination port on the backend.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Probe resource of an application gateway.
     * 
     */
    private @Nullable SubResourceResponse probe;
    /**
     * @return Whether the probe is enabled. Default value is false.
     * 
     */
    private @Nullable Boolean probeEnabled;
    /**
     * @return The protocol used to communicate with the backend.
     * 
     */
    private @Nullable String protocol;
    /**
     * @return The provisioning state of the backend HTTP settings resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    private @Nullable Integer requestTimeout;
    /**
     * @return Array of references to application gateway trusted root certificates.
     * 
     */
    private @Nullable List<SubResourceResponse> trustedRootCertificates;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private ApplicationGatewayBackendHttpSettingsResponse() {}
    /**
     * @return Cookie name to use for the affinity cookie.
     * 
     */
    public Optional<String> affinityCookieName() {
        return Optional.ofNullable(this.affinityCookieName);
    }
    /**
     * @return Array of references to application gateway authentication certificates.
     * 
     */
    public List<SubResourceResponse> authenticationCertificates() {
        return this.authenticationCertificates == null ? List.of() : this.authenticationCertificates;
    }
    /**
     * @return Connection draining of the backend http settings resource.
     * 
     */
    public Optional<ApplicationGatewayConnectionDrainingResponse> connectionDraining() {
        return Optional.ofNullable(this.connectionDraining);
    }
    /**
     * @return Cookie based affinity.
     * 
     */
    public Optional<String> cookieBasedAffinity() {
        return Optional.ofNullable(this.cookieBasedAffinity);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Host header to be sent to the backend servers.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the backend http settings that is unique within an Application Gateway.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     * 
     */
    public Optional<Boolean> pickHostNameFromBackendAddress() {
        return Optional.ofNullable(this.pickHostNameFromBackendAddress);
    }
    /**
     * @return The destination port on the backend.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Probe resource of an application gateway.
     * 
     */
    public Optional<SubResourceResponse> probe() {
        return Optional.ofNullable(this.probe);
    }
    /**
     * @return Whether the probe is enabled. Default value is false.
     * 
     */
    public Optional<Boolean> probeEnabled() {
        return Optional.ofNullable(this.probeEnabled);
    }
    /**
     * @return The protocol used to communicate with the backend.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The provisioning state of the backend HTTP settings resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    public Optional<Integer> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }
    /**
     * @return Array of references to application gateway trusted root certificates.
     * 
     */
    public List<SubResourceResponse> trustedRootCertificates() {
        return this.trustedRootCertificates == null ? List.of() : this.trustedRootCertificates;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayBackendHttpSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String affinityCookieName;
        private @Nullable List<SubResourceResponse> authenticationCertificates;
        private @Nullable ApplicationGatewayConnectionDrainingResponse connectionDraining;
        private @Nullable String cookieBasedAffinity;
        private String etag;
        private @Nullable String hostName;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String path;
        private @Nullable Boolean pickHostNameFromBackendAddress;
        private @Nullable Integer port;
        private @Nullable SubResourceResponse probe;
        private @Nullable Boolean probeEnabled;
        private @Nullable String protocol;
        private String provisioningState;
        private @Nullable Integer requestTimeout;
        private @Nullable List<SubResourceResponse> trustedRootCertificates;
        private String type;
        public Builder() {}
        public Builder(ApplicationGatewayBackendHttpSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinityCookieName = defaults.affinityCookieName;
    	      this.authenticationCertificates = defaults.authenticationCertificates;
    	      this.connectionDraining = defaults.connectionDraining;
    	      this.cookieBasedAffinity = defaults.cookieBasedAffinity;
    	      this.etag = defaults.etag;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.pickHostNameFromBackendAddress = defaults.pickHostNameFromBackendAddress;
    	      this.port = defaults.port;
    	      this.probe = defaults.probe;
    	      this.probeEnabled = defaults.probeEnabled;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.trustedRootCertificates = defaults.trustedRootCertificates;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder affinityCookieName(@Nullable String affinityCookieName) {
            this.affinityCookieName = affinityCookieName;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationCertificates(@Nullable List<SubResourceResponse> authenticationCertificates) {
            this.authenticationCertificates = authenticationCertificates;
            return this;
        }
        public Builder authenticationCertificates(SubResourceResponse... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }
        @CustomType.Setter
        public Builder connectionDraining(@Nullable ApplicationGatewayConnectionDrainingResponse connectionDraining) {
            this.connectionDraining = connectionDraining;
            return this;
        }
        @CustomType.Setter
        public Builder cookieBasedAffinity(@Nullable String cookieBasedAffinity) {
            this.cookieBasedAffinity = cookieBasedAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pickHostNameFromBackendAddress(@Nullable Boolean pickHostNameFromBackendAddress) {
            this.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder probe(@Nullable SubResourceResponse probe) {
            this.probe = probe;
            return this;
        }
        @CustomType.Setter
        public Builder probeEnabled(@Nullable Boolean probeEnabled) {
            this.probeEnabled = probeEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder requestTimeout(@Nullable Integer requestTimeout) {
            this.requestTimeout = requestTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder trustedRootCertificates(@Nullable List<SubResourceResponse> trustedRootCertificates) {
            this.trustedRootCertificates = trustedRootCertificates;
            return this;
        }
        public Builder trustedRootCertificates(SubResourceResponse... trustedRootCertificates) {
            return trustedRootCertificates(List.of(trustedRootCertificates));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ApplicationGatewayBackendHttpSettingsResponse build() {
            final var o = new ApplicationGatewayBackendHttpSettingsResponse();
            o.affinityCookieName = affinityCookieName;
            o.authenticationCertificates = authenticationCertificates;
            o.connectionDraining = connectionDraining;
            o.cookieBasedAffinity = cookieBasedAffinity;
            o.etag = etag;
            o.hostName = hostName;
            o.id = id;
            o.name = name;
            o.path = path;
            o.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            o.port = port;
            o.probe = probe;
            o.probeEnabled = probeEnabled;
            o.protocol = protocol;
            o.provisioningState = provisioningState;
            o.requestTimeout = requestTimeout;
            o.trustedRootCertificates = trustedRootCertificates;
            o.type = type;
            return o;
        }
    }
}
