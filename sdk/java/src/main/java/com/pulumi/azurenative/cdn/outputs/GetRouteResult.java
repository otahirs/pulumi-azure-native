// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.outputs;

import com.pulumi.azurenative.cdn.outputs.CompressionSettingsResponse;
import com.pulumi.azurenative.cdn.outputs.ResourceReferenceResponse;
import com.pulumi.azurenative.cdn.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRouteResult {
    /**
     * @return compression settings.
     * 
     */
    private @Nullable CompressionSettingsResponse compressionSettings;
    /**
     * @return Domains referenced by this endpoint.
     * 
     */
    private @Nullable List<ResourceReferenceResponse> customDomains;
    private String deploymentStatus;
    /**
     * @return Whether to enable use of this rule. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
     * 
     */
    private @Nullable String enabledState;
    /**
     * @return Protocol this rule will use when forwarding traffic to backends.
     * 
     */
    private @Nullable String forwardingProtocol;
    /**
     * @return Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
     * 
     */
    private @Nullable String httpsRedirect;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return whether this route will be linked to the default endpoint domain.
     * 
     */
    private @Nullable String linkToDefaultDomain;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return A reference to the origin group.
     * 
     */
    private ResourceReferenceResponse originGroup;
    /**
     * @return A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    private @Nullable String originPath;
    /**
     * @return The route patterns of the rule.
     * 
     */
    private @Nullable List<String> patternsToMatch;
    /**
     * @return Provisioning status
     * 
     */
    private String provisioningState;
    /**
     * @return Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    private @Nullable String queryStringCachingBehavior;
    /**
     * @return rule sets referenced by this endpoint.
     * 
     */
    private @Nullable List<ResourceReferenceResponse> ruleSets;
    /**
     * @return List of supported protocols for this route.
     * 
     */
    private @Nullable List<String> supportedProtocols;
    /**
     * @return Read only system data
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetRouteResult() {}
    /**
     * @return compression settings.
     * 
     */
    public Optional<CompressionSettingsResponse> compressionSettings() {
        return Optional.ofNullable(this.compressionSettings);
    }
    /**
     * @return Domains referenced by this endpoint.
     * 
     */
    public List<ResourceReferenceResponse> customDomains() {
        return this.customDomains == null ? List.of() : this.customDomains;
    }
    public String deploymentStatus() {
        return this.deploymentStatus;
    }
    /**
     * @return Whether to enable use of this rule. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
     * 
     */
    public Optional<String> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }
    /**
     * @return Protocol this rule will use when forwarding traffic to backends.
     * 
     */
    public Optional<String> forwardingProtocol() {
        return Optional.ofNullable(this.forwardingProtocol);
    }
    /**
     * @return Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
     * 
     */
    public Optional<String> httpsRedirect() {
        return Optional.ofNullable(this.httpsRedirect);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return whether this route will be linked to the default endpoint domain.
     * 
     */
    public Optional<String> linkToDefaultDomain() {
        return Optional.ofNullable(this.linkToDefaultDomain);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A reference to the origin group.
     * 
     */
    public ResourceReferenceResponse originGroup() {
        return this.originGroup;
    }
    /**
     * @return A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    public Optional<String> originPath() {
        return Optional.ofNullable(this.originPath);
    }
    /**
     * @return The route patterns of the rule.
     * 
     */
    public List<String> patternsToMatch() {
        return this.patternsToMatch == null ? List.of() : this.patternsToMatch;
    }
    /**
     * @return Provisioning status
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    public Optional<String> queryStringCachingBehavior() {
        return Optional.ofNullable(this.queryStringCachingBehavior);
    }
    /**
     * @return rule sets referenced by this endpoint.
     * 
     */
    public List<ResourceReferenceResponse> ruleSets() {
        return this.ruleSets == null ? List.of() : this.ruleSets;
    }
    /**
     * @return List of supported protocols for this route.
     * 
     */
    public List<String> supportedProtocols() {
        return this.supportedProtocols == null ? List.of() : this.supportedProtocols;
    }
    /**
     * @return Read only system data
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRouteResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable CompressionSettingsResponse compressionSettings;
        private @Nullable List<ResourceReferenceResponse> customDomains;
        private String deploymentStatus;
        private @Nullable String enabledState;
        private @Nullable String forwardingProtocol;
        private @Nullable String httpsRedirect;
        private String id;
        private @Nullable String linkToDefaultDomain;
        private String name;
        private ResourceReferenceResponse originGroup;
        private @Nullable String originPath;
        private @Nullable List<String> patternsToMatch;
        private String provisioningState;
        private @Nullable String queryStringCachingBehavior;
        private @Nullable List<ResourceReferenceResponse> ruleSets;
        private @Nullable List<String> supportedProtocols;
        private SystemDataResponse systemData;
        private String type;
        public Builder() {}
        public Builder(GetRouteResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compressionSettings = defaults.compressionSettings;
    	      this.customDomains = defaults.customDomains;
    	      this.deploymentStatus = defaults.deploymentStatus;
    	      this.enabledState = defaults.enabledState;
    	      this.forwardingProtocol = defaults.forwardingProtocol;
    	      this.httpsRedirect = defaults.httpsRedirect;
    	      this.id = defaults.id;
    	      this.linkToDefaultDomain = defaults.linkToDefaultDomain;
    	      this.name = defaults.name;
    	      this.originGroup = defaults.originGroup;
    	      this.originPath = defaults.originPath;
    	      this.patternsToMatch = defaults.patternsToMatch;
    	      this.provisioningState = defaults.provisioningState;
    	      this.queryStringCachingBehavior = defaults.queryStringCachingBehavior;
    	      this.ruleSets = defaults.ruleSets;
    	      this.supportedProtocols = defaults.supportedProtocols;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder compressionSettings(@Nullable CompressionSettingsResponse compressionSettings) {
            this.compressionSettings = compressionSettings;
            return this;
        }
        @CustomType.Setter
        public Builder customDomains(@Nullable List<ResourceReferenceResponse> customDomains) {
            this.customDomains = customDomains;
            return this;
        }
        public Builder customDomains(ResourceReferenceResponse... customDomains) {
            return customDomains(List.of(customDomains));
        }
        @CustomType.Setter
        public Builder deploymentStatus(String deploymentStatus) {
            this.deploymentStatus = Objects.requireNonNull(deploymentStatus);
            return this;
        }
        @CustomType.Setter
        public Builder enabledState(@Nullable String enabledState) {
            this.enabledState = enabledState;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingProtocol(@Nullable String forwardingProtocol) {
            this.forwardingProtocol = forwardingProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder httpsRedirect(@Nullable String httpsRedirect) {
            this.httpsRedirect = httpsRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder linkToDefaultDomain(@Nullable String linkToDefaultDomain) {
            this.linkToDefaultDomain = linkToDefaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder originGroup(ResourceReferenceResponse originGroup) {
            this.originGroup = Objects.requireNonNull(originGroup);
            return this;
        }
        @CustomType.Setter
        public Builder originPath(@Nullable String originPath) {
            this.originPath = originPath;
            return this;
        }
        @CustomType.Setter
        public Builder patternsToMatch(@Nullable List<String> patternsToMatch) {
            this.patternsToMatch = patternsToMatch;
            return this;
        }
        public Builder patternsToMatch(String... patternsToMatch) {
            return patternsToMatch(List.of(patternsToMatch));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder queryStringCachingBehavior(@Nullable String queryStringCachingBehavior) {
            this.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder ruleSets(@Nullable List<ResourceReferenceResponse> ruleSets) {
            this.ruleSets = ruleSets;
            return this;
        }
        public Builder ruleSets(ResourceReferenceResponse... ruleSets) {
            return ruleSets(List.of(ruleSets));
        }
        @CustomType.Setter
        public Builder supportedProtocols(@Nullable List<String> supportedProtocols) {
            this.supportedProtocols = supportedProtocols;
            return this;
        }
        public Builder supportedProtocols(String... supportedProtocols) {
            return supportedProtocols(List.of(supportedProtocols));
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetRouteResult build() {
            final var o = new GetRouteResult();
            o.compressionSettings = compressionSettings;
            o.customDomains = customDomains;
            o.deploymentStatus = deploymentStatus;
            o.enabledState = enabledState;
            o.forwardingProtocol = forwardingProtocol;
            o.httpsRedirect = httpsRedirect;
            o.id = id;
            o.linkToDefaultDomain = linkToDefaultDomain;
            o.name = name;
            o.originGroup = originGroup;
            o.originPath = originPath;
            o.patternsToMatch = patternsToMatch;
            o.provisioningState = provisioningState;
            o.queryStringCachingBehavior = queryStringCachingBehavior;
            o.ruleSets = ruleSets;
            o.supportedProtocols = supportedProtocols;
            o.systemData = systemData;
            o.type = type;
            return o;
        }
    }
}
