// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.ApiErrorResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AvailablePatchSummaryResponse {
    /**
     * @return The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    private String assessmentActivityId;
    /**
     * @return The number of critical or security patches that have been detected as available and not yet installed.
     * 
     */
    private Integer criticalAndSecurityPatchCount;
    /**
     * @return The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    private ApiErrorResponse error;
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    private String lastModifiedTime;
    /**
     * @return The number of all available patches excluding critical and security.
     * 
     */
    private Integer otherPatchCount;
    /**
     * @return The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
     * 
     */
    private Boolean rebootPending;
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    private String startTime;
    /**
     * @return The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    private String status;

    private AvailablePatchSummaryResponse() {}
    /**
     * @return The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    public String assessmentActivityId() {
        return this.assessmentActivityId;
    }
    /**
     * @return The number of critical or security patches that have been detected as available and not yet installed.
     * 
     */
    public Integer criticalAndSecurityPatchCount() {
        return this.criticalAndSecurityPatchCount;
    }
    /**
     * @return The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    public ApiErrorResponse error() {
        return this.error;
    }
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return The number of all available patches excluding critical and security.
     * 
     */
    public Integer otherPatchCount() {
        return this.otherPatchCount;
    }
    /**
     * @return The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
     * 
     */
    public Boolean rebootPending() {
        return this.rebootPending;
    }
    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AvailablePatchSummaryResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assessmentActivityId;
        private Integer criticalAndSecurityPatchCount;
        private ApiErrorResponse error;
        private String lastModifiedTime;
        private Integer otherPatchCount;
        private Boolean rebootPending;
        private String startTime;
        private String status;
        public Builder() {}
        public Builder(AvailablePatchSummaryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assessmentActivityId = defaults.assessmentActivityId;
    	      this.criticalAndSecurityPatchCount = defaults.criticalAndSecurityPatchCount;
    	      this.error = defaults.error;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.otherPatchCount = defaults.otherPatchCount;
    	      this.rebootPending = defaults.rebootPending;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder assessmentActivityId(String assessmentActivityId) {
            this.assessmentActivityId = Objects.requireNonNull(assessmentActivityId);
            return this;
        }
        @CustomType.Setter
        public Builder criticalAndSecurityPatchCount(Integer criticalAndSecurityPatchCount) {
            this.criticalAndSecurityPatchCount = Objects.requireNonNull(criticalAndSecurityPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder error(ApiErrorResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder otherPatchCount(Integer otherPatchCount) {
            this.otherPatchCount = Objects.requireNonNull(otherPatchCount);
            return this;
        }
        @CustomType.Setter
        public Builder rebootPending(Boolean rebootPending) {
            this.rebootPending = Objects.requireNonNull(rebootPending);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public AvailablePatchSummaryResponse build() {
            final var o = new AvailablePatchSummaryResponse();
            o.assessmentActivityId = assessmentActivityId;
            o.criticalAndSecurityPatchCount = criticalAndSecurityPatchCount;
            o.error = error;
            o.lastModifiedTime = lastModifiedTime;
            o.otherPatchCount = otherPatchCount;
            o.rebootPending = rebootPending;
            o.startTime = startTime;
            o.status = status;
            return o;
        }
    }
}
