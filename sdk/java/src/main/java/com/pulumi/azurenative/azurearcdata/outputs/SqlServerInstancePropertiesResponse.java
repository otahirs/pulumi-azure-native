// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SqlServerInstancePropertiesResponse {
    /**
     * @return SQL Server collation.
     * 
     */
    private @Nullable String collation;
    /**
     * @return ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     */
    private String containerResourceId;
    /**
     * @return The time when the resource was created.
     * 
     */
    private String createTime;
    /**
     * @return SQL Server current version.
     * 
     */
    private @Nullable String currentVersion;
    /**
     * @return SQL Server edition.
     * 
     */
    private @Nullable String edition;
    /**
     * @return SQL Server instance name.
     * 
     */
    private @Nullable String instanceName;
    /**
     * @return SQL Server license type.
     * 
     */
    private @Nullable String licenseType;
    /**
     * @return SQL Server update level.
     * 
     */
    private @Nullable String patchLevel;
    /**
     * @return SQL Server product ID.
     * 
     */
    private @Nullable String productId;
    private String provisioningState;
    /**
     * @return The cloud connectivity status.
     * 
     */
    private String status;
    /**
     * @return Dynamic TCP ports used by SQL Server.
     * 
     */
    private @Nullable String tcpDynamicPorts;
    /**
     * @return Static TCP ports used by SQL Server.
     * 
     */
    private @Nullable String tcpStaticPorts;
    /**
     * @return The number of logical processors used by the SQL Server instance.
     * 
     */
    private @Nullable String vCore;
    /**
     * @return SQL Server version.
     * 
     */
    private @Nullable String version;

    private SqlServerInstancePropertiesResponse() {}
    /**
     * @return SQL Server collation.
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }
    /**
     * @return ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     */
    public String containerResourceId() {
        return this.containerResourceId;
    }
    /**
     * @return The time when the resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return SQL Server current version.
     * 
     */
    public Optional<String> currentVersion() {
        return Optional.ofNullable(this.currentVersion);
    }
    /**
     * @return SQL Server edition.
     * 
     */
    public Optional<String> edition() {
        return Optional.ofNullable(this.edition);
    }
    /**
     * @return SQL Server instance name.
     * 
     */
    public Optional<String> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }
    /**
     * @return SQL Server license type.
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }
    /**
     * @return SQL Server update level.
     * 
     */
    public Optional<String> patchLevel() {
        return Optional.ofNullable(this.patchLevel);
    }
    /**
     * @return SQL Server product ID.
     * 
     */
    public Optional<String> productId() {
        return Optional.ofNullable(this.productId);
    }
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The cloud connectivity status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Dynamic TCP ports used by SQL Server.
     * 
     */
    public Optional<String> tcpDynamicPorts() {
        return Optional.ofNullable(this.tcpDynamicPorts);
    }
    /**
     * @return Static TCP ports used by SQL Server.
     * 
     */
    public Optional<String> tcpStaticPorts() {
        return Optional.ofNullable(this.tcpStaticPorts);
    }
    /**
     * @return The number of logical processors used by the SQL Server instance.
     * 
     */
    public Optional<String> vCore() {
        return Optional.ofNullable(this.vCore);
    }
    /**
     * @return SQL Server version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlServerInstancePropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String collation;
        private String containerResourceId;
        private String createTime;
        private @Nullable String currentVersion;
        private @Nullable String edition;
        private @Nullable String instanceName;
        private @Nullable String licenseType;
        private @Nullable String patchLevel;
        private @Nullable String productId;
        private String provisioningState;
        private String status;
        private @Nullable String tcpDynamicPorts;
        private @Nullable String tcpStaticPorts;
        private @Nullable String vCore;
        private @Nullable String version;
        public Builder() {}
        public Builder(SqlServerInstancePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collation = defaults.collation;
    	      this.containerResourceId = defaults.containerResourceId;
    	      this.createTime = defaults.createTime;
    	      this.currentVersion = defaults.currentVersion;
    	      this.edition = defaults.edition;
    	      this.instanceName = defaults.instanceName;
    	      this.licenseType = defaults.licenseType;
    	      this.patchLevel = defaults.patchLevel;
    	      this.productId = defaults.productId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.status = defaults.status;
    	      this.tcpDynamicPorts = defaults.tcpDynamicPorts;
    	      this.tcpStaticPorts = defaults.tcpStaticPorts;
    	      this.vCore = defaults.vCore;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder collation(@Nullable String collation) {
            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder containerResourceId(String containerResourceId) {
            this.containerResourceId = Objects.requireNonNull(containerResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder currentVersion(@Nullable String currentVersion) {
            this.currentVersion = currentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder edition(@Nullable String edition) {
            this.edition = edition;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(@Nullable String instanceName) {
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(@Nullable String licenseType) {
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder patchLevel(@Nullable String patchLevel) {
            this.patchLevel = patchLevel;
            return this;
        }
        @CustomType.Setter
        public Builder productId(@Nullable String productId) {
            this.productId = productId;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tcpDynamicPorts(@Nullable String tcpDynamicPorts) {
            this.tcpDynamicPorts = tcpDynamicPorts;
            return this;
        }
        @CustomType.Setter
        public Builder tcpStaticPorts(@Nullable String tcpStaticPorts) {
            this.tcpStaticPorts = tcpStaticPorts;
            return this;
        }
        @CustomType.Setter
        public Builder vCore(@Nullable String vCore) {
            this.vCore = vCore;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public SqlServerInstancePropertiesResponse build() {
            final var o = new SqlServerInstancePropertiesResponse();
            o.collation = collation;
            o.containerResourceId = containerResourceId;
            o.createTime = createTime;
            o.currentVersion = currentVersion;
            o.edition = edition;
            o.instanceName = instanceName;
            o.licenseType = licenseType;
            o.patchLevel = patchLevel;
            o.productId = productId;
            o.provisioningState = provisioningState;
            o.status = status;
            o.tcpDynamicPorts = tcpDynamicPorts;
            o.tcpStaticPorts = tcpStaticPorts;
            o.vCore = vCore;
            o.version = version;
            return o;
        }
    }
}
