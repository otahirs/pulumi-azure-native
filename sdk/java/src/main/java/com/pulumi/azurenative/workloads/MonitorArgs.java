// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads;

import com.pulumi.azurenative.workloads.enums.RoutingPreference;
import com.pulumi.azurenative.workloads.inputs.ManagedRGConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.UserAssignedServiceIdentityArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorArgs Empty = new MonitorArgs();

    /**
     * The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
     * 
     */
    @Import(name="appLocation")
    private @Nullable Output<String> appLocation;

    /**
     * @return The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
     * 
     */
    public Optional<Output<String>> appLocation() {
        return Optional.ofNullable(this.appLocation);
    }

    /**
     * Managed service identity (user assigned identities)
     * 
     */
    @Import(name="identity")
    private @Nullable Output<UserAssignedServiceIdentityArgs> identity;

    /**
     * @return Managed service identity (user assigned identities)
     * 
     */
    public Optional<Output<UserAssignedServiceIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
     * 
     */
    @Import(name="logAnalyticsWorkspaceArmId")
    private @Nullable Output<String> logAnalyticsWorkspaceArmId;

    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
     * 
     */
    public Optional<Output<String>> logAnalyticsWorkspaceArmId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceArmId);
    }

    /**
     * Managed resource group configuration
     * 
     */
    @Import(name="managedResourceGroupConfiguration")
    private @Nullable Output<ManagedRGConfigurationArgs> managedResourceGroupConfiguration;

    /**
     * @return Managed resource group configuration
     * 
     */
    public Optional<Output<ManagedRGConfigurationArgs>> managedResourceGroupConfiguration() {
        return Optional.ofNullable(this.managedResourceGroupConfiguration);
    }

    /**
     * Name of the SAP monitor resource.
     * 
     */
    @Import(name="monitorName")
    private @Nullable Output<String> monitorName;

    /**
     * @return Name of the SAP monitor resource.
     * 
     */
    public Optional<Output<String>> monitorName() {
        return Optional.ofNullable(this.monitorName);
    }

    /**
     * The subnet which the SAP monitor will be deployed in
     * 
     */
    @Import(name="monitorSubnet")
    private @Nullable Output<String> monitorSubnet;

    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    public Optional<Output<String>> monitorSubnet() {
        return Optional.ofNullable(this.monitorSubnet);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
     * 
     */
    @Import(name="routingPreference")
    private @Nullable Output<Either<String,RoutingPreference>> routingPreference;

    /**
     * @return Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
     * 
     */
    public Optional<Output<Either<String,RoutingPreference>>> routingPreference() {
        return Optional.ofNullable(this.routingPreference);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MonitorArgs() {}

    private MonitorArgs(MonitorArgs $) {
        this.appLocation = $.appLocation;
        this.identity = $.identity;
        this.location = $.location;
        this.logAnalyticsWorkspaceArmId = $.logAnalyticsWorkspaceArmId;
        this.managedResourceGroupConfiguration = $.managedResourceGroupConfiguration;
        this.monitorName = $.monitorName;
        this.monitorSubnet = $.monitorSubnet;
        this.resourceGroupName = $.resourceGroupName;
        this.routingPreference = $.routingPreference;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorArgs $;

        public Builder() {
            $ = new MonitorArgs();
        }

        public Builder(MonitorArgs defaults) {
            $ = new MonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appLocation The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(@Nullable Output<String> appLocation) {
            $.appLocation = appLocation;
            return this;
        }

        /**
         * @param appLocation The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(String appLocation) {
            return appLocation(Output.of(appLocation));
        }

        /**
         * @param identity Managed service identity (user assigned identities)
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<UserAssignedServiceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Managed service identity (user assigned identities)
         * 
         * @return builder
         * 
         */
        public Builder identity(UserAssignedServiceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logAnalyticsWorkspaceArmId The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceArmId(@Nullable Output<String> logAnalyticsWorkspaceArmId) {
            $.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            return this;
        }

        /**
         * @param logAnalyticsWorkspaceArmId The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
            return logAnalyticsWorkspaceArmId(Output.of(logAnalyticsWorkspaceArmId));
        }

        /**
         * @param managedResourceGroupConfiguration Managed resource group configuration
         * 
         * @return builder
         * 
         */
        public Builder managedResourceGroupConfiguration(@Nullable Output<ManagedRGConfigurationArgs> managedResourceGroupConfiguration) {
            $.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
            return this;
        }

        /**
         * @param managedResourceGroupConfiguration Managed resource group configuration
         * 
         * @return builder
         * 
         */
        public Builder managedResourceGroupConfiguration(ManagedRGConfigurationArgs managedResourceGroupConfiguration) {
            return managedResourceGroupConfiguration(Output.of(managedResourceGroupConfiguration));
        }

        /**
         * @param monitorName Name of the SAP monitor resource.
         * 
         * @return builder
         * 
         */
        public Builder monitorName(@Nullable Output<String> monitorName) {
            $.monitorName = monitorName;
            return this;
        }

        /**
         * @param monitorName Name of the SAP monitor resource.
         * 
         * @return builder
         * 
         */
        public Builder monitorName(String monitorName) {
            return monitorName(Output.of(monitorName));
        }

        /**
         * @param monitorSubnet The subnet which the SAP monitor will be deployed in
         * 
         * @return builder
         * 
         */
        public Builder monitorSubnet(@Nullable Output<String> monitorSubnet) {
            $.monitorSubnet = monitorSubnet;
            return this;
        }

        /**
         * @param monitorSubnet The subnet which the SAP monitor will be deployed in
         * 
         * @return builder
         * 
         */
        public Builder monitorSubnet(String monitorSubnet) {
            return monitorSubnet(Output.of(monitorSubnet));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param routingPreference Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
         * 
         * @return builder
         * 
         */
        public Builder routingPreference(@Nullable Output<Either<String,RoutingPreference>> routingPreference) {
            $.routingPreference = routingPreference;
            return this;
        }

        /**
         * @param routingPreference Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
         * 
         * @return builder
         * 
         */
        public Builder routingPreference(Either<String,RoutingPreference> routingPreference) {
            return routingPreference(Output.of(routingPreference));
        }

        /**
         * @param routingPreference Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
         * 
         * @return builder
         * 
         */
        public Builder routingPreference(String routingPreference) {
            return routingPreference(Either.ofLeft(routingPreference));
        }

        /**
         * @param routingPreference Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
         * 
         * @return builder
         * 
         */
        public Builder routingPreference(RoutingPreference routingPreference) {
            return routingPreference(Either.ofRight(routingPreference));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public MonitorArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
