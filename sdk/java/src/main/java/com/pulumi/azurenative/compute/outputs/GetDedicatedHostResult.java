// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.DedicatedHostInstanceViewResponse;
import com.pulumi.azurenative.compute.outputs.SkuResponse;
import com.pulumi.azurenative.compute.outputs.SubResourceReadOnlyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDedicatedHostResult {
    /**
     * @return Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to &#39;true&#39; when not provided.
     * 
     */
    private @Nullable Boolean autoReplaceOnFailure;
    /**
     * @return A unique id generated and assigned to the dedicated host by the platform. &lt;br&gt;&lt;br&gt; Does not change throughout the lifetime of the host.
     * 
     */
    private String hostId;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return The dedicated host instance view.
     * 
     */
    private DedicatedHostInstanceViewResponse instanceView;
    /**
     * @return Specifies the software license type that will be applied to the VMs deployed on the dedicated host. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **Windows_Server_Hybrid** &lt;br&gt;&lt;br&gt; **Windows_Server_Perpetual** &lt;br&gt;&lt;br&gt; Default: **None**
     * 
     */
    private @Nullable String licenseType;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return Fault domain of the dedicated host within a dedicated host group.
     * 
     */
    private @Nullable Integer platformFaultDomain;
    /**
     * @return The provisioning state, which only appears in the response.
     * 
     */
    private String provisioningState;
    /**
     * @return The date when the host was first provisioned.
     * 
     */
    private String provisioningTime;
    /**
     * @return SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
     * 
     */
    private SkuResponse sku;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type
     * 
     */
    private String type;
    /**
     * @return A list of references to all virtual machines in the Dedicated Host.
     * 
     */
    private List<SubResourceReadOnlyResponse> virtualMachines;

    private GetDedicatedHostResult() {}
    /**
     * @return Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to &#39;true&#39; when not provided.
     * 
     */
    public Optional<Boolean> autoReplaceOnFailure() {
        return Optional.ofNullable(this.autoReplaceOnFailure);
    }
    /**
     * @return A unique id generated and assigned to the dedicated host by the platform. &lt;br&gt;&lt;br&gt; Does not change throughout the lifetime of the host.
     * 
     */
    public String hostId() {
        return this.hostId;
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The dedicated host instance view.
     * 
     */
    public DedicatedHostInstanceViewResponse instanceView() {
        return this.instanceView;
    }
    /**
     * @return Specifies the software license type that will be applied to the VMs deployed on the dedicated host. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **Windows_Server_Hybrid** &lt;br&gt;&lt;br&gt; **Windows_Server_Perpetual** &lt;br&gt;&lt;br&gt; Default: **None**
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Fault domain of the dedicated host within a dedicated host group.
     * 
     */
    public Optional<Integer> platformFaultDomain() {
        return Optional.ofNullable(this.platformFaultDomain);
    }
    /**
     * @return The provisioning state, which only appears in the response.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The date when the host was first provisioned.
     * 
     */
    public String provisioningTime() {
        return this.provisioningTime;
    }
    /**
     * @return SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values.
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A list of references to all virtual machines in the Dedicated Host.
     * 
     */
    public List<SubResourceReadOnlyResponse> virtualMachines() {
        return this.virtualMachines;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDedicatedHostResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoReplaceOnFailure;
        private String hostId;
        private String id;
        private DedicatedHostInstanceViewResponse instanceView;
        private @Nullable String licenseType;
        private String location;
        private String name;
        private @Nullable Integer platformFaultDomain;
        private String provisioningState;
        private String provisioningTime;
        private SkuResponse sku;
        private @Nullable Map<String,String> tags;
        private String type;
        private List<SubResourceReadOnlyResponse> virtualMachines;
        public Builder() {}
        public Builder(GetDedicatedHostResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoReplaceOnFailure = defaults.autoReplaceOnFailure;
    	      this.hostId = defaults.hostId;
    	      this.id = defaults.id;
    	      this.instanceView = defaults.instanceView;
    	      this.licenseType = defaults.licenseType;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.platformFaultDomain = defaults.platformFaultDomain;
    	      this.provisioningState = defaults.provisioningState;
    	      this.provisioningTime = defaults.provisioningTime;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualMachines = defaults.virtualMachines;
        }

        @CustomType.Setter
        public Builder autoReplaceOnFailure(@Nullable Boolean autoReplaceOnFailure) {
            this.autoReplaceOnFailure = autoReplaceOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder hostId(String hostId) {
            this.hostId = Objects.requireNonNull(hostId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceView(DedicatedHostInstanceViewResponse instanceView) {
            this.instanceView = Objects.requireNonNull(instanceView);
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(@Nullable String licenseType) {
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder platformFaultDomain(@Nullable Integer platformFaultDomain) {
            this.platformFaultDomain = platformFaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningTime(String provisioningTime) {
            this.provisioningTime = Objects.requireNonNull(provisioningTime);
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualMachines(List<SubResourceReadOnlyResponse> virtualMachines) {
            this.virtualMachines = Objects.requireNonNull(virtualMachines);
            return this;
        }
        public Builder virtualMachines(SubResourceReadOnlyResponse... virtualMachines) {
            return virtualMachines(List.of(virtualMachines));
        }
        public GetDedicatedHostResult build() {
            final var o = new GetDedicatedHostResult();
            o.autoReplaceOnFailure = autoReplaceOnFailure;
            o.hostId = hostId;
            o.id = id;
            o.instanceView = instanceView;
            o.licenseType = licenseType;
            o.location = location;
            o.name = name;
            o.platformFaultDomain = platformFaultDomain;
            o.provisioningState = provisioningState;
            o.provisioningTime = provisioningTime;
            o.sku = sku;
            o.tags = tags;
            o.type = type;
            o.virtualMachines = virtualMachines;
            return o;
        }
    }
}
