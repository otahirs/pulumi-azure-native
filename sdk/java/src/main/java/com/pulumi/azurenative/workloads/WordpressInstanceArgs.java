// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads;

import com.pulumi.azurenative.workloads.enums.WordpressVersions;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WordpressInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WordpressInstanceArgs Empty = new WordpressInstanceArgs();

    /**
     * Database name used by the application
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Database name used by the application
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * User name used by the application to connect to database
     * 
     */
    @Import(name="databaseUser")
    private @Nullable Output<String> databaseUser;

    /**
     * @return User name used by the application to connect to database
     * 
     */
    public Optional<Output<String>> databaseUser() {
        return Optional.ofNullable(this.databaseUser);
    }

    /**
     * Php workload name
     * 
     */
    @Import(name="phpWorkloadName", required=true)
    private Output<String> phpWorkloadName;

    /**
     * @return Php workload name
     * 
     */
    public Output<String> phpWorkloadName() {
        return this.phpWorkloadName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Application version
     * 
     */
    @Import(name="version", required=true)
    private Output<Either<String,WordpressVersions>> version;

    /**
     * @return Application version
     * 
     */
    public Output<Either<String,WordpressVersions>> version() {
        return this.version;
    }

    private WordpressInstanceArgs() {}

    private WordpressInstanceArgs(WordpressInstanceArgs $) {
        this.databaseName = $.databaseName;
        this.databaseUser = $.databaseUser;
        this.phpWorkloadName = $.phpWorkloadName;
        this.resourceGroupName = $.resourceGroupName;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WordpressInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WordpressInstanceArgs $;

        public Builder() {
            $ = new WordpressInstanceArgs();
        }

        public Builder(WordpressInstanceArgs defaults) {
            $ = new WordpressInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Database name used by the application
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Database name used by the application
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param databaseUser User name used by the application to connect to database
         * 
         * @return builder
         * 
         */
        public Builder databaseUser(@Nullable Output<String> databaseUser) {
            $.databaseUser = databaseUser;
            return this;
        }

        /**
         * @param databaseUser User name used by the application to connect to database
         * 
         * @return builder
         * 
         */
        public Builder databaseUser(String databaseUser) {
            return databaseUser(Output.of(databaseUser));
        }

        /**
         * @param phpWorkloadName Php workload name
         * 
         * @return builder
         * 
         */
        public Builder phpWorkloadName(Output<String> phpWorkloadName) {
            $.phpWorkloadName = phpWorkloadName;
            return this;
        }

        /**
         * @param phpWorkloadName Php workload name
         * 
         * @return builder
         * 
         */
        public Builder phpWorkloadName(String phpWorkloadName) {
            return phpWorkloadName(Output.of(phpWorkloadName));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param version Application version
         * 
         * @return builder
         * 
         */
        public Builder version(Output<Either<String,WordpressVersions>> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Application version
         * 
         * @return builder
         * 
         */
        public Builder version(Either<String,WordpressVersions> version) {
            return version(Output.of(version));
        }

        /**
         * @param version Application version
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Either.ofLeft(version));
        }

        /**
         * @param version Application version
         * 
         * @return builder
         * 
         */
        public Builder version(WordpressVersions version) {
            return version(Either.ofRight(version));
        }

        public WordpressInstanceArgs build() {
            $.phpWorkloadName = Objects.requireNonNull($.phpWorkloadName, "expected parameter 'phpWorkloadName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
