// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorMappingFormatResponse {
    /**
     * @return The oData language.
     * 
     */
    private @Nullable String acceptLanguage;
    /**
     * @return Character separating array elements.
     * 
     */
    private @Nullable String arraySeparator;
    /**
     * @return The character that signifies a break between columns.
     * 
     */
    private @Nullable String columnDelimiter;
    /**
     * @return The type mapping format.
     * 
     */
    private String formatType;
    /**
     * @return Quote character, used to indicate enquoted fields.
     * 
     */
    private @Nullable String quoteCharacter;
    /**
     * @return Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    private @Nullable String quoteEscapeCharacter;

    private ConnectorMappingFormatResponse() {}
    /**
     * @return The oData language.
     * 
     */
    public Optional<String> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }
    /**
     * @return Character separating array elements.
     * 
     */
    public Optional<String> arraySeparator() {
        return Optional.ofNullable(this.arraySeparator);
    }
    /**
     * @return The character that signifies a break between columns.
     * 
     */
    public Optional<String> columnDelimiter() {
        return Optional.ofNullable(this.columnDelimiter);
    }
    /**
     * @return The type mapping format.
     * 
     */
    public String formatType() {
        return this.formatType;
    }
    /**
     * @return Quote character, used to indicate enquoted fields.
     * 
     */
    public Optional<String> quoteCharacter() {
        return Optional.ofNullable(this.quoteCharacter);
    }
    /**
     * @return Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    public Optional<String> quoteEscapeCharacter() {
        return Optional.ofNullable(this.quoteEscapeCharacter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorMappingFormatResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acceptLanguage;
        private @Nullable String arraySeparator;
        private @Nullable String columnDelimiter;
        private String formatType;
        private @Nullable String quoteCharacter;
        private @Nullable String quoteEscapeCharacter;
        public Builder() {}
        public Builder(ConnectorMappingFormatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptLanguage = defaults.acceptLanguage;
    	      this.arraySeparator = defaults.arraySeparator;
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.formatType = defaults.formatType;
    	      this.quoteCharacter = defaults.quoteCharacter;
    	      this.quoteEscapeCharacter = defaults.quoteEscapeCharacter;
        }

        @CustomType.Setter
        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            this.acceptLanguage = acceptLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder arraySeparator(@Nullable String arraySeparator) {
            this.arraySeparator = arraySeparator;
            return this;
        }
        @CustomType.Setter
        public Builder columnDelimiter(@Nullable String columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder formatType(String formatType) {
            this.formatType = Objects.requireNonNull(formatType);
            return this;
        }
        @CustomType.Setter
        public Builder quoteCharacter(@Nullable String quoteCharacter) {
            this.quoteCharacter = quoteCharacter;
            return this;
        }
        @CustomType.Setter
        public Builder quoteEscapeCharacter(@Nullable String quoteEscapeCharacter) {
            this.quoteEscapeCharacter = quoteEscapeCharacter;
            return this;
        }
        public ConnectorMappingFormatResponse build() {
            final var o = new ConnectorMappingFormatResponse();
            o.acceptLanguage = acceptLanguage;
            o.arraySeparator = arraySeparator;
            o.columnDelimiter = columnDelimiter;
            o.formatType = formatType;
            o.quoteCharacter = quoteCharacter;
            o.quoteEscapeCharacter = quoteEscapeCharacter;
            return o;
        }
    }
}
