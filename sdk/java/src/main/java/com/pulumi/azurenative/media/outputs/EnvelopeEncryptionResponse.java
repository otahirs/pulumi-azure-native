// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.EnabledProtocolsResponse;
import com.pulumi.azurenative.media.outputs.StreamingPolicyContentKeysResponse;
import com.pulumi.azurenative.media.outputs.TrackSelectionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EnvelopeEncryptionResponse {
    /**
     * @return Representing which tracks should not be encrypted
     * 
     */
    private @Nullable List<TrackSelectionResponse> clearTracks;
    /**
     * @return Representing default content key for each encryption scheme and separate content keys for specific tracks
     * 
     */
    private @Nullable StreamingPolicyContentKeysResponse contentKeys;
    /**
     * @return Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
     * 
     */
    private @Nullable String customKeyAcquisitionUrlTemplate;
    /**
     * @return Representing supported protocols
     * 
     */
    private @Nullable EnabledProtocolsResponse enabledProtocols;

    private EnvelopeEncryptionResponse() {}
    /**
     * @return Representing which tracks should not be encrypted
     * 
     */
    public List<TrackSelectionResponse> clearTracks() {
        return this.clearTracks == null ? List.of() : this.clearTracks;
    }
    /**
     * @return Representing default content key for each encryption scheme and separate content keys for specific tracks
     * 
     */
    public Optional<StreamingPolicyContentKeysResponse> contentKeys() {
        return Optional.ofNullable(this.contentKeys);
    }
    /**
     * @return Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
     * 
     */
    public Optional<String> customKeyAcquisitionUrlTemplate() {
        return Optional.ofNullable(this.customKeyAcquisitionUrlTemplate);
    }
    /**
     * @return Representing supported protocols
     * 
     */
    public Optional<EnabledProtocolsResponse> enabledProtocols() {
        return Optional.ofNullable(this.enabledProtocols);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvelopeEncryptionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<TrackSelectionResponse> clearTracks;
        private @Nullable StreamingPolicyContentKeysResponse contentKeys;
        private @Nullable String customKeyAcquisitionUrlTemplate;
        private @Nullable EnabledProtocolsResponse enabledProtocols;
        public Builder() {}
        public Builder(EnvelopeEncryptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clearTracks = defaults.clearTracks;
    	      this.contentKeys = defaults.contentKeys;
    	      this.customKeyAcquisitionUrlTemplate = defaults.customKeyAcquisitionUrlTemplate;
    	      this.enabledProtocols = defaults.enabledProtocols;
        }

        @CustomType.Setter
        public Builder clearTracks(@Nullable List<TrackSelectionResponse> clearTracks) {
            this.clearTracks = clearTracks;
            return this;
        }
        public Builder clearTracks(TrackSelectionResponse... clearTracks) {
            return clearTracks(List.of(clearTracks));
        }
        @CustomType.Setter
        public Builder contentKeys(@Nullable StreamingPolicyContentKeysResponse contentKeys) {
            this.contentKeys = contentKeys;
            return this;
        }
        @CustomType.Setter
        public Builder customKeyAcquisitionUrlTemplate(@Nullable String customKeyAcquisitionUrlTemplate) {
            this.customKeyAcquisitionUrlTemplate = customKeyAcquisitionUrlTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder enabledProtocols(@Nullable EnabledProtocolsResponse enabledProtocols) {
            this.enabledProtocols = enabledProtocols;
            return this;
        }
        public EnvelopeEncryptionResponse build() {
            final var o = new EnvelopeEncryptionResponse();
            o.clearTracks = clearTracks;
            o.contentKeys = contentKeys;
            o.customKeyAcquisitionUrlTemplate = customKeyAcquisitionUrlTemplate;
            o.enabledProtocols = enabledProtocols;
            return o;
        }
    }
}
