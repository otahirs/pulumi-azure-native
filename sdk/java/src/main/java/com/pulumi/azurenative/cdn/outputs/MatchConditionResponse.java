// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MatchConditionResponse {
    /**
     * @return List of possible match values.
     * 
     */
    private List<String> matchValue;
    /**
     * @return Match variable to compare against.
     * 
     */
    private String matchVariable;
    /**
     * @return Describes if the result of this condition should be negated.
     * 
     */
    private @Nullable Boolean negateCondition;
    /**
     * @return Describes operator to be matched
     * 
     */
    private String operator;
    /**
     * @return Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
     * 
     */
    private @Nullable String selector;
    /**
     * @return List of transforms.
     * 
     */
    private @Nullable List<String> transforms;

    private MatchConditionResponse() {}
    /**
     * @return List of possible match values.
     * 
     */
    public List<String> matchValue() {
        return this.matchValue;
    }
    /**
     * @return Match variable to compare against.
     * 
     */
    public String matchVariable() {
        return this.matchVariable;
    }
    /**
     * @return Describes if the result of this condition should be negated.
     * 
     */
    public Optional<Boolean> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }
    /**
     * @return Describes operator to be matched
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
     * 
     */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }
    /**
     * @return List of transforms.
     * 
     */
    public List<String> transforms() {
        return this.transforms == null ? List.of() : this.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MatchConditionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> matchValue;
        private String matchVariable;
        private @Nullable Boolean negateCondition;
        private String operator;
        private @Nullable String selector;
        private @Nullable List<String> transforms;
        public Builder() {}
        public Builder(MatchConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchValue = defaults.matchValue;
    	      this.matchVariable = defaults.matchVariable;
    	      this.negateCondition = defaults.negateCondition;
    	      this.operator = defaults.operator;
    	      this.selector = defaults.selector;
    	      this.transforms = defaults.transforms;
        }

        @CustomType.Setter
        public Builder matchValue(List<String> matchValue) {
            this.matchValue = Objects.requireNonNull(matchValue);
            return this;
        }
        public Builder matchValue(String... matchValue) {
            return matchValue(List.of(matchValue));
        }
        @CustomType.Setter
        public Builder matchVariable(String matchVariable) {
            this.matchVariable = Objects.requireNonNull(matchVariable);
            return this;
        }
        @CustomType.Setter
        public Builder negateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        @CustomType.Setter
        public Builder selector(@Nullable String selector) {
            this.selector = selector;
            return this;
        }
        @CustomType.Setter
        public Builder transforms(@Nullable List<String> transforms) {
            this.transforms = transforms;
            return this;
        }
        public Builder transforms(String... transforms) {
            return transforms(List.of(transforms));
        }
        public MatchConditionResponse build() {
            final var o = new MatchConditionResponse();
            o.matchValue = matchValue;
            o.matchVariable = matchVariable;
            o.negateCondition = negateCondition;
            o.operator = operator;
            o.selector = selector;
            o.transforms = transforms;
            return o;
        }
    }
}
