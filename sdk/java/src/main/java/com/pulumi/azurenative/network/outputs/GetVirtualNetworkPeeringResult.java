// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.AddressSpaceResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.VirtualNetworkBgpCommunitiesResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualNetworkPeeringResult {
    /**
     * @return Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    private @Nullable Boolean allowForwardedTraffic;
    /**
     * @return If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    private @Nullable Boolean allowGatewayTransit;
    /**
     * @return Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    private @Nullable Boolean allowVirtualNetworkAccess;
    /**
     * @return If we need to verify the provisioning state of the remote gateway.
     * 
     */
    private @Nullable Boolean doNotVerifyRemoteGateways;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return The status of the virtual network peering.
     * 
     */
    private @Nullable String peeringState;
    /**
     * @return The provisioning state of the virtual network peering resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The reference to the remote virtual network address space.
     * 
     */
    private @Nullable AddressSpaceResponse remoteAddressSpace;
    /**
     * @return The reference to the remote virtual network&#39;s Bgp Communities.
     * 
     */
    private @Nullable VirtualNetworkBgpCommunitiesResponse remoteBgpCommunities;
    /**
     * @return The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     * 
     */
    private @Nullable SubResourceResponse remoteVirtualNetwork;
    /**
     * @return The resourceGuid property of the Virtual Network peering resource.
     * 
     */
    private String resourceGuid;
    /**
     * @return Resource type.
     * 
     */
    private @Nullable String type;
    /**
     * @return If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    private @Nullable Boolean useRemoteGateways;

    private GetVirtualNetworkPeeringResult() {}
    /**
     * @return Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    public Optional<Boolean> allowForwardedTraffic() {
        return Optional.ofNullable(this.allowForwardedTraffic);
    }
    /**
     * @return If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    public Optional<Boolean> allowGatewayTransit() {
        return Optional.ofNullable(this.allowGatewayTransit);
    }
    /**
     * @return Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    public Optional<Boolean> allowVirtualNetworkAccess() {
        return Optional.ofNullable(this.allowVirtualNetworkAccess);
    }
    /**
     * @return If we need to verify the provisioning state of the remote gateway.
     * 
     */
    public Optional<Boolean> doNotVerifyRemoteGateways() {
        return Optional.ofNullable(this.doNotVerifyRemoteGateways);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The status of the virtual network peering.
     * 
     */
    public Optional<String> peeringState() {
        return Optional.ofNullable(this.peeringState);
    }
    /**
     * @return The provisioning state of the virtual network peering resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The reference to the remote virtual network address space.
     * 
     */
    public Optional<AddressSpaceResponse> remoteAddressSpace() {
        return Optional.ofNullable(this.remoteAddressSpace);
    }
    /**
     * @return The reference to the remote virtual network&#39;s Bgp Communities.
     * 
     */
    public Optional<VirtualNetworkBgpCommunitiesResponse> remoteBgpCommunities() {
        return Optional.ofNullable(this.remoteBgpCommunities);
    }
    /**
     * @return The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     * 
     */
    public Optional<SubResourceResponse> remoteVirtualNetwork() {
        return Optional.ofNullable(this.remoteVirtualNetwork);
    }
    /**
     * @return The resourceGuid property of the Virtual Network peering resource.
     * 
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * @return Resource type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    public Optional<Boolean> useRemoteGateways() {
        return Optional.ofNullable(this.useRemoteGateways);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkPeeringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowForwardedTraffic;
        private @Nullable Boolean allowGatewayTransit;
        private @Nullable Boolean allowVirtualNetworkAccess;
        private @Nullable Boolean doNotVerifyRemoteGateways;
        private String etag;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String peeringState;
        private String provisioningState;
        private @Nullable AddressSpaceResponse remoteAddressSpace;
        private @Nullable VirtualNetworkBgpCommunitiesResponse remoteBgpCommunities;
        private @Nullable SubResourceResponse remoteVirtualNetwork;
        private String resourceGuid;
        private @Nullable String type;
        private @Nullable Boolean useRemoteGateways;
        public Builder() {}
        public Builder(GetVirtualNetworkPeeringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowForwardedTraffic = defaults.allowForwardedTraffic;
    	      this.allowGatewayTransit = defaults.allowGatewayTransit;
    	      this.allowVirtualNetworkAccess = defaults.allowVirtualNetworkAccess;
    	      this.doNotVerifyRemoteGateways = defaults.doNotVerifyRemoteGateways;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.peeringState = defaults.peeringState;
    	      this.provisioningState = defaults.provisioningState;
    	      this.remoteAddressSpace = defaults.remoteAddressSpace;
    	      this.remoteBgpCommunities = defaults.remoteBgpCommunities;
    	      this.remoteVirtualNetwork = defaults.remoteVirtualNetwork;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.type = defaults.type;
    	      this.useRemoteGateways = defaults.useRemoteGateways;
        }

        @CustomType.Setter
        public Builder allowForwardedTraffic(@Nullable Boolean allowForwardedTraffic) {
            this.allowForwardedTraffic = allowForwardedTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder allowGatewayTransit(@Nullable Boolean allowGatewayTransit) {
            this.allowGatewayTransit = allowGatewayTransit;
            return this;
        }
        @CustomType.Setter
        public Builder allowVirtualNetworkAccess(@Nullable Boolean allowVirtualNetworkAccess) {
            this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder doNotVerifyRemoteGateways(@Nullable Boolean doNotVerifyRemoteGateways) {
            this.doNotVerifyRemoteGateways = doNotVerifyRemoteGateways;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peeringState(@Nullable String peeringState) {
            this.peeringState = peeringState;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder remoteAddressSpace(@Nullable AddressSpaceResponse remoteAddressSpace) {
            this.remoteAddressSpace = remoteAddressSpace;
            return this;
        }
        @CustomType.Setter
        public Builder remoteBgpCommunities(@Nullable VirtualNetworkBgpCommunitiesResponse remoteBgpCommunities) {
            this.remoteBgpCommunities = remoteBgpCommunities;
            return this;
        }
        @CustomType.Setter
        public Builder remoteVirtualNetwork(@Nullable SubResourceResponse remoteVirtualNetwork) {
            this.remoteVirtualNetwork = remoteVirtualNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder useRemoteGateways(@Nullable Boolean useRemoteGateways) {
            this.useRemoteGateways = useRemoteGateways;
            return this;
        }
        public GetVirtualNetworkPeeringResult build() {
            final var o = new GetVirtualNetworkPeeringResult();
            o.allowForwardedTraffic = allowForwardedTraffic;
            o.allowGatewayTransit = allowGatewayTransit;
            o.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            o.doNotVerifyRemoteGateways = doNotVerifyRemoteGateways;
            o.etag = etag;
            o.id = id;
            o.name = name;
            o.peeringState = peeringState;
            o.provisioningState = provisioningState;
            o.remoteAddressSpace = remoteAddressSpace;
            o.remoteBgpCommunities = remoteBgpCommunities;
            o.remoteVirtualNetwork = remoteVirtualNetwork;
            o.resourceGuid = resourceGuid;
            o.type = type;
            o.useRemoteGateways = useRemoteGateways;
            return o;
        }
    }
}
