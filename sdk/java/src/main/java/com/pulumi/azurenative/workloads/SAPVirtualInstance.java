// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.workloads.SAPVirtualInstanceArgs;
import com.pulumi.azurenative.workloads.outputs.DeploymentConfigurationResponse;
import com.pulumi.azurenative.workloads.outputs.DeploymentWithOSConfigurationResponse;
import com.pulumi.azurenative.workloads.outputs.DiscoveryConfigurationResponse;
import com.pulumi.azurenative.workloads.outputs.ManagedRGConfigurationResponse;
import com.pulumi.azurenative.workloads.outputs.SAPVirtualInstanceErrorResponse;
import com.pulumi.azurenative.workloads.outputs.SystemDataResponse;
import com.pulumi.azurenative.workloads.outputs.UserAssignedServiceIdentityResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Define the Virtual Instance for SAP.
 * API Version: 2021-12-01-preview.
 * 
 * ## Example Usage
 * ### SAPVirtualInstances_Create_Distributed
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;Deployment&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;applicationServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 6),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;centralServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 1),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E16ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;databaseServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                         Map.entry(&#34;instanceCount&#34;, 1),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_M32ts&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;ThreeTier&#34;)
 *                 ))
 *             ))
 *             .environment(&#34;Prod&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_HA_AvSet
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;Deployment&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;applicationServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 5),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;centralServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E16ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;databaseServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_M32ts&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;ThreeTier&#34;),
 *                     Map.entry(&#34;highAvailabilityConfig&#34;, Map.of(&#34;highAvailabilityType&#34;, &#34;AvailabilitySet&#34;))
 *                 ))
 *             ))
 *             .environment(&#34;Prod&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_HA_AvZone
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;Deployment&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;applicationServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 6),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;centralServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E16ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;databaseServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_M32ts&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;ThreeTier&#34;),
 *                     Map.entry(&#34;highAvailabilityConfig&#34;, Map.of(&#34;highAvailabilityType&#34;, &#34;AvailabilityZone&#34;))
 *                 ))
 *             ))
 *             .environment(&#34;Prod&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_SingleServer
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;Deployment&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;SingleServer&#34;),
 *                     Map.entry(&#34;networkConfiguration&#34;, Map.of(&#34;isSecondaryIpEnabled&#34;, true)),
 *                     Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                     Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                         Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                             Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                             Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                             Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                             Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                         )),
 *                         Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                             Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                             Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                 Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                 Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.of(&#34;keyData&#34;, &#34;ssh-rsa public key&#34;)))
 *                             ))
 *                         )),
 *                         Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                     ))
 *                 ))
 *             ))
 *             .environment(&#34;NonProd&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_WithOSConfig_Distributed
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;DeploymentWithOSConfig&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;applicationServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 6),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;centralServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 1),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E16ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;databaseServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                         Map.entry(&#34;instanceCount&#34;, 1),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_M32ts&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;ThreeTier&#34;)
 *                 )),
 *                 Map.entry(&#34;osSapConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;deployerVmPackages&#34;, Map.ofEntries(
 *                         Map.entry(&#34;storageAccountId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount&#34;),
 *                         Map.entry(&#34;url&#34;, &#34;https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip&#34;)
 *                     )),
 *                     Map.entry(&#34;sapFqdn&#34;, &#34;xyz.test.com&#34;)
 *                 ))
 *             ))
 *             .environment(&#34;Prod&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_WithOSConfig_HA_AvSet
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;DeploymentWithOSConfig&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;applicationServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 6),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;centralServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E16ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;databaseServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_M32ts&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;ThreeTier&#34;),
 *                     Map.entry(&#34;highAvailabilityConfig&#34;, Map.of(&#34;highAvailabilityType&#34;, &#34;AvailabilitySet&#34;))
 *                 )),
 *                 Map.entry(&#34;osSapConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;deployerVmPackages&#34;, Map.ofEntries(
 *                         Map.entry(&#34;storageAccountId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount&#34;),
 *                         Map.entry(&#34;url&#34;, &#34;https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip&#34;)
 *                     )),
 *                     Map.entry(&#34;sapFqdn&#34;, &#34;xyz.test.com&#34;)
 *                 ))
 *             ))
 *             .environment(&#34;Prod&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_WithOSConfig_HA_AvZone
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;DeploymentWithOSConfig&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;applicationServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 6),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;centralServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_E16ds_v4&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;databaseServer&#34;, Map.ofEntries(
 *                         Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                         Map.entry(&#34;instanceCount&#34;, 2),
 *                         Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet&#34;),
 *                         Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                                 Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                                 Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                                 Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                             )),
 *                             Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                                 Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                     Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                     Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                         Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                         Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                     ))
 *                                 ))
 *                             )),
 *                             Map.entry(&#34;vmSize&#34;, &#34;Standard_M32ts&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;ThreeTier&#34;),
 *                     Map.entry(&#34;highAvailabilityConfig&#34;, Map.of(&#34;highAvailabilityType&#34;, &#34;AvailabilityZone&#34;))
 *                 )),
 *                 Map.entry(&#34;osSapConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;deployerVmPackages&#34;, Map.ofEntries(
 *                         Map.entry(&#34;storageAccountId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount&#34;),
 *                         Map.entry(&#34;url&#34;, &#34;https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip&#34;)
 *                     )),
 *                     Map.entry(&#34;sapFqdn&#34;, &#34;xyz.test.com&#34;)
 *                 ))
 *             ))
 *             .environment(&#34;Prod&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### SAPVirtualInstances_Create_WithOSConfig_SingleServer
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sapVirtualInstance = new SAPVirtualInstance(&#34;sapVirtualInstance&#34;, SAPVirtualInstanceArgs.builder()        
 *             .configuration(Map.ofEntries(
 *                 Map.entry(&#34;appLocation&#34;, &#34;eastus&#34;),
 *                 Map.entry(&#34;configurationType&#34;, &#34;DeploymentWithOSConfig&#34;),
 *                 Map.entry(&#34;infrastructureConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;appResourceGroup&#34;, &#34;X00-RG&#34;),
 *                     Map.entry(&#34;databaseType&#34;, &#34;HANA&#34;),
 *                     Map.entry(&#34;deploymentType&#34;, &#34;SingleServer&#34;),
 *                     Map.entry(&#34;networkConfiguration&#34;, Map.of(&#34;isSecondaryIpEnabled&#34;, true)),
 *                     Map.entry(&#34;subnetId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet&#34;),
 *                     Map.entry(&#34;virtualMachineConfiguration&#34;, Map.ofEntries(
 *                         Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                             Map.entry(&#34;offer&#34;, &#34;RHEL-SAP&#34;),
 *                             Map.entry(&#34;publisher&#34;, &#34;RedHat&#34;),
 *                             Map.entry(&#34;sku&#34;, &#34;7.4&#34;),
 *                             Map.entry(&#34;version&#34;, &#34;7.4.2019062505&#34;)
 *                         )),
 *                         Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                             Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                             Map.entry(&#34;osConfiguration&#34;, Map.ofEntries(
 *                                 Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                                 Map.entry(&#34;osType&#34;, &#34;Linux&#34;),
 *                                 Map.entry(&#34;sshKeyPair&#34;, Map.ofEntries(
 *                                     Map.entry(&#34;privateKey&#34;, &#34;xyz&#34;),
 *                                     Map.entry(&#34;publicKey&#34;, &#34;abc&#34;)
 *                                 ))
 *                             ))
 *                         )),
 *                         Map.entry(&#34;vmSize&#34;, &#34;Standard_E32ds_v4&#34;)
 *                     ))
 *                 )),
 *                 Map.entry(&#34;osSapConfiguration&#34;, Map.ofEntries(
 *                     Map.entry(&#34;deployerVmPackages&#34;, Map.ofEntries(
 *                         Map.entry(&#34;storageAccountId&#34;, &#34;/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount&#34;),
 *                         Map.entry(&#34;url&#34;, &#34;https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip&#34;)
 *                     )),
 *                     Map.entry(&#34;sapFqdn&#34;, &#34;xyz.test.com&#34;)
 *                 ))
 *             ))
 *             .environment(&#34;NonProd&#34;)
 *             .location(&#34;westcentralus&#34;)
 *             .resourceGroupName(&#34;test-rg&#34;)
 *             .sapProduct(&#34;S4HANA&#34;)
 *             .sapVirtualInstanceName(&#34;X00&#34;)
 *             .tags()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:workloads:SAPVirtualInstance X00 /subscriptions/6d875e77-e412-4d7d-9af4-8895278b4443/resourceGroups/test-rg/providers/Microsoft.Workloads/sapVirtualInstances/X00 
 * ```
 * 
 */
@ResourceType(type="azure-native:workloads:SAPVirtualInstance")
public class SAPVirtualInstance extends com.pulumi.resources.CustomResource {
    /**
     * Defines if an existing SAP system is being registered or a new SAP system is being created
     * 
     */
    @Export(name="configuration", type=Object.class, parameters={})
    private Output<Object> configuration;

    /**
     * @return Defines if an existing SAP system is being registered or a new SAP system is being created
     * 
     */
    public Output<Object> configuration() {
        return this.configuration;
    }
    /**
     * Defines the environment type - Production/Non Production.
     * 
     */
    @Export(name="environment", type=String.class, parameters={})
    private Output<String> environment;

    /**
     * @return Defines the environment type - Production/Non Production.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }
    /**
     * Defines the Virtual Instance for SAP errors.
     * 
     */
    @Export(name="errors", type=SAPVirtualInstanceErrorResponse.class, parameters={})
    private Output<SAPVirtualInstanceErrorResponse> errors;

    /**
     * @return Defines the Virtual Instance for SAP errors.
     * 
     */
    public Output<SAPVirtualInstanceErrorResponse> errors() {
        return this.errors;
    }
    /**
     * Defines the SAP Instance health.
     * 
     */
    @Export(name="health", type=String.class, parameters={})
    private Output<String> health;

    /**
     * @return Defines the SAP Instance health.
     * 
     */
    public Output<String> health() {
        return this.health;
    }
    /**
     * Managed service identity (user assigned identities)
     * 
     */
    @Export(name="identity", type=UserAssignedServiceIdentityResponse.class, parameters={})
    private Output</* @Nullable */ UserAssignedServiceIdentityResponse> identity;

    /**
     * @return Managed service identity (user assigned identities)
     * 
     */
    public Output<Optional<UserAssignedServiceIdentityResponse>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * The geo-location where the resource lives
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Managed resource group configuration
     * 
     */
    @Export(name="managedResourceGroupConfiguration", type=ManagedRGConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ ManagedRGConfigurationResponse> managedResourceGroupConfiguration;

    /**
     * @return Managed resource group configuration
     * 
     */
    public Output<Optional<ManagedRGConfigurationResponse>> managedResourceGroupConfiguration() {
        return Codegen.optional(this.managedResourceGroupConfiguration);
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Defines the provisioning states.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return Defines the provisioning states.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * Defines the SAP Product type.
     * 
     */
    @Export(name="sapProduct", type=String.class, parameters={})
    private Output<String> sapProduct;

    /**
     * @return Defines the SAP Product type.
     * 
     */
    public Output<String> sapProduct() {
        return this.sapProduct;
    }
    /**
     * Defines the Virtual Instance for SAP state.
     * 
     */
    @Export(name="state", type=String.class, parameters={})
    private Output<String> state;

    /**
     * @return Defines the Virtual Instance for SAP state.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Defines the SAP Instance status.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return Defines the SAP Instance status.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    @Export(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public Output<SystemDataResponse> systemData() {
        return this.systemData;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SAPVirtualInstance(String name) {
        this(name, SAPVirtualInstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SAPVirtualInstance(String name, SAPVirtualInstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SAPVirtualInstance(String name, SAPVirtualInstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:workloads:SAPVirtualInstance", name, args == null ? SAPVirtualInstanceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SAPVirtualInstance(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:workloads:SAPVirtualInstance", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:workloads/v20211201preview:SAPVirtualInstance").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SAPVirtualInstance get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SAPVirtualInstance(name, id, options);
    }
}
