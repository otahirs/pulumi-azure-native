// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app.outputs;

import com.pulumi.azurenative.app.outputs.DefaultErrorResponseResponse;
import com.pulumi.azurenative.app.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ListContainerAppCustomHostNameAnalysisResult {
    /**
     * @return A records visible for this hostname.
     * 
     */
    private @Nullable List<String> aRecords;
    /**
     * @return Alternate CName records visible for this hostname.
     * 
     */
    private @Nullable List<String> alternateCNameRecords;
    /**
     * @return Alternate TXT records visible for this hostname.
     * 
     */
    private @Nullable List<String> alternateTxtRecords;
    /**
     * @return CName records visible for this hostname.
     * 
     */
    private @Nullable List<String> cNameRecords;
    /**
     * @return Name of the conflicting Container App on the Managed Environment if it&#39;s within the same subscription.
     * 
     */
    private String conflictingContainerAppResourceId;
    /**
     * @return Raw failure information if DNS verification fails.
     * 
     */
    private DefaultErrorResponseResponse customDomainVerificationFailureInfo;
    /**
     * @return DNS verification test result.
     * 
     */
    private String customDomainVerificationTest;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if there is a conflict on the Container App&#39;s managed environment; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private Boolean hasConflictOnManagedEnvironment;
    /**
     * @return Host name that was analyzed
     * 
     */
    private String hostName;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if hostname is already verified; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private Boolean isHostnameAlreadyVerified;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return TXT records visible for this hostname.
     * 
     */
    private @Nullable List<String> txtRecords;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private ListContainerAppCustomHostNameAnalysisResult() {}
    /**
     * @return A records visible for this hostname.
     * 
     */
    public List<String> aRecords() {
        return this.aRecords == null ? List.of() : this.aRecords;
    }
    /**
     * @return Alternate CName records visible for this hostname.
     * 
     */
    public List<String> alternateCNameRecords() {
        return this.alternateCNameRecords == null ? List.of() : this.alternateCNameRecords;
    }
    /**
     * @return Alternate TXT records visible for this hostname.
     * 
     */
    public List<String> alternateTxtRecords() {
        return this.alternateTxtRecords == null ? List.of() : this.alternateTxtRecords;
    }
    /**
     * @return CName records visible for this hostname.
     * 
     */
    public List<String> cNameRecords() {
        return this.cNameRecords == null ? List.of() : this.cNameRecords;
    }
    /**
     * @return Name of the conflicting Container App on the Managed Environment if it&#39;s within the same subscription.
     * 
     */
    public String conflictingContainerAppResourceId() {
        return this.conflictingContainerAppResourceId;
    }
    /**
     * @return Raw failure information if DNS verification fails.
     * 
     */
    public DefaultErrorResponseResponse customDomainVerificationFailureInfo() {
        return this.customDomainVerificationFailureInfo;
    }
    /**
     * @return DNS verification test result.
     * 
     */
    public String customDomainVerificationTest() {
        return this.customDomainVerificationTest;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if there is a conflict on the Container App&#39;s managed environment; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Boolean hasConflictOnManagedEnvironment() {
        return this.hasConflictOnManagedEnvironment;
    }
    /**
     * @return Host name that was analyzed
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if hostname is already verified; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Boolean isHostnameAlreadyVerified() {
        return this.isHostnameAlreadyVerified;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return TXT records visible for this hostname.
     * 
     */
    public List<String> txtRecords() {
        return this.txtRecords == null ? List.of() : this.txtRecords;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListContainerAppCustomHostNameAnalysisResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> aRecords;
        private @Nullable List<String> alternateCNameRecords;
        private @Nullable List<String> alternateTxtRecords;
        private @Nullable List<String> cNameRecords;
        private String conflictingContainerAppResourceId;
        private DefaultErrorResponseResponse customDomainVerificationFailureInfo;
        private String customDomainVerificationTest;
        private Boolean hasConflictOnManagedEnvironment;
        private String hostName;
        private String id;
        private Boolean isHostnameAlreadyVerified;
        private String name;
        private SystemDataResponse systemData;
        private @Nullable List<String> txtRecords;
        private String type;
        public Builder() {}
        public Builder(ListContainerAppCustomHostNameAnalysisResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aRecords = defaults.aRecords;
    	      this.alternateCNameRecords = defaults.alternateCNameRecords;
    	      this.alternateTxtRecords = defaults.alternateTxtRecords;
    	      this.cNameRecords = defaults.cNameRecords;
    	      this.conflictingContainerAppResourceId = defaults.conflictingContainerAppResourceId;
    	      this.customDomainVerificationFailureInfo = defaults.customDomainVerificationFailureInfo;
    	      this.customDomainVerificationTest = defaults.customDomainVerificationTest;
    	      this.hasConflictOnManagedEnvironment = defaults.hasConflictOnManagedEnvironment;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.isHostnameAlreadyVerified = defaults.isHostnameAlreadyVerified;
    	      this.name = defaults.name;
    	      this.systemData = defaults.systemData;
    	      this.txtRecords = defaults.txtRecords;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder aRecords(@Nullable List<String> aRecords) {
            this.aRecords = aRecords;
            return this;
        }
        public Builder aRecords(String... aRecords) {
            return aRecords(List.of(aRecords));
        }
        @CustomType.Setter
        public Builder alternateCNameRecords(@Nullable List<String> alternateCNameRecords) {
            this.alternateCNameRecords = alternateCNameRecords;
            return this;
        }
        public Builder alternateCNameRecords(String... alternateCNameRecords) {
            return alternateCNameRecords(List.of(alternateCNameRecords));
        }
        @CustomType.Setter
        public Builder alternateTxtRecords(@Nullable List<String> alternateTxtRecords) {
            this.alternateTxtRecords = alternateTxtRecords;
            return this;
        }
        public Builder alternateTxtRecords(String... alternateTxtRecords) {
            return alternateTxtRecords(List.of(alternateTxtRecords));
        }
        @CustomType.Setter
        public Builder cNameRecords(@Nullable List<String> cNameRecords) {
            this.cNameRecords = cNameRecords;
            return this;
        }
        public Builder cNameRecords(String... cNameRecords) {
            return cNameRecords(List.of(cNameRecords));
        }
        @CustomType.Setter
        public Builder conflictingContainerAppResourceId(String conflictingContainerAppResourceId) {
            this.conflictingContainerAppResourceId = Objects.requireNonNull(conflictingContainerAppResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder customDomainVerificationFailureInfo(DefaultErrorResponseResponse customDomainVerificationFailureInfo) {
            this.customDomainVerificationFailureInfo = Objects.requireNonNull(customDomainVerificationFailureInfo);
            return this;
        }
        @CustomType.Setter
        public Builder customDomainVerificationTest(String customDomainVerificationTest) {
            this.customDomainVerificationTest = Objects.requireNonNull(customDomainVerificationTest);
            return this;
        }
        @CustomType.Setter
        public Builder hasConflictOnManagedEnvironment(Boolean hasConflictOnManagedEnvironment) {
            this.hasConflictOnManagedEnvironment = Objects.requireNonNull(hasConflictOnManagedEnvironment);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isHostnameAlreadyVerified(Boolean isHostnameAlreadyVerified) {
            this.isHostnameAlreadyVerified = Objects.requireNonNull(isHostnameAlreadyVerified);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder txtRecords(@Nullable List<String> txtRecords) {
            this.txtRecords = txtRecords;
            return this;
        }
        public Builder txtRecords(String... txtRecords) {
            return txtRecords(List.of(txtRecords));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ListContainerAppCustomHostNameAnalysisResult build() {
            final var o = new ListContainerAppCustomHostNameAnalysisResult();
            o.aRecords = aRecords;
            o.alternateCNameRecords = alternateCNameRecords;
            o.alternateTxtRecords = alternateTxtRecords;
            o.cNameRecords = cNameRecords;
            o.conflictingContainerAppResourceId = conflictingContainerAppResourceId;
            o.customDomainVerificationFailureInfo = customDomainVerificationFailureInfo;
            o.customDomainVerificationTest = customDomainVerificationTest;
            o.hasConflictOnManagedEnvironment = hasConflictOnManagedEnvironment;
            o.hostName = hostName;
            o.id = id;
            o.isHostnameAlreadyVerified = isHostnameAlreadyVerified;
            o.name = name;
            o.systemData = systemData;
            o.txtRecords = txtRecords;
            o.type = type;
            return o;
        }
    }
}
