// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp;

import com.pulumi.azurenative.netapp.enums.Type;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeQuotaRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeQuotaRuleArgs Empty = new VolumeQuotaRuleArgs();

    /**
     * The name of the NetApp account
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the NetApp account
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the capacity pool
     * 
     */
    @Import(name="poolName", required=true)
    private Output<String> poolName;

    /**
     * @return The name of the capacity pool
     * 
     */
    public Output<String> poolName() {
        return this.poolName;
    }

    /**
     * Size of quota
     * 
     */
    @Import(name="quotaSizeInKiBs")
    private @Nullable Output<Double> quotaSizeInKiBs;

    /**
     * @return Size of quota
     * 
     */
    public Optional<Output<Double>> quotaSizeInKiBs() {
        return Optional.ofNullable(this.quotaSizeInKiBs);
    }

    /**
     * UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name=&#39;user-name&#39; get sid&gt;
     * 
     */
    @Import(name="quotaTarget")
    private @Nullable Output<String> quotaTarget;

    /**
     * @return UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name=&#39;user-name&#39; get sid&gt;
     * 
     */
    public Optional<Output<String>> quotaTarget() {
        return Optional.ofNullable(this.quotaTarget);
    }

    /**
     * Type of quota
     * 
     */
    @Import(name="quotaType")
    private @Nullable Output<Either<String,Type>> quotaType;

    /**
     * @return Type of quota
     * 
     */
    public Optional<Output<Either<String,Type>>> quotaType() {
        return Optional.ofNullable(this.quotaType);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the volume
     * 
     */
    @Import(name="volumeName", required=true)
    private Output<String> volumeName;

    /**
     * @return The name of the volume
     * 
     */
    public Output<String> volumeName() {
        return this.volumeName;
    }

    /**
     * The name of volume quota rule
     * 
     */
    @Import(name="volumeQuotaRuleName")
    private @Nullable Output<String> volumeQuotaRuleName;

    /**
     * @return The name of volume quota rule
     * 
     */
    public Optional<Output<String>> volumeQuotaRuleName() {
        return Optional.ofNullable(this.volumeQuotaRuleName);
    }

    private VolumeQuotaRuleArgs() {}

    private VolumeQuotaRuleArgs(VolumeQuotaRuleArgs $) {
        this.accountName = $.accountName;
        this.location = $.location;
        this.poolName = $.poolName;
        this.quotaSizeInKiBs = $.quotaSizeInKiBs;
        this.quotaTarget = $.quotaTarget;
        this.quotaType = $.quotaType;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.volumeName = $.volumeName;
        this.volumeQuotaRuleName = $.volumeQuotaRuleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeQuotaRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeQuotaRuleArgs $;

        public Builder() {
            $ = new VolumeQuotaRuleArgs();
        }

        public Builder(VolumeQuotaRuleArgs defaults) {
            $ = new VolumeQuotaRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param poolName The name of the capacity pool
         * 
         * @return builder
         * 
         */
        public Builder poolName(Output<String> poolName) {
            $.poolName = poolName;
            return this;
        }

        /**
         * @param poolName The name of the capacity pool
         * 
         * @return builder
         * 
         */
        public Builder poolName(String poolName) {
            return poolName(Output.of(poolName));
        }

        /**
         * @param quotaSizeInKiBs Size of quota
         * 
         * @return builder
         * 
         */
        public Builder quotaSizeInKiBs(@Nullable Output<Double> quotaSizeInKiBs) {
            $.quotaSizeInKiBs = quotaSizeInKiBs;
            return this;
        }

        /**
         * @param quotaSizeInKiBs Size of quota
         * 
         * @return builder
         * 
         */
        public Builder quotaSizeInKiBs(Double quotaSizeInKiBs) {
            return quotaSizeInKiBs(Output.of(quotaSizeInKiBs));
        }

        /**
         * @param quotaTarget UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name=&#39;user-name&#39; get sid&gt;
         * 
         * @return builder
         * 
         */
        public Builder quotaTarget(@Nullable Output<String> quotaTarget) {
            $.quotaTarget = quotaTarget;
            return this;
        }

        /**
         * @param quotaTarget UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name=&#39;user-name&#39; get sid&gt;
         * 
         * @return builder
         * 
         */
        public Builder quotaTarget(String quotaTarget) {
            return quotaTarget(Output.of(quotaTarget));
        }

        /**
         * @param quotaType Type of quota
         * 
         * @return builder
         * 
         */
        public Builder quotaType(@Nullable Output<Either<String,Type>> quotaType) {
            $.quotaType = quotaType;
            return this;
        }

        /**
         * @param quotaType Type of quota
         * 
         * @return builder
         * 
         */
        public Builder quotaType(Either<String,Type> quotaType) {
            return quotaType(Output.of(quotaType));
        }

        /**
         * @param quotaType Type of quota
         * 
         * @return builder
         * 
         */
        public Builder quotaType(String quotaType) {
            return quotaType(Either.ofLeft(quotaType));
        }

        /**
         * @param quotaType Type of quota
         * 
         * @return builder
         * 
         */
        public Builder quotaType(Type quotaType) {
            return quotaType(Either.ofRight(quotaType));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param volumeName The name of the volume
         * 
         * @return builder
         * 
         */
        public Builder volumeName(Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName The name of the volume
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        /**
         * @param volumeQuotaRuleName The name of volume quota rule
         * 
         * @return builder
         * 
         */
        public Builder volumeQuotaRuleName(@Nullable Output<String> volumeQuotaRuleName) {
            $.volumeQuotaRuleName = volumeQuotaRuleName;
            return this;
        }

        /**
         * @param volumeQuotaRuleName The name of volume quota rule
         * 
         * @return builder
         * 
         */
        public Builder volumeQuotaRuleName(String volumeQuotaRuleName) {
            return volumeQuotaRuleName(Output.of(volumeQuotaRuleName));
        }

        public VolumeQuotaRuleArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.poolName = Objects.requireNonNull($.poolName, "expected parameter 'poolName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.volumeName = Objects.requireNonNull($.volumeName, "expected parameter 'volumeName' to be non-null");
            return $;
        }
    }

}
