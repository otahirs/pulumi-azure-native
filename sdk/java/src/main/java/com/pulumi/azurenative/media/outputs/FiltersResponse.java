// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.AudioOverlayResponse;
import com.pulumi.azurenative.media.outputs.DeinterlaceResponse;
import com.pulumi.azurenative.media.outputs.RectangleResponse;
import com.pulumi.azurenative.media.outputs.VideoOverlayResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FiltersResponse {
    /**
     * @return The parameters for the rectangular window with which to crop the input video.
     * 
     */
    private @Nullable RectangleResponse crop;
    /**
     * @return The de-interlacing settings.
     * 
     */
    private @Nullable DeinterlaceResponse deinterlace;
    /**
     * @return The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
     * 
     */
    private @Nullable List<Either<AudioOverlayResponse,VideoOverlayResponse>> overlays;
    /**
     * @return The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
     * 
     */
    private @Nullable String rotation;

    private FiltersResponse() {}
    /**
     * @return The parameters for the rectangular window with which to crop the input video.
     * 
     */
    public Optional<RectangleResponse> crop() {
        return Optional.ofNullable(this.crop);
    }
    /**
     * @return The de-interlacing settings.
     * 
     */
    public Optional<DeinterlaceResponse> deinterlace() {
        return Optional.ofNullable(this.deinterlace);
    }
    /**
     * @return The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
     * 
     */
    public List<Either<AudioOverlayResponse,VideoOverlayResponse>> overlays() {
        return this.overlays == null ? List.of() : this.overlays;
    }
    /**
     * @return The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
     * 
     */
    public Optional<String> rotation() {
        return Optional.ofNullable(this.rotation);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FiltersResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RectangleResponse crop;
        private @Nullable DeinterlaceResponse deinterlace;
        private @Nullable List<Either<AudioOverlayResponse,VideoOverlayResponse>> overlays;
        private @Nullable String rotation;
        public Builder() {}
        public Builder(FiltersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crop = defaults.crop;
    	      this.deinterlace = defaults.deinterlace;
    	      this.overlays = defaults.overlays;
    	      this.rotation = defaults.rotation;
        }

        @CustomType.Setter
        public Builder crop(@Nullable RectangleResponse crop) {
            this.crop = crop;
            return this;
        }
        @CustomType.Setter
        public Builder deinterlace(@Nullable DeinterlaceResponse deinterlace) {
            this.deinterlace = deinterlace;
            return this;
        }
        @CustomType.Setter
        public Builder overlays(@Nullable List<Either<AudioOverlayResponse,VideoOverlayResponse>> overlays) {
            this.overlays = overlays;
            return this;
        }
        public Builder overlays(Either<AudioOverlayResponse,VideoOverlayResponse>... overlays) {
            return overlays(List.of(overlays));
        }
        @CustomType.Setter
        public Builder rotation(@Nullable String rotation) {
            this.rotation = rotation;
            return this;
        }
        public FiltersResponse build() {
            final var o = new FiltersResponse();
            o.crop = crop;
            o.deinterlace = deinterlace;
            o.overlays = overlays;
            o.rotation = rotation;
            return o;
        }
    }
}
