// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TextFormatResponse {
    /**
     * @return The column delimiter. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object columnDelimiter;
    /**
     * @return Deserializer. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object deserializer;
    /**
     * @return The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object encodingName;
    /**
     * @return The escape character. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object escapeChar;
    /**
     * @return When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private @Nullable Object firstRowAsHeader;
    /**
     * @return The null value string. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object nullValue;
    /**
     * @return The quote character. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object quoteChar;
    /**
     * @return The row delimiter. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object rowDelimiter;
    /**
     * @return Serializer. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object serializer;
    /**
     * @return The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
     * 
     */
    private @Nullable Object skipLineCount;
    /**
     * @return Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private @Nullable Object treatEmptyAsNull;
    /**
     * @return Type of dataset storage format.
     * Expected value is &#39;TextFormat&#39;.
     * 
     */
    private String type;

    private TextFormatResponse() {}
    /**
     * @return The column delimiter. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> columnDelimiter() {
        return Optional.ofNullable(this.columnDelimiter);
    }
    /**
     * @return Deserializer. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> deserializer() {
        return Optional.ofNullable(this.deserializer);
    }
    /**
     * @return The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encodingName() {
        return Optional.ofNullable(this.encodingName);
    }
    /**
     * @return The escape character. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> escapeChar() {
        return Optional.ofNullable(this.escapeChar);
    }
    /**
     * @return When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> firstRowAsHeader() {
        return Optional.ofNullable(this.firstRowAsHeader);
    }
    /**
     * @return The null value string. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> nullValue() {
        return Optional.ofNullable(this.nullValue);
    }
    /**
     * @return The quote character. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> quoteChar() {
        return Optional.ofNullable(this.quoteChar);
    }
    /**
     * @return The row delimiter. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> rowDelimiter() {
        return Optional.ofNullable(this.rowDelimiter);
    }
    /**
     * @return Serializer. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> serializer() {
        return Optional.ofNullable(this.serializer);
    }
    /**
     * @return The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> skipLineCount() {
        return Optional.ofNullable(this.skipLineCount);
    }
    /**
     * @return Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> treatEmptyAsNull() {
        return Optional.ofNullable(this.treatEmptyAsNull);
    }
    /**
     * @return Type of dataset storage format.
     * Expected value is &#39;TextFormat&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TextFormatResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Object columnDelimiter;
        private @Nullable Object deserializer;
        private @Nullable Object encodingName;
        private @Nullable Object escapeChar;
        private @Nullable Object firstRowAsHeader;
        private @Nullable Object nullValue;
        private @Nullable Object quoteChar;
        private @Nullable Object rowDelimiter;
        private @Nullable Object serializer;
        private @Nullable Object skipLineCount;
        private @Nullable Object treatEmptyAsNull;
        private String type;
        public Builder() {}
        public Builder(TextFormatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.deserializer = defaults.deserializer;
    	      this.encodingName = defaults.encodingName;
    	      this.escapeChar = defaults.escapeChar;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.nullValue = defaults.nullValue;
    	      this.quoteChar = defaults.quoteChar;
    	      this.rowDelimiter = defaults.rowDelimiter;
    	      this.serializer = defaults.serializer;
    	      this.skipLineCount = defaults.skipLineCount;
    	      this.treatEmptyAsNull = defaults.treatEmptyAsNull;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder columnDelimiter(@Nullable Object columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder deserializer(@Nullable Object deserializer) {
            this.deserializer = deserializer;
            return this;
        }
        @CustomType.Setter
        public Builder encodingName(@Nullable Object encodingName) {
            this.encodingName = encodingName;
            return this;
        }
        @CustomType.Setter
        public Builder escapeChar(@Nullable Object escapeChar) {
            this.escapeChar = escapeChar;
            return this;
        }
        @CustomType.Setter
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }
        @CustomType.Setter
        public Builder nullValue(@Nullable Object nullValue) {
            this.nullValue = nullValue;
            return this;
        }
        @CustomType.Setter
        public Builder quoteChar(@Nullable Object quoteChar) {
            this.quoteChar = quoteChar;
            return this;
        }
        @CustomType.Setter
        public Builder rowDelimiter(@Nullable Object rowDelimiter) {
            this.rowDelimiter = rowDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder serializer(@Nullable Object serializer) {
            this.serializer = serializer;
            return this;
        }
        @CustomType.Setter
        public Builder skipLineCount(@Nullable Object skipLineCount) {
            this.skipLineCount = skipLineCount;
            return this;
        }
        @CustomType.Setter
        public Builder treatEmptyAsNull(@Nullable Object treatEmptyAsNull) {
            this.treatEmptyAsNull = treatEmptyAsNull;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public TextFormatResponse build() {
            final var o = new TextFormatResponse();
            o.columnDelimiter = columnDelimiter;
            o.deserializer = deserializer;
            o.encodingName = encodingName;
            o.escapeChar = escapeChar;
            o.firstRowAsHeader = firstRowAsHeader;
            o.nullValue = nullValue;
            o.quoteChar = quoteChar;
            o.rowDelimiter = rowDelimiter;
            o.serializer = serializer;
            o.skipLineCount = skipLineCount;
            o.treatEmptyAsNull = treatEmptyAsNull;
            o.type = type;
            return o;
        }
    }
}
