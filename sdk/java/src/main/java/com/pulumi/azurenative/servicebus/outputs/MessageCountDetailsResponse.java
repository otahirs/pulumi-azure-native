// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class MessageCountDetailsResponse {
    /**
     * @return Number of active messages in the queue, topic, or subscription.
     * 
     */
    private Double activeMessageCount;
    /**
     * @return Number of messages that are dead lettered.
     * 
     */
    private Double deadLetterMessageCount;
    /**
     * @return Number of scheduled messages.
     * 
     */
    private Double scheduledMessageCount;
    /**
     * @return Number of messages transferred into dead letters.
     * 
     */
    private Double transferDeadLetterMessageCount;
    /**
     * @return Number of messages transferred to another queue, topic, or subscription.
     * 
     */
    private Double transferMessageCount;

    private MessageCountDetailsResponse() {}
    /**
     * @return Number of active messages in the queue, topic, or subscription.
     * 
     */
    public Double activeMessageCount() {
        return this.activeMessageCount;
    }
    /**
     * @return Number of messages that are dead lettered.
     * 
     */
    public Double deadLetterMessageCount() {
        return this.deadLetterMessageCount;
    }
    /**
     * @return Number of scheduled messages.
     * 
     */
    public Double scheduledMessageCount() {
        return this.scheduledMessageCount;
    }
    /**
     * @return Number of messages transferred into dead letters.
     * 
     */
    public Double transferDeadLetterMessageCount() {
        return this.transferDeadLetterMessageCount;
    }
    /**
     * @return Number of messages transferred to another queue, topic, or subscription.
     * 
     */
    public Double transferMessageCount() {
        return this.transferMessageCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MessageCountDetailsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double activeMessageCount;
        private Double deadLetterMessageCount;
        private Double scheduledMessageCount;
        private Double transferDeadLetterMessageCount;
        private Double transferMessageCount;
        public Builder() {}
        public Builder(MessageCountDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeMessageCount = defaults.activeMessageCount;
    	      this.deadLetterMessageCount = defaults.deadLetterMessageCount;
    	      this.scheduledMessageCount = defaults.scheduledMessageCount;
    	      this.transferDeadLetterMessageCount = defaults.transferDeadLetterMessageCount;
    	      this.transferMessageCount = defaults.transferMessageCount;
        }

        @CustomType.Setter
        public Builder activeMessageCount(Double activeMessageCount) {
            this.activeMessageCount = Objects.requireNonNull(activeMessageCount);
            return this;
        }
        @CustomType.Setter
        public Builder deadLetterMessageCount(Double deadLetterMessageCount) {
            this.deadLetterMessageCount = Objects.requireNonNull(deadLetterMessageCount);
            return this;
        }
        @CustomType.Setter
        public Builder scheduledMessageCount(Double scheduledMessageCount) {
            this.scheduledMessageCount = Objects.requireNonNull(scheduledMessageCount);
            return this;
        }
        @CustomType.Setter
        public Builder transferDeadLetterMessageCount(Double transferDeadLetterMessageCount) {
            this.transferDeadLetterMessageCount = Objects.requireNonNull(transferDeadLetterMessageCount);
            return this;
        }
        @CustomType.Setter
        public Builder transferMessageCount(Double transferMessageCount) {
            this.transferMessageCount = Objects.requireNonNull(transferMessageCount);
            return this;
        }
        public MessageCountDetailsResponse build() {
            final var o = new MessageCountDetailsResponse();
            o.activeMessageCount = activeMessageCount;
            o.deadLetterMessageCount = deadLetterMessageCount;
            o.scheduledMessageCount = scheduledMessageCount;
            o.transferDeadLetterMessageCount = transferDeadLetterMessageCount;
            o.transferMessageCount = transferMessageCount;
            return o;
        }
    }
}
