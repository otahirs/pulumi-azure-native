// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.outputs;

import com.pulumi.azurenative.costmanagement.outputs.ReportComparisonExpressionResponse;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportFilterResponse {
    /**
     * @return The logical &#34;AND&#34; expression. Must have at least 2 items.
     * 
     */
    private @Nullable List<ReportFilterResponse> and;
    /**
     * @return Has comparison expression for a dimension
     * 
     */
    private @Nullable ReportComparisonExpressionResponse dimension;
    /**
     * @return The logical &#34;NOT&#34; expression.
     * 
     */
    private @Nullable ReportFilterResponse not;
    /**
     * @return The logical &#34;OR&#34; expression. Must have at least 2 items.
     * 
     */
    private @Nullable List<ReportFilterResponse> or;
    /**
     * @return Has comparison expression for a tag
     * 
     */
    private @Nullable ReportComparisonExpressionResponse tag;

    private ReportFilterResponse() {}
    /**
     * @return The logical &#34;AND&#34; expression. Must have at least 2 items.
     * 
     */
    public List<ReportFilterResponse> and() {
        return this.and == null ? List.of() : this.and;
    }
    /**
     * @return Has comparison expression for a dimension
     * 
     */
    public Optional<ReportComparisonExpressionResponse> dimension() {
        return Optional.ofNullable(this.dimension);
    }
    /**
     * @return The logical &#34;NOT&#34; expression.
     * 
     */
    public Optional<ReportFilterResponse> not() {
        return Optional.ofNullable(this.not);
    }
    /**
     * @return The logical &#34;OR&#34; expression. Must have at least 2 items.
     * 
     */
    public List<ReportFilterResponse> or() {
        return this.or == null ? List.of() : this.or;
    }
    /**
     * @return Has comparison expression for a tag
     * 
     */
    public Optional<ReportComparisonExpressionResponse> tag() {
        return Optional.ofNullable(this.tag);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportFilterResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ReportFilterResponse> and;
        private @Nullable ReportComparisonExpressionResponse dimension;
        private @Nullable ReportFilterResponse not;
        private @Nullable List<ReportFilterResponse> or;
        private @Nullable ReportComparisonExpressionResponse tag;
        public Builder() {}
        public Builder(ReportFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.and = defaults.and;
    	      this.dimension = defaults.dimension;
    	      this.not = defaults.not;
    	      this.or = defaults.or;
    	      this.tag = defaults.tag;
        }

        @CustomType.Setter
        public Builder and(@Nullable List<ReportFilterResponse> and) {
            this.and = and;
            return this;
        }
        public Builder and(ReportFilterResponse... and) {
            return and(List.of(and));
        }
        @CustomType.Setter
        public Builder dimension(@Nullable ReportComparisonExpressionResponse dimension) {
            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder not(@Nullable ReportFilterResponse not) {
            this.not = not;
            return this;
        }
        @CustomType.Setter
        public Builder or(@Nullable List<ReportFilterResponse> or) {
            this.or = or;
            return this;
        }
        public Builder or(ReportFilterResponse... or) {
            return or(List.of(or));
        }
        @CustomType.Setter
        public Builder tag(@Nullable ReportComparisonExpressionResponse tag) {
            this.tag = tag;
            return this;
        }
        public ReportFilterResponse build() {
            final var o = new ReportFilterResponse();
            o.and = and;
            o.dimension = dimension;
            o.not = not;
            o.or = or;
            o.tag = tag;
            return o;
        }
    }
}
