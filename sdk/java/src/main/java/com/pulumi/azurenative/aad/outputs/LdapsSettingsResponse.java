// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.aad.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LdapsSettingsResponse {
    /**
     * @return NotAfter DateTime of configure ldaps certificate.
     * 
     */
    private String certificateNotAfter;
    /**
     * @return Thumbprint of configure ldaps certificate.
     * 
     */
    private String certificateThumbprint;
    /**
     * @return A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     * 
     */
    private @Nullable String externalAccess;
    /**
     * @return A flag to determine whether or not Secure LDAP is enabled or disabled.
     * 
     */
    private @Nullable String ldaps;
    /**
     * @return The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     * 
     */
    private @Nullable String pfxCertificate;
    /**
     * @return The password to decrypt the provided Secure LDAP certificate pfx file.
     * 
     */
    private @Nullable String pfxCertificatePassword;
    /**
     * @return Public certificate used to configure secure ldap.
     * 
     */
    private String publicCertificate;

    private LdapsSettingsResponse() {}
    /**
     * @return NotAfter DateTime of configure ldaps certificate.
     * 
     */
    public String certificateNotAfter() {
        return this.certificateNotAfter;
    }
    /**
     * @return Thumbprint of configure ldaps certificate.
     * 
     */
    public String certificateThumbprint() {
        return this.certificateThumbprint;
    }
    /**
     * @return A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     * 
     */
    public Optional<String> externalAccess() {
        return Optional.ofNullable(this.externalAccess);
    }
    /**
     * @return A flag to determine whether or not Secure LDAP is enabled or disabled.
     * 
     */
    public Optional<String> ldaps() {
        return Optional.ofNullable(this.ldaps);
    }
    /**
     * @return The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     * 
     */
    public Optional<String> pfxCertificate() {
        return Optional.ofNullable(this.pfxCertificate);
    }
    /**
     * @return The password to decrypt the provided Secure LDAP certificate pfx file.
     * 
     */
    public Optional<String> pfxCertificatePassword() {
        return Optional.ofNullable(this.pfxCertificatePassword);
    }
    /**
     * @return Public certificate used to configure secure ldap.
     * 
     */
    public String publicCertificate() {
        return this.publicCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LdapsSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateNotAfter;
        private String certificateThumbprint;
        private @Nullable String externalAccess;
        private @Nullable String ldaps;
        private @Nullable String pfxCertificate;
        private @Nullable String pfxCertificatePassword;
        private String publicCertificate;
        public Builder() {}
        public Builder(LdapsSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateNotAfter = defaults.certificateNotAfter;
    	      this.certificateThumbprint = defaults.certificateThumbprint;
    	      this.externalAccess = defaults.externalAccess;
    	      this.ldaps = defaults.ldaps;
    	      this.pfxCertificate = defaults.pfxCertificate;
    	      this.pfxCertificatePassword = defaults.pfxCertificatePassword;
    	      this.publicCertificate = defaults.publicCertificate;
        }

        @CustomType.Setter
        public Builder certificateNotAfter(String certificateNotAfter) {
            this.certificateNotAfter = Objects.requireNonNull(certificateNotAfter);
            return this;
        }
        @CustomType.Setter
        public Builder certificateThumbprint(String certificateThumbprint) {
            this.certificateThumbprint = Objects.requireNonNull(certificateThumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder externalAccess(@Nullable String externalAccess) {
            this.externalAccess = externalAccess;
            return this;
        }
        @CustomType.Setter
        public Builder ldaps(@Nullable String ldaps) {
            this.ldaps = ldaps;
            return this;
        }
        @CustomType.Setter
        public Builder pfxCertificate(@Nullable String pfxCertificate) {
            this.pfxCertificate = pfxCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder pfxCertificatePassword(@Nullable String pfxCertificatePassword) {
            this.pfxCertificatePassword = pfxCertificatePassword;
            return this;
        }
        @CustomType.Setter
        public Builder publicCertificate(String publicCertificate) {
            this.publicCertificate = Objects.requireNonNull(publicCertificate);
            return this;
        }
        public LdapsSettingsResponse build() {
            final var o = new LdapsSettingsResponse();
            o.certificateNotAfter = certificateNotAfter;
            o.certificateThumbprint = certificateThumbprint;
            o.externalAccess = externalAccess;
            o.ldaps = ldaps;
            o.pfxCertificate = pfxCertificate;
            o.pfxCertificatePassword = pfxCertificatePassword;
            o.publicCertificate = publicCertificate;
            return o;
        }
    }
}
