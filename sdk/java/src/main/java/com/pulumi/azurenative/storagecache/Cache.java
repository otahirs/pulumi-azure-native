// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.storagecache.CacheArgs;
import com.pulumi.azurenative.storagecache.outputs.CacheDirectorySettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheEncryptionSettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheHealthResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheIdentityResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheNetworkSettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheResponseSku;
import com.pulumi.azurenative.storagecache.outputs.CacheSecuritySettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheUpgradeStatusResponse;
import com.pulumi.azurenative.storagecache.outputs.SystemDataResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
 * API Version: 2021-03-01.
 * 
 * ## Example Usage
 * ### Caches_CreateOrUpdate
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cache = new Cache(&#34;cache&#34;, CacheArgs.builder()        
 *             .cacheName(&#34;sc1&#34;)
 *             .cacheSizeGB(3072)
 *             .directoryServicesSettings(Map.ofEntries(
 *                 Map.entry(&#34;activeDirectory&#34;, Map.ofEntries(
 *                     Map.entry(&#34;cacheNetBiosName&#34;, &#34;contosoSmb&#34;),
 *                     Map.entry(&#34;credentials&#34;, Map.ofEntries(
 *                         Map.entry(&#34;password&#34;, &#34;&lt;password&gt;&#34;),
 *                         Map.entry(&#34;username&#34;, &#34;consotoAdmin&#34;)
 *                     )),
 *                     Map.entry(&#34;domainName&#34;, &#34;contosoAd.contoso.local&#34;),
 *                     Map.entry(&#34;domainNetBiosName&#34;, &#34;contosoAd&#34;),
 *                     Map.entry(&#34;primaryDnsIpAddress&#34;, &#34;192.0.2.10&#34;),
 *                     Map.entry(&#34;secondaryDnsIpAddress&#34;, &#34;192.0.2.11&#34;)
 *                 )),
 *                 Map.entry(&#34;usernameDownload&#34;, Map.ofEntries(
 *                     Map.entry(&#34;credentials&#34;, Map.ofEntries(
 *                         Map.entry(&#34;bindDn&#34;, &#34;cn=ldapadmin,dc=contosoad,dc=contoso,dc=local&#34;),
 *                         Map.entry(&#34;bindPassword&#34;, &#34;&lt;bindPassword&gt;&#34;)
 *                     )),
 *                     Map.entry(&#34;extendedGroups&#34;, true),
 *                     Map.entry(&#34;ldapBaseDN&#34;, &#34;dc=contosoad,dc=contoso,dc=local&#34;),
 *                     Map.entry(&#34;ldapServer&#34;, &#34;192.0.2.12&#34;),
 *                     Map.entry(&#34;usernameSource&#34;, &#34;LDAP&#34;)
 *                 ))
 *             ))
 *             .encryptionSettings(Map.of(&#34;keyEncryptionKey&#34;, Map.ofEntries(
 *                 Map.entry(&#34;keyUrl&#34;, &#34;https://keyvault-cmk.vault.azure.net/keys/key2047/test&#34;),
 *                 Map.entry(&#34;sourceVault&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk&#34;))
 *             )))
 *             .location(&#34;westus&#34;)
 *             .resourceGroupName(&#34;scgroup&#34;)
 *             .securitySettings(Map.of(&#34;accessPolicies&#34;, Map.ofEntries(
 *                 Map.entry(&#34;accessRules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;access&#34;, &#34;rw&#34;),
 *                     Map.entry(&#34;rootSquash&#34;, false),
 *                     Map.entry(&#34;scope&#34;, &#34;default&#34;),
 *                     Map.entry(&#34;submountAccess&#34;, true),
 *                     Map.entry(&#34;suid&#34;, false)
 *                 )),
 *                 Map.entry(&#34;name&#34;, &#34;default&#34;)
 *             )))
 *             .sku(Map.of(&#34;name&#34;, &#34;Standard_2G&#34;))
 *             .subnet(&#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1&#34;)
 *             .tags(Map.of(&#34;Dept&#34;, &#34;Contoso&#34;))
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Caches_CreateOrUpdate_ldap_only
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cache = new Cache(&#34;cache&#34;, CacheArgs.builder()        
 *             .cacheName(&#34;sc1&#34;)
 *             .cacheSizeGB(3072)
 *             .directoryServicesSettings(Map.of(&#34;usernameDownload&#34;, Map.ofEntries(
 *                 Map.entry(&#34;credentials&#34;, Map.ofEntries(
 *                     Map.entry(&#34;bindDn&#34;, &#34;cn=ldapadmin,dc=contosoad,dc=contoso,dc=local&#34;),
 *                     Map.entry(&#34;bindPassword&#34;, &#34;&lt;bindPassword&gt;&#34;)
 *                 )),
 *                 Map.entry(&#34;extendedGroups&#34;, true),
 *                 Map.entry(&#34;ldapBaseDN&#34;, &#34;dc=contosoad,dc=contoso,dc=local&#34;),
 *                 Map.entry(&#34;ldapServer&#34;, &#34;192.0.2.12&#34;),
 *                 Map.entry(&#34;usernameSource&#34;, &#34;LDAP&#34;)
 *             )))
 *             .encryptionSettings(Map.of(&#34;keyEncryptionKey&#34;, Map.ofEntries(
 *                 Map.entry(&#34;keyUrl&#34;, &#34;https://keyvault-cmk.vault.azure.net/keys/key2048/test&#34;),
 *                 Map.entry(&#34;sourceVault&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk&#34;))
 *             )))
 *             .location(&#34;westus&#34;)
 *             .resourceGroupName(&#34;scgroup&#34;)
 *             .securitySettings(Map.of(&#34;accessPolicies&#34;, Map.ofEntries(
 *                 Map.entry(&#34;accessRules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;access&#34;, &#34;rw&#34;),
 *                     Map.entry(&#34;rootSquash&#34;, false),
 *                     Map.entry(&#34;scope&#34;, &#34;default&#34;),
 *                     Map.entry(&#34;submountAccess&#34;, true),
 *                     Map.entry(&#34;suid&#34;, false)
 *                 )),
 *                 Map.entry(&#34;name&#34;, &#34;default&#34;)
 *             )))
 *             .sku(Map.of(&#34;name&#34;, &#34;Standard_2G&#34;))
 *             .subnet(&#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1&#34;)
 *             .tags(Map.of(&#34;Dept&#34;, &#34;Contoso&#34;))
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:storagecache:Cache sc1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1 
 * ```
 * 
 */
@ResourceType(type="azure-native:storagecache:Cache")
public class Cache extends com.pulumi.resources.CustomResource {
    /**
     * The size of this Cache, in GB.
     * 
     */
    @Export(name="cacheSizeGB", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> cacheSizeGB;

    /**
     * @return The size of this Cache, in GB.
     * 
     */
    public Output<Optional<Integer>> cacheSizeGB() {
        return Codegen.optional(this.cacheSizeGB);
    }
    /**
     * Specifies Directory Services settings of the cache.
     * 
     */
    @Export(name="directoryServicesSettings", type=CacheDirectorySettingsResponse.class, parameters={})
    private Output</* @Nullable */ CacheDirectorySettingsResponse> directoryServicesSettings;

    /**
     * @return Specifies Directory Services settings of the cache.
     * 
     */
    public Output<Optional<CacheDirectorySettingsResponse>> directoryServicesSettings() {
        return Codegen.optional(this.directoryServicesSettings);
    }
    /**
     * Specifies encryption settings of the cache.
     * 
     */
    @Export(name="encryptionSettings", type=CacheEncryptionSettingsResponse.class, parameters={})
    private Output</* @Nullable */ CacheEncryptionSettingsResponse> encryptionSettings;

    /**
     * @return Specifies encryption settings of the cache.
     * 
     */
    public Output<Optional<CacheEncryptionSettingsResponse>> encryptionSettings() {
        return Codegen.optional(this.encryptionSettings);
    }
    /**
     * Health of the Cache.
     * 
     */
    @Export(name="health", type=CacheHealthResponse.class, parameters={})
    private Output<CacheHealthResponse> health;

    /**
     * @return Health of the Cache.
     * 
     */
    public Output<CacheHealthResponse> health() {
        return this.health;
    }
    /**
     * The identity of the cache, if configured.
     * 
     */
    @Export(name="identity", type=CacheIdentityResponse.class, parameters={})
    private Output</* @Nullable */ CacheIdentityResponse> identity;

    /**
     * @return The identity of the cache, if configured.
     * 
     */
    public Output<Optional<CacheIdentityResponse>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * Region name string.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return Region name string.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Array of IP addresses that can be used by clients mounting this Cache.
     * 
     */
    @Export(name="mountAddresses", type=List.class, parameters={String.class})
    private Output<List<String>> mountAddresses;

    /**
     * @return Array of IP addresses that can be used by clients mounting this Cache.
     * 
     */
    public Output<List<String>> mountAddresses() {
        return this.mountAddresses;
    }
    /**
     * Name of Cache.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of Cache.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies network settings of the cache.
     * 
     */
    @Export(name="networkSettings", type=CacheNetworkSettingsResponse.class, parameters={})
    private Output</* @Nullable */ CacheNetworkSettingsResponse> networkSettings;

    /**
     * @return Specifies network settings of the cache.
     * 
     */
    public Output<Optional<CacheNetworkSettingsResponse>> networkSettings() {
        return Codegen.optional(this.networkSettings);
    }
    /**
     * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output</* @Nullable */ String> provisioningState;

    /**
     * @return ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * 
     */
    public Output<Optional<String>> provisioningState() {
        return Codegen.optional(this.provisioningState);
    }
    /**
     * Specifies security settings of the cache.
     * 
     */
    @Export(name="securitySettings", type=CacheSecuritySettingsResponse.class, parameters={})
    private Output</* @Nullable */ CacheSecuritySettingsResponse> securitySettings;

    /**
     * @return Specifies security settings of the cache.
     * 
     */
    public Output<Optional<CacheSecuritySettingsResponse>> securitySettings() {
        return Codegen.optional(this.securitySettings);
    }
    /**
     * SKU for the Cache.
     * 
     */
    @Export(name="sku", type=CacheResponseSku.class, parameters={})
    private Output</* @Nullable */ CacheResponseSku> sku;

    /**
     * @return SKU for the Cache.
     * 
     */
    public Output<Optional<CacheResponseSku>> sku() {
        return Codegen.optional(this.sku);
    }
    /**
     * Subnet used for the Cache.
     * 
     */
    @Export(name="subnet", type=String.class, parameters={})
    private Output</* @Nullable */ String> subnet;

    /**
     * @return Subnet used for the Cache.
     * 
     */
    public Output<Optional<String>> subnet() {
        return Codegen.optional(this.subnet);
    }
    /**
     * The system meta data relating to this resource.
     * 
     */
    @Export(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return The system meta data relating to this resource.
     * 
     */
    public Output<SystemDataResponse> systemData() {
        return this.systemData;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Type of the Cache; Microsoft.StorageCache/Cache
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Type of the Cache; Microsoft.StorageCache/Cache
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Upgrade status of the Cache.
     * 
     */
    @Export(name="upgradeStatus", type=CacheUpgradeStatusResponse.class, parameters={})
    private Output</* @Nullable */ CacheUpgradeStatusResponse> upgradeStatus;

    /**
     * @return Upgrade status of the Cache.
     * 
     */
    public Output<Optional<CacheUpgradeStatusResponse>> upgradeStatus() {
        return Codegen.optional(this.upgradeStatus);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Cache(String name) {
        this(name, CacheArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Cache(String name, CacheArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cache(String name, CacheArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:storagecache:Cache", name, args == null ? CacheArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Cache(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:storagecache:Cache", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:storagecache/v20190801preview:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20191101:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20200301:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20201001:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20210301:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20210501:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20210901:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20220101:Cache").build()),
                Output.of(Alias.builder().type("azure-native:storagecache/v20220501:Cache").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cache get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Cache(name, id, options);
    }
}
