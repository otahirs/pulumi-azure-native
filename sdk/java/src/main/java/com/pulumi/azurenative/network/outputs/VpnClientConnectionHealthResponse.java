// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VpnClientConnectionHealthResponse {
    /**
     * @return List of allocated ip addresses to the connected p2s vpn clients.
     * 
     */
    private @Nullable List<String> allocatedIpAddresses;
    /**
     * @return Total of the Egress Bytes Transferred in this connection.
     * 
     */
    private Double totalEgressBytesTransferred;
    /**
     * @return Total of the Ingress Bytes Transferred in this P2S Vpn connection.
     * 
     */
    private Double totalIngressBytesTransferred;
    /**
     * @return The total of p2s vpn clients connected at this time to this P2SVpnGateway.
     * 
     */
    private @Nullable Integer vpnClientConnectionsCount;

    private VpnClientConnectionHealthResponse() {}
    /**
     * @return List of allocated ip addresses to the connected p2s vpn clients.
     * 
     */
    public List<String> allocatedIpAddresses() {
        return this.allocatedIpAddresses == null ? List.of() : this.allocatedIpAddresses;
    }
    /**
     * @return Total of the Egress Bytes Transferred in this connection.
     * 
     */
    public Double totalEgressBytesTransferred() {
        return this.totalEgressBytesTransferred;
    }
    /**
     * @return Total of the Ingress Bytes Transferred in this P2S Vpn connection.
     * 
     */
    public Double totalIngressBytesTransferred() {
        return this.totalIngressBytesTransferred;
    }
    /**
     * @return The total of p2s vpn clients connected at this time to this P2SVpnGateway.
     * 
     */
    public Optional<Integer> vpnClientConnectionsCount() {
        return Optional.ofNullable(this.vpnClientConnectionsCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnClientConnectionHealthResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allocatedIpAddresses;
        private Double totalEgressBytesTransferred;
        private Double totalIngressBytesTransferred;
        private @Nullable Integer vpnClientConnectionsCount;
        public Builder() {}
        public Builder(VpnClientConnectionHealthResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedIpAddresses = defaults.allocatedIpAddresses;
    	      this.totalEgressBytesTransferred = defaults.totalEgressBytesTransferred;
    	      this.totalIngressBytesTransferred = defaults.totalIngressBytesTransferred;
    	      this.vpnClientConnectionsCount = defaults.vpnClientConnectionsCount;
        }

        @CustomType.Setter
        public Builder allocatedIpAddresses(@Nullable List<String> allocatedIpAddresses) {
            this.allocatedIpAddresses = allocatedIpAddresses;
            return this;
        }
        public Builder allocatedIpAddresses(String... allocatedIpAddresses) {
            return allocatedIpAddresses(List.of(allocatedIpAddresses));
        }
        @CustomType.Setter
        public Builder totalEgressBytesTransferred(Double totalEgressBytesTransferred) {
            this.totalEgressBytesTransferred = Objects.requireNonNull(totalEgressBytesTransferred);
            return this;
        }
        @CustomType.Setter
        public Builder totalIngressBytesTransferred(Double totalIngressBytesTransferred) {
            this.totalIngressBytesTransferred = Objects.requireNonNull(totalIngressBytesTransferred);
            return this;
        }
        @CustomType.Setter
        public Builder vpnClientConnectionsCount(@Nullable Integer vpnClientConnectionsCount) {
            this.vpnClientConnectionsCount = vpnClientConnectionsCount;
            return this;
        }
        public VpnClientConnectionHealthResponse build() {
            final var o = new VpnClientConnectionHealthResponse();
            o.allocatedIpAddresses = allocatedIpAddresses;
            o.totalEgressBytesTransferred = totalEgressBytesTransferred;
            o.totalIngressBytesTransferred = totalIngressBytesTransferred;
            o.vpnClientConnectionsCount = vpnClientConnectionsCount;
            return o;
        }
    }
}
