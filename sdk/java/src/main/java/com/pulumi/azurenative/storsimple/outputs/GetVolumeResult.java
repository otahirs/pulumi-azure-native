// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVolumeResult {
    /**
     * @return The IDs of the access control records, associated with the volume.
     * 
     */
    private List<String> accessControlRecordIds;
    /**
     * @return The IDs of the backup policies, in which this volume is part of.
     * 
     */
    private List<String> backupPolicyIds;
    /**
     * @return The backup status of the volume.
     * 
     */
    private String backupStatus;
    /**
     * @return The path ID that uniquely identifies the object.
     * 
     */
    private String id;
    /**
     * @return The Kind of the object. Currently only Series8000 is supported
     * 
     */
    private @Nullable String kind;
    /**
     * @return The monitoring status of the volume.
     * 
     */
    private String monitoringStatus;
    /**
     * @return The name of the object.
     * 
     */
    private String name;
    /**
     * @return The operation status on the volume.
     * 
     */
    private String operationStatus;
    /**
     * @return The size of the volume in bytes.
     * 
     */
    private Double sizeInBytes;
    /**
     * @return The hierarchical type of the object.
     * 
     */
    private String type;
    /**
     * @return The ID of the volume container, in which this volume is created.
     * 
     */
    private String volumeContainerId;
    /**
     * @return The volume status.
     * 
     */
    private String volumeStatus;
    /**
     * @return The type of the volume.
     * 
     */
    private String volumeType;

    private GetVolumeResult() {}
    /**
     * @return The IDs of the access control records, associated with the volume.
     * 
     */
    public List<String> accessControlRecordIds() {
        return this.accessControlRecordIds;
    }
    /**
     * @return The IDs of the backup policies, in which this volume is part of.
     * 
     */
    public List<String> backupPolicyIds() {
        return this.backupPolicyIds;
    }
    /**
     * @return The backup status of the volume.
     * 
     */
    public String backupStatus() {
        return this.backupStatus;
    }
    /**
     * @return The path ID that uniquely identifies the object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Kind of the object. Currently only Series8000 is supported
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return The monitoring status of the volume.
     * 
     */
    public String monitoringStatus() {
        return this.monitoringStatus;
    }
    /**
     * @return The name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The operation status on the volume.
     * 
     */
    public String operationStatus() {
        return this.operationStatus;
    }
    /**
     * @return The size of the volume in bytes.
     * 
     */
    public Double sizeInBytes() {
        return this.sizeInBytes;
    }
    /**
     * @return The hierarchical type of the object.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The ID of the volume container, in which this volume is created.
     * 
     */
    public String volumeContainerId() {
        return this.volumeContainerId;
    }
    /**
     * @return The volume status.
     * 
     */
    public String volumeStatus() {
        return this.volumeStatus;
    }
    /**
     * @return The type of the volume.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> accessControlRecordIds;
        private List<String> backupPolicyIds;
        private String backupStatus;
        private String id;
        private @Nullable String kind;
        private String monitoringStatus;
        private String name;
        private String operationStatus;
        private Double sizeInBytes;
        private String type;
        private String volumeContainerId;
        private String volumeStatus;
        private String volumeType;
        public Builder() {}
        public Builder(GetVolumeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControlRecordIds = defaults.accessControlRecordIds;
    	      this.backupPolicyIds = defaults.backupPolicyIds;
    	      this.backupStatus = defaults.backupStatus;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.monitoringStatus = defaults.monitoringStatus;
    	      this.name = defaults.name;
    	      this.operationStatus = defaults.operationStatus;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.type = defaults.type;
    	      this.volumeContainerId = defaults.volumeContainerId;
    	      this.volumeStatus = defaults.volumeStatus;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder accessControlRecordIds(List<String> accessControlRecordIds) {
            this.accessControlRecordIds = Objects.requireNonNull(accessControlRecordIds);
            return this;
        }
        public Builder accessControlRecordIds(String... accessControlRecordIds) {
            return accessControlRecordIds(List.of(accessControlRecordIds));
        }
        @CustomType.Setter
        public Builder backupPolicyIds(List<String> backupPolicyIds) {
            this.backupPolicyIds = Objects.requireNonNull(backupPolicyIds);
            return this;
        }
        public Builder backupPolicyIds(String... backupPolicyIds) {
            return backupPolicyIds(List.of(backupPolicyIds));
        }
        @CustomType.Setter
        public Builder backupStatus(String backupStatus) {
            this.backupStatus = Objects.requireNonNull(backupStatus);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringStatus(String monitoringStatus) {
            this.monitoringStatus = Objects.requireNonNull(monitoringStatus);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder operationStatus(String operationStatus) {
            this.operationStatus = Objects.requireNonNull(operationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder sizeInBytes(Double sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder volumeContainerId(String volumeContainerId) {
            this.volumeContainerId = Objects.requireNonNull(volumeContainerId);
            return this;
        }
        @CustomType.Setter
        public Builder volumeStatus(String volumeStatus) {
            this.volumeStatus = Objects.requireNonNull(volumeStatus);
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetVolumeResult build() {
            final var o = new GetVolumeResult();
            o.accessControlRecordIds = accessControlRecordIds;
            o.backupPolicyIds = backupPolicyIds;
            o.backupStatus = backupStatus;
            o.id = id;
            o.kind = kind;
            o.monitoringStatus = monitoringStatus;
            o.name = name;
            o.operationStatus = operationStatus;
            o.sizeInBytes = sizeInBytes;
            o.type = type;
            o.volumeContainerId = volumeContainerId;
            o.volumeStatus = volumeStatus;
            o.volumeType = volumeType;
            return o;
        }
    }
}
