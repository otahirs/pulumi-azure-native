// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.outputs;

import com.pulumi.azurenative.security.outputs.PublisherInfoResponse;
import com.pulumi.azurenative.security.outputs.UserRecommendationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PathRecommendationResponse {
    /**
     * @return The recommendation action of the machine or rule
     * 
     */
    private @Nullable String action;
    /**
     * @return Whether the application is commonly run on the machine
     * 
     */
    private @Nullable Boolean common;
    /**
     * @return The configuration status of the machines group or machine or rule
     * 
     */
    private @Nullable String configurationStatus;
    /**
     * @return The type of the file (for Linux files - Executable is used)
     * 
     */
    private @Nullable String fileType;
    /**
     * @return The full path of the file, or an identifier of the application
     * 
     */
    private @Nullable String path;
    /**
     * @return Represents the publisher information of a process/rule
     * 
     */
    private @Nullable PublisherInfoResponse publisherInfo;
    /**
     * @return The type of the rule to be allowed
     * 
     */
    private @Nullable String type;
    private @Nullable List<String> userSids;
    private @Nullable List<UserRecommendationResponse> usernames;

    private PathRecommendationResponse() {}
    /**
     * @return The recommendation action of the machine or rule
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Whether the application is commonly run on the machine
     * 
     */
    public Optional<Boolean> common() {
        return Optional.ofNullable(this.common);
    }
    /**
     * @return The configuration status of the machines group or machine or rule
     * 
     */
    public Optional<String> configurationStatus() {
        return Optional.ofNullable(this.configurationStatus);
    }
    /**
     * @return The type of the file (for Linux files - Executable is used)
     * 
     */
    public Optional<String> fileType() {
        return Optional.ofNullable(this.fileType);
    }
    /**
     * @return The full path of the file, or an identifier of the application
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Represents the publisher information of a process/rule
     * 
     */
    public Optional<PublisherInfoResponse> publisherInfo() {
        return Optional.ofNullable(this.publisherInfo);
    }
    /**
     * @return The type of the rule to be allowed
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    public List<String> userSids() {
        return this.userSids == null ? List.of() : this.userSids;
    }
    public List<UserRecommendationResponse> usernames() {
        return this.usernames == null ? List.of() : this.usernames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PathRecommendationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable Boolean common;
        private @Nullable String configurationStatus;
        private @Nullable String fileType;
        private @Nullable String path;
        private @Nullable PublisherInfoResponse publisherInfo;
        private @Nullable String type;
        private @Nullable List<String> userSids;
        private @Nullable List<UserRecommendationResponse> usernames;
        public Builder() {}
        public Builder(PathRecommendationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.common = defaults.common;
    	      this.configurationStatus = defaults.configurationStatus;
    	      this.fileType = defaults.fileType;
    	      this.path = defaults.path;
    	      this.publisherInfo = defaults.publisherInfo;
    	      this.type = defaults.type;
    	      this.userSids = defaults.userSids;
    	      this.usernames = defaults.usernames;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder common(@Nullable Boolean common) {
            this.common = common;
            return this;
        }
        @CustomType.Setter
        public Builder configurationStatus(@Nullable String configurationStatus) {
            this.configurationStatus = configurationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder fileType(@Nullable String fileType) {
            this.fileType = fileType;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder publisherInfo(@Nullable PublisherInfoResponse publisherInfo) {
            this.publisherInfo = publisherInfo;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder userSids(@Nullable List<String> userSids) {
            this.userSids = userSids;
            return this;
        }
        public Builder userSids(String... userSids) {
            return userSids(List.of(userSids));
        }
        @CustomType.Setter
        public Builder usernames(@Nullable List<UserRecommendationResponse> usernames) {
            this.usernames = usernames;
            return this;
        }
        public Builder usernames(UserRecommendationResponse... usernames) {
            return usernames(List.of(usernames));
        }
        public PathRecommendationResponse build() {
            final var o = new PathRecommendationResponse();
            o.action = action;
            o.common = common;
            o.configurationStatus = configurationStatus;
            o.fileType = fileType;
            o.path = path;
            o.publisherInfo = publisherInfo;
            o.type = type;
            o.userSids = userSids;
            o.usernames = usernames;
            return o;
        }
    }
}
