// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationMetricDescriptionResponse {
    /**
     * @return The maximum node capacity for Service Fabric application.
     * This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
     * If set to zero, capacity for this metric is unlimited on each node.
     * When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     * When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     * 
     */
    private @Nullable Double maximumCapacity;
    /**
     * @return The name of the metric.
     * 
     */
    private @Nullable String name;
    /**
     * @return The node reservation capacity for Service Fabric application.
     * This is the amount of load which is reserved on nodes which have instances of this application.
     * If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
     * If set to zero, no capacity is reserved for this metric.
     * When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
     * 
     */
    private @Nullable Double reservationCapacity;
    /**
     * @return The total metric capacity for Service Fabric application.
     * This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
     * When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
     * 
     */
    private @Nullable Double totalApplicationCapacity;

    private ApplicationMetricDescriptionResponse() {}
    /**
     * @return The maximum node capacity for Service Fabric application.
     * This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
     * If set to zero, capacity for this metric is unlimited on each node.
     * When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     * When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
     * 
     */
    public Optional<Double> maximumCapacity() {
        return Optional.ofNullable(this.maximumCapacity);
    }
    /**
     * @return The name of the metric.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The node reservation capacity for Service Fabric application.
     * This is the amount of load which is reserved on nodes which have instances of this application.
     * If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
     * If set to zero, no capacity is reserved for this metric.
     * When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
     * 
     */
    public Optional<Double> reservationCapacity() {
        return Optional.ofNullable(this.reservationCapacity);
    }
    /**
     * @return The total metric capacity for Service Fabric application.
     * This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
     * When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
     * 
     */
    public Optional<Double> totalApplicationCapacity() {
        return Optional.ofNullable(this.totalApplicationCapacity);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationMetricDescriptionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double maximumCapacity;
        private @Nullable String name;
        private @Nullable Double reservationCapacity;
        private @Nullable Double totalApplicationCapacity;
        public Builder() {}
        public Builder(ApplicationMetricDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maximumCapacity = defaults.maximumCapacity;
    	      this.name = defaults.name;
    	      this.reservationCapacity = defaults.reservationCapacity;
    	      this.totalApplicationCapacity = defaults.totalApplicationCapacity;
        }

        @CustomType.Setter
        public Builder maximumCapacity(@Nullable Double maximumCapacity) {
            this.maximumCapacity = maximumCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder reservationCapacity(@Nullable Double reservationCapacity) {
            this.reservationCapacity = reservationCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder totalApplicationCapacity(@Nullable Double totalApplicationCapacity) {
            this.totalApplicationCapacity = totalApplicationCapacity;
            return this;
        }
        public ApplicationMetricDescriptionResponse build() {
            final var o = new ApplicationMetricDescriptionResponse();
            o.maximumCapacity = maximumCapacity;
            o.name = name;
            o.reservationCapacity = reservationCapacity;
            o.totalApplicationCapacity = totalApplicationCapacity;
            return o;
        }
    }
}
