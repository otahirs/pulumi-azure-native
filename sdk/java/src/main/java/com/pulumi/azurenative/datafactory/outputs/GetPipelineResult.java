// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AppendVariableActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureDataExplorerCommandActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureFunctionActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureMLBatchExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureMLExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureMLUpdateResourceActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ControlActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.CopyActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.CustomActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.DataLakeAnalyticsUSQLActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.DatabricksNotebookActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.DatabricksSparkJarActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.DatabricksSparkPythonActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.DeleteActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecuteDataFlowActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecuteSSISPackageActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecuteWranglingDataflowActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.FailActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.FilterActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ForEachActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.GetMetadataActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.HDInsightHiveActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.HDInsightMapReduceActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.HDInsightPigActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.HDInsightSparkActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.HDInsightStreamingActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.IfConditionActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.LookupActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.PipelinePolicyResponse;
import com.pulumi.azurenative.datafactory.outputs.PipelineResponseFolder;
import com.pulumi.azurenative.datafactory.outputs.ScriptActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.SetVariableActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.SqlServerStoredProcedureActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.SwitchActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.UntilActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.ValidationActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.VariableSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.WaitActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.WebActivityResponse;
import com.pulumi.azurenative.datafactory.outputs.WebHookActivityResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPipelineResult {
    /**
     * @return List of activities in pipeline.
     * 
     */
    private @Nullable List<Object> activities;
    /**
     * @return List of tags that can be used for describing the Pipeline.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return The max number of concurrent runs for the pipeline.
     * 
     */
    private @Nullable Integer concurrency;
    /**
     * @return The description of the pipeline.
     * 
     */
    private @Nullable String description;
    /**
     * @return Etag identifies change in the resource.
     * 
     */
    private String etag;
    /**
     * @return The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
     * 
     */
    private @Nullable PipelineResponseFolder folder;
    /**
     * @return The resource identifier.
     * 
     */
    private String id;
    /**
     * @return The resource name.
     * 
     */
    private String name;
    /**
     * @return List of parameters for pipeline.
     * 
     */
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;
    /**
     * @return Pipeline Policy.
     * 
     */
    private @Nullable PipelinePolicyResponse policy;
    /**
     * @return Dimensions emitted by Pipeline.
     * 
     */
    private @Nullable Map<String,Object> runDimensions;
    /**
     * @return The resource type.
     * 
     */
    private String type;
    /**
     * @return List of variables for pipeline.
     * 
     */
    private @Nullable Map<String,VariableSpecificationResponse> variables;

    private GetPipelineResult() {}
    /**
     * @return List of activities in pipeline.
     * 
     */
    public List<Object> activities() {
        return this.activities == null ? List.of() : this.activities;
    }
    /**
     * @return List of tags that can be used for describing the Pipeline.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return The max number of concurrent runs for the pipeline.
     * 
     */
    public Optional<Integer> concurrency() {
        return Optional.ofNullable(this.concurrency);
    }
    /**
     * @return The description of the pipeline.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Etag identifies change in the resource.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
     * 
     */
    public Optional<PipelineResponseFolder> folder() {
        return Optional.ofNullable(this.folder);
    }
    /**
     * @return The resource identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of parameters for pipeline.
     * 
     */
    public Map<String,ParameterSpecificationResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Pipeline Policy.
     * 
     */
    public Optional<PipelinePolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return Dimensions emitted by Pipeline.
     * 
     */
    public Map<String,Object> runDimensions() {
        return this.runDimensions == null ? Map.of() : this.runDimensions;
    }
    /**
     * @return The resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return List of variables for pipeline.
     * 
     */
    public Map<String,VariableSpecificationResponse> variables() {
        return this.variables == null ? Map.of() : this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> activities;
        private @Nullable List<Object> annotations;
        private @Nullable Integer concurrency;
        private @Nullable String description;
        private String etag;
        private @Nullable PipelineResponseFolder folder;
        private String id;
        private String name;
        private @Nullable Map<String,ParameterSpecificationResponse> parameters;
        private @Nullable PipelinePolicyResponse policy;
        private @Nullable Map<String,Object> runDimensions;
        private String type;
        private @Nullable Map<String,VariableSpecificationResponse> variables;
        public Builder() {}
        public Builder(GetPipelineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activities = defaults.activities;
    	      this.annotations = defaults.annotations;
    	      this.concurrency = defaults.concurrency;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.folder = defaults.folder;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.policy = defaults.policy;
    	      this.runDimensions = defaults.runDimensions;
    	      this.type = defaults.type;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder activities(@Nullable List<Object> activities) {
            this.activities = activities;
            return this;
        }
        public Builder activities(Object... activities) {
            return activities(List.of(activities));
        }
        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder concurrency(@Nullable Integer concurrency) {
            this.concurrency = concurrency;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder folder(@Nullable PipelineResponseFolder folder) {
            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable PipelinePolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder runDimensions(@Nullable Map<String,Object> runDimensions) {
            this.runDimensions = runDimensions;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder variables(@Nullable Map<String,VariableSpecificationResponse> variables) {
            this.variables = variables;
            return this;
        }
        public GetPipelineResult build() {
            final var o = new GetPipelineResult();
            o.activities = activities;
            o.annotations = annotations;
            o.concurrency = concurrency;
            o.description = description;
            o.etag = etag;
            o.folder = folder;
            o.id = id;
            o.name = name;
            o.parameters = parameters;
            o.policy = policy;
            o.runDimensions = runDimensions;
            o.type = type;
            o.variables = variables;
            return o;
        }
    }
}
