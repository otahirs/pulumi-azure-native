// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.outputs;

import com.pulumi.azurenative.servicefabricmesh.outputs.DiagnosticsDescriptionResponse;
import com.pulumi.azurenative.servicefabricmesh.outputs.ServiceResourceDescriptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetApplicationResult {
    /**
     * @return Internal - used by Visual Studio to setup the debugging session on the local development environment.
     * 
     */
    private @Nullable String debugParams;
    /**
     * @return User readable description of the application.
     * 
     */
    private @Nullable String description;
    /**
     * @return Describes the diagnostics definition and usage for an application resource.
     * 
     */
    private @Nullable DiagnosticsDescriptionResponse diagnostics;
    /**
     * @return Describes the health state of an application resource.
     * 
     */
    private String healthState;
    /**
     * @return Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return State of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Names of the services in the application.
     * 
     */
    private List<String> serviceNames;
    /**
     * @return Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
     * 
     */
    private @Nullable List<ServiceResourceDescriptionResponse> services;
    /**
     * @return Status of the application.
     * 
     */
    private String status;
    /**
     * @return Gives additional information about the current status of the application.
     * 
     */
    private String statusDetails;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    private String type;
    /**
     * @return When the application&#39;s health state is not &#39;Ok&#39;, this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
     * 
     */
    private String unhealthyEvaluation;

    private GetApplicationResult() {}
    /**
     * @return Internal - used by Visual Studio to setup the debugging session on the local development environment.
     * 
     */
    public Optional<String> debugParams() {
        return Optional.ofNullable(this.debugParams);
    }
    /**
     * @return User readable description of the application.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Describes the diagnostics definition and usage for an application resource.
     * 
     */
    public Optional<DiagnosticsDescriptionResponse> diagnostics() {
        return Optional.ofNullable(this.diagnostics);
    }
    /**
     * @return Describes the health state of an application resource.
     * 
     */
    public String healthState() {
        return this.healthState;
    }
    /**
     * @return Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return State of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Names of the services in the application.
     * 
     */
    public List<String> serviceNames() {
        return this.serviceNames;
    }
    /**
     * @return Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
     * 
     */
    public List<ServiceResourceDescriptionResponse> services() {
        return this.services == null ? List.of() : this.services;
    }
    /**
     * @return Status of the application.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Gives additional information about the current status of the application.
     * 
     */
    public String statusDetails() {
        return this.statusDetails;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return When the application&#39;s health state is not &#39;Ok&#39;, this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
     * 
     */
    public String unhealthyEvaluation() {
        return this.unhealthyEvaluation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String debugParams;
        private @Nullable String description;
        private @Nullable DiagnosticsDescriptionResponse diagnostics;
        private String healthState;
        private String id;
        private String location;
        private String name;
        private String provisioningState;
        private List<String> serviceNames;
        private @Nullable List<ServiceResourceDescriptionResponse> services;
        private String status;
        private String statusDetails;
        private @Nullable Map<String,String> tags;
        private String type;
        private String unhealthyEvaluation;
        public Builder() {}
        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.debugParams = defaults.debugParams;
    	      this.description = defaults.description;
    	      this.diagnostics = defaults.diagnostics;
    	      this.healthState = defaults.healthState;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.serviceNames = defaults.serviceNames;
    	      this.services = defaults.services;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.unhealthyEvaluation = defaults.unhealthyEvaluation;
        }

        @CustomType.Setter
        public Builder debugParams(@Nullable String debugParams) {
            this.debugParams = debugParams;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diagnostics(@Nullable DiagnosticsDescriptionResponse diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }
        @CustomType.Setter
        public Builder healthState(String healthState) {
            this.healthState = Objects.requireNonNull(healthState);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder serviceNames(List<String> serviceNames) {
            this.serviceNames = Objects.requireNonNull(serviceNames);
            return this;
        }
        public Builder serviceNames(String... serviceNames) {
            return serviceNames(List.of(serviceNames));
        }
        @CustomType.Setter
        public Builder services(@Nullable List<ServiceResourceDescriptionResponse> services) {
            this.services = services;
            return this;
        }
        public Builder services(ServiceResourceDescriptionResponse... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusDetails(String statusDetails) {
            this.statusDetails = Objects.requireNonNull(statusDetails);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyEvaluation(String unhealthyEvaluation) {
            this.unhealthyEvaluation = Objects.requireNonNull(unhealthyEvaluation);
            return this;
        }
        public GetApplicationResult build() {
            final var o = new GetApplicationResult();
            o.debugParams = debugParams;
            o.description = description;
            o.diagnostics = diagnostics;
            o.healthState = healthState;
            o.id = id;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.serviceNames = serviceNames;
            o.services = services;
            o.status = status;
            o.statusDetails = statusDetails;
            o.tags = tags;
            o.type = type;
            o.unhealthyEvaluation = unhealthyEvaluation;
            return o;
        }
    }
}
