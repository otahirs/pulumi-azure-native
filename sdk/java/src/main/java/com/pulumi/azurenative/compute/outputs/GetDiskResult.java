// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.CreationDataResponse;
import com.pulumi.azurenative.compute.outputs.DiskSecurityProfileResponse;
import com.pulumi.azurenative.compute.outputs.DiskSkuResponse;
import com.pulumi.azurenative.compute.outputs.EncryptionResponse;
import com.pulumi.azurenative.compute.outputs.EncryptionSettingsCollectionResponse;
import com.pulumi.azurenative.compute.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.compute.outputs.PropertyUpdatesInProgressResponse;
import com.pulumi.azurenative.compute.outputs.PurchasePlanResponse;
import com.pulumi.azurenative.compute.outputs.ShareInfoElementResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiskResult {
    /**
     * @return Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
     * 
     */
    private @Nullable Boolean burstingEnabled;
    /**
     * @return Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    private CreationDataResponse creationData;
    /**
     * @return ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    private @Nullable String diskAccessId;
    /**
     * @return The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
     * 
     */
    private @Nullable Double diskIOPSReadOnly;
    /**
     * @return The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    private @Nullable Double diskIOPSReadWrite;
    /**
     * @return The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    private @Nullable Double diskMBpsReadOnly;
    /**
     * @return The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    private @Nullable Double diskMBpsReadWrite;
    /**
     * @return The size of the disk in bytes. This field is read only.
     * 
     */
    private Double diskSizeBytes;
    /**
     * @return If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    private @Nullable Integer diskSizeGB;
    /**
     * @return The state of the disk.
     * 
     */
    private String diskState;
    /**
     * @return Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    private @Nullable EncryptionResponse encryption;
    /**
     * @return Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    private @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection;
    /**
     * @return The extended location where the disk will be created. Extended location cannot be changed.
     * 
     */
    private @Nullable ExtendedLocationResponse extendedLocation;
    /**
     * @return The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    private @Nullable String hyperVGeneration;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return A relative URI containing the ID of the VM that has the disk attached.
     * 
     */
    private String managedBy;
    /**
     * @return List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     * 
     */
    private List<String> managedByExtended;
    /**
     * @return The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    private @Nullable Integer maxShares;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    private @Nullable String networkAccessPolicy;
    /**
     * @return The Operating System type.
     * 
     */
    private @Nullable String osType;
    /**
     * @return Properties of the disk for which update is pending.
     * 
     */
    private PropertyUpdatesInProgressResponse propertyUpdatesInProgress;
    /**
     * @return The disk provisioning state.
     * 
     */
    private String provisioningState;
    /**
     * @return Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
     * 
     */
    private @Nullable PurchasePlanResponse purchasePlan;
    /**
     * @return Contains the security related information for the resource.
     * 
     */
    private @Nullable DiskSecurityProfileResponse securityProfile;
    /**
     * @return Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     * 
     */
    private List<ShareInfoElementResponse> shareInfo;
    /**
     * @return The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
     * 
     */
    private @Nullable DiskSkuResponse sku;
    /**
     * @return Indicates the OS on a disk supports hibernation.
     * 
     */
    private @Nullable Boolean supportsHibernation;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
     * 
     */
    private @Nullable String tier;
    /**
     * @return The time when the disk was created.
     * 
     */
    private String timeCreated;
    /**
     * @return Resource type
     * 
     */
    private String type;
    /**
     * @return Unique Guid identifying the resource.
     * 
     */
    private String uniqueId;
    /**
     * @return The Logical zone list for Disk.
     * 
     */
    private @Nullable List<String> zones;

    private GetDiskResult() {}
    /**
     * @return Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
     * 
     */
    public Optional<Boolean> burstingEnabled() {
        return Optional.ofNullable(this.burstingEnabled);
    }
    /**
     * @return Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    public CreationDataResponse creationData() {
        return this.creationData;
    }
    /**
     * @return ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    public Optional<String> diskAccessId() {
        return Optional.ofNullable(this.diskAccessId);
    }
    /**
     * @return The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
     * 
     */
    public Optional<Double> diskIOPSReadOnly() {
        return Optional.ofNullable(this.diskIOPSReadOnly);
    }
    /**
     * @return The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    public Optional<Double> diskIOPSReadWrite() {
        return Optional.ofNullable(this.diskIOPSReadWrite);
    }
    /**
     * @return The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    public Optional<Double> diskMBpsReadOnly() {
        return Optional.ofNullable(this.diskMBpsReadOnly);
    }
    /**
     * @return The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    public Optional<Double> diskMBpsReadWrite() {
        return Optional.ofNullable(this.diskMBpsReadWrite);
    }
    /**
     * @return The size of the disk in bytes. This field is read only.
     * 
     */
    public Double diskSizeBytes() {
        return this.diskSizeBytes;
    }
    /**
     * @return If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    public Optional<Integer> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }
    /**
     * @return The state of the disk.
     * 
     */
    public String diskState() {
        return this.diskState;
    }
    /**
     * @return Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    public Optional<EncryptionResponse> encryption() {
        return Optional.ofNullable(this.encryption);
    }
    /**
     * @return Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    public Optional<EncryptionSettingsCollectionResponse> encryptionSettingsCollection() {
        return Optional.ofNullable(this.encryptionSettingsCollection);
    }
    /**
     * @return The extended location where the disk will be created. Extended location cannot be changed.
     * 
     */
    public Optional<ExtendedLocationResponse> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }
    /**
     * @return The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    public Optional<String> hyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return A relative URI containing the ID of the VM that has the disk attached.
     * 
     */
    public String managedBy() {
        return this.managedBy;
    }
    /**
     * @return List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     * 
     */
    public List<String> managedByExtended() {
        return this.managedByExtended;
    }
    /**
     * @return The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    public Optional<Integer> maxShares() {
        return Optional.ofNullable(this.maxShares);
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    public Optional<String> networkAccessPolicy() {
        return Optional.ofNullable(this.networkAccessPolicy);
    }
    /**
     * @return The Operating System type.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }
    /**
     * @return Properties of the disk for which update is pending.
     * 
     */
    public PropertyUpdatesInProgressResponse propertyUpdatesInProgress() {
        return this.propertyUpdatesInProgress;
    }
    /**
     * @return The disk provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
     * 
     */
    public Optional<PurchasePlanResponse> purchasePlan() {
        return Optional.ofNullable(this.purchasePlan);
    }
    /**
     * @return Contains the security related information for the resource.
     * 
     */
    public Optional<DiskSecurityProfileResponse> securityProfile() {
        return Optional.ofNullable(this.securityProfile);
    }
    /**
     * @return Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
     * 
     */
    public List<ShareInfoElementResponse> shareInfo() {
        return this.shareInfo;
    }
    /**
     * @return The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
     * 
     */
    public Optional<DiskSkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Indicates the OS on a disk supports hibernation.
     * 
     */
    public Optional<Boolean> supportsHibernation() {
        return Optional.ofNullable(this.supportsHibernation);
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
     * 
     */
    public Optional<String> tier() {
        return Optional.ofNullable(this.tier);
    }
    /**
     * @return The time when the disk was created.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Unique Guid identifying the resource.
     * 
     */
    public String uniqueId() {
        return this.uniqueId;
    }
    /**
     * @return The Logical zone list for Disk.
     * 
     */
    public List<String> zones() {
        return this.zones == null ? List.of() : this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean burstingEnabled;
        private CreationDataResponse creationData;
        private @Nullable String diskAccessId;
        private @Nullable Double diskIOPSReadOnly;
        private @Nullable Double diskIOPSReadWrite;
        private @Nullable Double diskMBpsReadOnly;
        private @Nullable Double diskMBpsReadWrite;
        private Double diskSizeBytes;
        private @Nullable Integer diskSizeGB;
        private String diskState;
        private @Nullable EncryptionResponse encryption;
        private @Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection;
        private @Nullable ExtendedLocationResponse extendedLocation;
        private @Nullable String hyperVGeneration;
        private String id;
        private String location;
        private String managedBy;
        private List<String> managedByExtended;
        private @Nullable Integer maxShares;
        private String name;
        private @Nullable String networkAccessPolicy;
        private @Nullable String osType;
        private PropertyUpdatesInProgressResponse propertyUpdatesInProgress;
        private String provisioningState;
        private @Nullable PurchasePlanResponse purchasePlan;
        private @Nullable DiskSecurityProfileResponse securityProfile;
        private List<ShareInfoElementResponse> shareInfo;
        private @Nullable DiskSkuResponse sku;
        private @Nullable Boolean supportsHibernation;
        private @Nullable Map<String,String> tags;
        private @Nullable String tier;
        private String timeCreated;
        private String type;
        private String uniqueId;
        private @Nullable List<String> zones;
        public Builder() {}
        public Builder(GetDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.burstingEnabled = defaults.burstingEnabled;
    	      this.creationData = defaults.creationData;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskIOPSReadOnly = defaults.diskIOPSReadOnly;
    	      this.diskIOPSReadWrite = defaults.diskIOPSReadWrite;
    	      this.diskMBpsReadOnly = defaults.diskMBpsReadOnly;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskSizeBytes = defaults.diskSizeBytes;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.diskState = defaults.diskState;
    	      this.encryption = defaults.encryption;
    	      this.encryptionSettingsCollection = defaults.encryptionSettingsCollection;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.managedBy = defaults.managedBy;
    	      this.managedByExtended = defaults.managedByExtended;
    	      this.maxShares = defaults.maxShares;
    	      this.name = defaults.name;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.propertyUpdatesInProgress = defaults.propertyUpdatesInProgress;
    	      this.provisioningState = defaults.provisioningState;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.securityProfile = defaults.securityProfile;
    	      this.shareInfo = defaults.shareInfo;
    	      this.sku = defaults.sku;
    	      this.supportsHibernation = defaults.supportsHibernation;
    	      this.tags = defaults.tags;
    	      this.tier = defaults.tier;
    	      this.timeCreated = defaults.timeCreated;
    	      this.type = defaults.type;
    	      this.uniqueId = defaults.uniqueId;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder burstingEnabled(@Nullable Boolean burstingEnabled) {
            this.burstingEnabled = burstingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder creationData(CreationDataResponse creationData) {
            this.creationData = Objects.requireNonNull(creationData);
            return this;
        }
        @CustomType.Setter
        public Builder diskAccessId(@Nullable String diskAccessId) {
            this.diskAccessId = diskAccessId;
            return this;
        }
        @CustomType.Setter
        public Builder diskIOPSReadOnly(@Nullable Double diskIOPSReadOnly) {
            this.diskIOPSReadOnly = diskIOPSReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder diskIOPSReadWrite(@Nullable Double diskIOPSReadWrite) {
            this.diskIOPSReadWrite = diskIOPSReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder diskMBpsReadOnly(@Nullable Double diskMBpsReadOnly) {
            this.diskMBpsReadOnly = diskMBpsReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder diskMBpsReadWrite(@Nullable Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeBytes(Double diskSizeBytes) {
            this.diskSizeBytes = Objects.requireNonNull(diskSizeBytes);
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        @CustomType.Setter
        public Builder diskState(String diskState) {
            this.diskState = Objects.requireNonNull(diskState);
            return this;
        }
        @CustomType.Setter
        public Builder encryption(@Nullable EncryptionResponse encryption) {
            this.encryption = encryption;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionSettingsCollection(@Nullable EncryptionSettingsCollectionResponse encryptionSettingsCollection) {
            this.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }
        @CustomType.Setter
        public Builder extendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        @CustomType.Setter
        public Builder hyperVGeneration(@Nullable String hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder managedBy(String managedBy) {
            this.managedBy = Objects.requireNonNull(managedBy);
            return this;
        }
        @CustomType.Setter
        public Builder managedByExtended(List<String> managedByExtended) {
            this.managedByExtended = Objects.requireNonNull(managedByExtended);
            return this;
        }
        public Builder managedByExtended(String... managedByExtended) {
            return managedByExtended(List.of(managedByExtended));
        }
        @CustomType.Setter
        public Builder maxShares(@Nullable Integer maxShares) {
            this.maxShares = maxShares;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkAccessPolicy(@Nullable String networkAccessPolicy) {
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder propertyUpdatesInProgress(PropertyUpdatesInProgressResponse propertyUpdatesInProgress) {
            this.propertyUpdatesInProgress = Objects.requireNonNull(propertyUpdatesInProgress);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder purchasePlan(@Nullable PurchasePlanResponse purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }
        @CustomType.Setter
        public Builder securityProfile(@Nullable DiskSecurityProfileResponse securityProfile) {
            this.securityProfile = securityProfile;
            return this;
        }
        @CustomType.Setter
        public Builder shareInfo(List<ShareInfoElementResponse> shareInfo) {
            this.shareInfo = Objects.requireNonNull(shareInfo);
            return this;
        }
        public Builder shareInfo(ShareInfoElementResponse... shareInfo) {
            return shareInfo(List.of(shareInfo));
        }
        @CustomType.Setter
        public Builder sku(@Nullable DiskSkuResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder supportsHibernation(@Nullable Boolean supportsHibernation) {
            this.supportsHibernation = supportsHibernation;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tier(@Nullable String tier) {
            this.tier = tier;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(String uniqueId) {
            this.uniqueId = Objects.requireNonNull(uniqueId);
            return this;
        }
        @CustomType.Setter
        public Builder zones(@Nullable List<String> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetDiskResult build() {
            final var o = new GetDiskResult();
            o.burstingEnabled = burstingEnabled;
            o.creationData = creationData;
            o.diskAccessId = diskAccessId;
            o.diskIOPSReadOnly = diskIOPSReadOnly;
            o.diskIOPSReadWrite = diskIOPSReadWrite;
            o.diskMBpsReadOnly = diskMBpsReadOnly;
            o.diskMBpsReadWrite = diskMBpsReadWrite;
            o.diskSizeBytes = diskSizeBytes;
            o.diskSizeGB = diskSizeGB;
            o.diskState = diskState;
            o.encryption = encryption;
            o.encryptionSettingsCollection = encryptionSettingsCollection;
            o.extendedLocation = extendedLocation;
            o.hyperVGeneration = hyperVGeneration;
            o.id = id;
            o.location = location;
            o.managedBy = managedBy;
            o.managedByExtended = managedByExtended;
            o.maxShares = maxShares;
            o.name = name;
            o.networkAccessPolicy = networkAccessPolicy;
            o.osType = osType;
            o.propertyUpdatesInProgress = propertyUpdatesInProgress;
            o.provisioningState = provisioningState;
            o.purchasePlan = purchasePlan;
            o.securityProfile = securityProfile;
            o.shareInfo = shareInfo;
            o.sku = sku;
            o.supportsHibernation = supportsHibernation;
            o.tags = tags;
            o.tier = tier;
            o.timeCreated = timeCreated;
            o.type = type;
            o.uniqueId = uniqueId;
            o.zones = zones;
            return o;
        }
    }
}
