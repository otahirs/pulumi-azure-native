// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.outputs;

import com.pulumi.azurenative.servicefabric.outputs.ArmServiceTypeHealthPolicyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ArmApplicationHealthPolicyResponse {
    /**
     * @return Indicates whether warnings are treated with the same severity as errors.
     * 
     */
    private @Nullable Boolean considerWarningAsError;
    /**
     * @return The health policy used by default to evaluate the health of a service type.
     * 
     */
    private @Nullable ArmServiceTypeHealthPolicyResponse defaultServiceTypeHealthPolicy;
    /**
     * @return The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     * 
     */
    private @Nullable Integer maxPercentUnhealthyDeployedApplications;
    /**
     * @return The map with service type health policy per service type name. The map is empty by default.
     * 
     */
    private @Nullable Map<String,ArmServiceTypeHealthPolicyResponse> serviceTypeHealthPolicyMap;

    private ArmApplicationHealthPolicyResponse() {}
    /**
     * @return Indicates whether warnings are treated with the same severity as errors.
     * 
     */
    public Optional<Boolean> considerWarningAsError() {
        return Optional.ofNullable(this.considerWarningAsError);
    }
    /**
     * @return The health policy used by default to evaluate the health of a service type.
     * 
     */
    public Optional<ArmServiceTypeHealthPolicyResponse> defaultServiceTypeHealthPolicy() {
        return Optional.ofNullable(this.defaultServiceTypeHealthPolicy);
    }
    /**
     * @return The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
     * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
     * 
     */
    public Optional<Integer> maxPercentUnhealthyDeployedApplications() {
        return Optional.ofNullable(this.maxPercentUnhealthyDeployedApplications);
    }
    /**
     * @return The map with service type health policy per service type name. The map is empty by default.
     * 
     */
    public Map<String,ArmServiceTypeHealthPolicyResponse> serviceTypeHealthPolicyMap() {
        return this.serviceTypeHealthPolicyMap == null ? Map.of() : this.serviceTypeHealthPolicyMap;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArmApplicationHealthPolicyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean considerWarningAsError;
        private @Nullable ArmServiceTypeHealthPolicyResponse defaultServiceTypeHealthPolicy;
        private @Nullable Integer maxPercentUnhealthyDeployedApplications;
        private @Nullable Map<String,ArmServiceTypeHealthPolicyResponse> serviceTypeHealthPolicyMap;
        public Builder() {}
        public Builder(ArmApplicationHealthPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.considerWarningAsError = defaults.considerWarningAsError;
    	      this.defaultServiceTypeHealthPolicy = defaults.defaultServiceTypeHealthPolicy;
    	      this.maxPercentUnhealthyDeployedApplications = defaults.maxPercentUnhealthyDeployedApplications;
    	      this.serviceTypeHealthPolicyMap = defaults.serviceTypeHealthPolicyMap;
        }

        @CustomType.Setter
        public Builder considerWarningAsError(@Nullable Boolean considerWarningAsError) {
            this.considerWarningAsError = considerWarningAsError;
            return this;
        }
        @CustomType.Setter
        public Builder defaultServiceTypeHealthPolicy(@Nullable ArmServiceTypeHealthPolicyResponse defaultServiceTypeHealthPolicy) {
            this.defaultServiceTypeHealthPolicy = defaultServiceTypeHealthPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder maxPercentUnhealthyDeployedApplications(@Nullable Integer maxPercentUnhealthyDeployedApplications) {
            this.maxPercentUnhealthyDeployedApplications = maxPercentUnhealthyDeployedApplications;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTypeHealthPolicyMap(@Nullable Map<String,ArmServiceTypeHealthPolicyResponse> serviceTypeHealthPolicyMap) {
            this.serviceTypeHealthPolicyMap = serviceTypeHealthPolicyMap;
            return this;
        }
        public ArmApplicationHealthPolicyResponse build() {
            final var o = new ArmApplicationHealthPolicyResponse();
            o.considerWarningAsError = considerWarningAsError;
            o.defaultServiceTypeHealthPolicy = defaultServiceTypeHealthPolicy;
            o.maxPercentUnhealthyDeployedApplications = maxPercentUnhealthyDeployedApplications;
            o.serviceTypeHealthPolicyMap = serviceTypeHealthPolicyMap;
            return o;
        }
    }
}
