// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.outputs;

import com.pulumi.azurenative.servicefabricmesh.outputs.AutoScalingPolicyResponse;
import com.pulumi.azurenative.servicefabricmesh.outputs.ContainerCodePackagePropertiesResponse;
import com.pulumi.azurenative.servicefabricmesh.outputs.DiagnosticsRefResponse;
import com.pulumi.azurenative.servicefabricmesh.outputs.NetworkRefResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceResourceDescriptionResponse {
    /**
     * @return Auto scaling policies
     * 
     */
    private @Nullable List<AutoScalingPolicyResponse> autoScalingPolicies;
    /**
     * @return Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
     * 
     */
    private List<ContainerCodePackagePropertiesResponse> codePackages;
    /**
     * @return User readable description of the service.
     * 
     */
    private @Nullable String description;
    /**
     * @return Reference to sinks in DiagnosticsDescription.
     * 
     */
    private @Nullable DiagnosticsRefResponse diagnostics;
    /**
     * @return Describes the health state of an application resource.
     * 
     */
    private String healthState;
    /**
     * @return Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The name of the resource
     * 
     */
    private @Nullable String name;
    /**
     * @return The names of the private networks that this service needs to be part of.
     * 
     */
    private @Nullable List<NetworkRefResponse> networkRefs;
    /**
     * @return The operation system required by the code in service.
     * 
     */
    private String osType;
    /**
     * @return State of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The number of replicas of the service to create. Defaults to 1 if not specified.
     * 
     */
    private @Nullable Integer replicaCount;
    /**
     * @return Status of the service.
     * 
     */
    private String status;
    /**
     * @return Gives additional information about the current status of the service.
     * 
     */
    private String statusDetails;
    /**
     * @return The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    private String type;
    /**
     * @return When the service&#39;s health state is not &#39;Ok&#39;, this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
     * 
     */
    private String unhealthyEvaluation;

    private ServiceResourceDescriptionResponse() {}
    /**
     * @return Auto scaling policies
     * 
     */
    public List<AutoScalingPolicyResponse> autoScalingPolicies() {
        return this.autoScalingPolicies == null ? List.of() : this.autoScalingPolicies;
    }
    /**
     * @return Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
     * 
     */
    public List<ContainerCodePackagePropertiesResponse> codePackages() {
        return this.codePackages;
    }
    /**
     * @return User readable description of the service.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Reference to sinks in DiagnosticsDescription.
     * 
     */
    public Optional<DiagnosticsRefResponse> diagnostics() {
        return Optional.ofNullable(this.diagnostics);
    }
    /**
     * @return Describes the health state of an application resource.
     * 
     */
    public String healthState() {
        return this.healthState;
    }
    /**
     * @return Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the resource
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The names of the private networks that this service needs to be part of.
     * 
     */
    public List<NetworkRefResponse> networkRefs() {
        return this.networkRefs == null ? List.of() : this.networkRefs;
    }
    /**
     * @return The operation system required by the code in service.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return State of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The number of replicas of the service to create. Defaults to 1 if not specified.
     * 
     */
    public Optional<Integer> replicaCount() {
        return Optional.ofNullable(this.replicaCount);
    }
    /**
     * @return Status of the service.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Gives additional information about the current status of the service.
     * 
     */
    public String statusDetails() {
        return this.statusDetails;
    }
    /**
     * @return The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return When the service&#39;s health state is not &#39;Ok&#39;, this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
     * 
     */
    public String unhealthyEvaluation() {
        return this.unhealthyEvaluation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceResourceDescriptionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AutoScalingPolicyResponse> autoScalingPolicies;
        private List<ContainerCodePackagePropertiesResponse> codePackages;
        private @Nullable String description;
        private @Nullable DiagnosticsRefResponse diagnostics;
        private String healthState;
        private String id;
        private @Nullable String name;
        private @Nullable List<NetworkRefResponse> networkRefs;
        private String osType;
        private String provisioningState;
        private @Nullable Integer replicaCount;
        private String status;
        private String statusDetails;
        private String type;
        private String unhealthyEvaluation;
        public Builder() {}
        public Builder(ServiceResourceDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingPolicies = defaults.autoScalingPolicies;
    	      this.codePackages = defaults.codePackages;
    	      this.description = defaults.description;
    	      this.diagnostics = defaults.diagnostics;
    	      this.healthState = defaults.healthState;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.networkRefs = defaults.networkRefs;
    	      this.osType = defaults.osType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.replicaCount = defaults.replicaCount;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
    	      this.type = defaults.type;
    	      this.unhealthyEvaluation = defaults.unhealthyEvaluation;
        }

        @CustomType.Setter
        public Builder autoScalingPolicies(@Nullable List<AutoScalingPolicyResponse> autoScalingPolicies) {
            this.autoScalingPolicies = autoScalingPolicies;
            return this;
        }
        public Builder autoScalingPolicies(AutoScalingPolicyResponse... autoScalingPolicies) {
            return autoScalingPolicies(List.of(autoScalingPolicies));
        }
        @CustomType.Setter
        public Builder codePackages(List<ContainerCodePackagePropertiesResponse> codePackages) {
            this.codePackages = Objects.requireNonNull(codePackages);
            return this;
        }
        public Builder codePackages(ContainerCodePackagePropertiesResponse... codePackages) {
            return codePackages(List.of(codePackages));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diagnostics(@Nullable DiagnosticsRefResponse diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }
        @CustomType.Setter
        public Builder healthState(String healthState) {
            this.healthState = Objects.requireNonNull(healthState);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkRefs(@Nullable List<NetworkRefResponse> networkRefs) {
            this.networkRefs = networkRefs;
            return this;
        }
        public Builder networkRefs(NetworkRefResponse... networkRefs) {
            return networkRefs(List.of(networkRefs));
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder replicaCount(@Nullable Integer replicaCount) {
            this.replicaCount = replicaCount;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusDetails(String statusDetails) {
            this.statusDetails = Objects.requireNonNull(statusDetails);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyEvaluation(String unhealthyEvaluation) {
            this.unhealthyEvaluation = Objects.requireNonNull(unhealthyEvaluation);
            return this;
        }
        public ServiceResourceDescriptionResponse build() {
            final var o = new ServiceResourceDescriptionResponse();
            o.autoScalingPolicies = autoScalingPolicies;
            o.codePackages = codePackages;
            o.description = description;
            o.diagnostics = diagnostics;
            o.healthState = healthState;
            o.id = id;
            o.name = name;
            o.networkRefs = networkRefs;
            o.osType = osType;
            o.provisioningState = provisioningState;
            o.replicaCount = replicaCount;
            o.status = status;
            o.statusDetails = statusDetails;
            o.type = type;
            o.unhealthyEvaluation = unhealthyEvaluation;
            return o;
        }
    }
}
