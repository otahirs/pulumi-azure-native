// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebhookResult {
    /**
     * @return The list of actions that trigger the webhook to post notifications.
     * 
     */
    private List<String> actions;
    /**
     * @return The resource ID.
     * 
     */
    private String id;
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    private String location;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The provisioning state of the webhook at the time the operation was called.
     * 
     */
    private String provisioningState;
    /**
     * @return The scope of repositories where the event can be triggered. For example, &#39;foo:*&#39; means events for all tags under repository &#39;foo&#39;. &#39;foo:bar&#39; means events for &#39;foo:bar&#39; only. &#39;foo&#39; is equivalent to &#39;foo:latest&#39;. Empty means all events.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The status of the webhook at the time the operation was called.
     * 
     */
    private @Nullable String status;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;

    private GetWebhookResult() {}
    /**
     * @return The list of actions that trigger the webhook to post notifications.
     * 
     */
    public List<String> actions() {
        return this.actions;
    }
    /**
     * @return The resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning state of the webhook at the time the operation was called.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The scope of repositories where the event can be triggered. For example, &#39;foo:*&#39; means events for all tags under repository &#39;foo&#39;. &#39;foo:bar&#39; means events for &#39;foo:bar&#39; only. &#39;foo&#39; is equivalent to &#39;foo:latest&#39;. Empty means all events.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The status of the webhook at the time the operation was called.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebhookResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> actions;
        private String id;
        private String location;
        private String name;
        private String provisioningState;
        private @Nullable String scope;
        private @Nullable String status;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetWebhookResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.scope = defaults.scope;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder actions(List<String> actions) {
            this.actions = Objects.requireNonNull(actions);
            return this;
        }
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetWebhookResult build() {
            final var o = new GetWebhookResult();
            o.actions = actions;
            o.id = id;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.scope = scope;
            o.status = status;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
