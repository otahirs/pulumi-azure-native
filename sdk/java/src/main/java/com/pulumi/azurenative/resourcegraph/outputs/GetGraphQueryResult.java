// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resourcegraph.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGraphQueryResult {
    /**
     * @return The description of a graph query.
     * 
     */
    private @Nullable String description;
    /**
     * @return This will be used to handle Optimistic Concurrency. If not present, it will always overwrite the existing resource without checking conflict.
     * 
     */
    private @Nullable String etag;
    /**
     * @return Azure resource Id
     * 
     */
    private String id;
    /**
     * @return The location of the resource
     * 
     */
    private @Nullable String location;
    /**
     * @return Azure resource name. This is GUID value. The display name should be assigned within properties field.
     * 
     */
    private String name;
    /**
     * @return KQL query that will be graph.
     * 
     */
    private String query;
    /**
     * @return Enum indicating a type of graph query.
     * 
     */
    private String resultKind;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Date and time in UTC of the last modification that was made to this graph query definition.
     * 
     */
    private String timeModified;
    /**
     * @return Azure resource type
     * 
     */
    private String type;

    private GetGraphQueryResult() {}
    /**
     * @return The description of a graph query.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return This will be used to handle Optimistic Concurrency. If not present, it will always overwrite the existing resource without checking conflict.
     * 
     */
    public Optional<String> etag() {
        return Optional.ofNullable(this.etag);
    }
    /**
     * @return Azure resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the resource
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Azure resource name. This is GUID value. The display name should be assigned within properties field.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return KQL query that will be graph.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return Enum indicating a type of graph query.
     * 
     */
    public String resultKind() {
        return this.resultKind;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Date and time in UTC of the last modification that was made to this graph query definition.
     * 
     */
    public String timeModified() {
        return this.timeModified;
    }
    /**
     * @return Azure resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGraphQueryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String etag;
        private String id;
        private @Nullable String location;
        private String name;
        private String query;
        private String resultKind;
        private @Nullable Map<String,String> tags;
        private String timeModified;
        private String type;
        public Builder() {}
        public Builder(GetGraphQueryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.query = defaults.query;
    	      this.resultKind = defaults.resultKind;
    	      this.tags = defaults.tags;
    	      this.timeModified = defaults.timeModified;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder etag(@Nullable String etag) {
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        @CustomType.Setter
        public Builder resultKind(String resultKind) {
            this.resultKind = Objects.requireNonNull(resultKind);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timeModified(String timeModified) {
            this.timeModified = Objects.requireNonNull(timeModified);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetGraphQueryResult build() {
            final var o = new GetGraphQueryResult();
            o.description = description;
            o.etag = etag;
            o.id = id;
            o.location = location;
            o.name = name;
            o.query = query;
            o.resultKind = resultKind;
            o.tags = tags;
            o.timeModified = timeModified;
            o.type = type;
            return o;
        }
    }
}
