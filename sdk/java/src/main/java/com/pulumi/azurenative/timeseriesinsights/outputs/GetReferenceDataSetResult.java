// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.timeseriesinsights.outputs;

import com.pulumi.azurenative.timeseriesinsights.outputs.ReferenceDataSetKeyPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReferenceDataSetResult {
    /**
     * @return The time the resource was created.
     * 
     */
    private String creationTime;
    /**
     * @return The reference data set key comparison behavior can be set using this property. By default, the value is &#39;Ordinal&#39; - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When &#39;OrdinalIgnoreCase&#39; is set, case insensitive comparison will be used.
     * 
     */
    private @Nullable String dataStringComparisonBehavior;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return The list of key properties for the reference data set.
     * 
     */
    private List<ReferenceDataSetKeyPropertyResponse> keyProperties;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return Provisioning state of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type
     * 
     */
    private String type;

    private GetReferenceDataSetResult() {}
    /**
     * @return The time the resource was created.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return The reference data set key comparison behavior can be set using this property. By default, the value is &#39;Ordinal&#39; - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When &#39;OrdinalIgnoreCase&#39; is set, case insensitive comparison will be used.
     * 
     */
    public Optional<String> dataStringComparisonBehavior() {
        return Optional.ofNullable(this.dataStringComparisonBehavior);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The list of key properties for the reference data set.
     * 
     */
    public List<ReferenceDataSetKeyPropertyResponse> keyProperties() {
        return this.keyProperties;
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Provisioning state of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReferenceDataSetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationTime;
        private @Nullable String dataStringComparisonBehavior;
        private String id;
        private List<ReferenceDataSetKeyPropertyResponse> keyProperties;
        private String location;
        private String name;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetReferenceDataSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.dataStringComparisonBehavior = defaults.dataStringComparisonBehavior;
    	      this.id = defaults.id;
    	      this.keyProperties = defaults.keyProperties;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder dataStringComparisonBehavior(@Nullable String dataStringComparisonBehavior) {
            this.dataStringComparisonBehavior = dataStringComparisonBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder keyProperties(List<ReferenceDataSetKeyPropertyResponse> keyProperties) {
            this.keyProperties = Objects.requireNonNull(keyProperties);
            return this;
        }
        public Builder keyProperties(ReferenceDataSetKeyPropertyResponse... keyProperties) {
            return keyProperties(List.of(keyProperties));
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetReferenceDataSetResult build() {
            final var o = new GetReferenceDataSetResult();
            o.creationTime = creationTime;
            o.dataStringComparisonBehavior = dataStringComparisonBehavior;
            o.id = id;
            o.keyProperties = keyProperties;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
