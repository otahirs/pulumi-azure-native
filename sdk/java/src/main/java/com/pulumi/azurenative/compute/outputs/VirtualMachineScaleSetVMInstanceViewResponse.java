// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.BootDiagnosticsInstanceViewResponse;
import com.pulumi.azurenative.compute.outputs.DiskInstanceViewResponse;
import com.pulumi.azurenative.compute.outputs.InstanceViewStatusResponse;
import com.pulumi.azurenative.compute.outputs.MaintenanceRedeployStatusResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineAgentInstanceViewResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineExtensionInstanceViewResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineHealthStatusResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineScaleSetVMInstanceViewResponse {
    /**
     * @return Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
     * 
     */
    private String assignedHost;
    /**
     * @return Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor.
     * 
     */
    private @Nullable BootDiagnosticsInstanceViewResponse bootDiagnostics;
    /**
     * @return The disks information.
     * 
     */
    private @Nullable List<DiskInstanceViewResponse> disks;
    /**
     * @return The extensions information.
     * 
     */
    private @Nullable List<VirtualMachineExtensionInstanceViewResponse> extensions;
    /**
     * @return The Maintenance Operation status on the virtual machine.
     * 
     */
    private @Nullable MaintenanceRedeployStatusResponse maintenanceRedeployStatus;
    /**
     * @return The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
     * 
     */
    private @Nullable String placementGroupId;
    /**
     * @return The Fault Domain count.
     * 
     */
    private @Nullable Integer platformFaultDomain;
    /**
     * @return The Update Domain count.
     * 
     */
    private @Nullable Integer platformUpdateDomain;
    /**
     * @return The Remote desktop certificate thumbprint.
     * 
     */
    private @Nullable String rdpThumbPrint;
    /**
     * @return The resource status information.
     * 
     */
    private @Nullable List<InstanceViewStatusResponse> statuses;
    /**
     * @return The VM Agent running on the virtual machine.
     * 
     */
    private @Nullable VirtualMachineAgentInstanceViewResponse vmAgent;
    /**
     * @return The health status for the VM.
     * 
     */
    private VirtualMachineHealthStatusResponse vmHealth;

    private VirtualMachineScaleSetVMInstanceViewResponse() {}
    /**
     * @return Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
     * 
     */
    public String assignedHost() {
        return this.assignedHost;
    }
    /**
     * @return Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor.
     * 
     */
    public Optional<BootDiagnosticsInstanceViewResponse> bootDiagnostics() {
        return Optional.ofNullable(this.bootDiagnostics);
    }
    /**
     * @return The disks information.
     * 
     */
    public List<DiskInstanceViewResponse> disks() {
        return this.disks == null ? List.of() : this.disks;
    }
    /**
     * @return The extensions information.
     * 
     */
    public List<VirtualMachineExtensionInstanceViewResponse> extensions() {
        return this.extensions == null ? List.of() : this.extensions;
    }
    /**
     * @return The Maintenance Operation status on the virtual machine.
     * 
     */
    public Optional<MaintenanceRedeployStatusResponse> maintenanceRedeployStatus() {
        return Optional.ofNullable(this.maintenanceRedeployStatus);
    }
    /**
     * @return The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
     * 
     */
    public Optional<String> placementGroupId() {
        return Optional.ofNullable(this.placementGroupId);
    }
    /**
     * @return The Fault Domain count.
     * 
     */
    public Optional<Integer> platformFaultDomain() {
        return Optional.ofNullable(this.platformFaultDomain);
    }
    /**
     * @return The Update Domain count.
     * 
     */
    public Optional<Integer> platformUpdateDomain() {
        return Optional.ofNullable(this.platformUpdateDomain);
    }
    /**
     * @return The Remote desktop certificate thumbprint.
     * 
     */
    public Optional<String> rdpThumbPrint() {
        return Optional.ofNullable(this.rdpThumbPrint);
    }
    /**
     * @return The resource status information.
     * 
     */
    public List<InstanceViewStatusResponse> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }
    /**
     * @return The VM Agent running on the virtual machine.
     * 
     */
    public Optional<VirtualMachineAgentInstanceViewResponse> vmAgent() {
        return Optional.ofNullable(this.vmAgent);
    }
    /**
     * @return The health status for the VM.
     * 
     */
    public VirtualMachineHealthStatusResponse vmHealth() {
        return this.vmHealth;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineScaleSetVMInstanceViewResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assignedHost;
        private @Nullable BootDiagnosticsInstanceViewResponse bootDiagnostics;
        private @Nullable List<DiskInstanceViewResponse> disks;
        private @Nullable List<VirtualMachineExtensionInstanceViewResponse> extensions;
        private @Nullable MaintenanceRedeployStatusResponse maintenanceRedeployStatus;
        private @Nullable String placementGroupId;
        private @Nullable Integer platformFaultDomain;
        private @Nullable Integer platformUpdateDomain;
        private @Nullable String rdpThumbPrint;
        private @Nullable List<InstanceViewStatusResponse> statuses;
        private @Nullable VirtualMachineAgentInstanceViewResponse vmAgent;
        private VirtualMachineHealthStatusResponse vmHealth;
        public Builder() {}
        public Builder(VirtualMachineScaleSetVMInstanceViewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignedHost = defaults.assignedHost;
    	      this.bootDiagnostics = defaults.bootDiagnostics;
    	      this.disks = defaults.disks;
    	      this.extensions = defaults.extensions;
    	      this.maintenanceRedeployStatus = defaults.maintenanceRedeployStatus;
    	      this.placementGroupId = defaults.placementGroupId;
    	      this.platformFaultDomain = defaults.platformFaultDomain;
    	      this.platformUpdateDomain = defaults.platformUpdateDomain;
    	      this.rdpThumbPrint = defaults.rdpThumbPrint;
    	      this.statuses = defaults.statuses;
    	      this.vmAgent = defaults.vmAgent;
    	      this.vmHealth = defaults.vmHealth;
        }

        @CustomType.Setter
        public Builder assignedHost(String assignedHost) {
            this.assignedHost = Objects.requireNonNull(assignedHost);
            return this;
        }
        @CustomType.Setter
        public Builder bootDiagnostics(@Nullable BootDiagnosticsInstanceViewResponse bootDiagnostics) {
            this.bootDiagnostics = bootDiagnostics;
            return this;
        }
        @CustomType.Setter
        public Builder disks(@Nullable List<DiskInstanceViewResponse> disks) {
            this.disks = disks;
            return this;
        }
        public Builder disks(DiskInstanceViewResponse... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder extensions(@Nullable List<VirtualMachineExtensionInstanceViewResponse> extensions) {
            this.extensions = extensions;
            return this;
        }
        public Builder extensions(VirtualMachineExtensionInstanceViewResponse... extensions) {
            return extensions(List.of(extensions));
        }
        @CustomType.Setter
        public Builder maintenanceRedeployStatus(@Nullable MaintenanceRedeployStatusResponse maintenanceRedeployStatus) {
            this.maintenanceRedeployStatus = maintenanceRedeployStatus;
            return this;
        }
        @CustomType.Setter
        public Builder placementGroupId(@Nullable String placementGroupId) {
            this.placementGroupId = placementGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder platformFaultDomain(@Nullable Integer platformFaultDomain) {
            this.platformFaultDomain = platformFaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder platformUpdateDomain(@Nullable Integer platformUpdateDomain) {
            this.platformUpdateDomain = platformUpdateDomain;
            return this;
        }
        @CustomType.Setter
        public Builder rdpThumbPrint(@Nullable String rdpThumbPrint) {
            this.rdpThumbPrint = rdpThumbPrint;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(@Nullable List<InstanceViewStatusResponse> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(InstanceViewStatusResponse... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder vmAgent(@Nullable VirtualMachineAgentInstanceViewResponse vmAgent) {
            this.vmAgent = vmAgent;
            return this;
        }
        @CustomType.Setter
        public Builder vmHealth(VirtualMachineHealthStatusResponse vmHealth) {
            this.vmHealth = Objects.requireNonNull(vmHealth);
            return this;
        }
        public VirtualMachineScaleSetVMInstanceViewResponse build() {
            final var o = new VirtualMachineScaleSetVMInstanceViewResponse();
            o.assignedHost = assignedHost;
            o.bootDiagnostics = bootDiagnostics;
            o.disks = disks;
            o.extensions = extensions;
            o.maintenanceRedeployStatus = maintenanceRedeployStatus;
            o.placementGroupId = placementGroupId;
            o.platformFaultDomain = platformFaultDomain;
            o.platformUpdateDomain = platformUpdateDomain;
            o.rdpThumbPrint = rdpThumbPrint;
            o.statuses = statuses;
            o.vmAgent = vmAgent;
            o.vmHealth = vmHealth;
            return o;
        }
    }
}
