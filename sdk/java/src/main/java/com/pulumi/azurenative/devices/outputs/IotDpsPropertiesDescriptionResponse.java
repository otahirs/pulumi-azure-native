// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devices.outputs;

import com.pulumi.azurenative.devices.outputs.IotHubDefinitionDescriptionResponse;
import com.pulumi.azurenative.devices.outputs.PrivateEndpointConnectionResponse;
import com.pulumi.azurenative.devices.outputs.SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse;
import com.pulumi.azurenative.devices.outputs.TargetIpFilterRuleResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IotDpsPropertiesDescriptionResponse {
    /**
     * @return Allocation policy to be used by this provisioning service.
     * 
     */
    private @Nullable String allocationPolicy;
    /**
     * @return List of authorization keys for a provisioning service.
     * 
     */
    private @Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies;
    /**
     * @return Device endpoint for this provisioning service.
     * 
     */
    private String deviceProvisioningHostName;
    /**
     * @return Unique identifier of this provisioning service.
     * 
     */
    private String idScope;
    /**
     * @return List of IoT hubs associated with this provisioning service.
     * 
     */
    private @Nullable List<IotHubDefinitionDescriptionResponse> iotHubs;
    /**
     * @return The IP filter rules.
     * 
     */
    private @Nullable List<TargetIpFilterRuleResponse> ipFilterRules;
    /**
     * @return Private endpoint connections created on this IotHub
     * 
     */
    private @Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections;
    /**
     * @return The ARM provisioning state of the provisioning service.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return Whether requests from Public Network are allowed
     * 
     */
    private @Nullable String publicNetworkAccess;
    /**
     * @return Service endpoint for provisioning service.
     * 
     */
    private String serviceOperationsHostName;
    /**
     * @return Current state of the provisioning service.
     * 
     */
    private @Nullable String state;

    private IotDpsPropertiesDescriptionResponse() {}
    /**
     * @return Allocation policy to be used by this provisioning service.
     * 
     */
    public Optional<String> allocationPolicy() {
        return Optional.ofNullable(this.allocationPolicy);
    }
    /**
     * @return List of authorization keys for a provisioning service.
     * 
     */
    public List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies() {
        return this.authorizationPolicies == null ? List.of() : this.authorizationPolicies;
    }
    /**
     * @return Device endpoint for this provisioning service.
     * 
     */
    public String deviceProvisioningHostName() {
        return this.deviceProvisioningHostName;
    }
    /**
     * @return Unique identifier of this provisioning service.
     * 
     */
    public String idScope() {
        return this.idScope;
    }
    /**
     * @return List of IoT hubs associated with this provisioning service.
     * 
     */
    public List<IotHubDefinitionDescriptionResponse> iotHubs() {
        return this.iotHubs == null ? List.of() : this.iotHubs;
    }
    /**
     * @return The IP filter rules.
     * 
     */
    public List<TargetIpFilterRuleResponse> ipFilterRules() {
        return this.ipFilterRules == null ? List.of() : this.ipFilterRules;
    }
    /**
     * @return Private endpoint connections created on this IotHub
     * 
     */
    public List<PrivateEndpointConnectionResponse> privateEndpointConnections() {
        return this.privateEndpointConnections == null ? List.of() : this.privateEndpointConnections;
    }
    /**
     * @return The ARM provisioning state of the provisioning service.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return Whether requests from Public Network are allowed
     * 
     */
    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }
    /**
     * @return Service endpoint for provisioning service.
     * 
     */
    public String serviceOperationsHostName() {
        return this.serviceOperationsHostName;
    }
    /**
     * @return Current state of the provisioning service.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IotDpsPropertiesDescriptionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allocationPolicy;
        private @Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies;
        private String deviceProvisioningHostName;
        private String idScope;
        private @Nullable List<IotHubDefinitionDescriptionResponse> iotHubs;
        private @Nullable List<TargetIpFilterRuleResponse> ipFilterRules;
        private @Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections;
        private @Nullable String provisioningState;
        private @Nullable String publicNetworkAccess;
        private String serviceOperationsHostName;
        private @Nullable String state;
        public Builder() {}
        public Builder(IotDpsPropertiesDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationPolicy = defaults.allocationPolicy;
    	      this.authorizationPolicies = defaults.authorizationPolicies;
    	      this.deviceProvisioningHostName = defaults.deviceProvisioningHostName;
    	      this.idScope = defaults.idScope;
    	      this.iotHubs = defaults.iotHubs;
    	      this.ipFilterRules = defaults.ipFilterRules;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.serviceOperationsHostName = defaults.serviceOperationsHostName;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder allocationPolicy(@Nullable String allocationPolicy) {
            this.allocationPolicy = allocationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationPolicies(@Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies) {
            this.authorizationPolicies = authorizationPolicies;
            return this;
        }
        public Builder authorizationPolicies(SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse... authorizationPolicies) {
            return authorizationPolicies(List.of(authorizationPolicies));
        }
        @CustomType.Setter
        public Builder deviceProvisioningHostName(String deviceProvisioningHostName) {
            this.deviceProvisioningHostName = Objects.requireNonNull(deviceProvisioningHostName);
            return this;
        }
        @CustomType.Setter
        public Builder idScope(String idScope) {
            this.idScope = Objects.requireNonNull(idScope);
            return this;
        }
        @CustomType.Setter
        public Builder iotHubs(@Nullable List<IotHubDefinitionDescriptionResponse> iotHubs) {
            this.iotHubs = iotHubs;
            return this;
        }
        public Builder iotHubs(IotHubDefinitionDescriptionResponse... iotHubs) {
            return iotHubs(List.of(iotHubs));
        }
        @CustomType.Setter
        public Builder ipFilterRules(@Nullable List<TargetIpFilterRuleResponse> ipFilterRules) {
            this.ipFilterRules = ipFilterRules;
            return this;
        }
        public Builder ipFilterRules(TargetIpFilterRuleResponse... ipFilterRules) {
            return ipFilterRules(List.of(ipFilterRules));
        }
        @CustomType.Setter
        public Builder privateEndpointConnections(@Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections) {
            this.privateEndpointConnections = privateEndpointConnections;
            return this;
        }
        public Builder privateEndpointConnections(PrivateEndpointConnectionResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder serviceOperationsHostName(String serviceOperationsHostName) {
            this.serviceOperationsHostName = Objects.requireNonNull(serviceOperationsHostName);
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public IotDpsPropertiesDescriptionResponse build() {
            final var o = new IotDpsPropertiesDescriptionResponse();
            o.allocationPolicy = allocationPolicy;
            o.authorizationPolicies = authorizationPolicies;
            o.deviceProvisioningHostName = deviceProvisioningHostName;
            o.idScope = idScope;
            o.iotHubs = iotHubs;
            o.ipFilterRules = ipFilterRules;
            o.privateEndpointConnections = privateEndpointConnections;
            o.provisioningState = provisioningState;
            o.publicNetworkAccess = publicNetworkAccess;
            o.serviceOperationsHostName = serviceOperationsHostName;
            o.state = state;
            return o;
        }
    }
}
