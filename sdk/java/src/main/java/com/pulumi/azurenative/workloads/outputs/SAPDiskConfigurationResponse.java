// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SAPDiskConfigurationResponse {
    /**
     * @return The disk count.
     * 
     */
    private @Nullable Double diskCount;
    /**
     * @return The disk Iops.
     * 
     */
    private @Nullable Double diskIopsReadWrite;
    /**
     * @return The disk provisioned throughput in MBps.
     * 
     */
    private @Nullable Double diskMBpsReadWrite;
    /**
     * @return The disk size in GB.
     * 
     */
    private @Nullable Double diskSizeGB;
    /**
     * @return The disk storage type
     * 
     */
    private @Nullable String diskStorageType;
    /**
     * @return The disk type.
     * 
     */
    private @Nullable String diskType;
    /**
     * @return The volume name.
     * 
     */
    private @Nullable String volume;

    private SAPDiskConfigurationResponse() {}
    /**
     * @return The disk count.
     * 
     */
    public Optional<Double> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }
    /**
     * @return The disk Iops.
     * 
     */
    public Optional<Double> diskIopsReadWrite() {
        return Optional.ofNullable(this.diskIopsReadWrite);
    }
    /**
     * @return The disk provisioned throughput in MBps.
     * 
     */
    public Optional<Double> diskMBpsReadWrite() {
        return Optional.ofNullable(this.diskMBpsReadWrite);
    }
    /**
     * @return The disk size in GB.
     * 
     */
    public Optional<Double> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }
    /**
     * @return The disk storage type
     * 
     */
    public Optional<String> diskStorageType() {
        return Optional.ofNullable(this.diskStorageType);
    }
    /**
     * @return The disk type.
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return The volume name.
     * 
     */
    public Optional<String> volume() {
        return Optional.ofNullable(this.volume);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SAPDiskConfigurationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double diskCount;
        private @Nullable Double diskIopsReadWrite;
        private @Nullable Double diskMBpsReadWrite;
        private @Nullable Double diskSizeGB;
        private @Nullable String diskStorageType;
        private @Nullable String diskType;
        private @Nullable String volume;
        public Builder() {}
        public Builder(SAPDiskConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskCount = defaults.diskCount;
    	      this.diskIopsReadWrite = defaults.diskIopsReadWrite;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.diskStorageType = defaults.diskStorageType;
    	      this.diskType = defaults.diskType;
    	      this.volume = defaults.volume;
        }

        @CustomType.Setter
        public Builder diskCount(@Nullable Double diskCount) {
            this.diskCount = diskCount;
            return this;
        }
        @CustomType.Setter
        public Builder diskIopsReadWrite(@Nullable Double diskIopsReadWrite) {
            this.diskIopsReadWrite = diskIopsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder diskMBpsReadWrite(@Nullable Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGB(@Nullable Double diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        @CustomType.Setter
        public Builder diskStorageType(@Nullable String diskStorageType) {
            this.diskStorageType = diskStorageType;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder volume(@Nullable String volume) {
            this.volume = volume;
            return this;
        }
        public SAPDiskConfigurationResponse build() {
            final var o = new SAPDiskConfigurationResponse();
            o.diskCount = diskCount;
            o.diskIopsReadWrite = diskIopsReadWrite;
            o.diskMBpsReadWrite = diskMBpsReadWrite;
            o.diskSizeGB = diskSizeGB;
            o.diskStorageType = diskStorageType;
            o.diskType = diskType;
            o.volume = volume;
            return o;
        }
    }
}
