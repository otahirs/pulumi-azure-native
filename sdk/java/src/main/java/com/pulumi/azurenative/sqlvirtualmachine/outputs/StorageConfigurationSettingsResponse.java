// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.outputs;

import com.pulumi.azurenative.sqlvirtualmachine.outputs.SQLStorageSettingsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StorageConfigurationSettingsResponse {
    /**
     * @return Disk configuration to apply to SQL Server.
     * 
     */
    private @Nullable String diskConfigurationType;
    /**
     * @return SQL Server Data Storage Settings.
     * 
     */
    private @Nullable SQLStorageSettingsResponse sqlDataSettings;
    /**
     * @return SQL Server Log Storage Settings.
     * 
     */
    private @Nullable SQLStorageSettingsResponse sqlLogSettings;
    /**
     * @return SQL Server TempDb Storage Settings.
     * 
     */
    private @Nullable SQLStorageSettingsResponse sqlTempDbSettings;
    /**
     * @return Storage workload type.
     * 
     */
    private @Nullable String storageWorkloadType;

    private StorageConfigurationSettingsResponse() {}
    /**
     * @return Disk configuration to apply to SQL Server.
     * 
     */
    public Optional<String> diskConfigurationType() {
        return Optional.ofNullable(this.diskConfigurationType);
    }
    /**
     * @return SQL Server Data Storage Settings.
     * 
     */
    public Optional<SQLStorageSettingsResponse> sqlDataSettings() {
        return Optional.ofNullable(this.sqlDataSettings);
    }
    /**
     * @return SQL Server Log Storage Settings.
     * 
     */
    public Optional<SQLStorageSettingsResponse> sqlLogSettings() {
        return Optional.ofNullable(this.sqlLogSettings);
    }
    /**
     * @return SQL Server TempDb Storage Settings.
     * 
     */
    public Optional<SQLStorageSettingsResponse> sqlTempDbSettings() {
        return Optional.ofNullable(this.sqlTempDbSettings);
    }
    /**
     * @return Storage workload type.
     * 
     */
    public Optional<String> storageWorkloadType() {
        return Optional.ofNullable(this.storageWorkloadType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StorageConfigurationSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String diskConfigurationType;
        private @Nullable SQLStorageSettingsResponse sqlDataSettings;
        private @Nullable SQLStorageSettingsResponse sqlLogSettings;
        private @Nullable SQLStorageSettingsResponse sqlTempDbSettings;
        private @Nullable String storageWorkloadType;
        public Builder() {}
        public Builder(StorageConfigurationSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskConfigurationType = defaults.diskConfigurationType;
    	      this.sqlDataSettings = defaults.sqlDataSettings;
    	      this.sqlLogSettings = defaults.sqlLogSettings;
    	      this.sqlTempDbSettings = defaults.sqlTempDbSettings;
    	      this.storageWorkloadType = defaults.storageWorkloadType;
        }

        @CustomType.Setter
        public Builder diskConfigurationType(@Nullable String diskConfigurationType) {
            this.diskConfigurationType = diskConfigurationType;
            return this;
        }
        @CustomType.Setter
        public Builder sqlDataSettings(@Nullable SQLStorageSettingsResponse sqlDataSettings) {
            this.sqlDataSettings = sqlDataSettings;
            return this;
        }
        @CustomType.Setter
        public Builder sqlLogSettings(@Nullable SQLStorageSettingsResponse sqlLogSettings) {
            this.sqlLogSettings = sqlLogSettings;
            return this;
        }
        @CustomType.Setter
        public Builder sqlTempDbSettings(@Nullable SQLStorageSettingsResponse sqlTempDbSettings) {
            this.sqlTempDbSettings = sqlTempDbSettings;
            return this;
        }
        @CustomType.Setter
        public Builder storageWorkloadType(@Nullable String storageWorkloadType) {
            this.storageWorkloadType = storageWorkloadType;
            return this;
        }
        public StorageConfigurationSettingsResponse build() {
            final var o = new StorageConfigurationSettingsResponse();
            o.diskConfigurationType = diskConfigurationType;
            o.sqlDataSettings = sqlDataSettings;
            o.sqlLogSettings = sqlLogSettings;
            o.sqlTempDbSettings = sqlTempDbSettings;
            o.storageWorkloadType = storageWorkloadType;
            return o;
        }
    }
}
