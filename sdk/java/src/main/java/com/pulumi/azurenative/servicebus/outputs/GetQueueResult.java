// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.outputs;

import com.pulumi.azurenative.servicebus.outputs.MessageCountDetailsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetQueueResult {
    /**
     * @return Last time a message was sent, or the last time there was a receive request to this queue.
     * 
     */
    private String accessedAt;
    /**
     * @return ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
     * 
     */
    private @Nullable String autoDeleteOnIdle;
    /**
     * @return Message Count Details.
     * 
     */
    private MessageCountDetailsResponse countDetails;
    /**
     * @return The exact time the message was created.
     * 
     */
    private String createdAt;
    /**
     * @return A value that indicates whether this queue has dead letter support when a message expires.
     * 
     */
    private @Nullable Boolean deadLetteringOnMessageExpiration;
    /**
     * @return ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    private @Nullable String defaultMessageTimeToLive;
    /**
     * @return ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
     */
    private @Nullable String duplicateDetectionHistoryTimeWindow;
    /**
     * @return Value that indicates whether server-side batched operations are enabled.
     * 
     */
    private @Nullable Boolean enableBatchedOperations;
    /**
     * @return A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
     * 
     */
    private @Nullable Boolean enableExpress;
    /**
     * @return A value that indicates whether the queue is to be partitioned across multiple message brokers.
     * 
     */
    private @Nullable Boolean enablePartitioning;
    /**
     * @return Queue/Topic name to forward the Dead Letter message
     * 
     */
    private @Nullable String forwardDeadLetteredMessagesTo;
    /**
     * @return Queue/Topic name to forward the messages
     * 
     */
    private @Nullable String forwardTo;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
     * 
     */
    private @Nullable String lockDuration;
    /**
     * @return The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
     * 
     */
    private @Nullable Integer maxDeliveryCount;
    /**
     * @return The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
     * 
     */
    private @Nullable Integer maxSizeInMegabytes;
    /**
     * @return The number of messages in the queue.
     * 
     */
    private Double messageCount;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return A value indicating if this queue requires duplicate detection.
     * 
     */
    private @Nullable Boolean requiresDuplicateDetection;
    /**
     * @return A value that indicates whether the queue supports the concept of sessions.
     * 
     */
    private @Nullable Boolean requiresSession;
    /**
     * @return The size of the queue, in bytes.
     * 
     */
    private Double sizeInBytes;
    /**
     * @return Enumerates the possible values for the status of a messaging entity.
     * 
     */
    private @Nullable String status;
    /**
     * @return Resource type
     * 
     */
    private String type;
    /**
     * @return The exact time the message was updated.
     * 
     */
    private String updatedAt;

    private GetQueueResult() {}
    /**
     * @return Last time a message was sent, or the last time there was a receive request to this queue.
     * 
     */
    public String accessedAt() {
        return this.accessedAt;
    }
    /**
     * @return ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
     * 
     */
    public Optional<String> autoDeleteOnIdle() {
        return Optional.ofNullable(this.autoDeleteOnIdle);
    }
    /**
     * @return Message Count Details.
     * 
     */
    public MessageCountDetailsResponse countDetails() {
        return this.countDetails;
    }
    /**
     * @return The exact time the message was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return A value that indicates whether this queue has dead letter support when a message expires.
     * 
     */
    public Optional<Boolean> deadLetteringOnMessageExpiration() {
        return Optional.ofNullable(this.deadLetteringOnMessageExpiration);
    }
    /**
     * @return ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
     * 
     */
    public Optional<String> defaultMessageTimeToLive() {
        return Optional.ofNullable(this.defaultMessageTimeToLive);
    }
    /**
     * @return ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
     * 
     */
    public Optional<String> duplicateDetectionHistoryTimeWindow() {
        return Optional.ofNullable(this.duplicateDetectionHistoryTimeWindow);
    }
    /**
     * @return Value that indicates whether server-side batched operations are enabled.
     * 
     */
    public Optional<Boolean> enableBatchedOperations() {
        return Optional.ofNullable(this.enableBatchedOperations);
    }
    /**
     * @return A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
     * 
     */
    public Optional<Boolean> enableExpress() {
        return Optional.ofNullable(this.enableExpress);
    }
    /**
     * @return A value that indicates whether the queue is to be partitioned across multiple message brokers.
     * 
     */
    public Optional<Boolean> enablePartitioning() {
        return Optional.ofNullable(this.enablePartitioning);
    }
    /**
     * @return Queue/Topic name to forward the Dead Letter message
     * 
     */
    public Optional<String> forwardDeadLetteredMessagesTo() {
        return Optional.ofNullable(this.forwardDeadLetteredMessagesTo);
    }
    /**
     * @return Queue/Topic name to forward the messages
     * 
     */
    public Optional<String> forwardTo() {
        return Optional.ofNullable(this.forwardTo);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
     * 
     */
    public Optional<String> lockDuration() {
        return Optional.ofNullable(this.lockDuration);
    }
    /**
     * @return The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
     * 
     */
    public Optional<Integer> maxDeliveryCount() {
        return Optional.ofNullable(this.maxDeliveryCount);
    }
    /**
     * @return The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
     * 
     */
    public Optional<Integer> maxSizeInMegabytes() {
        return Optional.ofNullable(this.maxSizeInMegabytes);
    }
    /**
     * @return The number of messages in the queue.
     * 
     */
    public Double messageCount() {
        return this.messageCount;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A value indicating if this queue requires duplicate detection.
     * 
     */
    public Optional<Boolean> requiresDuplicateDetection() {
        return Optional.ofNullable(this.requiresDuplicateDetection);
    }
    /**
     * @return A value that indicates whether the queue supports the concept of sessions.
     * 
     */
    public Optional<Boolean> requiresSession() {
        return Optional.ofNullable(this.requiresSession);
    }
    /**
     * @return The size of the queue, in bytes.
     * 
     */
    public Double sizeInBytes() {
        return this.sizeInBytes;
    }
    /**
     * @return Enumerates the possible values for the status of a messaging entity.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The exact time the message was updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueueResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessedAt;
        private @Nullable String autoDeleteOnIdle;
        private MessageCountDetailsResponse countDetails;
        private String createdAt;
        private @Nullable Boolean deadLetteringOnMessageExpiration;
        private @Nullable String defaultMessageTimeToLive;
        private @Nullable String duplicateDetectionHistoryTimeWindow;
        private @Nullable Boolean enableBatchedOperations;
        private @Nullable Boolean enableExpress;
        private @Nullable Boolean enablePartitioning;
        private @Nullable String forwardDeadLetteredMessagesTo;
        private @Nullable String forwardTo;
        private String id;
        private @Nullable String lockDuration;
        private @Nullable Integer maxDeliveryCount;
        private @Nullable Integer maxSizeInMegabytes;
        private Double messageCount;
        private String name;
        private @Nullable Boolean requiresDuplicateDetection;
        private @Nullable Boolean requiresSession;
        private Double sizeInBytes;
        private @Nullable String status;
        private String type;
        private String updatedAt;
        public Builder() {}
        public Builder(GetQueueResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessedAt = defaults.accessedAt;
    	      this.autoDeleteOnIdle = defaults.autoDeleteOnIdle;
    	      this.countDetails = defaults.countDetails;
    	      this.createdAt = defaults.createdAt;
    	      this.deadLetteringOnMessageExpiration = defaults.deadLetteringOnMessageExpiration;
    	      this.defaultMessageTimeToLive = defaults.defaultMessageTimeToLive;
    	      this.duplicateDetectionHistoryTimeWindow = defaults.duplicateDetectionHistoryTimeWindow;
    	      this.enableBatchedOperations = defaults.enableBatchedOperations;
    	      this.enableExpress = defaults.enableExpress;
    	      this.enablePartitioning = defaults.enablePartitioning;
    	      this.forwardDeadLetteredMessagesTo = defaults.forwardDeadLetteredMessagesTo;
    	      this.forwardTo = defaults.forwardTo;
    	      this.id = defaults.id;
    	      this.lockDuration = defaults.lockDuration;
    	      this.maxDeliveryCount = defaults.maxDeliveryCount;
    	      this.maxSizeInMegabytes = defaults.maxSizeInMegabytes;
    	      this.messageCount = defaults.messageCount;
    	      this.name = defaults.name;
    	      this.requiresDuplicateDetection = defaults.requiresDuplicateDetection;
    	      this.requiresSession = defaults.requiresSession;
    	      this.sizeInBytes = defaults.sizeInBytes;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder accessedAt(String accessedAt) {
            this.accessedAt = Objects.requireNonNull(accessedAt);
            return this;
        }
        @CustomType.Setter
        public Builder autoDeleteOnIdle(@Nullable String autoDeleteOnIdle) {
            this.autoDeleteOnIdle = autoDeleteOnIdle;
            return this;
        }
        @CustomType.Setter
        public Builder countDetails(MessageCountDetailsResponse countDetails) {
            this.countDetails = Objects.requireNonNull(countDetails);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder deadLetteringOnMessageExpiration(@Nullable Boolean deadLetteringOnMessageExpiration) {
            this.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMessageTimeToLive(@Nullable String defaultMessageTimeToLive) {
            this.defaultMessageTimeToLive = defaultMessageTimeToLive;
            return this;
        }
        @CustomType.Setter
        public Builder duplicateDetectionHistoryTimeWindow(@Nullable String duplicateDetectionHistoryTimeWindow) {
            this.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            return this;
        }
        @CustomType.Setter
        public Builder enableBatchedOperations(@Nullable Boolean enableBatchedOperations) {
            this.enableBatchedOperations = enableBatchedOperations;
            return this;
        }
        @CustomType.Setter
        public Builder enableExpress(@Nullable Boolean enableExpress) {
            this.enableExpress = enableExpress;
            return this;
        }
        @CustomType.Setter
        public Builder enablePartitioning(@Nullable Boolean enablePartitioning) {
            this.enablePartitioning = enablePartitioning;
            return this;
        }
        @CustomType.Setter
        public Builder forwardDeadLetteredMessagesTo(@Nullable String forwardDeadLetteredMessagesTo) {
            this.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            return this;
        }
        @CustomType.Setter
        public Builder forwardTo(@Nullable String forwardTo) {
            this.forwardTo = forwardTo;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lockDuration(@Nullable String lockDuration) {
            this.lockDuration = lockDuration;
            return this;
        }
        @CustomType.Setter
        public Builder maxDeliveryCount(@Nullable Integer maxDeliveryCount) {
            this.maxDeliveryCount = maxDeliveryCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeInMegabytes(@Nullable Integer maxSizeInMegabytes) {
            this.maxSizeInMegabytes = maxSizeInMegabytes;
            return this;
        }
        @CustomType.Setter
        public Builder messageCount(Double messageCount) {
            this.messageCount = Objects.requireNonNull(messageCount);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder requiresDuplicateDetection(@Nullable Boolean requiresDuplicateDetection) {
            this.requiresDuplicateDetection = requiresDuplicateDetection;
            return this;
        }
        @CustomType.Setter
        public Builder requiresSession(@Nullable Boolean requiresSession) {
            this.requiresSession = requiresSession;
            return this;
        }
        @CustomType.Setter
        public Builder sizeInBytes(Double sizeInBytes) {
            this.sizeInBytes = Objects.requireNonNull(sizeInBytes);
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public GetQueueResult build() {
            final var o = new GetQueueResult();
            o.accessedAt = accessedAt;
            o.autoDeleteOnIdle = autoDeleteOnIdle;
            o.countDetails = countDetails;
            o.createdAt = createdAt;
            o.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpiration;
            o.defaultMessageTimeToLive = defaultMessageTimeToLive;
            o.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindow;
            o.enableBatchedOperations = enableBatchedOperations;
            o.enableExpress = enableExpress;
            o.enablePartitioning = enablePartitioning;
            o.forwardDeadLetteredMessagesTo = forwardDeadLetteredMessagesTo;
            o.forwardTo = forwardTo;
            o.id = id;
            o.lockDuration = lockDuration;
            o.maxDeliveryCount = maxDeliveryCount;
            o.maxSizeInMegabytes = maxSizeInMegabytes;
            o.messageCount = messageCount;
            o.name = name;
            o.requiresDuplicateDetection = requiresDuplicateDetection;
            o.requiresSession = requiresSession;
            o.sizeInBytes = sizeInBytes;
            o.status = status;
            o.type = type;
            o.updatedAt = updatedAt;
            return o;
        }
    }
}
