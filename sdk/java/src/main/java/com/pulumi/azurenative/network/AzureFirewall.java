// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.network.AzureFirewallArgs;
import com.pulumi.azurenative.network.outputs.AzureFirewallApplicationRuleCollectionResponse;
import com.pulumi.azurenative.network.outputs.AzureFirewallIPConfigurationResponse;
import com.pulumi.azurenative.network.outputs.AzureFirewallIpGroupsResponse;
import com.pulumi.azurenative.network.outputs.AzureFirewallNatRuleCollectionResponse;
import com.pulumi.azurenative.network.outputs.AzureFirewallNetworkRuleCollectionResponse;
import com.pulumi.azurenative.network.outputs.AzureFirewallSkuResponse;
import com.pulumi.azurenative.network.outputs.HubIPAddressesResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Azure Firewall resource.
 * API Version: 2020-11-01.
 * 
 * ## Example Usage
 * ### Create Azure Firewall
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var azureFirewall = new AzureFirewall(&#34;azureFirewall&#34;, AzureFirewallArgs.builder()        
 *             .applicationRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;apprulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 110),
 *                 Map.entry(&#34;rules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;description&#34;, &#34;Deny inbound rule&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rule1&#34;),
 *                     Map.entry(&#34;protocols&#34;, Map.ofEntries(
 *                         Map.entry(&#34;port&#34;, 443),
 *                         Map.entry(&#34;protocolType&#34;, &#34;Https&#34;)
 *                     )),
 *                     Map.entry(&#34;sourceAddresses&#34;,                     
 *                         &#34;216.58.216.164&#34;,
 *                         &#34;10.0.0.0/24&#34;),
 *                     Map.entry(&#34;targetFqdns&#34;, &#34;www.test.com&#34;)
 *                 ))
 *             ))
 *             .azureFirewallName(&#34;azurefirewall&#34;)
 *             .ipConfigurations(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;azureFirewallIpConfiguration&#34;),
 *                 Map.entry(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName&#34;)),
 *                 Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet&#34;))
 *             ))
 *             .location(&#34;West US&#34;)
 *             .natRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Dnat&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;natrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all outbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTPS-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedAddress&#34;, &#34;1.2.3.5&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;8443&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all inbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;80&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTP-traffic-With-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedFqdn&#34;, &#34;internalhttpserver&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;880&#34;)
 *                     ))
 *             ))
 *             .networkRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;netrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;,                         
 *                             &#34;192.168.1.1-192.168.1.12&#34;,
 *                             &#34;10.1.4.12-10.1.4.255&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports to amazon&#34;),
 *                         Map.entry(&#34;destinationFqdns&#34;, &#34;www.amazon.com&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic-with-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;10.2.4.12-10.2.4.255&#34;)
 *                     ))
 *             ))
 *             .resourceGroupName(&#34;rg1&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;AZFW_VNet&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .tags(Map.of(&#34;key1&#34;, &#34;value1&#34;))
 *             .threatIntelMode(&#34;Alert&#34;)
 *             .zones()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create Azure Firewall With Additional Properties
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var azureFirewall = new AzureFirewall(&#34;azureFirewall&#34;, AzureFirewallArgs.builder()        
 *             .additionalProperties(Map.ofEntries(
 *                 Map.entry(&#34;key1&#34;, &#34;value1&#34;),
 *                 Map.entry(&#34;key2&#34;, &#34;value2&#34;)
 *             ))
 *             .applicationRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;apprulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 110),
 *                 Map.entry(&#34;rules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;description&#34;, &#34;Deny inbound rule&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rule1&#34;),
 *                     Map.entry(&#34;protocols&#34;, Map.ofEntries(
 *                         Map.entry(&#34;port&#34;, 443),
 *                         Map.entry(&#34;protocolType&#34;, &#34;Https&#34;)
 *                     )),
 *                     Map.entry(&#34;sourceAddresses&#34;,                     
 *                         &#34;216.58.216.164&#34;,
 *                         &#34;10.0.0.0/24&#34;),
 *                     Map.entry(&#34;targetFqdns&#34;, &#34;www.test.com&#34;)
 *                 ))
 *             ))
 *             .azureFirewallName(&#34;azurefirewall&#34;)
 *             .ipConfigurations(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;azureFirewallIpConfiguration&#34;),
 *                 Map.entry(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName&#34;)),
 *                 Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet&#34;))
 *             ))
 *             .location(&#34;West US&#34;)
 *             .natRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Dnat&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;natrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all outbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTPS-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedAddress&#34;, &#34;1.2.3.5&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;8443&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all inbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;80&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTP-traffic-With-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedFqdn&#34;, &#34;internalhttpserver&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;880&#34;)
 *                     ))
 *             ))
 *             .networkRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;netrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;,                         
 *                             &#34;192.168.1.1-192.168.1.12&#34;,
 *                             &#34;10.1.4.12-10.1.4.255&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports to amazon&#34;),
 *                         Map.entry(&#34;destinationFqdns&#34;, &#34;www.amazon.com&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic-with-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;10.2.4.12-10.2.4.255&#34;)
 *                     ))
 *             ))
 *             .resourceGroupName(&#34;rg1&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;AZFW_VNet&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .tags(Map.of(&#34;key1&#34;, &#34;value1&#34;))
 *             .threatIntelMode(&#34;Alert&#34;)
 *             .zones()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create Azure Firewall With IpGroups
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var azureFirewall = new AzureFirewall(&#34;azureFirewall&#34;, AzureFirewallArgs.builder()        
 *             .applicationRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;apprulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 110),
 *                 Map.entry(&#34;rules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;description&#34;, &#34;Deny inbound rule&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rule1&#34;),
 *                     Map.entry(&#34;protocols&#34;, Map.ofEntries(
 *                         Map.entry(&#34;port&#34;, 443),
 *                         Map.entry(&#34;protocolType&#34;, &#34;Https&#34;)
 *                     )),
 *                     Map.entry(&#34;sourceAddresses&#34;,                     
 *                         &#34;216.58.216.164&#34;,
 *                         &#34;10.0.0.0/24&#34;),
 *                     Map.entry(&#34;targetFqdns&#34;, &#34;www.test.com&#34;)
 *                 ))
 *             ))
 *             .azureFirewallName(&#34;azurefirewall&#34;)
 *             .ipConfigurations(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;azureFirewallIpConfiguration&#34;),
 *                 Map.entry(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName&#34;)),
 *                 Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet&#34;))
 *             ))
 *             .location(&#34;West US&#34;)
 *             .natRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Dnat&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;natrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all outbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTPS-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedAddress&#34;, &#34;1.2.3.5&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;8443&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all inbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;80&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTP-traffic-With-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedFqdn&#34;, &#34;internalhttpserver&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;880&#34;)
 *                     ))
 *             ))
 *             .networkRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;netrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;,                         
 *                             &#34;192.168.1.1-192.168.1.12&#34;,
 *                             &#34;10.1.4.12-10.1.4.255&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports to amazon&#34;),
 *                         Map.entry(&#34;destinationFqdns&#34;, &#34;www.amazon.com&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic-with-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;10.2.4.12-10.2.4.255&#34;)
 *                     ))
 *             ))
 *             .resourceGroupName(&#34;rg1&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;AZFW_VNet&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .tags(Map.of(&#34;key1&#34;, &#34;value1&#34;))
 *             .threatIntelMode(&#34;Alert&#34;)
 *             .zones()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create Azure Firewall With Zones
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var azureFirewall = new AzureFirewall(&#34;azureFirewall&#34;, AzureFirewallArgs.builder()        
 *             .applicationRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;apprulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 110),
 *                 Map.entry(&#34;rules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;description&#34;, &#34;Deny inbound rule&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rule1&#34;),
 *                     Map.entry(&#34;protocols&#34;, Map.ofEntries(
 *                         Map.entry(&#34;port&#34;, 443),
 *                         Map.entry(&#34;protocolType&#34;, &#34;Https&#34;)
 *                     )),
 *                     Map.entry(&#34;sourceAddresses&#34;,                     
 *                         &#34;216.58.216.164&#34;,
 *                         &#34;10.0.0.0/24&#34;),
 *                     Map.entry(&#34;targetFqdns&#34;, &#34;www.test.com&#34;)
 *                 ))
 *             ))
 *             .azureFirewallName(&#34;azurefirewall&#34;)
 *             .ipConfigurations(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;azureFirewallIpConfiguration&#34;),
 *                 Map.entry(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName&#34;)),
 *                 Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet&#34;))
 *             ))
 *             .location(&#34;West US 2&#34;)
 *             .natRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Dnat&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;natrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all outbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTPS-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedAddress&#34;, &#34;1.2.3.5&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;8443&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all inbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;80&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTP-traffic-With-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedFqdn&#34;, &#34;internalhttpserver&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;880&#34;)
 *                     ))
 *             ))
 *             .networkRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;netrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;,                         
 *                             &#34;192.168.1.1-192.168.1.12&#34;,
 *                             &#34;10.1.4.12-10.1.4.255&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports to amazon&#34;),
 *                         Map.entry(&#34;destinationFqdns&#34;, &#34;www.amazon.com&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic-with-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;10.2.4.12-10.2.4.255&#34;)
 *                     ))
 *             ))
 *             .resourceGroupName(&#34;rg1&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;AZFW_VNet&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .tags(Map.of(&#34;key1&#34;, &#34;value1&#34;))
 *             .threatIntelMode(&#34;Alert&#34;)
 *             .zones(            
 *                 &#34;1&#34;,
 *                 &#34;2&#34;,
 *                 &#34;3&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create Azure Firewall With management subnet
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var azureFirewall = new AzureFirewall(&#34;azureFirewall&#34;, AzureFirewallArgs.builder()        
 *             .applicationRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;apprulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 110),
 *                 Map.entry(&#34;rules&#34;, Map.ofEntries(
 *                     Map.entry(&#34;description&#34;, &#34;Deny inbound rule&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rule1&#34;),
 *                     Map.entry(&#34;protocols&#34;, Map.ofEntries(
 *                         Map.entry(&#34;port&#34;, 443),
 *                         Map.entry(&#34;protocolType&#34;, &#34;Https&#34;)
 *                     )),
 *                     Map.entry(&#34;sourceAddresses&#34;,                     
 *                         &#34;216.58.216.164&#34;,
 *                         &#34;10.0.0.0/24&#34;),
 *                     Map.entry(&#34;targetFqdns&#34;, &#34;www.test.com&#34;)
 *                 ))
 *             ))
 *             .azureFirewallName(&#34;azurefirewall&#34;)
 *             .ipConfigurations(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;azureFirewallIpConfiguration&#34;),
 *                 Map.entry(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName&#34;)),
 *                 Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet&#34;))
 *             ))
 *             .location(&#34;West US&#34;)
 *             .managementIpConfiguration(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;azureFirewallMgmtIpConfiguration&#34;),
 *                 Map.entry(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName&#34;)),
 *                 Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet&#34;))
 *             ))
 *             .natRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Dnat&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;natrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all outbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTPS-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedAddress&#34;, &#34;1.2.3.5&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;8443&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;D-NAT all inbound web traffic for inspection&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;1.2.3.4&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;, &#34;80&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;DNAT-HTTP-traffic-With-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;translatedFqdn&#34;, &#34;internalhttpserver&#34;),
 *                         Map.entry(&#34;translatedPort&#34;, &#34;880&#34;)
 *                     ))
 *             ))
 *             .networkRuleCollections(Map.ofEntries(
 *                 Map.entry(&#34;action&#34;, Map.of(&#34;type&#34;, &#34;Deny&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;netrulecoll&#34;),
 *                 Map.entry(&#34;priority&#34;, 112),
 *                 Map.entry(&#34;rules&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports&#34;),
 *                         Map.entry(&#34;destinationAddresses&#34;, &#34;*&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;,                         
 *                             &#34;192.168.1.1-192.168.1.12&#34;,
 *                             &#34;10.1.4.12-10.1.4.255&#34;)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;description&#34;, &#34;Block traffic based on source IPs and ports to amazon&#34;),
 *                         Map.entry(&#34;destinationFqdns&#34;, &#34;www.amazon.com&#34;),
 *                         Map.entry(&#34;destinationPorts&#34;,                         
 *                             &#34;443-444&#34;,
 *                             &#34;8443&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;L4-traffic-with-FQDN&#34;),
 *                         Map.entry(&#34;protocols&#34;, &#34;TCP&#34;),
 *                         Map.entry(&#34;sourceAddresses&#34;, &#34;10.2.4.12-10.2.4.255&#34;)
 *                     ))
 *             ))
 *             .resourceGroupName(&#34;rg1&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;AZFW_VNet&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .tags(Map.of(&#34;key1&#34;, &#34;value1&#34;))
 *             .threatIntelMode(&#34;Alert&#34;)
 *             .zones()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create Azure Firewall in virtual Hub
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var azureFirewall = new AzureFirewall(&#34;azureFirewall&#34;, AzureFirewallArgs.builder()        
 *             .azureFirewallName(&#34;azurefirewall&#34;)
 *             .firewallPolicy(Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1&#34;))
 *             .hubIPAddresses(Map.of(&#34;publicIPs&#34;, Map.ofEntries(
 *                 Map.entry(&#34;addresses&#34;, ),
 *                 Map.entry(&#34;count&#34;, 1)
 *             )))
 *             .location(&#34;West US&#34;)
 *             .resourceGroupName(&#34;rg1&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;AZFW_Hub&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .tags(Map.of(&#34;key1&#34;, &#34;value1&#34;))
 *             .threatIntelMode(&#34;Alert&#34;)
 *             .virtualHub(Map.of(&#34;id&#34;, &#34;/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1&#34;))
 *             .zones()
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:network:AzureFirewall azurefirewall /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall 
 * ```
 * 
 */
@ResourceType(type="azure-native:network:AzureFirewall")
public class AzureFirewall extends com.pulumi.resources.CustomResource {
    /**
     * The additional properties used to further config this azure firewall.
     * 
     */
    @Export(name="additionalProperties", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> additionalProperties;

    /**
     * @return The additional properties used to further config this azure firewall.
     * 
     */
    public Output<Optional<Map<String,String>>> additionalProperties() {
        return Codegen.optional(this.additionalProperties);
    }
    /**
     * Collection of application rule collections used by Azure Firewall.
     * 
     */
    @Export(name="applicationRuleCollections", type=List.class, parameters={AzureFirewallApplicationRuleCollectionResponse.class})
    private Output</* @Nullable */ List<AzureFirewallApplicationRuleCollectionResponse>> applicationRuleCollections;

    /**
     * @return Collection of application rule collections used by Azure Firewall.
     * 
     */
    public Output<Optional<List<AzureFirewallApplicationRuleCollectionResponse>>> applicationRuleCollections() {
        return Codegen.optional(this.applicationRuleCollections);
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The firewallPolicy associated with this azure firewall.
     * 
     */
    @Export(name="firewallPolicy", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> firewallPolicy;

    /**
     * @return The firewallPolicy associated with this azure firewall.
     * 
     */
    public Output<Optional<SubResourceResponse>> firewallPolicy() {
        return Codegen.optional(this.firewallPolicy);
    }
    /**
     * IP addresses associated with AzureFirewall.
     * 
     */
    @Export(name="hubIPAddresses", type=HubIPAddressesResponse.class, parameters={})
    private Output</* @Nullable */ HubIPAddressesResponse> hubIPAddresses;

    /**
     * @return IP addresses associated with AzureFirewall.
     * 
     */
    public Output<Optional<HubIPAddressesResponse>> hubIPAddresses() {
        return Codegen.optional(this.hubIPAddresses);
    }
    /**
     * IP configuration of the Azure Firewall resource.
     * 
     */
    @Export(name="ipConfigurations", type=List.class, parameters={AzureFirewallIPConfigurationResponse.class})
    private Output</* @Nullable */ List<AzureFirewallIPConfigurationResponse>> ipConfigurations;

    /**
     * @return IP configuration of the Azure Firewall resource.
     * 
     */
    public Output<Optional<List<AzureFirewallIPConfigurationResponse>>> ipConfigurations() {
        return Codegen.optional(this.ipConfigurations);
    }
    /**
     * IpGroups associated with AzureFirewall.
     * 
     */
    @Export(name="ipGroups", type=List.class, parameters={AzureFirewallIpGroupsResponse.class})
    private Output<List<AzureFirewallIpGroupsResponse>> ipGroups;

    /**
     * @return IpGroups associated with AzureFirewall.
     * 
     */
    public Output<List<AzureFirewallIpGroupsResponse>> ipGroups() {
        return this.ipGroups;
    }
    /**
     * Resource location.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return Resource location.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * IP configuration of the Azure Firewall used for management traffic.
     * 
     */
    @Export(name="managementIpConfiguration", type=AzureFirewallIPConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ AzureFirewallIPConfigurationResponse> managementIpConfiguration;

    /**
     * @return IP configuration of the Azure Firewall used for management traffic.
     * 
     */
    public Output<Optional<AzureFirewallIPConfigurationResponse>> managementIpConfiguration() {
        return Codegen.optional(this.managementIpConfiguration);
    }
    /**
     * Resource name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Collection of NAT rule collections used by Azure Firewall.
     * 
     */
    @Export(name="natRuleCollections", type=List.class, parameters={AzureFirewallNatRuleCollectionResponse.class})
    private Output</* @Nullable */ List<AzureFirewallNatRuleCollectionResponse>> natRuleCollections;

    /**
     * @return Collection of NAT rule collections used by Azure Firewall.
     * 
     */
    public Output<Optional<List<AzureFirewallNatRuleCollectionResponse>>> natRuleCollections() {
        return Codegen.optional(this.natRuleCollections);
    }
    /**
     * Collection of network rule collections used by Azure Firewall.
     * 
     */
    @Export(name="networkRuleCollections", type=List.class, parameters={AzureFirewallNetworkRuleCollectionResponse.class})
    private Output</* @Nullable */ List<AzureFirewallNetworkRuleCollectionResponse>> networkRuleCollections;

    /**
     * @return Collection of network rule collections used by Azure Firewall.
     * 
     */
    public Output<Optional<List<AzureFirewallNetworkRuleCollectionResponse>>> networkRuleCollections() {
        return Codegen.optional(this.networkRuleCollections);
    }
    /**
     * The provisioning state of the Azure firewall resource.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the Azure firewall resource.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * The Azure Firewall Resource SKU.
     * 
     */
    @Export(name="sku", type=AzureFirewallSkuResponse.class, parameters={})
    private Output</* @Nullable */ AzureFirewallSkuResponse> sku;

    /**
     * @return The Azure Firewall Resource SKU.
     * 
     */
    public Output<Optional<AzureFirewallSkuResponse>> sku() {
        return Codegen.optional(this.sku);
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The operation mode for Threat Intelligence.
     * 
     */
    @Export(name="threatIntelMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> threatIntelMode;

    /**
     * @return The operation mode for Threat Intelligence.
     * 
     */
    public Output<Optional<String>> threatIntelMode() {
        return Codegen.optional(this.threatIntelMode);
    }
    /**
     * Resource type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The virtualHub to which the firewall belongs.
     * 
     */
    @Export(name="virtualHub", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> virtualHub;

    /**
     * @return The virtualHub to which the firewall belongs.
     * 
     */
    public Output<Optional<SubResourceResponse>> virtualHub() {
        return Codegen.optional(this.virtualHub);
    }
    /**
     * A list of availability zones denoting where the resource needs to come from.
     * 
     */
    @Export(name="zones", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> zones;

    /**
     * @return A list of availability zones denoting where the resource needs to come from.
     * 
     */
    public Output<Optional<List<String>>> zones() {
        return Codegen.optional(this.zones);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AzureFirewall(String name) {
        this(name, AzureFirewallArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AzureFirewall(String name, AzureFirewallArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AzureFirewall(String name, AzureFirewallArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:AzureFirewall", name, args == null ? AzureFirewallArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AzureFirewall(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:AzureFirewall", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:network/v20180401:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180601:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180701:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180801:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20181001:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20181101:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20181201:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190201:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190401:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190601:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190701:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190801:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190901:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20191101:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20191201:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200301:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200401:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200501:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200601:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200701:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200801:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20201101:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210201:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210301:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210501:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210801:AzureFirewall").build()),
                Output.of(Alias.builder().type("azure-native:network/v20220101:AzureFirewall").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AzureFirewall get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AzureFirewall(name, id, options);
    }
}
