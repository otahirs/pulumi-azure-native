// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.outputs;

import com.pulumi.azurenative.botservice.outputs.SiteResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ChannelSettingsResponse {
    /**
     * @return The bot icon url
     * 
     */
    private @Nullable String botIconUrl;
    /**
     * @return The bot id
     * 
     */
    private @Nullable String botId;
    /**
     * @return The channel display name
     * 
     */
    private @Nullable String channelDisplayName;
    /**
     * @return The channel id
     * 
     */
    private @Nullable String channelId;
    /**
     * @return Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     * 
     */
    private @Nullable Boolean disableLocalAuth;
    /**
     * @return The extensionKey1
     * 
     */
    private @Nullable String extensionKey1;
    /**
     * @return The extensionKey2
     * 
     */
    private @Nullable String extensionKey2;
    /**
     * @return Whether this channel is enabled for the bot
     * 
     */
    private @Nullable Boolean isEnabled;
    /**
     * @return The list of sites
     * 
     */
    private @Nullable List<SiteResponse> sites;

    private ChannelSettingsResponse() {}
    /**
     * @return The bot icon url
     * 
     */
    public Optional<String> botIconUrl() {
        return Optional.ofNullable(this.botIconUrl);
    }
    /**
     * @return The bot id
     * 
     */
    public Optional<String> botId() {
        return Optional.ofNullable(this.botId);
    }
    /**
     * @return The channel display name
     * 
     */
    public Optional<String> channelDisplayName() {
        return Optional.ofNullable(this.channelDisplayName);
    }
    /**
     * @return The channel id
     * 
     */
    public Optional<String> channelId() {
        return Optional.ofNullable(this.channelId);
    }
    /**
     * @return Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     * 
     */
    public Optional<Boolean> disableLocalAuth() {
        return Optional.ofNullable(this.disableLocalAuth);
    }
    /**
     * @return The extensionKey1
     * 
     */
    public Optional<String> extensionKey1() {
        return Optional.ofNullable(this.extensionKey1);
    }
    /**
     * @return The extensionKey2
     * 
     */
    public Optional<String> extensionKey2() {
        return Optional.ofNullable(this.extensionKey2);
    }
    /**
     * @return Whether this channel is enabled for the bot
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return The list of sites
     * 
     */
    public List<SiteResponse> sites() {
        return this.sites == null ? List.of() : this.sites;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ChannelSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String botIconUrl;
        private @Nullable String botId;
        private @Nullable String channelDisplayName;
        private @Nullable String channelId;
        private @Nullable Boolean disableLocalAuth;
        private @Nullable String extensionKey1;
        private @Nullable String extensionKey2;
        private @Nullable Boolean isEnabled;
        private @Nullable List<SiteResponse> sites;
        public Builder() {}
        public Builder(ChannelSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.botIconUrl = defaults.botIconUrl;
    	      this.botId = defaults.botId;
    	      this.channelDisplayName = defaults.channelDisplayName;
    	      this.channelId = defaults.channelId;
    	      this.disableLocalAuth = defaults.disableLocalAuth;
    	      this.extensionKey1 = defaults.extensionKey1;
    	      this.extensionKey2 = defaults.extensionKey2;
    	      this.isEnabled = defaults.isEnabled;
    	      this.sites = defaults.sites;
        }

        @CustomType.Setter
        public Builder botIconUrl(@Nullable String botIconUrl) {
            this.botIconUrl = botIconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder botId(@Nullable String botId) {
            this.botId = botId;
            return this;
        }
        @CustomType.Setter
        public Builder channelDisplayName(@Nullable String channelDisplayName) {
            this.channelDisplayName = channelDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder channelId(@Nullable String channelId) {
            this.channelId = channelId;
            return this;
        }
        @CustomType.Setter
        public Builder disableLocalAuth(@Nullable Boolean disableLocalAuth) {
            this.disableLocalAuth = disableLocalAuth;
            return this;
        }
        @CustomType.Setter
        public Builder extensionKey1(@Nullable String extensionKey1) {
            this.extensionKey1 = extensionKey1;
            return this;
        }
        @CustomType.Setter
        public Builder extensionKey2(@Nullable String extensionKey2) {
            this.extensionKey2 = extensionKey2;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sites(@Nullable List<SiteResponse> sites) {
            this.sites = sites;
            return this;
        }
        public Builder sites(SiteResponse... sites) {
            return sites(List.of(sites));
        }
        public ChannelSettingsResponse build() {
            final var o = new ChannelSettingsResponse();
            o.botIconUrl = botIconUrl;
            o.botId = botId;
            o.channelDisplayName = channelDisplayName;
            o.channelId = channelId;
            o.disableLocalAuth = disableLocalAuth;
            o.extensionKey1 = extensionKey1;
            o.extensionKey2 = extensionKey2;
            o.isEnabled = isEnabled;
            o.sites = sites;
            return o;
        }
    }
}
