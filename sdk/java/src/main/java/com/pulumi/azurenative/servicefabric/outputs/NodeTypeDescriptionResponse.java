// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.outputs;

import com.pulumi.azurenative.servicefabric.outputs.EndpointRangeDescriptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodeTypeDescriptionResponse {
    /**
     * @return The range of ports from which cluster assigned port to Service Fabric applications.
     * 
     */
    private @Nullable EndpointRangeDescriptionResponse applicationPorts;
    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    private @Nullable Map<String,String> capacities;
    /**
     * @return The TCP cluster management endpoint port.
     * 
     */
    private Integer clientConnectionEndpointPort;
    /**
     * @return The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     * 
     */
    private @Nullable String durabilityLevel;
    /**
     * @return The range of ephemeral ports that nodes in this node type should be configured with.
     * 
     */
    private @Nullable EndpointRangeDescriptionResponse ephemeralPorts;
    /**
     * @return The HTTP cluster management endpoint port.
     * 
     */
    private Integer httpGatewayEndpointPort;
    /**
     * @return The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
     */
    private Boolean isPrimary;
    /**
     * @return The name of the node type.
     * 
     */
    private String name;
    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    private @Nullable Map<String,String> placementProperties;
    /**
     * @return The endpoint used by reverse proxy.
     * 
     */
    private @Nullable Integer reverseProxyEndpointPort;
    /**
     * @return The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     * 
     */
    private Integer vmInstanceCount;

    private NodeTypeDescriptionResponse() {}
    /**
     * @return The range of ports from which cluster assigned port to Service Fabric applications.
     * 
     */
    public Optional<EndpointRangeDescriptionResponse> applicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }
    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    public Map<String,String> capacities() {
        return this.capacities == null ? Map.of() : this.capacities;
    }
    /**
     * @return The TCP cluster management endpoint port.
     * 
     */
    public Integer clientConnectionEndpointPort() {
        return this.clientConnectionEndpointPort;
    }
    /**
     * @return The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     * 
     */
    public Optional<String> durabilityLevel() {
        return Optional.ofNullable(this.durabilityLevel);
    }
    /**
     * @return The range of ephemeral ports that nodes in this node type should be configured with.
     * 
     */
    public Optional<EndpointRangeDescriptionResponse> ephemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }
    /**
     * @return The HTTP cluster management endpoint port.
     * 
     */
    public Integer httpGatewayEndpointPort() {
        return this.httpGatewayEndpointPort;
    }
    /**
     * @return The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }
    /**
     * @return The name of the node type.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    public Map<String,String> placementProperties() {
        return this.placementProperties == null ? Map.of() : this.placementProperties;
    }
    /**
     * @return The endpoint used by reverse proxy.
     * 
     */
    public Optional<Integer> reverseProxyEndpointPort() {
        return Optional.ofNullable(this.reverseProxyEndpointPort);
    }
    /**
     * @return The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     * 
     */
    public Integer vmInstanceCount() {
        return this.vmInstanceCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeTypeDescriptionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable EndpointRangeDescriptionResponse applicationPorts;
        private @Nullable Map<String,String> capacities;
        private Integer clientConnectionEndpointPort;
        private @Nullable String durabilityLevel;
        private @Nullable EndpointRangeDescriptionResponse ephemeralPorts;
        private Integer httpGatewayEndpointPort;
        private Boolean isPrimary;
        private String name;
        private @Nullable Map<String,String> placementProperties;
        private @Nullable Integer reverseProxyEndpointPort;
        private Integer vmInstanceCount;
        public Builder() {}
        public Builder(NodeTypeDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationPorts = defaults.applicationPorts;
    	      this.capacities = defaults.capacities;
    	      this.clientConnectionEndpointPort = defaults.clientConnectionEndpointPort;
    	      this.durabilityLevel = defaults.durabilityLevel;
    	      this.ephemeralPorts = defaults.ephemeralPorts;
    	      this.httpGatewayEndpointPort = defaults.httpGatewayEndpointPort;
    	      this.isPrimary = defaults.isPrimary;
    	      this.name = defaults.name;
    	      this.placementProperties = defaults.placementProperties;
    	      this.reverseProxyEndpointPort = defaults.reverseProxyEndpointPort;
    	      this.vmInstanceCount = defaults.vmInstanceCount;
        }

        @CustomType.Setter
        public Builder applicationPorts(@Nullable EndpointRangeDescriptionResponse applicationPorts) {
            this.applicationPorts = applicationPorts;
            return this;
        }
        @CustomType.Setter
        public Builder capacities(@Nullable Map<String,String> capacities) {
            this.capacities = capacities;
            return this;
        }
        @CustomType.Setter
        public Builder clientConnectionEndpointPort(Integer clientConnectionEndpointPort) {
            this.clientConnectionEndpointPort = Objects.requireNonNull(clientConnectionEndpointPort);
            return this;
        }
        @CustomType.Setter
        public Builder durabilityLevel(@Nullable String durabilityLevel) {
            this.durabilityLevel = durabilityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralPorts(@Nullable EndpointRangeDescriptionResponse ephemeralPorts) {
            this.ephemeralPorts = ephemeralPorts;
            return this;
        }
        @CustomType.Setter
        public Builder httpGatewayEndpointPort(Integer httpGatewayEndpointPort) {
            this.httpGatewayEndpointPort = Objects.requireNonNull(httpGatewayEndpointPort);
            return this;
        }
        @CustomType.Setter
        public Builder isPrimary(Boolean isPrimary) {
            this.isPrimary = Objects.requireNonNull(isPrimary);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder placementProperties(@Nullable Map<String,String> placementProperties) {
            this.placementProperties = placementProperties;
            return this;
        }
        @CustomType.Setter
        public Builder reverseProxyEndpointPort(@Nullable Integer reverseProxyEndpointPort) {
            this.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return this;
        }
        @CustomType.Setter
        public Builder vmInstanceCount(Integer vmInstanceCount) {
            this.vmInstanceCount = Objects.requireNonNull(vmInstanceCount);
            return this;
        }
        public NodeTypeDescriptionResponse build() {
            final var o = new NodeTypeDescriptionResponse();
            o.applicationPorts = applicationPorts;
            o.capacities = capacities;
            o.clientConnectionEndpointPort = clientConnectionEndpointPort;
            o.durabilityLevel = durabilityLevel;
            o.ephemeralPorts = ephemeralPorts;
            o.httpGatewayEndpointPort = httpGatewayEndpointPort;
            o.isPrimary = isPrimary;
            o.name = name;
            o.placementProperties = placementProperties;
            o.reverseProxyEndpointPort = reverseProxyEndpointPort;
            o.vmInstanceCount = vmInstanceCount;
            return o;
        }
    }
}
