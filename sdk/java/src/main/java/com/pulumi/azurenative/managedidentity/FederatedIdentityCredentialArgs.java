// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedidentity;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FederatedIdentityCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final FederatedIdentityCredentialArgs Empty = new FederatedIdentityCredentialArgs();

    /**
     * The list of audiences that can appear in the issued token.
     * 
     */
    @Import(name="audiences", required=true)
    private Output<List<String>> audiences;

    /**
     * @return The list of audiences that can appear in the issued token.
     * 
     */
    public Output<List<String>> audiences() {
        return this.audiences;
    }

    /**
     * The name of the federated identity credential resource.
     * 
     */
    @Import(name="federatedIdentityCredentialResourceName")
    private @Nullable Output<String> federatedIdentityCredentialResourceName;

    /**
     * @return The name of the federated identity credential resource.
     * 
     */
    public Optional<Output<String>> federatedIdentityCredentialResourceName() {
        return Optional.ofNullable(this.federatedIdentityCredentialResourceName);
    }

    /**
     * The URL of the issuer to be trusted.
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return The URL of the issuer to be trusted.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * The name of the Resource Group to which the identity belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group to which the identity belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the identity resource.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return The name of the identity resource.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * The identifier of the external identity.
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return The identifier of the external identity.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    private FederatedIdentityCredentialArgs() {}

    private FederatedIdentityCredentialArgs(FederatedIdentityCredentialArgs $) {
        this.audiences = $.audiences;
        this.federatedIdentityCredentialResourceName = $.federatedIdentityCredentialResourceName;
        this.issuer = $.issuer;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.subject = $.subject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FederatedIdentityCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FederatedIdentityCredentialArgs $;

        public Builder() {
            $ = new FederatedIdentityCredentialArgs();
        }

        public Builder(FederatedIdentityCredentialArgs defaults) {
            $ = new FederatedIdentityCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audiences The list of audiences that can appear in the issued token.
         * 
         * @return builder
         * 
         */
        public Builder audiences(Output<List<String>> audiences) {
            $.audiences = audiences;
            return this;
        }

        /**
         * @param audiences The list of audiences that can appear in the issued token.
         * 
         * @return builder
         * 
         */
        public Builder audiences(List<String> audiences) {
            return audiences(Output.of(audiences));
        }

        /**
         * @param audiences The list of audiences that can appear in the issued token.
         * 
         * @return builder
         * 
         */
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }

        /**
         * @param federatedIdentityCredentialResourceName The name of the federated identity credential resource.
         * 
         * @return builder
         * 
         */
        public Builder federatedIdentityCredentialResourceName(@Nullable Output<String> federatedIdentityCredentialResourceName) {
            $.federatedIdentityCredentialResourceName = federatedIdentityCredentialResourceName;
            return this;
        }

        /**
         * @param federatedIdentityCredentialResourceName The name of the federated identity credential resource.
         * 
         * @return builder
         * 
         */
        public Builder federatedIdentityCredentialResourceName(String federatedIdentityCredentialResourceName) {
            return federatedIdentityCredentialResourceName(Output.of(federatedIdentityCredentialResourceName));
        }

        /**
         * @param issuer The URL of the issuer to be trusted.
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The URL of the issuer to be trusted.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param resourceGroupName The name of the Resource Group to which the identity belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group to which the identity belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceName The name of the identity resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name of the identity resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param subject The identifier of the external identity.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The identifier of the external identity.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        public FederatedIdentityCredentialArgs build() {
            $.audiences = Objects.requireNonNull($.audiences, "expected parameter 'audiences' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            return $;
        }
    }

}
