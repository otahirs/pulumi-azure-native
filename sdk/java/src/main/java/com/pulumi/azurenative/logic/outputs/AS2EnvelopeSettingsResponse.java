// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AS2EnvelopeSettingsResponse {
    /**
     * @return The value indicating whether to auto generate file name.
     * 
     */
    private Boolean autogenerateFileName;
    /**
     * @return The template for file name.
     * 
     */
    private String fileNameTemplate;
    /**
     * @return The message content type.
     * 
     */
    private String messageContentType;
    /**
     * @return The value indicating whether to suspend message on file name generation error.
     * 
     */
    private Boolean suspendMessageOnFileNameGenerationError;
    /**
     * @return The value indicating whether to transmit file name in mime header.
     * 
     */
    private Boolean transmitFileNameInMimeHeader;

    private AS2EnvelopeSettingsResponse() {}
    /**
     * @return The value indicating whether to auto generate file name.
     * 
     */
    public Boolean autogenerateFileName() {
        return this.autogenerateFileName;
    }
    /**
     * @return The template for file name.
     * 
     */
    public String fileNameTemplate() {
        return this.fileNameTemplate;
    }
    /**
     * @return The message content type.
     * 
     */
    public String messageContentType() {
        return this.messageContentType;
    }
    /**
     * @return The value indicating whether to suspend message on file name generation error.
     * 
     */
    public Boolean suspendMessageOnFileNameGenerationError() {
        return this.suspendMessageOnFileNameGenerationError;
    }
    /**
     * @return The value indicating whether to transmit file name in mime header.
     * 
     */
    public Boolean transmitFileNameInMimeHeader() {
        return this.transmitFileNameInMimeHeader;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autogenerateFileName;
        private String fileNameTemplate;
        private String messageContentType;
        private Boolean suspendMessageOnFileNameGenerationError;
        private Boolean transmitFileNameInMimeHeader;
        public Builder() {}
        public Builder(AS2EnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autogenerateFileName = defaults.autogenerateFileName;
    	      this.fileNameTemplate = defaults.fileNameTemplate;
    	      this.messageContentType = defaults.messageContentType;
    	      this.suspendMessageOnFileNameGenerationError = defaults.suspendMessageOnFileNameGenerationError;
    	      this.transmitFileNameInMimeHeader = defaults.transmitFileNameInMimeHeader;
        }

        @CustomType.Setter
        public Builder autogenerateFileName(Boolean autogenerateFileName) {
            this.autogenerateFileName = Objects.requireNonNull(autogenerateFileName);
            return this;
        }
        @CustomType.Setter
        public Builder fileNameTemplate(String fileNameTemplate) {
            this.fileNameTemplate = Objects.requireNonNull(fileNameTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder messageContentType(String messageContentType) {
            this.messageContentType = Objects.requireNonNull(messageContentType);
            return this;
        }
        @CustomType.Setter
        public Builder suspendMessageOnFileNameGenerationError(Boolean suspendMessageOnFileNameGenerationError) {
            this.suspendMessageOnFileNameGenerationError = Objects.requireNonNull(suspendMessageOnFileNameGenerationError);
            return this;
        }
        @CustomType.Setter
        public Builder transmitFileNameInMimeHeader(Boolean transmitFileNameInMimeHeader) {
            this.transmitFileNameInMimeHeader = Objects.requireNonNull(transmitFileNameInMimeHeader);
            return this;
        }
        public AS2EnvelopeSettingsResponse build() {
            final var o = new AS2EnvelopeSettingsResponse();
            o.autogenerateFileName = autogenerateFileName;
            o.fileNameTemplate = fileNameTemplate;
            o.messageContentType = messageContentType;
            o.suspendMessageOnFileNameGenerationError = suspendMessageOnFileNameGenerationError;
            o.transmitFileNameInMimeHeader = transmitFileNameInMimeHeader;
            return o;
        }
    }
}
