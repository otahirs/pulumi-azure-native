// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.outputs;

import com.pulumi.azurenative.eventgrid.outputs.AzureFunctionEventSubscriptionDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.DeadLetterWithResourceIdentityResponse;
import com.pulumi.azurenative.eventgrid.outputs.DeliveryWithResourceIdentityResponse;
import com.pulumi.azurenative.eventgrid.outputs.EventHubEventSubscriptionDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.EventSubscriptionFilterResponse;
import com.pulumi.azurenative.eventgrid.outputs.HybridConnectionEventSubscriptionDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.RetryPolicyResponse;
import com.pulumi.azurenative.eventgrid.outputs.ServiceBusQueueEventSubscriptionDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.ServiceBusTopicEventSubscriptionDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.StorageBlobDeadLetterDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.StorageQueueEventSubscriptionDestinationResponse;
import com.pulumi.azurenative.eventgrid.outputs.SystemDataResponse;
import com.pulumi.azurenative.eventgrid.outputs.WebHookEventSubscriptionDestinationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSystemTopicEventSubscriptionResult {
    /**
     * @return The dead letter destination of the event subscription. Any event that cannot be delivered to its&#39; destination is sent to the dead letter destination.
     * Uses Azure Event Grid&#39;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    private @Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination;
    /**
     * @return The dead letter destination of the event subscription. Any event that cannot be delivered to its&#39; destination is sent to the dead letter destination.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    private @Nullable DeadLetterWithResourceIdentityResponse deadLetterWithResourceIdentity;
    /**
     * @return Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    private @Nullable DeliveryWithResourceIdentityResponse deliveryWithResourceIdentity;
    /**
     * @return Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid&#39;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    private @Nullable Object destination;
    /**
     * @return The event delivery schema for the event subscription.
     * 
     */
    private @Nullable String eventDeliverySchema;
    /**
     * @return Expiration time of the event subscription.
     * 
     */
    private @Nullable String expirationTimeUtc;
    /**
     * @return Information about the filter for the event subscription.
     * 
     */
    private @Nullable EventSubscriptionFilterResponse filter;
    /**
     * @return Fully qualified identifier of the resource.
     * 
     */
    private String id;
    /**
     * @return List of user defined labels.
     * 
     */
    private @Nullable List<String> labels;
    /**
     * @return Name of the resource.
     * 
     */
    private String name;
    /**
     * @return Provisioning state of the event subscription.
     * 
     */
    private String provisioningState;
    /**
     * @return The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
     * 
     */
    private @Nullable RetryPolicyResponse retryPolicy;
    /**
     * @return The system metadata relating to Event Subscription resource.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return Name of the topic of the event subscription.
     * 
     */
    private String topic;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private GetSystemTopicEventSubscriptionResult() {}
    /**
     * @return The dead letter destination of the event subscription. Any event that cannot be delivered to its&#39; destination is sent to the dead letter destination.
     * Uses Azure Event Grid&#39;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    public Optional<StorageBlobDeadLetterDestinationResponse> deadLetterDestination() {
        return Optional.ofNullable(this.deadLetterDestination);
    }
    /**
     * @return The dead letter destination of the event subscription. Any event that cannot be delivered to its&#39; destination is sent to the dead letter destination.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    public Optional<DeadLetterWithResourceIdentityResponse> deadLetterWithResourceIdentity() {
        return Optional.ofNullable(this.deadLetterWithResourceIdentity);
    }
    /**
     * @return Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    public Optional<DeliveryWithResourceIdentityResponse> deliveryWithResourceIdentity() {
        return Optional.ofNullable(this.deliveryWithResourceIdentity);
    }
    /**
     * @return Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid&#39;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    public Optional<Object> destination() {
        return Optional.ofNullable(this.destination);
    }
    /**
     * @return The event delivery schema for the event subscription.
     * 
     */
    public Optional<String> eventDeliverySchema() {
        return Optional.ofNullable(this.eventDeliverySchema);
    }
    /**
     * @return Expiration time of the event subscription.
     * 
     */
    public Optional<String> expirationTimeUtc() {
        return Optional.ofNullable(this.expirationTimeUtc);
    }
    /**
     * @return Information about the filter for the event subscription.
     * 
     */
    public Optional<EventSubscriptionFilterResponse> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Fully qualified identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of user defined labels.
     * 
     */
    public List<String> labels() {
        return this.labels == null ? List.of() : this.labels;
    }
    /**
     * @return Name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Provisioning state of the event subscription.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
     * 
     */
    public Optional<RetryPolicyResponse> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }
    /**
     * @return The system metadata relating to Event Subscription resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Name of the topic of the event subscription.
     * 
     */
    public String topic() {
        return this.topic;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemTopicEventSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination;
        private @Nullable DeadLetterWithResourceIdentityResponse deadLetterWithResourceIdentity;
        private @Nullable DeliveryWithResourceIdentityResponse deliveryWithResourceIdentity;
        private @Nullable Object destination;
        private @Nullable String eventDeliverySchema;
        private @Nullable String expirationTimeUtc;
        private @Nullable EventSubscriptionFilterResponse filter;
        private String id;
        private @Nullable List<String> labels;
        private String name;
        private String provisioningState;
        private @Nullable RetryPolicyResponse retryPolicy;
        private SystemDataResponse systemData;
        private String topic;
        private String type;
        public Builder() {}
        public Builder(GetSystemTopicEventSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deadLetterDestination = defaults.deadLetterDestination;
    	      this.deadLetterWithResourceIdentity = defaults.deadLetterWithResourceIdentity;
    	      this.deliveryWithResourceIdentity = defaults.deliveryWithResourceIdentity;
    	      this.destination = defaults.destination;
    	      this.eventDeliverySchema = defaults.eventDeliverySchema;
    	      this.expirationTimeUtc = defaults.expirationTimeUtc;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.systemData = defaults.systemData;
    	      this.topic = defaults.topic;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder deadLetterDestination(@Nullable StorageBlobDeadLetterDestinationResponse deadLetterDestination) {
            this.deadLetterDestination = deadLetterDestination;
            return this;
        }
        @CustomType.Setter
        public Builder deadLetterWithResourceIdentity(@Nullable DeadLetterWithResourceIdentityResponse deadLetterWithResourceIdentity) {
            this.deadLetterWithResourceIdentity = deadLetterWithResourceIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder deliveryWithResourceIdentity(@Nullable DeliveryWithResourceIdentityResponse deliveryWithResourceIdentity) {
            this.deliveryWithResourceIdentity = deliveryWithResourceIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder destination(@Nullable Object destination) {
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder eventDeliverySchema(@Nullable String eventDeliverySchema) {
            this.eventDeliverySchema = eventDeliverySchema;
            return this;
        }
        @CustomType.Setter
        public Builder expirationTimeUtc(@Nullable String expirationTimeUtc) {
            this.expirationTimeUtc = expirationTimeUtc;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable EventSubscriptionFilterResponse filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable List<String> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicy(@Nullable RetryPolicyResponse retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetSystemTopicEventSubscriptionResult build() {
            final var o = new GetSystemTopicEventSubscriptionResult();
            o.deadLetterDestination = deadLetterDestination;
            o.deadLetterWithResourceIdentity = deadLetterWithResourceIdentity;
            o.deliveryWithResourceIdentity = deliveryWithResourceIdentity;
            o.destination = destination;
            o.eventDeliverySchema = eventDeliverySchema;
            o.expirationTimeUtc = expirationTimeUtc;
            o.filter = filter;
            o.id = id;
            o.labels = labels;
            o.name = name;
            o.provisioningState = provisioningState;
            o.retryPolicy = retryPolicy;
            o.systemData = systemData;
            o.topic = topic;
            o.type = type;
            return o;
        }
    }
}
