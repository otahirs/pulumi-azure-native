// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class X12DelimiterOverridesResponse {
    /**
     * @return The component separator.
     * 
     */
    private Integer componentSeparator;
    /**
     * @return The data element separator.
     * 
     */
    private Integer dataElementSeparator;
    /**
     * @return The message id.
     * 
     */
    private @Nullable String messageId;
    /**
     * @return The protocol version.
     * 
     */
    private @Nullable String protocolVersion;
    /**
     * @return The replacement character.
     * 
     */
    private Integer replaceCharacter;
    /**
     * @return The value indicating whether to replace separators in payload.
     * 
     */
    private Boolean replaceSeparatorsInPayload;
    /**
     * @return The segment terminator.
     * 
     */
    private Integer segmentTerminator;
    /**
     * @return The segment terminator suffix.
     * 
     */
    private String segmentTerminatorSuffix;
    /**
     * @return The target namespace on which this delimiter settings has to be applied.
     * 
     */
    private @Nullable String targetNamespace;

    private X12DelimiterOverridesResponse() {}
    /**
     * @return The component separator.
     * 
     */
    public Integer componentSeparator() {
        return this.componentSeparator;
    }
    /**
     * @return The data element separator.
     * 
     */
    public Integer dataElementSeparator() {
        return this.dataElementSeparator;
    }
    /**
     * @return The message id.
     * 
     */
    public Optional<String> messageId() {
        return Optional.ofNullable(this.messageId);
    }
    /**
     * @return The protocol version.
     * 
     */
    public Optional<String> protocolVersion() {
        return Optional.ofNullable(this.protocolVersion);
    }
    /**
     * @return The replacement character.
     * 
     */
    public Integer replaceCharacter() {
        return this.replaceCharacter;
    }
    /**
     * @return The value indicating whether to replace separators in payload.
     * 
     */
    public Boolean replaceSeparatorsInPayload() {
        return this.replaceSeparatorsInPayload;
    }
    /**
     * @return The segment terminator.
     * 
     */
    public Integer segmentTerminator() {
        return this.segmentTerminator;
    }
    /**
     * @return The segment terminator suffix.
     * 
     */
    public String segmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }
    /**
     * @return The target namespace on which this delimiter settings has to be applied.
     * 
     */
    public Optional<String> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12DelimiterOverridesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer componentSeparator;
        private Integer dataElementSeparator;
        private @Nullable String messageId;
        private @Nullable String protocolVersion;
        private Integer replaceCharacter;
        private Boolean replaceSeparatorsInPayload;
        private Integer segmentTerminator;
        private String segmentTerminatorSuffix;
        private @Nullable String targetNamespace;
        public Builder() {}
        public Builder(X12DelimiterOverridesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.componentSeparator = defaults.componentSeparator;
    	      this.dataElementSeparator = defaults.dataElementSeparator;
    	      this.messageId = defaults.messageId;
    	      this.protocolVersion = defaults.protocolVersion;
    	      this.replaceCharacter = defaults.replaceCharacter;
    	      this.replaceSeparatorsInPayload = defaults.replaceSeparatorsInPayload;
    	      this.segmentTerminator = defaults.segmentTerminator;
    	      this.segmentTerminatorSuffix = defaults.segmentTerminatorSuffix;
    	      this.targetNamespace = defaults.targetNamespace;
        }

        @CustomType.Setter
        public Builder componentSeparator(Integer componentSeparator) {
            this.componentSeparator = Objects.requireNonNull(componentSeparator);
            return this;
        }
        @CustomType.Setter
        public Builder dataElementSeparator(Integer dataElementSeparator) {
            this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator);
            return this;
        }
        @CustomType.Setter
        public Builder messageId(@Nullable String messageId) {
            this.messageId = messageId;
            return this;
        }
        @CustomType.Setter
        public Builder protocolVersion(@Nullable String protocolVersion) {
            this.protocolVersion = protocolVersion;
            return this;
        }
        @CustomType.Setter
        public Builder replaceCharacter(Integer replaceCharacter) {
            this.replaceCharacter = Objects.requireNonNull(replaceCharacter);
            return this;
        }
        @CustomType.Setter
        public Builder replaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
            this.replaceSeparatorsInPayload = Objects.requireNonNull(replaceSeparatorsInPayload);
            return this;
        }
        @CustomType.Setter
        public Builder segmentTerminator(Integer segmentTerminator) {
            this.segmentTerminator = Objects.requireNonNull(segmentTerminator);
            return this;
        }
        @CustomType.Setter
        public Builder segmentTerminatorSuffix(String segmentTerminatorSuffix) {
            this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix);
            return this;
        }
        @CustomType.Setter
        public Builder targetNamespace(@Nullable String targetNamespace) {
            this.targetNamespace = targetNamespace;
            return this;
        }
        public X12DelimiterOverridesResponse build() {
            final var o = new X12DelimiterOverridesResponse();
            o.componentSeparator = componentSeparator;
            o.dataElementSeparator = dataElementSeparator;
            o.messageId = messageId;
            o.protocolVersion = protocolVersion;
            o.replaceCharacter = replaceCharacter;
            o.replaceSeparatorsInPayload = replaceSeparatorsInPayload;
            o.segmentTerminator = segmentTerminator;
            o.segmentTerminatorSuffix = segmentTerminatorSuffix;
            o.targetNamespace = targetNamespace;
            return o;
        }
    }
}
