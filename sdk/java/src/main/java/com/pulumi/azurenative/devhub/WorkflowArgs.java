// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devhub;

import com.pulumi.azurenative.devhub.inputs.ACRArgs;
import com.pulumi.azurenative.devhub.inputs.DeploymentPropertiesArgs;
import com.pulumi.azurenative.devhub.inputs.GitHubWorkflowProfileOidcCredentialsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowArgs Empty = new WorkflowArgs();

    /**
     * Information on the azure container registry
     * 
     */
    @Import(name="acr")
    private @Nullable Output<ACRArgs> acr;

    /**
     * @return Information on the azure container registry
     * 
     */
    public Optional<Output<ACRArgs>> acr() {
        return Optional.ofNullable(this.acr);
    }

    /**
     * The Azure Kubernetes Cluster Resource the application will be deployed to.
     * 
     */
    @Import(name="aksResourceId")
    private @Nullable Output<String> aksResourceId;

    /**
     * @return The Azure Kubernetes Cluster Resource the application will be deployed to.
     * 
     */
    public Optional<Output<String>> aksResourceId() {
        return Optional.ofNullable(this.aksResourceId);
    }

    /**
     * Repository Branch Name
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return Repository Branch Name
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    @Import(name="deploymentProperties")
    private @Nullable Output<DeploymentPropertiesArgs> deploymentProperties;

    public Optional<Output<DeploymentPropertiesArgs>> deploymentProperties() {
        return Optional.ofNullable(this.deploymentProperties);
    }

    /**
     * Path to Dockerfile Build Context within the repository.
     * 
     */
    @Import(name="dockerBuildContext")
    private @Nullable Output<String> dockerBuildContext;

    /**
     * @return Path to Dockerfile Build Context within the repository.
     * 
     */
    public Optional<Output<String>> dockerBuildContext() {
        return Optional.ofNullable(this.dockerBuildContext);
    }

    /**
     * Path to the Dockerfile within the repository.
     * 
     */
    @Import(name="dockerfile")
    private @Nullable Output<String> dockerfile;

    /**
     * @return Path to the Dockerfile within the repository.
     * 
     */
    public Optional<Output<String>> dockerfile() {
        return Optional.ofNullable(this.dockerfile);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Kubernetes namespace the application is deployed to.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Kubernetes namespace the application is deployed to.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The fields needed for OIDC with GitHub.
     * 
     */
    @Import(name="oidcCredentials")
    private @Nullable Output<GitHubWorkflowProfileOidcCredentialsArgs> oidcCredentials;

    /**
     * @return The fields needed for OIDC with GitHub.
     * 
     */
    public Optional<Output<GitHubWorkflowProfileOidcCredentialsArgs>> oidcCredentials() {
        return Optional.ofNullable(this.oidcCredentials);
    }

    /**
     * Repository Name
     * 
     */
    @Import(name="repositoryName")
    private @Nullable Output<String> repositoryName;

    /**
     * @return Repository Name
     * 
     */
    public Optional<Output<String>> repositoryName() {
        return Optional.ofNullable(this.repositoryName);
    }

    /**
     * Repository Owner
     * 
     */
    @Import(name="repositoryOwner")
    private @Nullable Output<String> repositoryOwner;

    /**
     * @return Repository Owner
     * 
     */
    public Optional<Output<String>> repositoryOwner() {
        return Optional.ofNullable(this.repositoryOwner);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the workflow resource.
     * 
     */
    @Import(name="workflowName")
    private @Nullable Output<String> workflowName;

    /**
     * @return The name of the workflow resource.
     * 
     */
    public Optional<Output<String>> workflowName() {
        return Optional.ofNullable(this.workflowName);
    }

    private WorkflowArgs() {}

    private WorkflowArgs(WorkflowArgs $) {
        this.acr = $.acr;
        this.aksResourceId = $.aksResourceId;
        this.branchName = $.branchName;
        this.deploymentProperties = $.deploymentProperties;
        this.dockerBuildContext = $.dockerBuildContext;
        this.dockerfile = $.dockerfile;
        this.location = $.location;
        this.namespace = $.namespace;
        this.oidcCredentials = $.oidcCredentials;
        this.repositoryName = $.repositoryName;
        this.repositoryOwner = $.repositoryOwner;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.workflowName = $.workflowName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowArgs $;

        public Builder() {
            $ = new WorkflowArgs();
        }

        public Builder(WorkflowArgs defaults) {
            $ = new WorkflowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acr Information on the azure container registry
         * 
         * @return builder
         * 
         */
        public Builder acr(@Nullable Output<ACRArgs> acr) {
            $.acr = acr;
            return this;
        }

        /**
         * @param acr Information on the azure container registry
         * 
         * @return builder
         * 
         */
        public Builder acr(ACRArgs acr) {
            return acr(Output.of(acr));
        }

        /**
         * @param aksResourceId The Azure Kubernetes Cluster Resource the application will be deployed to.
         * 
         * @return builder
         * 
         */
        public Builder aksResourceId(@Nullable Output<String> aksResourceId) {
            $.aksResourceId = aksResourceId;
            return this;
        }

        /**
         * @param aksResourceId The Azure Kubernetes Cluster Resource the application will be deployed to.
         * 
         * @return builder
         * 
         */
        public Builder aksResourceId(String aksResourceId) {
            return aksResourceId(Output.of(aksResourceId));
        }

        /**
         * @param branchName Repository Branch Name
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName Repository Branch Name
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        public Builder deploymentProperties(@Nullable Output<DeploymentPropertiesArgs> deploymentProperties) {
            $.deploymentProperties = deploymentProperties;
            return this;
        }

        public Builder deploymentProperties(DeploymentPropertiesArgs deploymentProperties) {
            return deploymentProperties(Output.of(deploymentProperties));
        }

        /**
         * @param dockerBuildContext Path to Dockerfile Build Context within the repository.
         * 
         * @return builder
         * 
         */
        public Builder dockerBuildContext(@Nullable Output<String> dockerBuildContext) {
            $.dockerBuildContext = dockerBuildContext;
            return this;
        }

        /**
         * @param dockerBuildContext Path to Dockerfile Build Context within the repository.
         * 
         * @return builder
         * 
         */
        public Builder dockerBuildContext(String dockerBuildContext) {
            return dockerBuildContext(Output.of(dockerBuildContext));
        }

        /**
         * @param dockerfile Path to the Dockerfile within the repository.
         * 
         * @return builder
         * 
         */
        public Builder dockerfile(@Nullable Output<String> dockerfile) {
            $.dockerfile = dockerfile;
            return this;
        }

        /**
         * @param dockerfile Path to the Dockerfile within the repository.
         * 
         * @return builder
         * 
         */
        public Builder dockerfile(String dockerfile) {
            return dockerfile(Output.of(dockerfile));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param namespace Kubernetes namespace the application is deployed to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Kubernetes namespace the application is deployed to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param oidcCredentials The fields needed for OIDC with GitHub.
         * 
         * @return builder
         * 
         */
        public Builder oidcCredentials(@Nullable Output<GitHubWorkflowProfileOidcCredentialsArgs> oidcCredentials) {
            $.oidcCredentials = oidcCredentials;
            return this;
        }

        /**
         * @param oidcCredentials The fields needed for OIDC with GitHub.
         * 
         * @return builder
         * 
         */
        public Builder oidcCredentials(GitHubWorkflowProfileOidcCredentialsArgs oidcCredentials) {
            return oidcCredentials(Output.of(oidcCredentials));
        }

        /**
         * @param repositoryName Repository Name
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(@Nullable Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param repositoryName Repository Name
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        /**
         * @param repositoryOwner Repository Owner
         * 
         * @return builder
         * 
         */
        public Builder repositoryOwner(@Nullable Output<String> repositoryOwner) {
            $.repositoryOwner = repositoryOwner;
            return this;
        }

        /**
         * @param repositoryOwner Repository Owner
         * 
         * @return builder
         * 
         */
        public Builder repositoryOwner(String repositoryOwner) {
            return repositoryOwner(Output.of(repositoryOwner));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param workflowName The name of the workflow resource.
         * 
         * @return builder
         * 
         */
        public Builder workflowName(@Nullable Output<String> workflowName) {
            $.workflowName = workflowName;
            return this;
        }

        /**
         * @param workflowName The name of the workflow resource.
         * 
         * @return builder
         * 
         */
        public Builder workflowName(String workflowName) {
            return workflowName(Output.of(workflowName));
        }

        public WorkflowArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
