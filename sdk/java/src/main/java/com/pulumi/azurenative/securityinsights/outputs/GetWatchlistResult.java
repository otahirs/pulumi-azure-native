// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.outputs;

import com.pulumi.azurenative.securityinsights.outputs.SystemDataResponse;
import com.pulumi.azurenative.securityinsights.outputs.WatchlistUserInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWatchlistResult {
    /**
     * @return The content type of the raw content. Example : text/csv or text/tsv
     * 
     */
    private @Nullable String contentType;
    /**
     * @return The time the watchlist was created
     * 
     */
    private @Nullable String created;
    /**
     * @return Describes a user that created the watchlist
     * 
     */
    private @Nullable WatchlistUserInfoResponse createdBy;
    /**
     * @return The default duration of a watchlist (in ISO 8601 duration format)
     * 
     */
    private @Nullable String defaultDuration;
    /**
     * @return A description of the watchlist
     * 
     */
    private @Nullable String description;
    /**
     * @return The display name of the watchlist
     * 
     */
    private String displayName;
    /**
     * @return Etag of the azure resource
     * 
     */
    private @Nullable String etag;
    /**
     * @return Azure resource Id
     * 
     */
    private String id;
    /**
     * @return A flag that indicates if the watchlist is deleted or not
     * 
     */
    private @Nullable Boolean isDeleted;
    /**
     * @return The search key is used to optimize query performance when using watchlists for joins with other data. For example, enable a column with IP addresses to be the designated SearchKey field, then use this field as the key field when joining to other event data by IP address.
     * 
     */
    private String itemsSearchKey;
    /**
     * @return List of labels relevant to this watchlist
     * 
     */
    private @Nullable List<String> labels;
    /**
     * @return Azure resource name
     * 
     */
    private String name;
    /**
     * @return The number of lines in a csv/tsv content to skip before the header
     * 
     */
    private @Nullable Integer numberOfLinesToSkip;
    /**
     * @return The provider of the watchlist
     * 
     */
    private String provider;
    /**
     * @return The raw content that represents to watchlist items to create. In case of csv/tsv content type, it&#39;s the content of the file that will parsed by the endpoint
     * 
     */
    private @Nullable String rawContent;
    /**
     * @return The source of the watchlist
     * 
     */
    private String source;
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return The tenantId where the watchlist belongs to
     * 
     */
    private @Nullable String tenantId;
    /**
     * @return Azure resource type
     * 
     */
    private String type;
    /**
     * @return The last time the watchlist was updated
     * 
     */
    private @Nullable String updated;
    /**
     * @return Describes a user that updated the watchlist
     * 
     */
    private @Nullable WatchlistUserInfoResponse updatedBy;
    /**
     * @return The status of the Watchlist upload : New, InProgress or Complete. Pls note : When a Watchlist upload status is equal to InProgress, the Watchlist cannot be deleted
     * 
     */
    private @Nullable String uploadStatus;
    /**
     * @return The alias of the watchlist
     * 
     */
    private @Nullable String watchlistAlias;
    /**
     * @return The id (a Guid) of the watchlist
     * 
     */
    private @Nullable String watchlistId;
    /**
     * @return The number of Watchlist Items in the Watchlist
     * 
     */
    private @Nullable Integer watchlistItemsCount;
    /**
     * @return The type of the watchlist
     * 
     */
    private @Nullable String watchlistType;

    private GetWatchlistResult() {}
    /**
     * @return The content type of the raw content. Example : text/csv or text/tsv
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return The time the watchlist was created
     * 
     */
    public Optional<String> created() {
        return Optional.ofNullable(this.created);
    }
    /**
     * @return Describes a user that created the watchlist
     * 
     */
    public Optional<WatchlistUserInfoResponse> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return The default duration of a watchlist (in ISO 8601 duration format)
     * 
     */
    public Optional<String> defaultDuration() {
        return Optional.ofNullable(this.defaultDuration);
    }
    /**
     * @return A description of the watchlist
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The display name of the watchlist
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Etag of the azure resource
     * 
     */
    public Optional<String> etag() {
        return Optional.ofNullable(this.etag);
    }
    /**
     * @return Azure resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A flag that indicates if the watchlist is deleted or not
     * 
     */
    public Optional<Boolean> isDeleted() {
        return Optional.ofNullable(this.isDeleted);
    }
    /**
     * @return The search key is used to optimize query performance when using watchlists for joins with other data. For example, enable a column with IP addresses to be the designated SearchKey field, then use this field as the key field when joining to other event data by IP address.
     * 
     */
    public String itemsSearchKey() {
        return this.itemsSearchKey;
    }
    /**
     * @return List of labels relevant to this watchlist
     * 
     */
    public List<String> labels() {
        return this.labels == null ? List.of() : this.labels;
    }
    /**
     * @return Azure resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of lines in a csv/tsv content to skip before the header
     * 
     */
    public Optional<Integer> numberOfLinesToSkip() {
        return Optional.ofNullable(this.numberOfLinesToSkip);
    }
    /**
     * @return The provider of the watchlist
     * 
     */
    public String provider() {
        return this.provider;
    }
    /**
     * @return The raw content that represents to watchlist items to create. In case of csv/tsv content type, it&#39;s the content of the file that will parsed by the endpoint
     * 
     */
    public Optional<String> rawContent() {
        return Optional.ofNullable(this.rawContent);
    }
    /**
     * @return The source of the watchlist
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return The tenantId where the watchlist belongs to
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return Azure resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The last time the watchlist was updated
     * 
     */
    public Optional<String> updated() {
        return Optional.ofNullable(this.updated);
    }
    /**
     * @return Describes a user that updated the watchlist
     * 
     */
    public Optional<WatchlistUserInfoResponse> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }
    /**
     * @return The status of the Watchlist upload : New, InProgress or Complete. Pls note : When a Watchlist upload status is equal to InProgress, the Watchlist cannot be deleted
     * 
     */
    public Optional<String> uploadStatus() {
        return Optional.ofNullable(this.uploadStatus);
    }
    /**
     * @return The alias of the watchlist
     * 
     */
    public Optional<String> watchlistAlias() {
        return Optional.ofNullable(this.watchlistAlias);
    }
    /**
     * @return The id (a Guid) of the watchlist
     * 
     */
    public Optional<String> watchlistId() {
        return Optional.ofNullable(this.watchlistId);
    }
    /**
     * @return The number of Watchlist Items in the Watchlist
     * 
     */
    public Optional<Integer> watchlistItemsCount() {
        return Optional.ofNullable(this.watchlistItemsCount);
    }
    /**
     * @return The type of the watchlist
     * 
     */
    public Optional<String> watchlistType() {
        return Optional.ofNullable(this.watchlistType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWatchlistResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String contentType;
        private @Nullable String created;
        private @Nullable WatchlistUserInfoResponse createdBy;
        private @Nullable String defaultDuration;
        private @Nullable String description;
        private String displayName;
        private @Nullable String etag;
        private String id;
        private @Nullable Boolean isDeleted;
        private String itemsSearchKey;
        private @Nullable List<String> labels;
        private String name;
        private @Nullable Integer numberOfLinesToSkip;
        private String provider;
        private @Nullable String rawContent;
        private String source;
        private SystemDataResponse systemData;
        private @Nullable String tenantId;
        private String type;
        private @Nullable String updated;
        private @Nullable WatchlistUserInfoResponse updatedBy;
        private @Nullable String uploadStatus;
        private @Nullable String watchlistAlias;
        private @Nullable String watchlistId;
        private @Nullable Integer watchlistItemsCount;
        private @Nullable String watchlistType;
        public Builder() {}
        public Builder(GetWatchlistResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.created = defaults.created;
    	      this.createdBy = defaults.createdBy;
    	      this.defaultDuration = defaults.defaultDuration;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.isDeleted = defaults.isDeleted;
    	      this.itemsSearchKey = defaults.itemsSearchKey;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.numberOfLinesToSkip = defaults.numberOfLinesToSkip;
    	      this.provider = defaults.provider;
    	      this.rawContent = defaults.rawContent;
    	      this.source = defaults.source;
    	      this.systemData = defaults.systemData;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
    	      this.updated = defaults.updated;
    	      this.updatedBy = defaults.updatedBy;
    	      this.uploadStatus = defaults.uploadStatus;
    	      this.watchlistAlias = defaults.watchlistAlias;
    	      this.watchlistId = defaults.watchlistId;
    	      this.watchlistItemsCount = defaults.watchlistItemsCount;
    	      this.watchlistType = defaults.watchlistType;
        }

        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder created(@Nullable String created) {
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable WatchlistUserInfoResponse createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDuration(@Nullable String defaultDuration) {
            this.defaultDuration = defaultDuration;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder etag(@Nullable String etag) {
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDeleted(@Nullable Boolean isDeleted) {
            this.isDeleted = isDeleted;
            return this;
        }
        @CustomType.Setter
        public Builder itemsSearchKey(String itemsSearchKey) {
            this.itemsSearchKey = Objects.requireNonNull(itemsSearchKey);
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable List<String> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfLinesToSkip(@Nullable Integer numberOfLinesToSkip) {
            this.numberOfLinesToSkip = numberOfLinesToSkip;
            return this;
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            this.provider = Objects.requireNonNull(provider);
            return this;
        }
        @CustomType.Setter
        public Builder rawContent(@Nullable String rawContent) {
            this.rawContent = rawContent;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder updated(@Nullable String updated) {
            this.updated = updated;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(@Nullable WatchlistUserInfoResponse updatedBy) {
            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder uploadStatus(@Nullable String uploadStatus) {
            this.uploadStatus = uploadStatus;
            return this;
        }
        @CustomType.Setter
        public Builder watchlistAlias(@Nullable String watchlistAlias) {
            this.watchlistAlias = watchlistAlias;
            return this;
        }
        @CustomType.Setter
        public Builder watchlistId(@Nullable String watchlistId) {
            this.watchlistId = watchlistId;
            return this;
        }
        @CustomType.Setter
        public Builder watchlistItemsCount(@Nullable Integer watchlistItemsCount) {
            this.watchlistItemsCount = watchlistItemsCount;
            return this;
        }
        @CustomType.Setter
        public Builder watchlistType(@Nullable String watchlistType) {
            this.watchlistType = watchlistType;
            return this;
        }
        public GetWatchlistResult build() {
            final var o = new GetWatchlistResult();
            o.contentType = contentType;
            o.created = created;
            o.createdBy = createdBy;
            o.defaultDuration = defaultDuration;
            o.description = description;
            o.displayName = displayName;
            o.etag = etag;
            o.id = id;
            o.isDeleted = isDeleted;
            o.itemsSearchKey = itemsSearchKey;
            o.labels = labels;
            o.name = name;
            o.numberOfLinesToSkip = numberOfLinesToSkip;
            o.provider = provider;
            o.rawContent = rawContent;
            o.source = source;
            o.systemData = systemData;
            o.tenantId = tenantId;
            o.type = type;
            o.updated = updated;
            o.updatedBy = updatedBy;
            o.uploadStatus = uploadStatus;
            o.watchlistAlias = watchlistAlias;
            o.watchlistId = watchlistId;
            o.watchlistItemsCount = watchlistItemsCount;
            o.watchlistType = watchlistType;
            return o;
        }
    }
}
