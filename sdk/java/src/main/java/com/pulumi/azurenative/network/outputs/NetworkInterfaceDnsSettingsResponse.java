// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkInterfaceDnsSettingsResponse {
    /**
     * @return If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
     * 
     */
    private List<String> appliedDnsServers;
    /**
     * @return List of DNS servers IP addresses. Use &#39;AzureProvidedDNS&#39; to switch to azure provided DNS resolution. &#39;AzureProvidedDNS&#39; value cannot be combined with other IPs, it must be the only value in dnsServers collection.
     * 
     */
    private @Nullable List<String> dnsServers;
    /**
     * @return Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
     * 
     */
    private @Nullable String internalDnsNameLabel;
    /**
     * @return Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
     * 
     */
    private String internalDomainNameSuffix;
    /**
     * @return Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
     * 
     */
    private String internalFqdn;

    private NetworkInterfaceDnsSettingsResponse() {}
    /**
     * @return If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
     * 
     */
    public List<String> appliedDnsServers() {
        return this.appliedDnsServers;
    }
    /**
     * @return List of DNS servers IP addresses. Use &#39;AzureProvidedDNS&#39; to switch to azure provided DNS resolution. &#39;AzureProvidedDNS&#39; value cannot be combined with other IPs, it must be the only value in dnsServers collection.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers == null ? List.of() : this.dnsServers;
    }
    /**
     * @return Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
     * 
     */
    public Optional<String> internalDnsNameLabel() {
        return Optional.ofNullable(this.internalDnsNameLabel);
    }
    /**
     * @return Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
     * 
     */
    public String internalDomainNameSuffix() {
        return this.internalDomainNameSuffix;
    }
    /**
     * @return Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
     * 
     */
    public String internalFqdn() {
        return this.internalFqdn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceDnsSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> appliedDnsServers;
        private @Nullable List<String> dnsServers;
        private @Nullable String internalDnsNameLabel;
        private String internalDomainNameSuffix;
        private String internalFqdn;
        public Builder() {}
        public Builder(NetworkInterfaceDnsSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliedDnsServers = defaults.appliedDnsServers;
    	      this.dnsServers = defaults.dnsServers;
    	      this.internalDnsNameLabel = defaults.internalDnsNameLabel;
    	      this.internalDomainNameSuffix = defaults.internalDomainNameSuffix;
    	      this.internalFqdn = defaults.internalFqdn;
        }

        @CustomType.Setter
        public Builder appliedDnsServers(List<String> appliedDnsServers) {
            this.appliedDnsServers = Objects.requireNonNull(appliedDnsServers);
            return this;
        }
        public Builder appliedDnsServers(String... appliedDnsServers) {
            return appliedDnsServers(List.of(appliedDnsServers));
        }
        @CustomType.Setter
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder internalDnsNameLabel(@Nullable String internalDnsNameLabel) {
            this.internalDnsNameLabel = internalDnsNameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder internalDomainNameSuffix(String internalDomainNameSuffix) {
            this.internalDomainNameSuffix = Objects.requireNonNull(internalDomainNameSuffix);
            return this;
        }
        @CustomType.Setter
        public Builder internalFqdn(String internalFqdn) {
            this.internalFqdn = Objects.requireNonNull(internalFqdn);
            return this;
        }
        public NetworkInterfaceDnsSettingsResponse build() {
            final var o = new NetworkInterfaceDnsSettingsResponse();
            o.appliedDnsServers = appliedDnsServers;
            o.dnsServers = dnsServers;
            o.internalDnsNameLabel = internalDnsNameLabel;
            o.internalDomainNameSuffix = internalDomainNameSuffix;
            o.internalFqdn = internalFqdn;
            return o;
        }
    }
}
