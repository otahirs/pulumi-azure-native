// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.outputs;

import com.pulumi.azurenative.storagecache.outputs.CacheDirectorySettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheEncryptionSettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheHealthResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheIdentityResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheNetworkSettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheResponseSku;
import com.pulumi.azurenative.storagecache.outputs.CacheSecuritySettingsResponse;
import com.pulumi.azurenative.storagecache.outputs.CacheUpgradeStatusResponse;
import com.pulumi.azurenative.storagecache.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCacheResult {
    /**
     * @return The size of this Cache, in GB.
     * 
     */
    private @Nullable Integer cacheSizeGB;
    /**
     * @return Specifies Directory Services settings of the cache.
     * 
     */
    private @Nullable CacheDirectorySettingsResponse directoryServicesSettings;
    /**
     * @return Specifies encryption settings of the cache.
     * 
     */
    private @Nullable CacheEncryptionSettingsResponse encryptionSettings;
    /**
     * @return Health of the Cache.
     * 
     */
    private CacheHealthResponse health;
    /**
     * @return Resource ID of the Cache.
     * 
     */
    private String id;
    /**
     * @return The identity of the cache, if configured.
     * 
     */
    private @Nullable CacheIdentityResponse identity;
    /**
     * @return Region name string.
     * 
     */
    private @Nullable String location;
    /**
     * @return Array of IP addresses that can be used by clients mounting this Cache.
     * 
     */
    private List<String> mountAddresses;
    /**
     * @return Name of Cache.
     * 
     */
    private String name;
    /**
     * @return Specifies network settings of the cache.
     * 
     */
    private @Nullable CacheNetworkSettingsResponse networkSettings;
    /**
     * @return ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return Specifies security settings of the cache.
     * 
     */
    private @Nullable CacheSecuritySettingsResponse securitySettings;
    /**
     * @return SKU for the Cache.
     * 
     */
    private @Nullable CacheResponseSku sku;
    /**
     * @return Subnet used for the Cache.
     * 
     */
    private @Nullable String subnet;
    /**
     * @return The system meta data relating to this resource.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Type of the Cache; Microsoft.StorageCache/Cache
     * 
     */
    private String type;
    /**
     * @return Upgrade status of the Cache.
     * 
     */
    private @Nullable CacheUpgradeStatusResponse upgradeStatus;

    private GetCacheResult() {}
    /**
     * @return The size of this Cache, in GB.
     * 
     */
    public Optional<Integer> cacheSizeGB() {
        return Optional.ofNullable(this.cacheSizeGB);
    }
    /**
     * @return Specifies Directory Services settings of the cache.
     * 
     */
    public Optional<CacheDirectorySettingsResponse> directoryServicesSettings() {
        return Optional.ofNullable(this.directoryServicesSettings);
    }
    /**
     * @return Specifies encryption settings of the cache.
     * 
     */
    public Optional<CacheEncryptionSettingsResponse> encryptionSettings() {
        return Optional.ofNullable(this.encryptionSettings);
    }
    /**
     * @return Health of the Cache.
     * 
     */
    public CacheHealthResponse health() {
        return this.health;
    }
    /**
     * @return Resource ID of the Cache.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The identity of the cache, if configured.
     * 
     */
    public Optional<CacheIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Region name string.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Array of IP addresses that can be used by clients mounting this Cache.
     * 
     */
    public List<String> mountAddresses() {
        return this.mountAddresses;
    }
    /**
     * @return Name of Cache.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies network settings of the cache.
     * 
     */
    public Optional<CacheNetworkSettingsResponse> networkSettings() {
        return Optional.ofNullable(this.networkSettings);
    }
    /**
     * @return ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return Specifies security settings of the cache.
     * 
     */
    public Optional<CacheSecuritySettingsResponse> securitySettings() {
        return Optional.ofNullable(this.securitySettings);
    }
    /**
     * @return SKU for the Cache.
     * 
     */
    public Optional<CacheResponseSku> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Subnet used for the Cache.
     * 
     */
    public Optional<String> subnet() {
        return Optional.ofNullable(this.subnet);
    }
    /**
     * @return The system meta data relating to this resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Type of the Cache; Microsoft.StorageCache/Cache
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Upgrade status of the Cache.
     * 
     */
    public Optional<CacheUpgradeStatusResponse> upgradeStatus() {
        return Optional.ofNullable(this.upgradeStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCacheResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer cacheSizeGB;
        private @Nullable CacheDirectorySettingsResponse directoryServicesSettings;
        private @Nullable CacheEncryptionSettingsResponse encryptionSettings;
        private CacheHealthResponse health;
        private String id;
        private @Nullable CacheIdentityResponse identity;
        private @Nullable String location;
        private List<String> mountAddresses;
        private String name;
        private @Nullable CacheNetworkSettingsResponse networkSettings;
        private @Nullable String provisioningState;
        private @Nullable CacheSecuritySettingsResponse securitySettings;
        private @Nullable CacheResponseSku sku;
        private @Nullable String subnet;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable CacheUpgradeStatusResponse upgradeStatus;
        public Builder() {}
        public Builder(GetCacheResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheSizeGB = defaults.cacheSizeGB;
    	      this.directoryServicesSettings = defaults.directoryServicesSettings;
    	      this.encryptionSettings = defaults.encryptionSettings;
    	      this.health = defaults.health;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.mountAddresses = defaults.mountAddresses;
    	      this.name = defaults.name;
    	      this.networkSettings = defaults.networkSettings;
    	      this.provisioningState = defaults.provisioningState;
    	      this.securitySettings = defaults.securitySettings;
    	      this.sku = defaults.sku;
    	      this.subnet = defaults.subnet;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.upgradeStatus = defaults.upgradeStatus;
        }

        @CustomType.Setter
        public Builder cacheSizeGB(@Nullable Integer cacheSizeGB) {
            this.cacheSizeGB = cacheSizeGB;
            return this;
        }
        @CustomType.Setter
        public Builder directoryServicesSettings(@Nullable CacheDirectorySettingsResponse directoryServicesSettings) {
            this.directoryServicesSettings = directoryServicesSettings;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionSettings(@Nullable CacheEncryptionSettingsResponse encryptionSettings) {
            this.encryptionSettings = encryptionSettings;
            return this;
        }
        @CustomType.Setter
        public Builder health(CacheHealthResponse health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable CacheIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder mountAddresses(List<String> mountAddresses) {
            this.mountAddresses = Objects.requireNonNull(mountAddresses);
            return this;
        }
        public Builder mountAddresses(String... mountAddresses) {
            return mountAddresses(List.of(mountAddresses));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkSettings(@Nullable CacheNetworkSettingsResponse networkSettings) {
            this.networkSettings = networkSettings;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder securitySettings(@Nullable CacheSecuritySettingsResponse securitySettings) {
            this.securitySettings = securitySettings;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable CacheResponseSku sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(@Nullable String subnet) {
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeStatus(@Nullable CacheUpgradeStatusResponse upgradeStatus) {
            this.upgradeStatus = upgradeStatus;
            return this;
        }
        public GetCacheResult build() {
            final var o = new GetCacheResult();
            o.cacheSizeGB = cacheSizeGB;
            o.directoryServicesSettings = directoryServicesSettings;
            o.encryptionSettings = encryptionSettings;
            o.health = health;
            o.id = id;
            o.identity = identity;
            o.location = location;
            o.mountAddresses = mountAddresses;
            o.name = name;
            o.networkSettings = networkSettings;
            o.provisioningState = provisioningState;
            o.securitySettings = securitySettings;
            o.sku = sku;
            o.subnet = subnet;
            o.systemData = systemData;
            o.tags = tags;
            o.type = type;
            o.upgradeStatus = upgradeStatus;
            return o;
        }
    }
}
