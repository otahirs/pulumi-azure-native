// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AmazonS3CompatibleLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.AmazonS3LocationResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureBlobFSLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureBlobStorageLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureDataLakeStoreLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.AzureFileStorageLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.DatasetCompressionResponse;
import com.pulumi.azurenative.datafactory.outputs.DatasetResponseFolder;
import com.pulumi.azurenative.datafactory.outputs.FileServerLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.FtpServerLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.GoogleCloudStorageLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.HdfsLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.HttpServerLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.OracleCloudStorageLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.SftpLocationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExcelDatasetResponse {
    /**
     * @return List of tags that can be used for describing the Dataset.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return The data compression method used for the json dataset.
     * 
     */
    private @Nullable DatasetCompressionResponse compression;
    /**
     * @return Dataset description.
     * 
     */
    private @Nullable String description;
    /**
     * @return When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private @Nullable Object firstRowAsHeader;
    /**
     * @return The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    private @Nullable DatasetResponseFolder folder;
    /**
     * @return Linked service reference.
     * 
     */
    private LinkedServiceReferenceResponse linkedServiceName;
    /**
     * @return The location of the excel storage.
     * 
     */
    private Object location;
    /**
     * @return The null value string. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object nullValue;
    /**
     * @return Parameters for dataset.
     * 
     */
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;
    /**
     * @return The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object range;
    /**
     * @return Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    private @Nullable Object schema;
    /**
     * @return The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
     * 
     */
    private @Nullable Object sheetIndex;
    /**
     * @return The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object sheetName;
    /**
     * @return Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    private @Nullable Object structure;
    /**
     * @return Type of dataset.
     * Expected value is &#39;Excel&#39;.
     * 
     */
    private String type;

    private ExcelDatasetResponse() {}
    /**
     * @return List of tags that can be used for describing the Dataset.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return The data compression method used for the json dataset.
     * 
     */
    public Optional<DatasetCompressionResponse> compression() {
        return Optional.ofNullable(this.compression);
    }
    /**
     * @return Dataset description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> firstRowAsHeader() {
        return Optional.ofNullable(this.firstRowAsHeader);
    }
    /**
     * @return The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    public Optional<DatasetResponseFolder> folder() {
        return Optional.ofNullable(this.folder);
    }
    /**
     * @return Linked service reference.
     * 
     */
    public LinkedServiceReferenceResponse linkedServiceName() {
        return this.linkedServiceName;
    }
    /**
     * @return The location of the excel storage.
     * 
     */
    public Object location() {
        return this.location;
    }
    /**
     * @return The null value string. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> nullValue() {
        return Optional.ofNullable(this.nullValue);
    }
    /**
     * @return Parameters for dataset.
     * 
     */
    public Map<String,ParameterSpecificationResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> range() {
        return Optional.ofNullable(this.range);
    }
    /**
     * @return Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    public Optional<Object> schema() {
        return Optional.ofNullable(this.schema);
    }
    /**
     * @return The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
     * 
     */
    public Optional<Object> sheetIndex() {
        return Optional.ofNullable(this.sheetIndex);
    }
    /**
     * @return The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sheetName() {
        return Optional.ofNullable(this.sheetName);
    }
    /**
     * @return Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    public Optional<Object> structure() {
        return Optional.ofNullable(this.structure);
    }
    /**
     * @return Type of dataset.
     * Expected value is &#39;Excel&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExcelDatasetResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable DatasetCompressionResponse compression;
        private @Nullable String description;
        private @Nullable Object firstRowAsHeader;
        private @Nullable DatasetResponseFolder folder;
        private LinkedServiceReferenceResponse linkedServiceName;
        private Object location;
        private @Nullable Object nullValue;
        private @Nullable Map<String,ParameterSpecificationResponse> parameters;
        private @Nullable Object range;
        private @Nullable Object schema;
        private @Nullable Object sheetIndex;
        private @Nullable Object sheetName;
        private @Nullable Object structure;
        private String type;
        public Builder() {}
        public Builder(ExcelDatasetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.compression = defaults.compression;
    	      this.description = defaults.description;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.folder = defaults.folder;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.location = defaults.location;
    	      this.nullValue = defaults.nullValue;
    	      this.parameters = defaults.parameters;
    	      this.range = defaults.range;
    	      this.schema = defaults.schema;
    	      this.sheetIndex = defaults.sheetIndex;
    	      this.sheetName = defaults.sheetName;
    	      this.structure = defaults.structure;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder compression(@Nullable DatasetCompressionResponse compression) {
            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }
        @CustomType.Setter
        public Builder folder(@Nullable DatasetResponseFolder folder) {
            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder linkedServiceName(LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = Objects.requireNonNull(linkedServiceName);
            return this;
        }
        @CustomType.Setter
        public Builder location(Object location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder nullValue(@Nullable Object nullValue) {
            this.nullValue = nullValue;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder range(@Nullable Object range) {
            this.range = range;
            return this;
        }
        @CustomType.Setter
        public Builder schema(@Nullable Object schema) {
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder sheetIndex(@Nullable Object sheetIndex) {
            this.sheetIndex = sheetIndex;
            return this;
        }
        @CustomType.Setter
        public Builder sheetName(@Nullable Object sheetName) {
            this.sheetName = sheetName;
            return this;
        }
        @CustomType.Setter
        public Builder structure(@Nullable Object structure) {
            this.structure = structure;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ExcelDatasetResponse build() {
            final var o = new ExcelDatasetResponse();
            o.annotations = annotations;
            o.compression = compression;
            o.description = description;
            o.firstRowAsHeader = firstRowAsHeader;
            o.folder = folder;
            o.linkedServiceName = linkedServiceName;
            o.location = location;
            o.nullValue = nullValue;
            o.parameters = parameters;
            o.range = range;
            o.schema = schema;
            o.sheetIndex = sheetIndex;
            o.sheetName = sheetName;
            o.structure = structure;
            o.type = type;
            return o;
        }
    }
}
