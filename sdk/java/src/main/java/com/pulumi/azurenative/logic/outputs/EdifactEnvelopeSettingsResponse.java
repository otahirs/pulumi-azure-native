// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EdifactEnvelopeSettingsResponse {
    /**
     * @return The application reference id.
     * 
     */
    private @Nullable String applicationReferenceId;
    /**
     * @return The value indicating whether to apply delimiter string advice.
     * 
     */
    private Boolean applyDelimiterStringAdvice;
    /**
     * @return The communication agreement id.
     * 
     */
    private @Nullable String communicationAgreementId;
    /**
     * @return The value indicating whether to create grouping segments.
     * 
     */
    private Boolean createGroupingSegments;
    /**
     * @return The value indicating whether to enable default group headers.
     * 
     */
    private Boolean enableDefaultGroupHeaders;
    /**
     * @return The functional group id.
     * 
     */
    private @Nullable String functionalGroupId;
    /**
     * @return The group application password.
     * 
     */
    private @Nullable String groupApplicationPassword;
    /**
     * @return The group application receiver id.
     * 
     */
    private @Nullable String groupApplicationReceiverId;
    /**
     * @return The group application receiver qualifier.
     * 
     */
    private @Nullable String groupApplicationReceiverQualifier;
    /**
     * @return The group application sender id.
     * 
     */
    private @Nullable String groupApplicationSenderId;
    /**
     * @return The group application sender qualifier.
     * 
     */
    private @Nullable String groupApplicationSenderQualifier;
    /**
     * @return The group association assigned code.
     * 
     */
    private @Nullable String groupAssociationAssignedCode;
    /**
     * @return The group control number lower bound.
     * 
     */
    private Double groupControlNumberLowerBound;
    /**
     * @return The group control number prefix.
     * 
     */
    private @Nullable String groupControlNumberPrefix;
    /**
     * @return The group control number suffix.
     * 
     */
    private @Nullable String groupControlNumberSuffix;
    /**
     * @return The group control number upper bound.
     * 
     */
    private Double groupControlNumberUpperBound;
    /**
     * @return The group controlling agency code.
     * 
     */
    private @Nullable String groupControllingAgencyCode;
    /**
     * @return The group message release.
     * 
     */
    private @Nullable String groupMessageRelease;
    /**
     * @return The group message version.
     * 
     */
    private @Nullable String groupMessageVersion;
    /**
     * @return The interchange control number lower bound.
     * 
     */
    private Double interchangeControlNumberLowerBound;
    /**
     * @return The interchange control number prefix.
     * 
     */
    private @Nullable String interchangeControlNumberPrefix;
    /**
     * @return The interchange control number suffix.
     * 
     */
    private @Nullable String interchangeControlNumberSuffix;
    /**
     * @return The interchange control number upper bound.
     * 
     */
    private Double interchangeControlNumberUpperBound;
    /**
     * @return The value indicating whether the message is a test interchange.
     * 
     */
    private Boolean isTestInterchange;
    /**
     * @return The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    private Boolean overwriteExistingTransactionSetControlNumber;
    /**
     * @return The processing priority code.
     * 
     */
    private @Nullable String processingPriorityCode;
    /**
     * @return The receiver internal identification.
     * 
     */
    private @Nullable String receiverInternalIdentification;
    /**
     * @return The receiver internal sub identification.
     * 
     */
    private @Nullable String receiverInternalSubIdentification;
    /**
     * @return The receiver reverse routing address.
     * 
     */
    private @Nullable String receiverReverseRoutingAddress;
    /**
     * @return The recipient reference password qualifier.
     * 
     */
    private @Nullable String recipientReferencePasswordQualifier;
    /**
     * @return The recipient reference password value.
     * 
     */
    private @Nullable String recipientReferencePasswordValue;
    /**
     * @return The value indicating whether to rollover group control number.
     * 
     */
    private Boolean rolloverGroupControlNumber;
    /**
     * @return The value indicating whether to rollover interchange control number.
     * 
     */
    private Boolean rolloverInterchangeControlNumber;
    /**
     * @return The value indicating whether to rollover transaction set control number.
     * 
     */
    private Boolean rolloverTransactionSetControlNumber;
    /**
     * @return The sender internal identification.
     * 
     */
    private @Nullable String senderInternalIdentification;
    /**
     * @return The sender internal sub identification.
     * 
     */
    private @Nullable String senderInternalSubIdentification;
    /**
     * @return The sender reverse routing address.
     * 
     */
    private @Nullable String senderReverseRoutingAddress;
    /**
     * @return The transaction set control number lower bound.
     * 
     */
    private Double transactionSetControlNumberLowerBound;
    /**
     * @return The transaction set control number prefix.
     * 
     */
    private @Nullable String transactionSetControlNumberPrefix;
    /**
     * @return The transaction set control number suffix.
     * 
     */
    private @Nullable String transactionSetControlNumberSuffix;
    /**
     * @return The transaction set control number upper bound.
     * 
     */
    private Double transactionSetControlNumberUpperBound;

    private EdifactEnvelopeSettingsResponse() {}
    /**
     * @return The application reference id.
     * 
     */
    public Optional<String> applicationReferenceId() {
        return Optional.ofNullable(this.applicationReferenceId);
    }
    /**
     * @return The value indicating whether to apply delimiter string advice.
     * 
     */
    public Boolean applyDelimiterStringAdvice() {
        return this.applyDelimiterStringAdvice;
    }
    /**
     * @return The communication agreement id.
     * 
     */
    public Optional<String> communicationAgreementId() {
        return Optional.ofNullable(this.communicationAgreementId);
    }
    /**
     * @return The value indicating whether to create grouping segments.
     * 
     */
    public Boolean createGroupingSegments() {
        return this.createGroupingSegments;
    }
    /**
     * @return The value indicating whether to enable default group headers.
     * 
     */
    public Boolean enableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }
    /**
     * @return The functional group id.
     * 
     */
    public Optional<String> functionalGroupId() {
        return Optional.ofNullable(this.functionalGroupId);
    }
    /**
     * @return The group application password.
     * 
     */
    public Optional<String> groupApplicationPassword() {
        return Optional.ofNullable(this.groupApplicationPassword);
    }
    /**
     * @return The group application receiver id.
     * 
     */
    public Optional<String> groupApplicationReceiverId() {
        return Optional.ofNullable(this.groupApplicationReceiverId);
    }
    /**
     * @return The group application receiver qualifier.
     * 
     */
    public Optional<String> groupApplicationReceiverQualifier() {
        return Optional.ofNullable(this.groupApplicationReceiverQualifier);
    }
    /**
     * @return The group application sender id.
     * 
     */
    public Optional<String> groupApplicationSenderId() {
        return Optional.ofNullable(this.groupApplicationSenderId);
    }
    /**
     * @return The group application sender qualifier.
     * 
     */
    public Optional<String> groupApplicationSenderQualifier() {
        return Optional.ofNullable(this.groupApplicationSenderQualifier);
    }
    /**
     * @return The group association assigned code.
     * 
     */
    public Optional<String> groupAssociationAssignedCode() {
        return Optional.ofNullable(this.groupAssociationAssignedCode);
    }
    /**
     * @return The group control number lower bound.
     * 
     */
    public Double groupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }
    /**
     * @return The group control number prefix.
     * 
     */
    public Optional<String> groupControlNumberPrefix() {
        return Optional.ofNullable(this.groupControlNumberPrefix);
    }
    /**
     * @return The group control number suffix.
     * 
     */
    public Optional<String> groupControlNumberSuffix() {
        return Optional.ofNullable(this.groupControlNumberSuffix);
    }
    /**
     * @return The group control number upper bound.
     * 
     */
    public Double groupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }
    /**
     * @return The group controlling agency code.
     * 
     */
    public Optional<String> groupControllingAgencyCode() {
        return Optional.ofNullable(this.groupControllingAgencyCode);
    }
    /**
     * @return The group message release.
     * 
     */
    public Optional<String> groupMessageRelease() {
        return Optional.ofNullable(this.groupMessageRelease);
    }
    /**
     * @return The group message version.
     * 
     */
    public Optional<String> groupMessageVersion() {
        return Optional.ofNullable(this.groupMessageVersion);
    }
    /**
     * @return The interchange control number lower bound.
     * 
     */
    public Double interchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }
    /**
     * @return The interchange control number prefix.
     * 
     */
    public Optional<String> interchangeControlNumberPrefix() {
        return Optional.ofNullable(this.interchangeControlNumberPrefix);
    }
    /**
     * @return The interchange control number suffix.
     * 
     */
    public Optional<String> interchangeControlNumberSuffix() {
        return Optional.ofNullable(this.interchangeControlNumberSuffix);
    }
    /**
     * @return The interchange control number upper bound.
     * 
     */
    public Double interchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }
    /**
     * @return The value indicating whether the message is a test interchange.
     * 
     */
    public Boolean isTestInterchange() {
        return this.isTestInterchange;
    }
    /**
     * @return The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    public Boolean overwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }
    /**
     * @return The processing priority code.
     * 
     */
    public Optional<String> processingPriorityCode() {
        return Optional.ofNullable(this.processingPriorityCode);
    }
    /**
     * @return The receiver internal identification.
     * 
     */
    public Optional<String> receiverInternalIdentification() {
        return Optional.ofNullable(this.receiverInternalIdentification);
    }
    /**
     * @return The receiver internal sub identification.
     * 
     */
    public Optional<String> receiverInternalSubIdentification() {
        return Optional.ofNullable(this.receiverInternalSubIdentification);
    }
    /**
     * @return The receiver reverse routing address.
     * 
     */
    public Optional<String> receiverReverseRoutingAddress() {
        return Optional.ofNullable(this.receiverReverseRoutingAddress);
    }
    /**
     * @return The recipient reference password qualifier.
     * 
     */
    public Optional<String> recipientReferencePasswordQualifier() {
        return Optional.ofNullable(this.recipientReferencePasswordQualifier);
    }
    /**
     * @return The recipient reference password value.
     * 
     */
    public Optional<String> recipientReferencePasswordValue() {
        return Optional.ofNullable(this.recipientReferencePasswordValue);
    }
    /**
     * @return The value indicating whether to rollover group control number.
     * 
     */
    public Boolean rolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }
    /**
     * @return The value indicating whether to rollover interchange control number.
     * 
     */
    public Boolean rolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }
    /**
     * @return The value indicating whether to rollover transaction set control number.
     * 
     */
    public Boolean rolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }
    /**
     * @return The sender internal identification.
     * 
     */
    public Optional<String> senderInternalIdentification() {
        return Optional.ofNullable(this.senderInternalIdentification);
    }
    /**
     * @return The sender internal sub identification.
     * 
     */
    public Optional<String> senderInternalSubIdentification() {
        return Optional.ofNullable(this.senderInternalSubIdentification);
    }
    /**
     * @return The sender reverse routing address.
     * 
     */
    public Optional<String> senderReverseRoutingAddress() {
        return Optional.ofNullable(this.senderReverseRoutingAddress);
    }
    /**
     * @return The transaction set control number lower bound.
     * 
     */
    public Double transactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }
    /**
     * @return The transaction set control number prefix.
     * 
     */
    public Optional<String> transactionSetControlNumberPrefix() {
        return Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }
    /**
     * @return The transaction set control number suffix.
     * 
     */
    public Optional<String> transactionSetControlNumberSuffix() {
        return Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }
    /**
     * @return The transaction set control number upper bound.
     * 
     */
    public Double transactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactEnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationReferenceId;
        private Boolean applyDelimiterStringAdvice;
        private @Nullable String communicationAgreementId;
        private Boolean createGroupingSegments;
        private Boolean enableDefaultGroupHeaders;
        private @Nullable String functionalGroupId;
        private @Nullable String groupApplicationPassword;
        private @Nullable String groupApplicationReceiverId;
        private @Nullable String groupApplicationReceiverQualifier;
        private @Nullable String groupApplicationSenderId;
        private @Nullable String groupApplicationSenderQualifier;
        private @Nullable String groupAssociationAssignedCode;
        private Double groupControlNumberLowerBound;
        private @Nullable String groupControlNumberPrefix;
        private @Nullable String groupControlNumberSuffix;
        private Double groupControlNumberUpperBound;
        private @Nullable String groupControllingAgencyCode;
        private @Nullable String groupMessageRelease;
        private @Nullable String groupMessageVersion;
        private Double interchangeControlNumberLowerBound;
        private @Nullable String interchangeControlNumberPrefix;
        private @Nullable String interchangeControlNumberSuffix;
        private Double interchangeControlNumberUpperBound;
        private Boolean isTestInterchange;
        private Boolean overwriteExistingTransactionSetControlNumber;
        private @Nullable String processingPriorityCode;
        private @Nullable String receiverInternalIdentification;
        private @Nullable String receiverInternalSubIdentification;
        private @Nullable String receiverReverseRoutingAddress;
        private @Nullable String recipientReferencePasswordQualifier;
        private @Nullable String recipientReferencePasswordValue;
        private Boolean rolloverGroupControlNumber;
        private Boolean rolloverInterchangeControlNumber;
        private Boolean rolloverTransactionSetControlNumber;
        private @Nullable String senderInternalIdentification;
        private @Nullable String senderInternalSubIdentification;
        private @Nullable String senderReverseRoutingAddress;
        private Double transactionSetControlNumberLowerBound;
        private @Nullable String transactionSetControlNumberPrefix;
        private @Nullable String transactionSetControlNumberSuffix;
        private Double transactionSetControlNumberUpperBound;
        public Builder() {}
        public Builder(EdifactEnvelopeSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReferenceId = defaults.applicationReferenceId;
    	      this.applyDelimiterStringAdvice = defaults.applyDelimiterStringAdvice;
    	      this.communicationAgreementId = defaults.communicationAgreementId;
    	      this.createGroupingSegments = defaults.createGroupingSegments;
    	      this.enableDefaultGroupHeaders = defaults.enableDefaultGroupHeaders;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupApplicationPassword = defaults.groupApplicationPassword;
    	      this.groupApplicationReceiverId = defaults.groupApplicationReceiverId;
    	      this.groupApplicationReceiverQualifier = defaults.groupApplicationReceiverQualifier;
    	      this.groupApplicationSenderId = defaults.groupApplicationSenderId;
    	      this.groupApplicationSenderQualifier = defaults.groupApplicationSenderQualifier;
    	      this.groupAssociationAssignedCode = defaults.groupAssociationAssignedCode;
    	      this.groupControlNumberLowerBound = defaults.groupControlNumberLowerBound;
    	      this.groupControlNumberPrefix = defaults.groupControlNumberPrefix;
    	      this.groupControlNumberSuffix = defaults.groupControlNumberSuffix;
    	      this.groupControlNumberUpperBound = defaults.groupControlNumberUpperBound;
    	      this.groupControllingAgencyCode = defaults.groupControllingAgencyCode;
    	      this.groupMessageRelease = defaults.groupMessageRelease;
    	      this.groupMessageVersion = defaults.groupMessageVersion;
    	      this.interchangeControlNumberLowerBound = defaults.interchangeControlNumberLowerBound;
    	      this.interchangeControlNumberPrefix = defaults.interchangeControlNumberPrefix;
    	      this.interchangeControlNumberSuffix = defaults.interchangeControlNumberSuffix;
    	      this.interchangeControlNumberUpperBound = defaults.interchangeControlNumberUpperBound;
    	      this.isTestInterchange = defaults.isTestInterchange;
    	      this.overwriteExistingTransactionSetControlNumber = defaults.overwriteExistingTransactionSetControlNumber;
    	      this.processingPriorityCode = defaults.processingPriorityCode;
    	      this.receiverInternalIdentification = defaults.receiverInternalIdentification;
    	      this.receiverInternalSubIdentification = defaults.receiverInternalSubIdentification;
    	      this.receiverReverseRoutingAddress = defaults.receiverReverseRoutingAddress;
    	      this.recipientReferencePasswordQualifier = defaults.recipientReferencePasswordQualifier;
    	      this.recipientReferencePasswordValue = defaults.recipientReferencePasswordValue;
    	      this.rolloverGroupControlNumber = defaults.rolloverGroupControlNumber;
    	      this.rolloverInterchangeControlNumber = defaults.rolloverInterchangeControlNumber;
    	      this.rolloverTransactionSetControlNumber = defaults.rolloverTransactionSetControlNumber;
    	      this.senderInternalIdentification = defaults.senderInternalIdentification;
    	      this.senderInternalSubIdentification = defaults.senderInternalSubIdentification;
    	      this.senderReverseRoutingAddress = defaults.senderReverseRoutingAddress;
    	      this.transactionSetControlNumberLowerBound = defaults.transactionSetControlNumberLowerBound;
    	      this.transactionSetControlNumberPrefix = defaults.transactionSetControlNumberPrefix;
    	      this.transactionSetControlNumberSuffix = defaults.transactionSetControlNumberSuffix;
    	      this.transactionSetControlNumberUpperBound = defaults.transactionSetControlNumberUpperBound;
        }

        @CustomType.Setter
        public Builder applicationReferenceId(@Nullable String applicationReferenceId) {
            this.applicationReferenceId = applicationReferenceId;
            return this;
        }
        @CustomType.Setter
        public Builder applyDelimiterStringAdvice(Boolean applyDelimiterStringAdvice) {
            this.applyDelimiterStringAdvice = Objects.requireNonNull(applyDelimiterStringAdvice);
            return this;
        }
        @CustomType.Setter
        public Builder communicationAgreementId(@Nullable String communicationAgreementId) {
            this.communicationAgreementId = communicationAgreementId;
            return this;
        }
        @CustomType.Setter
        public Builder createGroupingSegments(Boolean createGroupingSegments) {
            this.createGroupingSegments = Objects.requireNonNull(createGroupingSegments);
            return this;
        }
        @CustomType.Setter
        public Builder enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            this.enableDefaultGroupHeaders = Objects.requireNonNull(enableDefaultGroupHeaders);
            return this;
        }
        @CustomType.Setter
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder groupApplicationPassword(@Nullable String groupApplicationPassword) {
            this.groupApplicationPassword = groupApplicationPassword;
            return this;
        }
        @CustomType.Setter
        public Builder groupApplicationReceiverId(@Nullable String groupApplicationReceiverId) {
            this.groupApplicationReceiverId = groupApplicationReceiverId;
            return this;
        }
        @CustomType.Setter
        public Builder groupApplicationReceiverQualifier(@Nullable String groupApplicationReceiverQualifier) {
            this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder groupApplicationSenderId(@Nullable String groupApplicationSenderId) {
            this.groupApplicationSenderId = groupApplicationSenderId;
            return this;
        }
        @CustomType.Setter
        public Builder groupApplicationSenderQualifier(@Nullable String groupApplicationSenderQualifier) {
            this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder groupAssociationAssignedCode(@Nullable String groupAssociationAssignedCode) {
            this.groupAssociationAssignedCode = groupAssociationAssignedCode;
            return this;
        }
        @CustomType.Setter
        public Builder groupControlNumberLowerBound(Double groupControlNumberLowerBound) {
            this.groupControlNumberLowerBound = Objects.requireNonNull(groupControlNumberLowerBound);
            return this;
        }
        @CustomType.Setter
        public Builder groupControlNumberPrefix(@Nullable String groupControlNumberPrefix) {
            this.groupControlNumberPrefix = groupControlNumberPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder groupControlNumberSuffix(@Nullable String groupControlNumberSuffix) {
            this.groupControlNumberSuffix = groupControlNumberSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder groupControlNumberUpperBound(Double groupControlNumberUpperBound) {
            this.groupControlNumberUpperBound = Objects.requireNonNull(groupControlNumberUpperBound);
            return this;
        }
        @CustomType.Setter
        public Builder groupControllingAgencyCode(@Nullable String groupControllingAgencyCode) {
            this.groupControllingAgencyCode = groupControllingAgencyCode;
            return this;
        }
        @CustomType.Setter
        public Builder groupMessageRelease(@Nullable String groupMessageRelease) {
            this.groupMessageRelease = groupMessageRelease;
            return this;
        }
        @CustomType.Setter
        public Builder groupMessageVersion(@Nullable String groupMessageVersion) {
            this.groupMessageVersion = groupMessageVersion;
            return this;
        }
        @CustomType.Setter
        public Builder interchangeControlNumberLowerBound(Double interchangeControlNumberLowerBound) {
            this.interchangeControlNumberLowerBound = Objects.requireNonNull(interchangeControlNumberLowerBound);
            return this;
        }
        @CustomType.Setter
        public Builder interchangeControlNumberPrefix(@Nullable String interchangeControlNumberPrefix) {
            this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder interchangeControlNumberSuffix(@Nullable String interchangeControlNumberSuffix) {
            this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder interchangeControlNumberUpperBound(Double interchangeControlNumberUpperBound) {
            this.interchangeControlNumberUpperBound = Objects.requireNonNull(interchangeControlNumberUpperBound);
            return this;
        }
        @CustomType.Setter
        public Builder isTestInterchange(Boolean isTestInterchange) {
            this.isTestInterchange = Objects.requireNonNull(isTestInterchange);
            return this;
        }
        @CustomType.Setter
        public Builder overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            this.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull(overwriteExistingTransactionSetControlNumber);
            return this;
        }
        @CustomType.Setter
        public Builder processingPriorityCode(@Nullable String processingPriorityCode) {
            this.processingPriorityCode = processingPriorityCode;
            return this;
        }
        @CustomType.Setter
        public Builder receiverInternalIdentification(@Nullable String receiverInternalIdentification) {
            this.receiverInternalIdentification = receiverInternalIdentification;
            return this;
        }
        @CustomType.Setter
        public Builder receiverInternalSubIdentification(@Nullable String receiverInternalSubIdentification) {
            this.receiverInternalSubIdentification = receiverInternalSubIdentification;
            return this;
        }
        @CustomType.Setter
        public Builder receiverReverseRoutingAddress(@Nullable String receiverReverseRoutingAddress) {
            this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
            return this;
        }
        @CustomType.Setter
        public Builder recipientReferencePasswordQualifier(@Nullable String recipientReferencePasswordQualifier) {
            this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
            return this;
        }
        @CustomType.Setter
        public Builder recipientReferencePasswordValue(@Nullable String recipientReferencePasswordValue) {
            this.recipientReferencePasswordValue = recipientReferencePasswordValue;
            return this;
        }
        @CustomType.Setter
        public Builder rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            this.rolloverGroupControlNumber = Objects.requireNonNull(rolloverGroupControlNumber);
            return this;
        }
        @CustomType.Setter
        public Builder rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            this.rolloverInterchangeControlNumber = Objects.requireNonNull(rolloverInterchangeControlNumber);
            return this;
        }
        @CustomType.Setter
        public Builder rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            this.rolloverTransactionSetControlNumber = Objects.requireNonNull(rolloverTransactionSetControlNumber);
            return this;
        }
        @CustomType.Setter
        public Builder senderInternalIdentification(@Nullable String senderInternalIdentification) {
            this.senderInternalIdentification = senderInternalIdentification;
            return this;
        }
        @CustomType.Setter
        public Builder senderInternalSubIdentification(@Nullable String senderInternalSubIdentification) {
            this.senderInternalSubIdentification = senderInternalSubIdentification;
            return this;
        }
        @CustomType.Setter
        public Builder senderReverseRoutingAddress(@Nullable String senderReverseRoutingAddress) {
            this.senderReverseRoutingAddress = senderReverseRoutingAddress;
            return this;
        }
        @CustomType.Setter
        public Builder transactionSetControlNumberLowerBound(Double transactionSetControlNumberLowerBound) {
            this.transactionSetControlNumberLowerBound = Objects.requireNonNull(transactionSetControlNumberLowerBound);
            return this;
        }
        @CustomType.Setter
        public Builder transactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder transactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder transactionSetControlNumberUpperBound(Double transactionSetControlNumberUpperBound) {
            this.transactionSetControlNumberUpperBound = Objects.requireNonNull(transactionSetControlNumberUpperBound);
            return this;
        }
        public EdifactEnvelopeSettingsResponse build() {
            final var o = new EdifactEnvelopeSettingsResponse();
            o.applicationReferenceId = applicationReferenceId;
            o.applyDelimiterStringAdvice = applyDelimiterStringAdvice;
            o.communicationAgreementId = communicationAgreementId;
            o.createGroupingSegments = createGroupingSegments;
            o.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
            o.functionalGroupId = functionalGroupId;
            o.groupApplicationPassword = groupApplicationPassword;
            o.groupApplicationReceiverId = groupApplicationReceiverId;
            o.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
            o.groupApplicationSenderId = groupApplicationSenderId;
            o.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
            o.groupAssociationAssignedCode = groupAssociationAssignedCode;
            o.groupControlNumberLowerBound = groupControlNumberLowerBound;
            o.groupControlNumberPrefix = groupControlNumberPrefix;
            o.groupControlNumberSuffix = groupControlNumberSuffix;
            o.groupControlNumberUpperBound = groupControlNumberUpperBound;
            o.groupControllingAgencyCode = groupControllingAgencyCode;
            o.groupMessageRelease = groupMessageRelease;
            o.groupMessageVersion = groupMessageVersion;
            o.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
            o.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
            o.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
            o.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
            o.isTestInterchange = isTestInterchange;
            o.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
            o.processingPriorityCode = processingPriorityCode;
            o.receiverInternalIdentification = receiverInternalIdentification;
            o.receiverInternalSubIdentification = receiverInternalSubIdentification;
            o.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
            o.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
            o.recipientReferencePasswordValue = recipientReferencePasswordValue;
            o.rolloverGroupControlNumber = rolloverGroupControlNumber;
            o.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
            o.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
            o.senderInternalIdentification = senderInternalIdentification;
            o.senderInternalSubIdentification = senderInternalSubIdentification;
            o.senderReverseRoutingAddress = senderReverseRoutingAddress;
            o.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
            o.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            o.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            o.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
            return o;
        }
    }
}
