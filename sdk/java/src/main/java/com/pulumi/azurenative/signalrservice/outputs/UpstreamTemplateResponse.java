// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.signalrservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UpstreamTemplateResponse {
    /**
     * @return Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any category name
     *     2. Combine multiple categories with &#34;,&#34;, for example &#34;connections,messages&#34;, it matches category &#34;connections&#34; and &#34;messages&#34;
     *     3. The single category name, for example, &#34;connections&#34;, it matches the category &#34;connections&#34;
     * 
     */
    private @Nullable String categoryPattern;
    /**
     * @return Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any event name
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnect&#34;, it matches event &#34;connect&#34; and &#34;disconnect&#34;
     *     3. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
     * 
     */
    private @Nullable String eventPattern;
    /**
     * @return Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any hub name
     *     2. Combine multiple hubs with &#34;,&#34;, for example &#34;hub1,hub2&#34;, it matches &#34;hub1&#34; and &#34;hub2&#34;
     *     3. The single hub name, for example, &#34;hub1&#34;, it matches &#34;hub1&#34;
     * 
     */
    private @Nullable String hubPattern;
    /**
     * @return Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     * 
     */
    private String urlTemplate;

    private UpstreamTemplateResponse() {}
    /**
     * @return Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any category name
     *     2. Combine multiple categories with &#34;,&#34;, for example &#34;connections,messages&#34;, it matches category &#34;connections&#34; and &#34;messages&#34;
     *     3. The single category name, for example, &#34;connections&#34;, it matches the category &#34;connections&#34;
     * 
     */
    public Optional<String> categoryPattern() {
        return Optional.ofNullable(this.categoryPattern);
    }
    /**
     * @return Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any event name
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnect&#34;, it matches event &#34;connect&#34; and &#34;disconnect&#34;
     *     3. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
     * 
     */
    public Optional<String> eventPattern() {
        return Optional.ofNullable(this.eventPattern);
    }
    /**
     * @return Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any hub name
     *     2. Combine multiple hubs with &#34;,&#34;, for example &#34;hub1,hub2&#34;, it matches &#34;hub1&#34; and &#34;hub2&#34;
     *     3. The single hub name, for example, &#34;hub1&#34;, it matches &#34;hub1&#34;
     * 
     */
    public Optional<String> hubPattern() {
        return Optional.ofNullable(this.hubPattern);
    }
    /**
     * @return Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     * 
     */
    public String urlTemplate() {
        return this.urlTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpstreamTemplateResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String categoryPattern;
        private @Nullable String eventPattern;
        private @Nullable String hubPattern;
        private String urlTemplate;
        public Builder() {}
        public Builder(UpstreamTemplateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categoryPattern = defaults.categoryPattern;
    	      this.eventPattern = defaults.eventPattern;
    	      this.hubPattern = defaults.hubPattern;
    	      this.urlTemplate = defaults.urlTemplate;
        }

        @CustomType.Setter
        public Builder categoryPattern(@Nullable String categoryPattern) {
            this.categoryPattern = categoryPattern;
            return this;
        }
        @CustomType.Setter
        public Builder eventPattern(@Nullable String eventPattern) {
            this.eventPattern = eventPattern;
            return this;
        }
        @CustomType.Setter
        public Builder hubPattern(@Nullable String hubPattern) {
            this.hubPattern = hubPattern;
            return this;
        }
        @CustomType.Setter
        public Builder urlTemplate(String urlTemplate) {
            this.urlTemplate = Objects.requireNonNull(urlTemplate);
            return this;
        }
        public UpstreamTemplateResponse build() {
            final var o = new UpstreamTemplateResponse();
            o.categoryPattern = categoryPattern;
            o.eventPattern = eventPattern;
            o.hubPattern = hubPattern;
            o.urlTemplate = urlTemplate;
            return o;
        }
    }
}
