// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kusto.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabasePrincipalResponse {
    /**
     * @return Application id - relevant only for application principal type.
     * 
     */
    private @Nullable String appId;
    /**
     * @return Database principal email if exists.
     * 
     */
    private @Nullable String email;
    /**
     * @return Database principal fully qualified name.
     * 
     */
    private @Nullable String fqn;
    /**
     * @return Database principal name.
     * 
     */
    private String name;
    /**
     * @return Database principal role.
     * 
     */
    private String role;
    /**
     * @return The tenant name of the principal
     * 
     */
    private String tenantName;
    /**
     * @return Database principal type.
     * 
     */
    private String type;

    private DatabasePrincipalResponse() {}
    /**
     * @return Application id - relevant only for application principal type.
     * 
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }
    /**
     * @return Database principal email if exists.
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return Database principal fully qualified name.
     * 
     */
    public Optional<String> fqn() {
        return Optional.ofNullable(this.fqn);
    }
    /**
     * @return Database principal name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Database principal role.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The tenant name of the principal
     * 
     */
    public String tenantName() {
        return this.tenantName;
    }
    /**
     * @return Database principal type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabasePrincipalResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String appId;
        private @Nullable String email;
        private @Nullable String fqn;
        private String name;
        private String role;
        private String tenantName;
        private String type;
        public Builder() {}
        public Builder(DatabasePrincipalResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.email = defaults.email;
    	      this.fqn = defaults.fqn;
    	      this.name = defaults.name;
    	      this.role = defaults.role;
    	      this.tenantName = defaults.tenantName;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder fqn(@Nullable String fqn) {
            this.fqn = fqn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder tenantName(String tenantName) {
            this.tenantName = Objects.requireNonNull(tenantName);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public DatabasePrincipalResponse build() {
            final var o = new DatabasePrincipalResponse();
            o.appId = appId;
            o.email = email;
            o.fqn = fqn;
            o.name = name;
            o.role = role;
            o.tenantName = tenantName;
            o.type = type;
            return o;
        }
    }
}
