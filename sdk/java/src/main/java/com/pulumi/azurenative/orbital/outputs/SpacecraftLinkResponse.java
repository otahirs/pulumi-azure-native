// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.orbital.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SpacecraftLinkResponse {
    /**
     * @return Bandwidth in MHz
     * 
     */
    private Double bandwidthMHz;
    /**
     * @return Center Frequency in MHz
     * 
     */
    private Double centerFrequencyMHz;
    /**
     * @return Direction (uplink or downlink)
     * 
     */
    private String direction;
    /**
     * @return polarization. eg (RHCP, LHCP)
     * 
     */
    private String polarization;

    private SpacecraftLinkResponse() {}
    /**
     * @return Bandwidth in MHz
     * 
     */
    public Double bandwidthMHz() {
        return this.bandwidthMHz;
    }
    /**
     * @return Center Frequency in MHz
     * 
     */
    public Double centerFrequencyMHz() {
        return this.centerFrequencyMHz;
    }
    /**
     * @return Direction (uplink or downlink)
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return polarization. eg (RHCP, LHCP)
     * 
     */
    public String polarization() {
        return this.polarization;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpacecraftLinkResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double bandwidthMHz;
        private Double centerFrequencyMHz;
        private String direction;
        private String polarization;
        public Builder() {}
        public Builder(SpacecraftLinkResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidthMHz = defaults.bandwidthMHz;
    	      this.centerFrequencyMHz = defaults.centerFrequencyMHz;
    	      this.direction = defaults.direction;
    	      this.polarization = defaults.polarization;
        }

        @CustomType.Setter
        public Builder bandwidthMHz(Double bandwidthMHz) {
            this.bandwidthMHz = Objects.requireNonNull(bandwidthMHz);
            return this;
        }
        @CustomType.Setter
        public Builder centerFrequencyMHz(Double centerFrequencyMHz) {
            this.centerFrequencyMHz = Objects.requireNonNull(centerFrequencyMHz);
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        @CustomType.Setter
        public Builder polarization(String polarization) {
            this.polarization = Objects.requireNonNull(polarization);
            return this;
        }
        public SpacecraftLinkResponse build() {
            final var o = new SpacecraftLinkResponse();
            o.bandwidthMHz = bandwidthMHz;
            o.centerFrequencyMHz = centerFrequencyMHz;
            o.direction = direction;
            o.polarization = polarization;
            return o;
        }
    }
}
