// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.enums.SAPDatabaseType;
import com.pulumi.azurenative.workloads.enums.SAPProductType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetSAPAvailabilityZoneDetailsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSAPAvailabilityZoneDetailsArgs Empty = new GetSAPAvailabilityZoneDetailsArgs();

    /**
     * The geo-location where the SAP resources will be created.
     * 
     */
    @Import(name="appLocation", required=true)
    private Output<String> appLocation;

    /**
     * @return The geo-location where the SAP resources will be created.
     * 
     */
    public Output<String> appLocation() {
        return this.appLocation;
    }

    /**
     * The database type. Eg: HANA, DB2, etc
     * 
     */
    @Import(name="databaseType", required=true)
    private Output<Either<String,SAPDatabaseType>> databaseType;

    /**
     * @return The database type. Eg: HANA, DB2, etc
     * 
     */
    public Output<Either<String,SAPDatabaseType>> databaseType() {
        return this.databaseType;
    }

    /**
     * The name of Azure region.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The name of Azure region.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Defines the SAP Product type.
     * 
     */
    @Import(name="sapProduct", required=true)
    private Output<Either<String,SAPProductType>> sapProduct;

    /**
     * @return Defines the SAP Product type.
     * 
     */
    public Output<Either<String,SAPProductType>> sapProduct() {
        return this.sapProduct;
    }

    private GetSAPAvailabilityZoneDetailsArgs() {}

    private GetSAPAvailabilityZoneDetailsArgs(GetSAPAvailabilityZoneDetailsArgs $) {
        this.appLocation = $.appLocation;
        this.databaseType = $.databaseType;
        this.location = $.location;
        this.sapProduct = $.sapProduct;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSAPAvailabilityZoneDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSAPAvailabilityZoneDetailsArgs $;

        public Builder() {
            $ = new GetSAPAvailabilityZoneDetailsArgs();
        }

        public Builder(GetSAPAvailabilityZoneDetailsArgs defaults) {
            $ = new GetSAPAvailabilityZoneDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appLocation The geo-location where the SAP resources will be created.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(Output<String> appLocation) {
            $.appLocation = appLocation;
            return this;
        }

        /**
         * @param appLocation The geo-location where the SAP resources will be created.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(String appLocation) {
            return appLocation(Output.of(appLocation));
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Output<Either<String,SAPDatabaseType>> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Either<String,SAPDatabaseType> databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Either.ofLeft(databaseType));
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(SAPDatabaseType databaseType) {
            return databaseType(Either.ofRight(databaseType));
        }

        /**
         * @param location The name of Azure region.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of Azure region.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(Output<Either<String,SAPProductType>> sapProduct) {
            $.sapProduct = sapProduct;
            return this;
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(Either<String,SAPProductType> sapProduct) {
            return sapProduct(Output.of(sapProduct));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(String sapProduct) {
            return sapProduct(Either.ofLeft(sapProduct));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(SAPProductType sapProduct) {
            return sapProduct(Either.ofRight(sapProduct));
        }

        public GetSAPAvailabilityZoneDetailsArgs build() {
            $.appLocation = Objects.requireNonNull($.appLocation, "expected parameter 'appLocation' to be non-null");
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.sapProduct = Objects.requireNonNull($.sapProduct, "expected parameter 'sapProduct' to be non-null");
            return $;
        }
    }

}
