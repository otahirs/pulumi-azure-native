// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.outputs;

import com.pulumi.azurenative.customerinsights.outputs.ConnectorMappingAvailabilityResponse;
import com.pulumi.azurenative.customerinsights.outputs.ConnectorMappingCompleteOperationResponse;
import com.pulumi.azurenative.customerinsights.outputs.ConnectorMappingErrorManagementResponse;
import com.pulumi.azurenative.customerinsights.outputs.ConnectorMappingFormatResponse;
import com.pulumi.azurenative.customerinsights.outputs.ConnectorMappingStructureResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorMappingPropertiesResponse {
    /**
     * @return The availability of mapping property.
     * 
     */
    private ConnectorMappingAvailabilityResponse availability;
    /**
     * @return The operation after import is done.
     * 
     */
    private ConnectorMappingCompleteOperationResponse completeOperation;
    /**
     * @return The error management setting for the mapping.
     * 
     */
    private ConnectorMappingErrorManagementResponse errorManagement;
    /**
     * @return The file filter for the mapping.
     * 
     */
    private @Nullable String fileFilter;
    /**
     * @return The folder path for the mapping.
     * 
     */
    private @Nullable String folderPath;
    /**
     * @return The format of mapping property.
     * 
     */
    private ConnectorMappingFormatResponse format;
    /**
     * @return If the file contains a header or not.
     * 
     */
    private @Nullable Boolean hasHeader;
    /**
     * @return Ingestion mapping information at property level.
     * 
     */
    private List<ConnectorMappingStructureResponse> structure;

    private ConnectorMappingPropertiesResponse() {}
    /**
     * @return The availability of mapping property.
     * 
     */
    public ConnectorMappingAvailabilityResponse availability() {
        return this.availability;
    }
    /**
     * @return The operation after import is done.
     * 
     */
    public ConnectorMappingCompleteOperationResponse completeOperation() {
        return this.completeOperation;
    }
    /**
     * @return The error management setting for the mapping.
     * 
     */
    public ConnectorMappingErrorManagementResponse errorManagement() {
        return this.errorManagement;
    }
    /**
     * @return The file filter for the mapping.
     * 
     */
    public Optional<String> fileFilter() {
        return Optional.ofNullable(this.fileFilter);
    }
    /**
     * @return The folder path for the mapping.
     * 
     */
    public Optional<String> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }
    /**
     * @return The format of mapping property.
     * 
     */
    public ConnectorMappingFormatResponse format() {
        return this.format;
    }
    /**
     * @return If the file contains a header or not.
     * 
     */
    public Optional<Boolean> hasHeader() {
        return Optional.ofNullable(this.hasHeader);
    }
    /**
     * @return Ingestion mapping information at property level.
     * 
     */
    public List<ConnectorMappingStructureResponse> structure() {
        return this.structure;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorMappingPropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ConnectorMappingAvailabilityResponse availability;
        private ConnectorMappingCompleteOperationResponse completeOperation;
        private ConnectorMappingErrorManagementResponse errorManagement;
        private @Nullable String fileFilter;
        private @Nullable String folderPath;
        private ConnectorMappingFormatResponse format;
        private @Nullable Boolean hasHeader;
        private List<ConnectorMappingStructureResponse> structure;
        public Builder() {}
        public Builder(ConnectorMappingPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availability = defaults.availability;
    	      this.completeOperation = defaults.completeOperation;
    	      this.errorManagement = defaults.errorManagement;
    	      this.fileFilter = defaults.fileFilter;
    	      this.folderPath = defaults.folderPath;
    	      this.format = defaults.format;
    	      this.hasHeader = defaults.hasHeader;
    	      this.structure = defaults.structure;
        }

        @CustomType.Setter
        public Builder availability(ConnectorMappingAvailabilityResponse availability) {
            this.availability = Objects.requireNonNull(availability);
            return this;
        }
        @CustomType.Setter
        public Builder completeOperation(ConnectorMappingCompleteOperationResponse completeOperation) {
            this.completeOperation = Objects.requireNonNull(completeOperation);
            return this;
        }
        @CustomType.Setter
        public Builder errorManagement(ConnectorMappingErrorManagementResponse errorManagement) {
            this.errorManagement = Objects.requireNonNull(errorManagement);
            return this;
        }
        @CustomType.Setter
        public Builder fileFilter(@Nullable String fileFilter) {
            this.fileFilter = fileFilter;
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(@Nullable String folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        @CustomType.Setter
        public Builder format(ConnectorMappingFormatResponse format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }
        @CustomType.Setter
        public Builder hasHeader(@Nullable Boolean hasHeader) {
            this.hasHeader = hasHeader;
            return this;
        }
        @CustomType.Setter
        public Builder structure(List<ConnectorMappingStructureResponse> structure) {
            this.structure = Objects.requireNonNull(structure);
            return this;
        }
        public Builder structure(ConnectorMappingStructureResponse... structure) {
            return structure(List.of(structure));
        }
        public ConnectorMappingPropertiesResponse build() {
            final var o = new ConnectorMappingPropertiesResponse();
            o.availability = availability;
            o.completeOperation = completeOperation;
            o.errorManagement = errorManagement;
            o.fileFilter = fileFilter;
            o.folderPath = folderPath;
            o.format = format;
            o.hasHeader = hasHeader;
            o.structure = structure;
            return o;
        }
    }
}
