// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabasesSolutionSummaryResponse {
    /**
     * @return Gets or sets the count of database instances assessed.
     * 
     */
    private @Nullable Integer databaseInstancesAssessedCount;
    /**
     * @return Gets or sets the count of databases assessed.
     * 
     */
    private @Nullable Integer databasesAssessedCount;
    /**
     * @return Gets the Instance type.
     * Expected value is &#39;Databases&#39;.
     * 
     */
    private String instanceType;
    /**
     * @return Gets or sets the count of databases ready for migration.
     * 
     */
    private @Nullable Integer migrationReadyCount;

    private DatabasesSolutionSummaryResponse() {}
    /**
     * @return Gets or sets the count of database instances assessed.
     * 
     */
    public Optional<Integer> databaseInstancesAssessedCount() {
        return Optional.ofNullable(this.databaseInstancesAssessedCount);
    }
    /**
     * @return Gets or sets the count of databases assessed.
     * 
     */
    public Optional<Integer> databasesAssessedCount() {
        return Optional.ofNullable(this.databasesAssessedCount);
    }
    /**
     * @return Gets the Instance type.
     * Expected value is &#39;Databases&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return Gets or sets the count of databases ready for migration.
     * 
     */
    public Optional<Integer> migrationReadyCount() {
        return Optional.ofNullable(this.migrationReadyCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabasesSolutionSummaryResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer databaseInstancesAssessedCount;
        private @Nullable Integer databasesAssessedCount;
        private String instanceType;
        private @Nullable Integer migrationReadyCount;
        public Builder() {}
        public Builder(DatabasesSolutionSummaryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseInstancesAssessedCount = defaults.databaseInstancesAssessedCount;
    	      this.databasesAssessedCount = defaults.databasesAssessedCount;
    	      this.instanceType = defaults.instanceType;
    	      this.migrationReadyCount = defaults.migrationReadyCount;
        }

        @CustomType.Setter
        public Builder databaseInstancesAssessedCount(@Nullable Integer databaseInstancesAssessedCount) {
            this.databaseInstancesAssessedCount = databaseInstancesAssessedCount;
            return this;
        }
        @CustomType.Setter
        public Builder databasesAssessedCount(@Nullable Integer databasesAssessedCount) {
            this.databasesAssessedCount = databasesAssessedCount;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder migrationReadyCount(@Nullable Integer migrationReadyCount) {
            this.migrationReadyCount = migrationReadyCount;
            return this;
        }
        public DatabasesSolutionSummaryResponse build() {
            final var o = new DatabasesSolutionSummaryResponse();
            o.databaseInstancesAssessedCount = databaseInstancesAssessedCount;
            o.databasesAssessedCount = databasesAssessedCount;
            o.instanceType = instanceType;
            o.migrationReadyCount = migrationReadyCount;
            return o;
        }
    }
}
