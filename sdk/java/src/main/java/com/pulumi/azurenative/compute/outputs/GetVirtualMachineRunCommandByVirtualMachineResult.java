// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.RunCommandInputParameterResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineRunCommandInstanceViewResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineRunCommandScriptSourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualMachineRunCommandByVirtualMachineResult {
    /**
     * @return Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
     * 
     */
    private @Nullable Boolean asyncExecution;
    /**
     * @return Specifies the Azure storage blob where script error stream will be uploaded.
     * 
     */
    private @Nullable String errorBlobUri;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return The virtual machine run command instance view.
     * 
     */
    private VirtualMachineRunCommandInstanceViewResponse instanceView;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return Specifies the Azure storage blob where script output stream will be uploaded.
     * 
     */
    private @Nullable String outputBlobUri;
    /**
     * @return The parameters used by the script.
     * 
     */
    private @Nullable List<RunCommandInputParameterResponse> parameters;
    /**
     * @return The parameters used by the script.
     * 
     */
    private @Nullable List<RunCommandInputParameterResponse> protectedParameters;
    /**
     * @return The provisioning state, which only appears in the response.
     * 
     */
    private String provisioningState;
    /**
     * @return Specifies the user account password on the VM when executing the run command.
     * 
     */
    private @Nullable String runAsPassword;
    /**
     * @return Specifies the user account on the VM when executing the run command.
     * 
     */
    private @Nullable String runAsUser;
    /**
     * @return The source of the run command script.
     * 
     */
    private @Nullable VirtualMachineRunCommandScriptSourceResponse source;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The timeout in seconds to execute the run command.
     * 
     */
    private @Nullable Integer timeoutInSeconds;
    /**
     * @return Resource type
     * 
     */
    private String type;

    private GetVirtualMachineRunCommandByVirtualMachineResult() {}
    /**
     * @return Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
     * 
     */
    public Optional<Boolean> asyncExecution() {
        return Optional.ofNullable(this.asyncExecution);
    }
    /**
     * @return Specifies the Azure storage blob where script error stream will be uploaded.
     * 
     */
    public Optional<String> errorBlobUri() {
        return Optional.ofNullable(this.errorBlobUri);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The virtual machine run command instance view.
     * 
     */
    public VirtualMachineRunCommandInstanceViewResponse instanceView() {
        return this.instanceView;
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies the Azure storage blob where script output stream will be uploaded.
     * 
     */
    public Optional<String> outputBlobUri() {
        return Optional.ofNullable(this.outputBlobUri);
    }
    /**
     * @return The parameters used by the script.
     * 
     */
    public List<RunCommandInputParameterResponse> parameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    /**
     * @return The parameters used by the script.
     * 
     */
    public List<RunCommandInputParameterResponse> protectedParameters() {
        return this.protectedParameters == null ? List.of() : this.protectedParameters;
    }
    /**
     * @return The provisioning state, which only appears in the response.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Specifies the user account password on the VM when executing the run command.
     * 
     */
    public Optional<String> runAsPassword() {
        return Optional.ofNullable(this.runAsPassword);
    }
    /**
     * @return Specifies the user account on the VM when executing the run command.
     * 
     */
    public Optional<String> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }
    /**
     * @return The source of the run command script.
     * 
     */
    public Optional<VirtualMachineRunCommandScriptSourceResponse> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The timeout in seconds to execute the run command.
     * 
     */
    public Optional<Integer> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineRunCommandByVirtualMachineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean asyncExecution;
        private @Nullable String errorBlobUri;
        private String id;
        private VirtualMachineRunCommandInstanceViewResponse instanceView;
        private String location;
        private String name;
        private @Nullable String outputBlobUri;
        private @Nullable List<RunCommandInputParameterResponse> parameters;
        private @Nullable List<RunCommandInputParameterResponse> protectedParameters;
        private String provisioningState;
        private @Nullable String runAsPassword;
        private @Nullable String runAsUser;
        private @Nullable VirtualMachineRunCommandScriptSourceResponse source;
        private @Nullable Map<String,String> tags;
        private @Nullable Integer timeoutInSeconds;
        private String type;
        public Builder() {}
        public Builder(GetVirtualMachineRunCommandByVirtualMachineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asyncExecution = defaults.asyncExecution;
    	      this.errorBlobUri = defaults.errorBlobUri;
    	      this.id = defaults.id;
    	      this.instanceView = defaults.instanceView;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outputBlobUri = defaults.outputBlobUri;
    	      this.parameters = defaults.parameters;
    	      this.protectedParameters = defaults.protectedParameters;
    	      this.provisioningState = defaults.provisioningState;
    	      this.runAsPassword = defaults.runAsPassword;
    	      this.runAsUser = defaults.runAsUser;
    	      this.source = defaults.source;
    	      this.tags = defaults.tags;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder asyncExecution(@Nullable Boolean asyncExecution) {
            this.asyncExecution = asyncExecution;
            return this;
        }
        @CustomType.Setter
        public Builder errorBlobUri(@Nullable String errorBlobUri) {
            this.errorBlobUri = errorBlobUri;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceView(VirtualMachineRunCommandInstanceViewResponse instanceView) {
            this.instanceView = Objects.requireNonNull(instanceView);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outputBlobUri(@Nullable String outputBlobUri) {
            this.outputBlobUri = outputBlobUri;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable List<RunCommandInputParameterResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(RunCommandInputParameterResponse... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder protectedParameters(@Nullable List<RunCommandInputParameterResponse> protectedParameters) {
            this.protectedParameters = protectedParameters;
            return this;
        }
        public Builder protectedParameters(RunCommandInputParameterResponse... protectedParameters) {
            return protectedParameters(List.of(protectedParameters));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder runAsPassword(@Nullable String runAsPassword) {
            this.runAsPassword = runAsPassword;
            return this;
        }
        @CustomType.Setter
        public Builder runAsUser(@Nullable String runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable VirtualMachineRunCommandScriptSourceResponse source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Integer timeoutInSeconds) {
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetVirtualMachineRunCommandByVirtualMachineResult build() {
            final var o = new GetVirtualMachineRunCommandByVirtualMachineResult();
            o.asyncExecution = asyncExecution;
            o.errorBlobUri = errorBlobUri;
            o.id = id;
            o.instanceView = instanceView;
            o.location = location;
            o.name = name;
            o.outputBlobUri = outputBlobUri;
            o.parameters = parameters;
            o.protectedParameters = protectedParameters;
            o.provisioningState = provisioningState;
            o.runAsPassword = runAsPassword;
            o.runAsUser = runAsUser;
            o.source = source;
            o.tags = tags;
            o.timeoutInSeconds = timeoutInSeconds;
            o.type = type;
            return o;
        }
    }
}
