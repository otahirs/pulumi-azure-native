// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualWanResult {
    /**
     * @return True if branch to branch traffic is allowed.
     * 
     */
    private @Nullable Boolean allowBranchToBranchTraffic;
    /**
     * @return True if Vnet to Vnet traffic is allowed.
     * 
     */
    private @Nullable Boolean allowVnetToVnetTraffic;
    /**
     * @return Vpn encryption to be disabled or not.
     * 
     */
    private @Nullable Boolean disableVpnEncryption;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Resource location.
     * 
     */
    private String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The office local breakout category.
     * 
     */
    private String office365LocalBreakoutCategory;
    /**
     * @return The provisioning state of the virtual WAN resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return List of VirtualHubs in the VirtualWAN.
     * 
     */
    private List<SubResourceResponse> virtualHubs;
    /**
     * @return List of VpnSites in the VirtualWAN.
     * 
     */
    private List<SubResourceResponse> vpnSites;

    private GetVirtualWanResult() {}
    /**
     * @return True if branch to branch traffic is allowed.
     * 
     */
    public Optional<Boolean> allowBranchToBranchTraffic() {
        return Optional.ofNullable(this.allowBranchToBranchTraffic);
    }
    /**
     * @return True if Vnet to Vnet traffic is allowed.
     * 
     */
    public Optional<Boolean> allowVnetToVnetTraffic() {
        return Optional.ofNullable(this.allowVnetToVnetTraffic);
    }
    /**
     * @return Vpn encryption to be disabled or not.
     * 
     */
    public Optional<Boolean> disableVpnEncryption() {
        return Optional.ofNullable(this.disableVpnEncryption);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The office local breakout category.
     * 
     */
    public String office365LocalBreakoutCategory() {
        return this.office365LocalBreakoutCategory;
    }
    /**
     * @return The provisioning state of the virtual WAN resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return List of VirtualHubs in the VirtualWAN.
     * 
     */
    public List<SubResourceResponse> virtualHubs() {
        return this.virtualHubs;
    }
    /**
     * @return List of VpnSites in the VirtualWAN.
     * 
     */
    public List<SubResourceResponse> vpnSites() {
        return this.vpnSites;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualWanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowBranchToBranchTraffic;
        private @Nullable Boolean allowVnetToVnetTraffic;
        private @Nullable Boolean disableVpnEncryption;
        private String etag;
        private @Nullable String id;
        private String location;
        private String name;
        private String office365LocalBreakoutCategory;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private List<SubResourceResponse> virtualHubs;
        private List<SubResourceResponse> vpnSites;
        public Builder() {}
        public Builder(GetVirtualWanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowBranchToBranchTraffic = defaults.allowBranchToBranchTraffic;
    	      this.allowVnetToVnetTraffic = defaults.allowVnetToVnetTraffic;
    	      this.disableVpnEncryption = defaults.disableVpnEncryption;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.office365LocalBreakoutCategory = defaults.office365LocalBreakoutCategory;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualHubs = defaults.virtualHubs;
    	      this.vpnSites = defaults.vpnSites;
        }

        @CustomType.Setter
        public Builder allowBranchToBranchTraffic(@Nullable Boolean allowBranchToBranchTraffic) {
            this.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder allowVnetToVnetTraffic(@Nullable Boolean allowVnetToVnetTraffic) {
            this.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder disableVpnEncryption(@Nullable Boolean disableVpnEncryption) {
            this.disableVpnEncryption = disableVpnEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder office365LocalBreakoutCategory(String office365LocalBreakoutCategory) {
            this.office365LocalBreakoutCategory = Objects.requireNonNull(office365LocalBreakoutCategory);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualHubs(List<SubResourceResponse> virtualHubs) {
            this.virtualHubs = Objects.requireNonNull(virtualHubs);
            return this;
        }
        public Builder virtualHubs(SubResourceResponse... virtualHubs) {
            return virtualHubs(List.of(virtualHubs));
        }
        @CustomType.Setter
        public Builder vpnSites(List<SubResourceResponse> vpnSites) {
            this.vpnSites = Objects.requireNonNull(vpnSites);
            return this;
        }
        public Builder vpnSites(SubResourceResponse... vpnSites) {
            return vpnSites(List.of(vpnSites));
        }
        public GetVirtualWanResult build() {
            final var o = new GetVirtualWanResult();
            o.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            o.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
            o.disableVpnEncryption = disableVpnEncryption;
            o.etag = etag;
            o.id = id;
            o.location = location;
            o.name = name;
            o.office365LocalBreakoutCategory = office365LocalBreakoutCategory;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.virtualHubs = virtualHubs;
            o.vpnSites = vpnSites;
            return o;
        }
    }
}
