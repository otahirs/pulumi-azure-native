// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.BackupSetInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse {
    /**
     * @return Backup sets that are currently active (Either being uploaded or getting restored)
     * 
     */
    private List<BackupSetInfoResponse> activeBackupSets;
    /**
     * @return Name of container created in the Azure Storage account where backups are copied to
     * 
     */
    private String containerName;
    /**
     * @return Database migration end time
     * 
     */
    private String endedOn;
    /**
     * @return prefix string to use for querying errors for this database
     * 
     */
    private String errorPrefix;
    /**
     * @return Migration exceptions and warnings
     * 
     */
    private List<ReportableExceptionResponse> exceptionsAndWarnings;
    /**
     * @return Details of full backup set
     * 
     */
    private BackupSetInfoResponse fullBackupSetInfo;
    /**
     * @return Result identifier
     * 
     */
    private String id;
    /**
     * @return Whether full backup has been applied to the target database or not
     * 
     */
    private Boolean isFullBackupRestored;
    /**
     * @return Last applied backup set information
     * 
     */
    private BackupSetInfoResponse lastRestoredBackupSetInfo;
    /**
     * @return Current state of database
     * 
     */
    private String migrationState;
    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    private String resultType;
    /**
     * @return Name of the database
     * 
     */
    private String sourceDatabaseName;
    /**
     * @return Database migration start time
     * 
     */
    private String startedOn;

    private MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse() {}
    /**
     * @return Backup sets that are currently active (Either being uploaded or getting restored)
     * 
     */
    public List<BackupSetInfoResponse> activeBackupSets() {
        return this.activeBackupSets;
    }
    /**
     * @return Name of container created in the Azure Storage account where backups are copied to
     * 
     */
    public String containerName() {
        return this.containerName;
    }
    /**
     * @return Database migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }
    /**
     * @return prefix string to use for querying errors for this database
     * 
     */
    public String errorPrefix() {
        return this.errorPrefix;
    }
    /**
     * @return Migration exceptions and warnings
     * 
     */
    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }
    /**
     * @return Details of full backup set
     * 
     */
    public BackupSetInfoResponse fullBackupSetInfo() {
        return this.fullBackupSetInfo;
    }
    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether full backup has been applied to the target database or not
     * 
     */
    public Boolean isFullBackupRestored() {
        return this.isFullBackupRestored;
    }
    /**
     * @return Last applied backup set information
     * 
     */
    public BackupSetInfoResponse lastRestoredBackupSetInfo() {
        return this.lastRestoredBackupSetInfo;
    }
    /**
     * @return Current state of database
     * 
     */
    public String migrationState() {
        return this.migrationState;
    }
    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }
    /**
     * @return Name of the database
     * 
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }
    /**
     * @return Database migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<BackupSetInfoResponse> activeBackupSets;
        private String containerName;
        private String endedOn;
        private String errorPrefix;
        private List<ReportableExceptionResponse> exceptionsAndWarnings;
        private BackupSetInfoResponse fullBackupSetInfo;
        private String id;
        private Boolean isFullBackupRestored;
        private BackupSetInfoResponse lastRestoredBackupSetInfo;
        private String migrationState;
        private String resultType;
        private String sourceDatabaseName;
        private String startedOn;
        public Builder() {}
        public Builder(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeBackupSets = defaults.activeBackupSets;
    	      this.containerName = defaults.containerName;
    	      this.endedOn = defaults.endedOn;
    	      this.errorPrefix = defaults.errorPrefix;
    	      this.exceptionsAndWarnings = defaults.exceptionsAndWarnings;
    	      this.fullBackupSetInfo = defaults.fullBackupSetInfo;
    	      this.id = defaults.id;
    	      this.isFullBackupRestored = defaults.isFullBackupRestored;
    	      this.lastRestoredBackupSetInfo = defaults.lastRestoredBackupSetInfo;
    	      this.migrationState = defaults.migrationState;
    	      this.resultType = defaults.resultType;
    	      this.sourceDatabaseName = defaults.sourceDatabaseName;
    	      this.startedOn = defaults.startedOn;
        }

        @CustomType.Setter
        public Builder activeBackupSets(List<BackupSetInfoResponse> activeBackupSets) {
            this.activeBackupSets = Objects.requireNonNull(activeBackupSets);
            return this;
        }
        public Builder activeBackupSets(BackupSetInfoResponse... activeBackupSets) {
            return activeBackupSets(List.of(activeBackupSets));
        }
        @CustomType.Setter
        public Builder containerName(String containerName) {
            this.containerName = Objects.requireNonNull(containerName);
            return this;
        }
        @CustomType.Setter
        public Builder endedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }
        @CustomType.Setter
        public Builder errorPrefix(String errorPrefix) {
            this.errorPrefix = Objects.requireNonNull(errorPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings);
            return this;
        }
        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }
        @CustomType.Setter
        public Builder fullBackupSetInfo(BackupSetInfoResponse fullBackupSetInfo) {
            this.fullBackupSetInfo = Objects.requireNonNull(fullBackupSetInfo);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isFullBackupRestored(Boolean isFullBackupRestored) {
            this.isFullBackupRestored = Objects.requireNonNull(isFullBackupRestored);
            return this;
        }
        @CustomType.Setter
        public Builder lastRestoredBackupSetInfo(BackupSetInfoResponse lastRestoredBackupSetInfo) {
            this.lastRestoredBackupSetInfo = Objects.requireNonNull(lastRestoredBackupSetInfo);
            return this;
        }
        @CustomType.Setter
        public Builder migrationState(String migrationState) {
            this.migrationState = Objects.requireNonNull(migrationState);
            return this;
        }
        @CustomType.Setter
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseName(String sourceDatabaseName) {
            this.sourceDatabaseName = Objects.requireNonNull(sourceDatabaseName);
            return this;
        }
        @CustomType.Setter
        public Builder startedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }
        public MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse build() {
            final var o = new MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse();
            o.activeBackupSets = activeBackupSets;
            o.containerName = containerName;
            o.endedOn = endedOn;
            o.errorPrefix = errorPrefix;
            o.exceptionsAndWarnings = exceptionsAndWarnings;
            o.fullBackupSetInfo = fullBackupSetInfo;
            o.id = id;
            o.isFullBackupRestored = isFullBackupRestored;
            o.lastRestoredBackupSetInfo = lastRestoredBackupSetInfo;
            o.migrationState = migrationState;
            o.resultType = resultType;
            o.sourceDatabaseName = sourceDatabaseName;
            o.startedOn = startedOn;
            return o;
        }
    }
}
