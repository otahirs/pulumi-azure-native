// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.ExpressRouteCircuitAuthorizationResponse;
import com.pulumi.azurenative.network.outputs.ExpressRouteCircuitPeeringResponse;
import com.pulumi.azurenative.network.outputs.ExpressRouteCircuitServiceProviderPropertiesResponse;
import com.pulumi.azurenative.network.outputs.ExpressRouteCircuitSkuResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExpressRouteCircuitResult {
    /**
     * @return Allow classic operations.
     * 
     */
    private @Nullable Boolean allowClassicOperations;
    /**
     * @return The list of authorizations.
     * 
     */
    private @Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations;
    /**
     * @return The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    private @Nullable Double bandwidthInGbps;
    /**
     * @return The CircuitProvisioningState state of the resource.
     * 
     */
    private @Nullable String circuitProvisioningState;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    private @Nullable SubResourceResponse expressRoutePort;
    /**
     * @return The GatewayManager Etag.
     * 
     */
    private @Nullable String gatewayManagerEtag;
    /**
     * @return Flag denoting global reach status.
     * 
     */
    private @Nullable Boolean globalReachEnabled;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The list of peerings.
     * 
     */
    private @Nullable List<ExpressRouteCircuitPeeringResponse> peerings;
    /**
     * @return The provisioning state of the express route circuit resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The ServiceKey.
     * 
     */
    private @Nullable String serviceKey;
    /**
     * @return The ServiceProviderNotes.
     * 
     */
    private @Nullable String serviceProviderNotes;
    /**
     * @return The ServiceProviderProperties.
     * 
     */
    private @Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties;
    /**
     * @return The ServiceProviderProvisioningState state of the resource.
     * 
     */
    private @Nullable String serviceProviderProvisioningState;
    /**
     * @return The SKU.
     * 
     */
    private @Nullable ExpressRouteCircuitSkuResponse sku;
    /**
     * @return The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
     * 
     */
    private Integer stag;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetExpressRouteCircuitResult() {}
    /**
     * @return Allow classic operations.
     * 
     */
    public Optional<Boolean> allowClassicOperations() {
        return Optional.ofNullable(this.allowClassicOperations);
    }
    /**
     * @return The list of authorizations.
     * 
     */
    public List<ExpressRouteCircuitAuthorizationResponse> authorizations() {
        return this.authorizations == null ? List.of() : this.authorizations;
    }
    /**
     * @return The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    public Optional<Double> bandwidthInGbps() {
        return Optional.ofNullable(this.bandwidthInGbps);
    }
    /**
     * @return The CircuitProvisioningState state of the resource.
     * 
     */
    public Optional<String> circuitProvisioningState() {
        return Optional.ofNullable(this.circuitProvisioningState);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    public Optional<SubResourceResponse> expressRoutePort() {
        return Optional.ofNullable(this.expressRoutePort);
    }
    /**
     * @return The GatewayManager Etag.
     * 
     */
    public Optional<String> gatewayManagerEtag() {
        return Optional.ofNullable(this.gatewayManagerEtag);
    }
    /**
     * @return Flag denoting global reach status.
     * 
     */
    public Optional<Boolean> globalReachEnabled() {
        return Optional.ofNullable(this.globalReachEnabled);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of peerings.
     * 
     */
    public List<ExpressRouteCircuitPeeringResponse> peerings() {
        return this.peerings == null ? List.of() : this.peerings;
    }
    /**
     * @return The provisioning state of the express route circuit resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The ServiceKey.
     * 
     */
    public Optional<String> serviceKey() {
        return Optional.ofNullable(this.serviceKey);
    }
    /**
     * @return The ServiceProviderNotes.
     * 
     */
    public Optional<String> serviceProviderNotes() {
        return Optional.ofNullable(this.serviceProviderNotes);
    }
    /**
     * @return The ServiceProviderProperties.
     * 
     */
    public Optional<ExpressRouteCircuitServiceProviderPropertiesResponse> serviceProviderProperties() {
        return Optional.ofNullable(this.serviceProviderProperties);
    }
    /**
     * @return The ServiceProviderProvisioningState state of the resource.
     * 
     */
    public Optional<String> serviceProviderProvisioningState() {
        return Optional.ofNullable(this.serviceProviderProvisioningState);
    }
    /**
     * @return The SKU.
     * 
     */
    public Optional<ExpressRouteCircuitSkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
     * 
     */
    public Integer stag() {
        return this.stag;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExpressRouteCircuitResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowClassicOperations;
        private @Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations;
        private @Nullable Double bandwidthInGbps;
        private @Nullable String circuitProvisioningState;
        private String etag;
        private @Nullable SubResourceResponse expressRoutePort;
        private @Nullable String gatewayManagerEtag;
        private @Nullable Boolean globalReachEnabled;
        private @Nullable String id;
        private @Nullable String location;
        private String name;
        private @Nullable List<ExpressRouteCircuitPeeringResponse> peerings;
        private String provisioningState;
        private @Nullable String serviceKey;
        private @Nullable String serviceProviderNotes;
        private @Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties;
        private @Nullable String serviceProviderProvisioningState;
        private @Nullable ExpressRouteCircuitSkuResponse sku;
        private Integer stag;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetExpressRouteCircuitResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowClassicOperations = defaults.allowClassicOperations;
    	      this.authorizations = defaults.authorizations;
    	      this.bandwidthInGbps = defaults.bandwidthInGbps;
    	      this.circuitProvisioningState = defaults.circuitProvisioningState;
    	      this.etag = defaults.etag;
    	      this.expressRoutePort = defaults.expressRoutePort;
    	      this.gatewayManagerEtag = defaults.gatewayManagerEtag;
    	      this.globalReachEnabled = defaults.globalReachEnabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peerings = defaults.peerings;
    	      this.provisioningState = defaults.provisioningState;
    	      this.serviceKey = defaults.serviceKey;
    	      this.serviceProviderNotes = defaults.serviceProviderNotes;
    	      this.serviceProviderProperties = defaults.serviceProviderProperties;
    	      this.serviceProviderProvisioningState = defaults.serviceProviderProvisioningState;
    	      this.sku = defaults.sku;
    	      this.stag = defaults.stag;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder allowClassicOperations(@Nullable Boolean allowClassicOperations) {
            this.allowClassicOperations = allowClassicOperations;
            return this;
        }
        @CustomType.Setter
        public Builder authorizations(@Nullable List<ExpressRouteCircuitAuthorizationResponse> authorizations) {
            this.authorizations = authorizations;
            return this;
        }
        public Builder authorizations(ExpressRouteCircuitAuthorizationResponse... authorizations) {
            return authorizations(List.of(authorizations));
        }
        @CustomType.Setter
        public Builder bandwidthInGbps(@Nullable Double bandwidthInGbps) {
            this.bandwidthInGbps = bandwidthInGbps;
            return this;
        }
        @CustomType.Setter
        public Builder circuitProvisioningState(@Nullable String circuitProvisioningState) {
            this.circuitProvisioningState = circuitProvisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder expressRoutePort(@Nullable SubResourceResponse expressRoutePort) {
            this.expressRoutePort = expressRoutePort;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayManagerEtag(@Nullable String gatewayManagerEtag) {
            this.gatewayManagerEtag = gatewayManagerEtag;
            return this;
        }
        @CustomType.Setter
        public Builder globalReachEnabled(@Nullable Boolean globalReachEnabled) {
            this.globalReachEnabled = globalReachEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peerings(@Nullable List<ExpressRouteCircuitPeeringResponse> peerings) {
            this.peerings = peerings;
            return this;
        }
        public Builder peerings(ExpressRouteCircuitPeeringResponse... peerings) {
            return peerings(List.of(peerings));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder serviceKey(@Nullable String serviceKey) {
            this.serviceKey = serviceKey;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderNotes(@Nullable String serviceProviderNotes) {
            this.serviceProviderNotes = serviceProviderNotes;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderProperties(@Nullable ExpressRouteCircuitServiceProviderPropertiesResponse serviceProviderProperties) {
            this.serviceProviderProperties = serviceProviderProperties;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderProvisioningState(@Nullable String serviceProviderProvisioningState) {
            this.serviceProviderProvisioningState = serviceProviderProvisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable ExpressRouteCircuitSkuResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder stag(Integer stag) {
            this.stag = Objects.requireNonNull(stag);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetExpressRouteCircuitResult build() {
            final var o = new GetExpressRouteCircuitResult();
            o.allowClassicOperations = allowClassicOperations;
            o.authorizations = authorizations;
            o.bandwidthInGbps = bandwidthInGbps;
            o.circuitProvisioningState = circuitProvisioningState;
            o.etag = etag;
            o.expressRoutePort = expressRoutePort;
            o.gatewayManagerEtag = gatewayManagerEtag;
            o.globalReachEnabled = globalReachEnabled;
            o.id = id;
            o.location = location;
            o.name = name;
            o.peerings = peerings;
            o.provisioningState = provisioningState;
            o.serviceKey = serviceKey;
            o.serviceProviderNotes = serviceProviderNotes;
            o.serviceProviderProperties = serviceProviderProperties;
            o.serviceProviderProvisioningState = serviceProviderProvisioningState;
            o.sku = sku;
            o.stag = stag;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
