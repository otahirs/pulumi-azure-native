// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ColumnResponse {
    /**
     * @return Column data type logical hint.
     * 
     */
    private @Nullable String dataTypeHint;
    /**
     * @return Column description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Column display name.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Is displayed by default.
     * 
     */
    private Boolean isDefaultDisplay;
    /**
     * @return Is column hidden.
     * 
     */
    private Boolean isHidden;
    /**
     * @return Column name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Column data type.
     * 
     */
    private @Nullable String type;

    private ColumnResponse() {}
    /**
     * @return Column data type logical hint.
     * 
     */
    public Optional<String> dataTypeHint() {
        return Optional.ofNullable(this.dataTypeHint);
    }
    /**
     * @return Column description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Column display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Is displayed by default.
     * 
     */
    public Boolean isDefaultDisplay() {
        return this.isDefaultDisplay;
    }
    /**
     * @return Is column hidden.
     * 
     */
    public Boolean isHidden() {
        return this.isHidden;
    }
    /**
     * @return Column name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Column data type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ColumnResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dataTypeHint;
        private @Nullable String description;
        private @Nullable String displayName;
        private Boolean isDefaultDisplay;
        private Boolean isHidden;
        private @Nullable String name;
        private @Nullable String type;
        public Builder() {}
        public Builder(ColumnResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataTypeHint = defaults.dataTypeHint;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.isDefaultDisplay = defaults.isDefaultDisplay;
    	      this.isHidden = defaults.isHidden;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder dataTypeHint(@Nullable String dataTypeHint) {
            this.dataTypeHint = dataTypeHint;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultDisplay(Boolean isDefaultDisplay) {
            this.isDefaultDisplay = Objects.requireNonNull(isDefaultDisplay);
            return this;
        }
        @CustomType.Setter
        public Builder isHidden(Boolean isHidden) {
            this.isHidden = Objects.requireNonNull(isHidden);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public ColumnResponse build() {
            final var o = new ColumnResponse();
            o.dataTypeHint = dataTypeHint;
            o.description = description;
            o.displayName = displayName;
            o.isDefaultDisplay = isDefaultDisplay;
            o.isHidden = isHidden;
            o.name = name;
            o.type = type;
            return o;
        }
    }
}
