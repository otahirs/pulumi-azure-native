// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiskResult {
    /**
     * @return The creation date of the disk.
     * 
     */
    private String createdDate;
    /**
     * @return When backed by a blob, the name of the VHD blob without extension.
     * 
     */
    private @Nullable String diskBlobName;
    /**
     * @return The size of the disk in Gibibytes.
     * 
     */
    private @Nullable Integer diskSizeGiB;
    /**
     * @return The storage type for the disk (i.e. Standard, Premium).
     * 
     */
    private @Nullable String diskType;
    /**
     * @return When backed by a blob, the URI of underlying blob.
     * 
     */
    private @Nullable String diskUri;
    /**
     * @return The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
     * 
     */
    private @Nullable String hostCaching;
    /**
     * @return The identifier of the resource.
     * 
     */
    private String id;
    /**
     * @return The resource ID of the VM to which this disk is leased.
     * 
     */
    private @Nullable String leasedByLabVmId;
    /**
     * @return The location of the resource.
     * 
     */
    private @Nullable String location;
    /**
     * @return When backed by managed disk, this is the ID of the compute disk resource.
     * 
     */
    private @Nullable String managedDiskId;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The provisioning status of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return When backed by a blob, the storage account where the blob is.
     * 
     */
    private @Nullable String storageAccountId;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    private String uniqueIdentifier;

    private GetDiskResult() {}
    /**
     * @return The creation date of the disk.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return When backed by a blob, the name of the VHD blob without extension.
     * 
     */
    public Optional<String> diskBlobName() {
        return Optional.ofNullable(this.diskBlobName);
    }
    /**
     * @return The size of the disk in Gibibytes.
     * 
     */
    public Optional<Integer> diskSizeGiB() {
        return Optional.ofNullable(this.diskSizeGiB);
    }
    /**
     * @return The storage type for the disk (i.e. Standard, Premium).
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return When backed by a blob, the URI of underlying blob.
     * 
     */
    public Optional<String> diskUri() {
        return Optional.ofNullable(this.diskUri);
    }
    /**
     * @return The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
     * 
     */
    public Optional<String> hostCaching() {
        return Optional.ofNullable(this.hostCaching);
    }
    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The resource ID of the VM to which this disk is leased.
     * 
     */
    public Optional<String> leasedByLabVmId() {
        return Optional.ofNullable(this.leasedByLabVmId);
    }
    /**
     * @return The location of the resource.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return When backed by managed disk, this is the ID of the compute disk resource.
     * 
     */
    public Optional<String> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning status of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return When backed by a blob, the storage account where the blob is.
     * 
     */
    public Optional<String> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdDate;
        private @Nullable String diskBlobName;
        private @Nullable Integer diskSizeGiB;
        private @Nullable String diskType;
        private @Nullable String diskUri;
        private @Nullable String hostCaching;
        private String id;
        private @Nullable String leasedByLabVmId;
        private @Nullable String location;
        private @Nullable String managedDiskId;
        private String name;
        private String provisioningState;
        private @Nullable String storageAccountId;
        private @Nullable Map<String,String> tags;
        private String type;
        private String uniqueIdentifier;
        public Builder() {}
        public Builder(GetDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdDate = defaults.createdDate;
    	      this.diskBlobName = defaults.diskBlobName;
    	      this.diskSizeGiB = defaults.diskSizeGiB;
    	      this.diskType = defaults.diskType;
    	      this.diskUri = defaults.diskUri;
    	      this.hostCaching = defaults.hostCaching;
    	      this.id = defaults.id;
    	      this.leasedByLabVmId = defaults.leasedByLabVmId;
    	      this.location = defaults.location;
    	      this.managedDiskId = defaults.managedDiskId;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder diskBlobName(@Nullable String diskBlobName) {
            this.diskBlobName = diskBlobName;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGiB(@Nullable Integer diskSizeGiB) {
            this.diskSizeGiB = diskSizeGiB;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder diskUri(@Nullable String diskUri) {
            this.diskUri = diskUri;
            return this;
        }
        @CustomType.Setter
        public Builder hostCaching(@Nullable String hostCaching) {
            this.hostCaching = hostCaching;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder leasedByLabVmId(@Nullable String leasedByLabVmId) {
            this.leasedByLabVmId = leasedByLabVmId;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managedDiskId(@Nullable String managedDiskId) {
            this.managedDiskId = managedDiskId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(@Nullable String storageAccountId) {
            this.storageAccountId = storageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }
        public GetDiskResult build() {
            final var o = new GetDiskResult();
            o.createdDate = createdDate;
            o.diskBlobName = diskBlobName;
            o.diskSizeGiB = diskSizeGiB;
            o.diskType = diskType;
            o.diskUri = diskUri;
            o.hostCaching = hostCaching;
            o.id = id;
            o.leasedByLabVmId = leasedByLabVmId;
            o.location = location;
            o.managedDiskId = managedDiskId;
            o.name = name;
            o.provisioningState = provisioningState;
            o.storageAccountId = storageAccountId;
            o.tags = tags;
            o.type = type;
            o.uniqueIdentifier = uniqueIdentifier;
            return o;
        }
    }
}
