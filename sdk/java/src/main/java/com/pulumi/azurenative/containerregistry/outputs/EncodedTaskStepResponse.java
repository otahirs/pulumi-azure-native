// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.outputs;

import com.pulumi.azurenative.containerregistry.outputs.BaseImageDependencyResponse;
import com.pulumi.azurenative.containerregistry.outputs.SetValueResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EncodedTaskStepResponse {
    /**
     * @return List of base image dependencies for a step.
     * 
     */
    private List<BaseImageDependencyResponse> baseImageDependencies;
    /**
     * @return The token (git PAT or SAS token of storage account blob) associated with the context for a step.
     * 
     */
    private @Nullable String contextAccessToken;
    /**
     * @return The URL(absolute or relative) of the source context for the task step.
     * 
     */
    private @Nullable String contextPath;
    /**
     * @return Base64 encoded value of the template/definition file content.
     * 
     */
    private String encodedTaskContent;
    /**
     * @return Base64 encoded value of the parameters/values file content.
     * 
     */
    private @Nullable String encodedValuesContent;
    /**
     * @return The type of the step.
     * Expected value is &#39;EncodedTask&#39;.
     * 
     */
    private String type;
    /**
     * @return The collection of overridable values that can be passed when running a task.
     * 
     */
    private @Nullable List<SetValueResponse> values;

    private EncodedTaskStepResponse() {}
    /**
     * @return List of base image dependencies for a step.
     * 
     */
    public List<BaseImageDependencyResponse> baseImageDependencies() {
        return this.baseImageDependencies;
    }
    /**
     * @return The token (git PAT or SAS token of storage account blob) associated with the context for a step.
     * 
     */
    public Optional<String> contextAccessToken() {
        return Optional.ofNullable(this.contextAccessToken);
    }
    /**
     * @return The URL(absolute or relative) of the source context for the task step.
     * 
     */
    public Optional<String> contextPath() {
        return Optional.ofNullable(this.contextPath);
    }
    /**
     * @return Base64 encoded value of the template/definition file content.
     * 
     */
    public String encodedTaskContent() {
        return this.encodedTaskContent;
    }
    /**
     * @return Base64 encoded value of the parameters/values file content.
     * 
     */
    public Optional<String> encodedValuesContent() {
        return Optional.ofNullable(this.encodedValuesContent);
    }
    /**
     * @return The type of the step.
     * Expected value is &#39;EncodedTask&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The collection of overridable values that can be passed when running a task.
     * 
     */
    public List<SetValueResponse> values() {
        return this.values == null ? List.of() : this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncodedTaskStepResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<BaseImageDependencyResponse> baseImageDependencies;
        private @Nullable String contextAccessToken;
        private @Nullable String contextPath;
        private String encodedTaskContent;
        private @Nullable String encodedValuesContent;
        private String type;
        private @Nullable List<SetValueResponse> values;
        public Builder() {}
        public Builder(EncodedTaskStepResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseImageDependencies = defaults.baseImageDependencies;
    	      this.contextAccessToken = defaults.contextAccessToken;
    	      this.contextPath = defaults.contextPath;
    	      this.encodedTaskContent = defaults.encodedTaskContent;
    	      this.encodedValuesContent = defaults.encodedValuesContent;
    	      this.type = defaults.type;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder baseImageDependencies(List<BaseImageDependencyResponse> baseImageDependencies) {
            this.baseImageDependencies = Objects.requireNonNull(baseImageDependencies);
            return this;
        }
        public Builder baseImageDependencies(BaseImageDependencyResponse... baseImageDependencies) {
            return baseImageDependencies(List.of(baseImageDependencies));
        }
        @CustomType.Setter
        public Builder contextAccessToken(@Nullable String contextAccessToken) {
            this.contextAccessToken = contextAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder contextPath(@Nullable String contextPath) {
            this.contextPath = contextPath;
            return this;
        }
        @CustomType.Setter
        public Builder encodedTaskContent(String encodedTaskContent) {
            this.encodedTaskContent = Objects.requireNonNull(encodedTaskContent);
            return this;
        }
        @CustomType.Setter
        public Builder encodedValuesContent(@Nullable String encodedValuesContent) {
            this.encodedValuesContent = encodedValuesContent;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<SetValueResponse> values) {
            this.values = values;
            return this;
        }
        public Builder values(SetValueResponse... values) {
            return values(List.of(values));
        }
        public EncodedTaskStepResponse build() {
            final var o = new EncodedTaskStepResponse();
            o.baseImageDependencies = baseImageDependencies;
            o.contextAccessToken = contextAccessToken;
            o.contextPath = contextPath;
            o.encodedTaskContent = encodedTaskContent;
            o.encodedValuesContent = encodedValuesContent;
            o.type = type;
            o.values = values;
            return o;
        }
    }
}
