// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionResult {
    /**
     * @return Determines whether tracing is enabled
     * 
     */
    private @Nullable Boolean allowTracing;
    /**
     * @return Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    private String createdDate;
    /**
     * @return The name of the subscription, or null if the subscription has no name.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    private @Nullable String endDate;
    /**
     * @return Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    private @Nullable String expirationDate;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    private @Nullable String notificationDate;
    /**
     * @return The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
     * 
     */
    private @Nullable String ownerId;
    /**
     * @return Subscription primary key. This property will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39; POST request to get the value.
     * 
     */
    private @Nullable String primaryKey;
    /**
     * @return Scope like /products/{productId} or /apis or /apis/{apiId}.
     * 
     */
    private String scope;
    /**
     * @return Subscription secondary key. This property will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39; POST request to get the value.
     * 
     */
    private @Nullable String secondaryKey;
    /**
     * @return Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    private @Nullable String startDate;
    /**
     * @return Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
     * 
     */
    private String state;
    /**
     * @return Optional subscription comment added by an administrator when the state is changed to the &#39;rejected&#39;.
     * 
     */
    private @Nullable String stateComment;
    /**
     * @return Resource type for API Management resource.
     * 
     */
    private String type;

    private GetSubscriptionResult() {}
    /**
     * @return Determines whether tracing is enabled
     * 
     */
    public Optional<Boolean> allowTracing() {
        return Optional.ofNullable(this.allowTracing);
    }
    /**
     * @return Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return The name of the subscription, or null if the subscription has no name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public Optional<String> endDate() {
        return Optional.ofNullable(this.endDate);
    }
    /**
     * @return Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public Optional<String> notificationDate() {
        return Optional.ofNullable(this.notificationDate);
    }
    /**
     * @return The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
     * 
     */
    public Optional<String> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }
    /**
     * @return Subscription primary key. This property will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39; POST request to get the value.
     * 
     */
    public Optional<String> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }
    /**
     * @return Scope like /products/{productId} or /apis or /apis/{apiId}.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return Subscription secondary key. This property will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39; POST request to get the value.
     * 
     */
    public Optional<String> secondaryKey() {
        return Optional.ofNullable(this.secondaryKey);
    }
    /**
     * @return Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }
    /**
     * @return Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Optional subscription comment added by an administrator when the state is changed to the &#39;rejected&#39;.
     * 
     */
    public Optional<String> stateComment() {
        return Optional.ofNullable(this.stateComment);
    }
    /**
     * @return Resource type for API Management resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowTracing;
        private String createdDate;
        private @Nullable String displayName;
        private @Nullable String endDate;
        private @Nullable String expirationDate;
        private String id;
        private String name;
        private @Nullable String notificationDate;
        private @Nullable String ownerId;
        private @Nullable String primaryKey;
        private String scope;
        private @Nullable String secondaryKey;
        private @Nullable String startDate;
        private String state;
        private @Nullable String stateComment;
        private String type;
        public Builder() {}
        public Builder(GetSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowTracing = defaults.allowTracing;
    	      this.createdDate = defaults.createdDate;
    	      this.displayName = defaults.displayName;
    	      this.endDate = defaults.endDate;
    	      this.expirationDate = defaults.expirationDate;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.notificationDate = defaults.notificationDate;
    	      this.ownerId = defaults.ownerId;
    	      this.primaryKey = defaults.primaryKey;
    	      this.scope = defaults.scope;
    	      this.secondaryKey = defaults.secondaryKey;
    	      this.startDate = defaults.startDate;
    	      this.state = defaults.state;
    	      this.stateComment = defaults.stateComment;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder allowTracing(@Nullable Boolean allowTracing) {
            this.allowTracing = allowTracing;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notificationDate(@Nullable String notificationDate) {
            this.notificationDate = notificationDate;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(@Nullable String ownerId) {
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder primaryKey(@Nullable String primaryKey) {
            this.primaryKey = primaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryKey(@Nullable String secondaryKey) {
            this.secondaryKey = secondaryKey;
            return this;
        }
        @CustomType.Setter
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder stateComment(@Nullable String stateComment) {
            this.stateComment = stateComment;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetSubscriptionResult build() {
            final var o = new GetSubscriptionResult();
            o.allowTracing = allowTracing;
            o.createdDate = createdDate;
            o.displayName = displayName;
            o.endDate = endDate;
            o.expirationDate = expirationDate;
            o.id = id;
            o.name = name;
            o.notificationDate = notificationDate;
            o.ownerId = ownerId;
            o.primaryKey = primaryKey;
            o.scope = scope;
            o.secondaryKey = secondaryKey;
            o.startDate = startDate;
            o.state = state;
            o.stateComment = stateComment;
            o.type = type;
            return o;
        }
    }
}
