// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.IpsecPolicyResponse;
import com.pulumi.azurenative.network.outputs.LocalNetworkGatewayResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.TrafficSelectorPolicyResponse;
import com.pulumi.azurenative.network.outputs.TunnelConnectionHealthResponse;
import com.pulumi.azurenative.network.outputs.VirtualNetworkGatewayResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualNetworkGatewayConnectionResult {
    /**
     * @return The authorizationKey.
     * 
     */
    private @Nullable String authorizationKey;
    /**
     * @return The connection mode for this connection.
     * 
     */
    private @Nullable String connectionMode;
    /**
     * @return Connection protocol used for this connection.
     * 
     */
    private @Nullable String connectionProtocol;
    /**
     * @return Virtual Network Gateway connection status.
     * 
     */
    private String connectionStatus;
    /**
     * @return Gateway connection type.
     * 
     */
    private String connectionType;
    /**
     * @return The dead peer detection timeout of this connection in seconds.
     * 
     */
    private @Nullable Integer dpdTimeoutSeconds;
    /**
     * @return The egress bytes transferred in this connection.
     * 
     */
    private Double egressBytesTransferred;
    /**
     * @return EnableBgp flag.
     * 
     */
    private @Nullable Boolean enableBgp;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Bypass ExpressRoute Gateway for data forwarding.
     * 
     */
    private @Nullable Boolean expressRouteGatewayBypass;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return The ingress bytes transferred in this connection.
     * 
     */
    private Double ingressBytesTransferred;
    /**
     * @return The IPSec Policies to be considered by this connection.
     * 
     */
    private @Nullable List<IpsecPolicyResponse> ipsecPolicies;
    /**
     * @return The reference to local network gateway resource.
     * 
     */
    private @Nullable LocalNetworkGatewayResponse localNetworkGateway2;
    /**
     * @return Resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The reference to peerings resource.
     * 
     */
    private @Nullable SubResourceResponse peer;
    /**
     * @return The provisioning state of the virtual network gateway connection resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The resource GUID property of the virtual network gateway connection resource.
     * 
     */
    private String resourceGuid;
    /**
     * @return The routing weight.
     * 
     */
    private @Nullable Integer routingWeight;
    /**
     * @return The IPSec shared key.
     * 
     */
    private @Nullable String sharedKey;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The Traffic Selector Policies to be considered by this connection.
     * 
     */
    private @Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies;
    /**
     * @return Collection of all tunnels&#39; connection health status.
     * 
     */
    private List<TunnelConnectionHealthResponse> tunnelConnectionStatus;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return Use private local Azure IP for the connection.
     * 
     */
    private @Nullable Boolean useLocalAzureIpAddress;
    /**
     * @return Enable policy-based traffic selectors.
     * 
     */
    private @Nullable Boolean usePolicyBasedTrafficSelectors;
    /**
     * @return The reference to virtual network gateway resource.
     * 
     */
    private VirtualNetworkGatewayResponse virtualNetworkGateway1;
    /**
     * @return The reference to virtual network gateway resource.
     * 
     */
    private @Nullable VirtualNetworkGatewayResponse virtualNetworkGateway2;

    private GetVirtualNetworkGatewayConnectionResult() {}
    /**
     * @return The authorizationKey.
     * 
     */
    public Optional<String> authorizationKey() {
        return Optional.ofNullable(this.authorizationKey);
    }
    /**
     * @return The connection mode for this connection.
     * 
     */
    public Optional<String> connectionMode() {
        return Optional.ofNullable(this.connectionMode);
    }
    /**
     * @return Connection protocol used for this connection.
     * 
     */
    public Optional<String> connectionProtocol() {
        return Optional.ofNullable(this.connectionProtocol);
    }
    /**
     * @return Virtual Network Gateway connection status.
     * 
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }
    /**
     * @return Gateway connection type.
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return The dead peer detection timeout of this connection in seconds.
     * 
     */
    public Optional<Integer> dpdTimeoutSeconds() {
        return Optional.ofNullable(this.dpdTimeoutSeconds);
    }
    /**
     * @return The egress bytes transferred in this connection.
     * 
     */
    public Double egressBytesTransferred() {
        return this.egressBytesTransferred;
    }
    /**
     * @return EnableBgp flag.
     * 
     */
    public Optional<Boolean> enableBgp() {
        return Optional.ofNullable(this.enableBgp);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Bypass ExpressRoute Gateway for data forwarding.
     * 
     */
    public Optional<Boolean> expressRouteGatewayBypass() {
        return Optional.ofNullable(this.expressRouteGatewayBypass);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The ingress bytes transferred in this connection.
     * 
     */
    public Double ingressBytesTransferred() {
        return this.ingressBytesTransferred;
    }
    /**
     * @return The IPSec Policies to be considered by this connection.
     * 
     */
    public List<IpsecPolicyResponse> ipsecPolicies() {
        return this.ipsecPolicies == null ? List.of() : this.ipsecPolicies;
    }
    /**
     * @return The reference to local network gateway resource.
     * 
     */
    public Optional<LocalNetworkGatewayResponse> localNetworkGateway2() {
        return Optional.ofNullable(this.localNetworkGateway2);
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The reference to peerings resource.
     * 
     */
    public Optional<SubResourceResponse> peer() {
        return Optional.ofNullable(this.peer);
    }
    /**
     * @return The provisioning state of the virtual network gateway connection resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The resource GUID property of the virtual network gateway connection resource.
     * 
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * @return The routing weight.
     * 
     */
    public Optional<Integer> routingWeight() {
        return Optional.ofNullable(this.routingWeight);
    }
    /**
     * @return The IPSec shared key.
     * 
     */
    public Optional<String> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The Traffic Selector Policies to be considered by this connection.
     * 
     */
    public List<TrafficSelectorPolicyResponse> trafficSelectorPolicies() {
        return this.trafficSelectorPolicies == null ? List.of() : this.trafficSelectorPolicies;
    }
    /**
     * @return Collection of all tunnels&#39; connection health status.
     * 
     */
    public List<TunnelConnectionHealthResponse> tunnelConnectionStatus() {
        return this.tunnelConnectionStatus;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Use private local Azure IP for the connection.
     * 
     */
    public Optional<Boolean> useLocalAzureIpAddress() {
        return Optional.ofNullable(this.useLocalAzureIpAddress);
    }
    /**
     * @return Enable policy-based traffic selectors.
     * 
     */
    public Optional<Boolean> usePolicyBasedTrafficSelectors() {
        return Optional.ofNullable(this.usePolicyBasedTrafficSelectors);
    }
    /**
     * @return The reference to virtual network gateway resource.
     * 
     */
    public VirtualNetworkGatewayResponse virtualNetworkGateway1() {
        return this.virtualNetworkGateway1;
    }
    /**
     * @return The reference to virtual network gateway resource.
     * 
     */
    public Optional<VirtualNetworkGatewayResponse> virtualNetworkGateway2() {
        return Optional.ofNullable(this.virtualNetworkGateway2);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkGatewayConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorizationKey;
        private @Nullable String connectionMode;
        private @Nullable String connectionProtocol;
        private String connectionStatus;
        private String connectionType;
        private @Nullable Integer dpdTimeoutSeconds;
        private Double egressBytesTransferred;
        private @Nullable Boolean enableBgp;
        private String etag;
        private @Nullable Boolean expressRouteGatewayBypass;
        private @Nullable String id;
        private Double ingressBytesTransferred;
        private @Nullable List<IpsecPolicyResponse> ipsecPolicies;
        private @Nullable LocalNetworkGatewayResponse localNetworkGateway2;
        private @Nullable String location;
        private String name;
        private @Nullable SubResourceResponse peer;
        private String provisioningState;
        private String resourceGuid;
        private @Nullable Integer routingWeight;
        private @Nullable String sharedKey;
        private @Nullable Map<String,String> tags;
        private @Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies;
        private List<TunnelConnectionHealthResponse> tunnelConnectionStatus;
        private String type;
        private @Nullable Boolean useLocalAzureIpAddress;
        private @Nullable Boolean usePolicyBasedTrafficSelectors;
        private VirtualNetworkGatewayResponse virtualNetworkGateway1;
        private @Nullable VirtualNetworkGatewayResponse virtualNetworkGateway2;
        public Builder() {}
        public Builder(GetVirtualNetworkGatewayConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationKey = defaults.authorizationKey;
    	      this.connectionMode = defaults.connectionMode;
    	      this.connectionProtocol = defaults.connectionProtocol;
    	      this.connectionStatus = defaults.connectionStatus;
    	      this.connectionType = defaults.connectionType;
    	      this.dpdTimeoutSeconds = defaults.dpdTimeoutSeconds;
    	      this.egressBytesTransferred = defaults.egressBytesTransferred;
    	      this.enableBgp = defaults.enableBgp;
    	      this.etag = defaults.etag;
    	      this.expressRouteGatewayBypass = defaults.expressRouteGatewayBypass;
    	      this.id = defaults.id;
    	      this.ingressBytesTransferred = defaults.ingressBytesTransferred;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.localNetworkGateway2 = defaults.localNetworkGateway2;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peer = defaults.peer;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.routingWeight = defaults.routingWeight;
    	      this.sharedKey = defaults.sharedKey;
    	      this.tags = defaults.tags;
    	      this.trafficSelectorPolicies = defaults.trafficSelectorPolicies;
    	      this.tunnelConnectionStatus = defaults.tunnelConnectionStatus;
    	      this.type = defaults.type;
    	      this.useLocalAzureIpAddress = defaults.useLocalAzureIpAddress;
    	      this.usePolicyBasedTrafficSelectors = defaults.usePolicyBasedTrafficSelectors;
    	      this.virtualNetworkGateway1 = defaults.virtualNetworkGateway1;
    	      this.virtualNetworkGateway2 = defaults.virtualNetworkGateway2;
        }

        @CustomType.Setter
        public Builder authorizationKey(@Nullable String authorizationKey) {
            this.authorizationKey = authorizationKey;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMode(@Nullable String connectionMode) {
            this.connectionMode = connectionMode;
            return this;
        }
        @CustomType.Setter
        public Builder connectionProtocol(@Nullable String connectionProtocol) {
            this.connectionProtocol = connectionProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStatus(String connectionStatus) {
            this.connectionStatus = Objects.requireNonNull(connectionStatus);
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        @CustomType.Setter
        public Builder dpdTimeoutSeconds(@Nullable Integer dpdTimeoutSeconds) {
            this.dpdTimeoutSeconds = dpdTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder egressBytesTransferred(Double egressBytesTransferred) {
            this.egressBytesTransferred = Objects.requireNonNull(egressBytesTransferred);
            return this;
        }
        @CustomType.Setter
        public Builder enableBgp(@Nullable Boolean enableBgp) {
            this.enableBgp = enableBgp;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder expressRouteGatewayBypass(@Nullable Boolean expressRouteGatewayBypass) {
            this.expressRouteGatewayBypass = expressRouteGatewayBypass;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ingressBytesTransferred(Double ingressBytesTransferred) {
            this.ingressBytesTransferred = Objects.requireNonNull(ingressBytesTransferred);
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPolicies(@Nullable List<IpsecPolicyResponse> ipsecPolicies) {
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        public Builder ipsecPolicies(IpsecPolicyResponse... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }
        @CustomType.Setter
        public Builder localNetworkGateway2(@Nullable LocalNetworkGatewayResponse localNetworkGateway2) {
            this.localNetworkGateway2 = localNetworkGateway2;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peer(@Nullable SubResourceResponse peer) {
            this.peer = peer;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        @CustomType.Setter
        public Builder routingWeight(@Nullable Integer routingWeight) {
            this.routingWeight = routingWeight;
            return this;
        }
        @CustomType.Setter
        public Builder sharedKey(@Nullable String sharedKey) {
            this.sharedKey = sharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder trafficSelectorPolicies(@Nullable List<TrafficSelectorPolicyResponse> trafficSelectorPolicies) {
            this.trafficSelectorPolicies = trafficSelectorPolicies;
            return this;
        }
        public Builder trafficSelectorPolicies(TrafficSelectorPolicyResponse... trafficSelectorPolicies) {
            return trafficSelectorPolicies(List.of(trafficSelectorPolicies));
        }
        @CustomType.Setter
        public Builder tunnelConnectionStatus(List<TunnelConnectionHealthResponse> tunnelConnectionStatus) {
            this.tunnelConnectionStatus = Objects.requireNonNull(tunnelConnectionStatus);
            return this;
        }
        public Builder tunnelConnectionStatus(TunnelConnectionHealthResponse... tunnelConnectionStatus) {
            return tunnelConnectionStatus(List.of(tunnelConnectionStatus));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder useLocalAzureIpAddress(@Nullable Boolean useLocalAzureIpAddress) {
            this.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder usePolicyBasedTrafficSelectors(@Nullable Boolean usePolicyBasedTrafficSelectors) {
            this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkGateway1(VirtualNetworkGatewayResponse virtualNetworkGateway1) {
            this.virtualNetworkGateway1 = Objects.requireNonNull(virtualNetworkGateway1);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkGateway2(@Nullable VirtualNetworkGatewayResponse virtualNetworkGateway2) {
            this.virtualNetworkGateway2 = virtualNetworkGateway2;
            return this;
        }
        public GetVirtualNetworkGatewayConnectionResult build() {
            final var o = new GetVirtualNetworkGatewayConnectionResult();
            o.authorizationKey = authorizationKey;
            o.connectionMode = connectionMode;
            o.connectionProtocol = connectionProtocol;
            o.connectionStatus = connectionStatus;
            o.connectionType = connectionType;
            o.dpdTimeoutSeconds = dpdTimeoutSeconds;
            o.egressBytesTransferred = egressBytesTransferred;
            o.enableBgp = enableBgp;
            o.etag = etag;
            o.expressRouteGatewayBypass = expressRouteGatewayBypass;
            o.id = id;
            o.ingressBytesTransferred = ingressBytesTransferred;
            o.ipsecPolicies = ipsecPolicies;
            o.localNetworkGateway2 = localNetworkGateway2;
            o.location = location;
            o.name = name;
            o.peer = peer;
            o.provisioningState = provisioningState;
            o.resourceGuid = resourceGuid;
            o.routingWeight = routingWeight;
            o.sharedKey = sharedKey;
            o.tags = tags;
            o.trafficSelectorPolicies = trafficSelectorPolicies;
            o.tunnelConnectionStatus = tunnelConnectionStatus;
            o.type = type;
            o.useLocalAzureIpAddress = useLocalAzureIpAddress;
            o.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            o.virtualNetworkGateway1 = virtualNetworkGateway1;
            o.virtualNetworkGateway2 = virtualNetworkGateway2;
            return o;
        }
    }
}
