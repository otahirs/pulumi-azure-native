// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationGatewaySslCertificateResponse {
    /**
     * @return Base-64 encoded pfx certificate. Only applicable in PUT Request.
     * 
     */
    private @Nullable String data;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Secret Id of (base-64 encoded unencrypted pfx) &#39;Secret&#39; or &#39;Certificate&#39; object stored in KeyVault.
     * 
     */
    private @Nullable String keyVaultSecretId;
    /**
     * @return Name of the SSL certificate that is unique within an Application Gateway.
     * 
     */
    private @Nullable String name;
    /**
     * @return Password for the pfx file specified in data. Only applicable in PUT request.
     * 
     */
    private @Nullable String password;
    /**
     * @return The provisioning state of the SSL certificate resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
     * 
     */
    private String publicCertData;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private ApplicationGatewaySslCertificateResponse() {}
    /**
     * @return Base-64 encoded pfx certificate. Only applicable in PUT Request.
     * 
     */
    public Optional<String> data() {
        return Optional.ofNullable(this.data);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Secret Id of (base-64 encoded unencrypted pfx) &#39;Secret&#39; or &#39;Certificate&#39; object stored in KeyVault.
     * 
     */
    public Optional<String> keyVaultSecretId() {
        return Optional.ofNullable(this.keyVaultSecretId);
    }
    /**
     * @return Name of the SSL certificate that is unique within an Application Gateway.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Password for the pfx file specified in data. Only applicable in PUT request.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The provisioning state of the SSL certificate resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
     * 
     */
    public String publicCertData() {
        return this.publicCertData;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewaySslCertificateResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String data;
        private String etag;
        private @Nullable String id;
        private @Nullable String keyVaultSecretId;
        private @Nullable String name;
        private @Nullable String password;
        private String provisioningState;
        private String publicCertData;
        private String type;
        public Builder() {}
        public Builder(ApplicationGatewaySslCertificateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.data = defaults.data;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.keyVaultSecretId = defaults.keyVaultSecretId;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicCertData = defaults.publicCertData;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder data(@Nullable String data) {
            this.data = data;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultSecretId(@Nullable String keyVaultSecretId) {
            this.keyVaultSecretId = keyVaultSecretId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder publicCertData(String publicCertData) {
            this.publicCertData = Objects.requireNonNull(publicCertData);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ApplicationGatewaySslCertificateResponse build() {
            final var o = new ApplicationGatewaySslCertificateResponse();
            o.data = data;
            o.etag = etag;
            o.id = id;
            o.keyVaultSecretId = keyVaultSecretId;
            o.name = name;
            o.password = password;
            o.provisioningState = provisioningState;
            o.publicCertData = publicCertData;
            o.type = type;
            return o;
        }
    }
}
