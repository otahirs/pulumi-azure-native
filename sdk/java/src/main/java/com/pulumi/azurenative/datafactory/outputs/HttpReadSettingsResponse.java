// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HttpReadSettingsResponse {
    /**
     * @return The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object additionalHeaders;
    /**
     * @return If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    private @Nullable Object disableMetricsCollection;
    /**
     * @return Indicates whether to enable partition discovery.
     * 
     */
    private @Nullable Boolean enablePartitionDiscovery;
    /**
     * @return The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    private @Nullable Object maxConcurrentConnections;
    /**
     * @return Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object partitionRootPath;
    /**
     * @return The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object requestBody;
    /**
     * @return The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object requestMethod;
    /**
     * @return Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
     * 
     */
    private @Nullable Object requestTimeout;
    /**
     * @return The read setting type.
     * Expected value is &#39;HttpReadSettings&#39;.
     * 
     */
    private String type;

    private HttpReadSettingsResponse() {}
    /**
     * @return The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> additionalHeaders() {
        return Optional.ofNullable(this.additionalHeaders);
    }
    /**
     * @return If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }
    /**
     * @return Indicates whether to enable partition discovery.
     * 
     */
    public Optional<Boolean> enablePartitionDiscovery() {
        return Optional.ofNullable(this.enablePartitionDiscovery);
    }
    /**
     * @return The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }
    /**
     * @return Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> partitionRootPath() {
        return Optional.ofNullable(this.partitionRootPath);
    }
    /**
     * @return The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }
    /**
     * @return The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> requestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }
    /**
     * @return Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
     * 
     */
    public Optional<Object> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }
    /**
     * @return The read setting type.
     * Expected value is &#39;HttpReadSettings&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpReadSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Object additionalHeaders;
        private @Nullable Object disableMetricsCollection;
        private @Nullable Boolean enablePartitionDiscovery;
        private @Nullable Object maxConcurrentConnections;
        private @Nullable Object partitionRootPath;
        private @Nullable Object requestBody;
        private @Nullable Object requestMethod;
        private @Nullable Object requestTimeout;
        private String type;
        public Builder() {}
        public Builder(HttpReadSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalHeaders = defaults.additionalHeaders;
    	      this.disableMetricsCollection = defaults.disableMetricsCollection;
    	      this.enablePartitionDiscovery = defaults.enablePartitionDiscovery;
    	      this.maxConcurrentConnections = defaults.maxConcurrentConnections;
    	      this.partitionRootPath = defaults.partitionRootPath;
    	      this.requestBody = defaults.requestBody;
    	      this.requestMethod = defaults.requestMethod;
    	      this.requestTimeout = defaults.requestTimeout;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder additionalHeaders(@Nullable Object additionalHeaders) {
            this.additionalHeaders = additionalHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            this.disableMetricsCollection = disableMetricsCollection;
            return this;
        }
        @CustomType.Setter
        public Builder enablePartitionDiscovery(@Nullable Boolean enablePartitionDiscovery) {
            this.enablePartitionDiscovery = enablePartitionDiscovery;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            this.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }
        @CustomType.Setter
        public Builder partitionRootPath(@Nullable Object partitionRootPath) {
            this.partitionRootPath = partitionRootPath;
            return this;
        }
        @CustomType.Setter
        public Builder requestBody(@Nullable Object requestBody) {
            this.requestBody = requestBody;
            return this;
        }
        @CustomType.Setter
        public Builder requestMethod(@Nullable Object requestMethod) {
            this.requestMethod = requestMethod;
            return this;
        }
        @CustomType.Setter
        public Builder requestTimeout(@Nullable Object requestTimeout) {
            this.requestTimeout = requestTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public HttpReadSettingsResponse build() {
            final var o = new HttpReadSettingsResponse();
            o.additionalHeaders = additionalHeaders;
            o.disableMetricsCollection = disableMetricsCollection;
            o.enablePartitionDiscovery = enablePartitionDiscovery;
            o.maxConcurrentConnections = maxConcurrentConnections;
            o.partitionRootPath = partitionRootPath;
            o.requestBody = requestBody;
            o.requestMethod = requestMethod;
            o.requestTimeout = requestTimeout;
            o.type = type;
            return o;
        }
    }
}
