// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificatePropertiesResponse {
    /**
     * @return The activate date of certificate.
     * 
     */
    private String activateDate;
    /**
     * @return The certificate version of key vault.
     * 
     */
    private @Nullable String certVersion;
    /**
     * @return The domain list of certificate.
     * 
     */
    private List<String> dnsNames;
    /**
     * @return The expiration date of certificate.
     * 
     */
    private String expirationDate;
    /**
     * @return The issue date of certificate.
     * 
     */
    private String issuedDate;
    /**
     * @return The issuer of certificate.
     * 
     */
    private String issuer;
    /**
     * @return The certificate name of key vault.
     * 
     */
    private String keyVaultCertName;
    /**
     * @return The subject name of certificate.
     * 
     */
    private String subjectName;
    /**
     * @return The thumbprint of certificate.
     * 
     */
    private String thumbprint;
    /**
     * @return The vault uri of user key vault.
     * 
     */
    private String vaultUri;

    private CertificatePropertiesResponse() {}
    /**
     * @return The activate date of certificate.
     * 
     */
    public String activateDate() {
        return this.activateDate;
    }
    /**
     * @return The certificate version of key vault.
     * 
     */
    public Optional<String> certVersion() {
        return Optional.ofNullable(this.certVersion);
    }
    /**
     * @return The domain list of certificate.
     * 
     */
    public List<String> dnsNames() {
        return this.dnsNames;
    }
    /**
     * @return The expiration date of certificate.
     * 
     */
    public String expirationDate() {
        return this.expirationDate;
    }
    /**
     * @return The issue date of certificate.
     * 
     */
    public String issuedDate() {
        return this.issuedDate;
    }
    /**
     * @return The issuer of certificate.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The certificate name of key vault.
     * 
     */
    public String keyVaultCertName() {
        return this.keyVaultCertName;
    }
    /**
     * @return The subject name of certificate.
     * 
     */
    public String subjectName() {
        return this.subjectName;
    }
    /**
     * @return The thumbprint of certificate.
     * 
     */
    public String thumbprint() {
        return this.thumbprint;
    }
    /**
     * @return The vault uri of user key vault.
     * 
     */
    public String vaultUri() {
        return this.vaultUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificatePropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activateDate;
        private @Nullable String certVersion;
        private List<String> dnsNames;
        private String expirationDate;
        private String issuedDate;
        private String issuer;
        private String keyVaultCertName;
        private String subjectName;
        private String thumbprint;
        private String vaultUri;
        public Builder() {}
        public Builder(CertificatePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activateDate = defaults.activateDate;
    	      this.certVersion = defaults.certVersion;
    	      this.dnsNames = defaults.dnsNames;
    	      this.expirationDate = defaults.expirationDate;
    	      this.issuedDate = defaults.issuedDate;
    	      this.issuer = defaults.issuer;
    	      this.keyVaultCertName = defaults.keyVaultCertName;
    	      this.subjectName = defaults.subjectName;
    	      this.thumbprint = defaults.thumbprint;
    	      this.vaultUri = defaults.vaultUri;
        }

        @CustomType.Setter
        public Builder activateDate(String activateDate) {
            this.activateDate = Objects.requireNonNull(activateDate);
            return this;
        }
        @CustomType.Setter
        public Builder certVersion(@Nullable String certVersion) {
            this.certVersion = certVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dnsNames(List<String> dnsNames) {
            this.dnsNames = Objects.requireNonNull(dnsNames);
            return this;
        }
        public Builder dnsNames(String... dnsNames) {
            return dnsNames(List.of(dnsNames));
        }
        @CustomType.Setter
        public Builder expirationDate(String expirationDate) {
            this.expirationDate = Objects.requireNonNull(expirationDate);
            return this;
        }
        @CustomType.Setter
        public Builder issuedDate(String issuedDate) {
            this.issuedDate = Objects.requireNonNull(issuedDate);
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultCertName(String keyVaultCertName) {
            this.keyVaultCertName = Objects.requireNonNull(keyVaultCertName);
            return this;
        }
        @CustomType.Setter
        public Builder subjectName(String subjectName) {
            this.subjectName = Objects.requireNonNull(subjectName);
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(String thumbprint) {
            this.thumbprint = Objects.requireNonNull(thumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder vaultUri(String vaultUri) {
            this.vaultUri = Objects.requireNonNull(vaultUri);
            return this;
        }
        public CertificatePropertiesResponse build() {
            final var o = new CertificatePropertiesResponse();
            o.activateDate = activateDate;
            o.certVersion = certVersion;
            o.dnsNames = dnsNames;
            o.expirationDate = expirationDate;
            o.issuedDate = issuedDate;
            o.issuer = issuer;
            o.keyVaultCertName = keyVaultCertName;
            o.subjectName = subjectName;
            o.thumbprint = thumbprint;
            o.vaultUri = vaultUri;
            return o;
        }
    }
}
