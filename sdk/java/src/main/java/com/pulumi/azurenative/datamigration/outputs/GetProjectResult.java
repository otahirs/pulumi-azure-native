// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.DatabaseInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.MiSqlConnectionInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.MySqlConnectionInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.PostgreSqlConnectionInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return UTC Date and time when project was created
     * 
     */
    private String creationTime;
    /**
     * @return List of DatabaseInfo
     * 
     */
    private @Nullable List<DatabaseInfoResponse> databasesInfo;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Resource location.
     * 
     */
    private String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The project&#39;s provisioning state
     * 
     */
    private String provisioningState;
    /**
     * @return Information for connecting to source
     * 
     */
    private @Nullable Object sourceConnectionInfo;
    /**
     * @return Source platform for the project
     * 
     */
    private String sourcePlatform;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Information for connecting to target
     * 
     */
    private @Nullable Object targetConnectionInfo;
    /**
     * @return Target platform for the project
     * 
     */
    private String targetPlatform;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetProjectResult() {}
    /**
     * @return UTC Date and time when project was created
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return List of DatabaseInfo
     * 
     */
    public List<DatabaseInfoResponse> databasesInfo() {
        return this.databasesInfo == null ? List.of() : this.databasesInfo;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The project&#39;s provisioning state
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Information for connecting to source
     * 
     */
    public Optional<Object> sourceConnectionInfo() {
        return Optional.ofNullable(this.sourceConnectionInfo);
    }
    /**
     * @return Source platform for the project
     * 
     */
    public String sourcePlatform() {
        return this.sourcePlatform;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Information for connecting to target
     * 
     */
    public Optional<Object> targetConnectionInfo() {
        return Optional.ofNullable(this.targetConnectionInfo);
    }
    /**
     * @return Target platform for the project
     * 
     */
    public String targetPlatform() {
        return this.targetPlatform;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationTime;
        private @Nullable List<DatabaseInfoResponse> databasesInfo;
        private String id;
        private String location;
        private String name;
        private String provisioningState;
        private @Nullable Object sourceConnectionInfo;
        private String sourcePlatform;
        private @Nullable Map<String,String> tags;
        private @Nullable Object targetConnectionInfo;
        private String targetPlatform;
        private String type;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.databasesInfo = defaults.databasesInfo;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.sourcePlatform = defaults.sourcePlatform;
    	      this.tags = defaults.tags;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
    	      this.targetPlatform = defaults.targetPlatform;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder databasesInfo(@Nullable List<DatabaseInfoResponse> databasesInfo) {
            this.databasesInfo = databasesInfo;
            return this;
        }
        public Builder databasesInfo(DatabaseInfoResponse... databasesInfo) {
            return databasesInfo(List.of(databasesInfo));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder sourceConnectionInfo(@Nullable Object sourceConnectionInfo) {
            this.sourceConnectionInfo = sourceConnectionInfo;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePlatform(String sourcePlatform) {
            this.sourcePlatform = Objects.requireNonNull(sourcePlatform);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetConnectionInfo(@Nullable Object targetConnectionInfo) {
            this.targetConnectionInfo = targetConnectionInfo;
            return this;
        }
        @CustomType.Setter
        public Builder targetPlatform(String targetPlatform) {
            this.targetPlatform = Objects.requireNonNull(targetPlatform);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.creationTime = creationTime;
            o.databasesInfo = databasesInfo;
            o.id = id;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.sourceConnectionInfo = sourceConnectionInfo;
            o.sourcePlatform = sourcePlatform;
            o.tags = tags;
            o.targetConnectionInfo = targetConnectionInfo;
            o.targetPlatform = targetPlatform;
            o.type = type;
            return o;
        }
    }
}
