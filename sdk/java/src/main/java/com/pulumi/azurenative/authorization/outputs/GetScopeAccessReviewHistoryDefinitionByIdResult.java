// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.outputs;

import com.pulumi.azurenative.authorization.outputs.AccessReviewHistoryInstanceResponse;
import com.pulumi.azurenative.authorization.outputs.AccessReviewScopeResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetScopeAccessReviewHistoryDefinitionByIdResult {
    /**
     * @return Date time when history definition was created
     * 
     */
    private String createdDateTime;
    /**
     * @return Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
     * 
     */
    private @Nullable List<String> decisions;
    /**
     * @return The display name for the history definition.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return The DateTime when the review is scheduled to end. Required if type is endDate
     * 
     */
    private @Nullable String endDate;
    /**
     * @return The access review history definition id.
     * 
     */
    private String id;
    /**
     * @return Set of access review history instances for this history definition.
     * 
     */
    private @Nullable List<AccessReviewHistoryInstanceResponse> instances;
    /**
     * @return The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return The access review history definition unique id.
     * 
     */
    private String name;
    /**
     * @return The number of times to repeat the access review. Required and must be positive if type is numbered.
     * 
     */
    private @Nullable Integer numberOfOccurrences;
    /**
     * @return The identity id
     * 
     */
    private String principalId;
    /**
     * @return The identity display name
     * 
     */
    private String principalName;
    /**
     * @return The identity type : user/servicePrincipal
     * 
     */
    private String principalType;
    /**
     * @return Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
     * 
     */
    private String reviewHistoryPeriodEndDateTime;
    /**
     * @return Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
     * 
     */
    private String reviewHistoryPeriodStartDateTime;
    /**
     * @return A collection of scopes used when selecting review history data
     * 
     */
    private @Nullable List<AccessReviewScopeResponse> scopes;
    /**
     * @return The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
     * 
     */
    private @Nullable String startDate;
    /**
     * @return This read-only field specifies the of the requested review history data. This is either requested, in-progress, done or error.
     * 
     */
    private String status;
    /**
     * @return The resource type.
     * 
     */
    private String type;
    /**
     * @return The user principal name(if valid)
     * 
     */
    private String userPrincipalName;

    private GetScopeAccessReviewHistoryDefinitionByIdResult() {}
    /**
     * @return Date time when history definition was created
     * 
     */
    public String createdDateTime() {
        return this.createdDateTime;
    }
    /**
     * @return Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
     * 
     */
    public List<String> decisions() {
        return this.decisions == null ? List.of() : this.decisions;
    }
    /**
     * @return The display name for the history definition.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return The DateTime when the review is scheduled to end. Required if type is endDate
     * 
     */
    public Optional<String> endDate() {
        return Optional.ofNullable(this.endDate);
    }
    /**
     * @return The access review history definition id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set of access review history instances for this history definition.
     * 
     */
    public List<AccessReviewHistoryInstanceResponse> instances() {
        return this.instances == null ? List.of() : this.instances;
    }
    /**
     * @return The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return The access review history definition unique id.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of times to repeat the access review. Required and must be positive if type is numbered.
     * 
     */
    public Optional<Integer> numberOfOccurrences() {
        return Optional.ofNullable(this.numberOfOccurrences);
    }
    /**
     * @return The identity id
     * 
     */
    public String principalId() {
        return this.principalId;
    }
    /**
     * @return The identity display name
     * 
     */
    public String principalName() {
        return this.principalName;
    }
    /**
     * @return The identity type : user/servicePrincipal
     * 
     */
    public String principalType() {
        return this.principalType;
    }
    /**
     * @return Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
     * 
     */
    public String reviewHistoryPeriodEndDateTime() {
        return this.reviewHistoryPeriodEndDateTime;
    }
    /**
     * @return Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
     * 
     */
    public String reviewHistoryPeriodStartDateTime() {
        return this.reviewHistoryPeriodStartDateTime;
    }
    /**
     * @return A collection of scopes used when selecting review history data
     * 
     */
    public List<AccessReviewScopeResponse> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
     * 
     */
    public Optional<String> startDate() {
        return Optional.ofNullable(this.startDate);
    }
    /**
     * @return This read-only field specifies the of the requested review history data. This is either requested, in-progress, done or error.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The user principal name(if valid)
     * 
     */
    public String userPrincipalName() {
        return this.userPrincipalName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScopeAccessReviewHistoryDefinitionByIdResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdDateTime;
        private @Nullable List<String> decisions;
        private @Nullable String displayName;
        private @Nullable String endDate;
        private String id;
        private @Nullable List<AccessReviewHistoryInstanceResponse> instances;
        private @Nullable Integer interval;
        private String name;
        private @Nullable Integer numberOfOccurrences;
        private String principalId;
        private String principalName;
        private String principalType;
        private String reviewHistoryPeriodEndDateTime;
        private String reviewHistoryPeriodStartDateTime;
        private @Nullable List<AccessReviewScopeResponse> scopes;
        private @Nullable String startDate;
        private String status;
        private String type;
        private String userPrincipalName;
        public Builder() {}
        public Builder(GetScopeAccessReviewHistoryDefinitionByIdResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdDateTime = defaults.createdDateTime;
    	      this.decisions = defaults.decisions;
    	      this.displayName = defaults.displayName;
    	      this.endDate = defaults.endDate;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.interval = defaults.interval;
    	      this.name = defaults.name;
    	      this.numberOfOccurrences = defaults.numberOfOccurrences;
    	      this.principalId = defaults.principalId;
    	      this.principalName = defaults.principalName;
    	      this.principalType = defaults.principalType;
    	      this.reviewHistoryPeriodEndDateTime = defaults.reviewHistoryPeriodEndDateTime;
    	      this.reviewHistoryPeriodStartDateTime = defaults.reviewHistoryPeriodStartDateTime;
    	      this.scopes = defaults.scopes;
    	      this.startDate = defaults.startDate;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.userPrincipalName = defaults.userPrincipalName;
        }

        @CustomType.Setter
        public Builder createdDateTime(String createdDateTime) {
            this.createdDateTime = Objects.requireNonNull(createdDateTime);
            return this;
        }
        @CustomType.Setter
        public Builder decisions(@Nullable List<String> decisions) {
            this.decisions = decisions;
            return this;
        }
        public Builder decisions(String... decisions) {
            return decisions(List.of(decisions));
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endDate(@Nullable String endDate) {
            this.endDate = endDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instances(@Nullable List<AccessReviewHistoryInstanceResponse> instances) {
            this.instances = instances;
            return this;
        }
        public Builder instances(AccessReviewHistoryInstanceResponse... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfOccurrences(@Nullable Integer numberOfOccurrences) {
            this.numberOfOccurrences = numberOfOccurrences;
            return this;
        }
        @CustomType.Setter
        public Builder principalId(String principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }
        @CustomType.Setter
        public Builder principalName(String principalName) {
            this.principalName = Objects.requireNonNull(principalName);
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            this.principalType = Objects.requireNonNull(principalType);
            return this;
        }
        @CustomType.Setter
        public Builder reviewHistoryPeriodEndDateTime(String reviewHistoryPeriodEndDateTime) {
            this.reviewHistoryPeriodEndDateTime = Objects.requireNonNull(reviewHistoryPeriodEndDateTime);
            return this;
        }
        @CustomType.Setter
        public Builder reviewHistoryPeriodStartDateTime(String reviewHistoryPeriodStartDateTime) {
            this.reviewHistoryPeriodStartDateTime = Objects.requireNonNull(reviewHistoryPeriodStartDateTime);
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<AccessReviewScopeResponse> scopes) {
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(AccessReviewScopeResponse... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder startDate(@Nullable String startDate) {
            this.startDate = startDate;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userPrincipalName(String userPrincipalName) {
            this.userPrincipalName = Objects.requireNonNull(userPrincipalName);
            return this;
        }
        public GetScopeAccessReviewHistoryDefinitionByIdResult build() {
            final var o = new GetScopeAccessReviewHistoryDefinitionByIdResult();
            o.createdDateTime = createdDateTime;
            o.decisions = decisions;
            o.displayName = displayName;
            o.endDate = endDate;
            o.id = id;
            o.instances = instances;
            o.interval = interval;
            o.name = name;
            o.numberOfOccurrences = numberOfOccurrences;
            o.principalId = principalId;
            o.principalName = principalName;
            o.principalType = principalType;
            o.reviewHistoryPeriodEndDateTime = reviewHistoryPeriodEndDateTime;
            o.reviewHistoryPeriodStartDateTime = reviewHistoryPeriodStartDateTime;
            o.scopes = scopes;
            o.startDate = startDate;
            o.status = status;
            o.type = type;
            o.userPrincipalName = userPrincipalName;
            return o;
        }
    }
}
