// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.outputs;

import com.pulumi.azurenative.servicefabric.outputs.ApplicationTypeVersionsCleanupPolicyResponse;
import com.pulumi.azurenative.servicefabric.outputs.AzureActiveDirectoryResponse;
import com.pulumi.azurenative.servicefabric.outputs.CertificateDescriptionResponse;
import com.pulumi.azurenative.servicefabric.outputs.ClientCertificateCommonNameResponse;
import com.pulumi.azurenative.servicefabric.outputs.ClientCertificateThumbprintResponse;
import com.pulumi.azurenative.servicefabric.outputs.ClusterUpgradePolicyResponse;
import com.pulumi.azurenative.servicefabric.outputs.ClusterVersionDetailsResponse;
import com.pulumi.azurenative.servicefabric.outputs.DiagnosticsStorageAccountConfigResponse;
import com.pulumi.azurenative.servicefabric.outputs.NodeTypeDescriptionResponse;
import com.pulumi.azurenative.servicefabric.outputs.ServerCertificateCommonNamesResponse;
import com.pulumi.azurenative.servicefabric.outputs.SettingsSectionDescriptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    /**
     * @return The list of add-on features to enable in the cluster.
     * 
     */
    private @Nullable List<String> addOnFeatures;
    /**
     * @return The policy used to clean up unused versions.
     * 
     */
    private @Nullable ApplicationTypeVersionsCleanupPolicyResponse applicationTypeVersionsCleanupPolicy;
    /**
     * @return The Service Fabric runtime versions available for this cluster.
     * 
     */
    private List<ClusterVersionDetailsResponse> availableClusterVersions;
    /**
     * @return The AAD authentication settings of the cluster.
     * 
     */
    private @Nullable AzureActiveDirectoryResponse azureActiveDirectory;
    /**
     * @return The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     * 
     */
    private @Nullable CertificateDescriptionResponse certificate;
    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    private @Nullable ServerCertificateCommonNamesResponse certificateCommonNames;
    /**
     * @return The list of client certificates referenced by common name that are allowed to manage the cluster.
     * 
     */
    private @Nullable List<ClientCertificateCommonNameResponse> clientCertificateCommonNames;
    /**
     * @return The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     * 
     */
    private @Nullable List<ClientCertificateThumbprintResponse> clientCertificateThumbprints;
    /**
     * @return The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     * 
     */
    private @Nullable String clusterCodeVersion;
    /**
     * @return The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
     * 
     */
    private String clusterEndpoint;
    /**
     * @return A service generated unique identifier for the cluster resource.
     * 
     */
    private String clusterId;
    /**
     * @return The current state of the cluster.
     * 
     *   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
     *   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
     *   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
     *   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
     *   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
     *   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to &#39;Automatic&#39;.
     *   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
     *   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
     *   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
     *   - Ready - Indicates that the cluster is in a stable state.
     * 
     */
    private String clusterState;
    /**
     * @return The storage account information for storing Service Fabric diagnostic logs.
     * 
     */
    private @Nullable DiagnosticsStorageAccountConfigResponse diagnosticsStorageAccountConfig;
    /**
     * @return Azure resource etag.
     * 
     */
    private String etag;
    /**
     * @return Indicates if the event store service is enabled.
     * 
     */
    private @Nullable Boolean eventStoreServiceEnabled;
    /**
     * @return The list of custom fabric settings to configure the cluster.
     * 
     */
    private @Nullable List<SettingsSectionDescriptionResponse> fabricSettings;
    /**
     * @return Azure resource identifier.
     * 
     */
    private String id;
    /**
     * @return Azure resource location.
     * 
     */
    private String location;
    /**
     * @return The http management endpoint of the cluster.
     * 
     */
    private String managementEndpoint;
    /**
     * @return Azure resource name.
     * 
     */
    private String name;
    /**
     * @return The list of node types in the cluster.
     * 
     */
    private List<NodeTypeDescriptionResponse> nodeTypes;
    /**
     * @return The provisioning state of the cluster resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     * 
     */
    private @Nullable String reliabilityLevel;
    /**
     * @return The server certificate used by reverse proxy.
     * 
     */
    private @Nullable CertificateDescriptionResponse reverseProxyCertificate;
    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    private @Nullable ServerCertificateCommonNamesResponse reverseProxyCertificateCommonNames;
    /**
     * @return Azure resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Azure resource type.
     * 
     */
    private String type;
    /**
     * @return The policy to use when upgrading the cluster.
     * 
     */
    private @Nullable ClusterUpgradePolicyResponse upgradeDescription;
    /**
     * @return The upgrade mode of the cluster when new Service Fabric runtime version is available.
     * 
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     * 
     */
    private @Nullable String upgradeMode;
    /**
     * @return The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     * 
     */
    private @Nullable String vmImage;

    private GetClusterResult() {}
    /**
     * @return The list of add-on features to enable in the cluster.
     * 
     */
    public List<String> addOnFeatures() {
        return this.addOnFeatures == null ? List.of() : this.addOnFeatures;
    }
    /**
     * @return The policy used to clean up unused versions.
     * 
     */
    public Optional<ApplicationTypeVersionsCleanupPolicyResponse> applicationTypeVersionsCleanupPolicy() {
        return Optional.ofNullable(this.applicationTypeVersionsCleanupPolicy);
    }
    /**
     * @return The Service Fabric runtime versions available for this cluster.
     * 
     */
    public List<ClusterVersionDetailsResponse> availableClusterVersions() {
        return this.availableClusterVersions;
    }
    /**
     * @return The AAD authentication settings of the cluster.
     * 
     */
    public Optional<AzureActiveDirectoryResponse> azureActiveDirectory() {
        return Optional.ofNullable(this.azureActiveDirectory);
    }
    /**
     * @return The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     * 
     */
    public Optional<CertificateDescriptionResponse> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    public Optional<ServerCertificateCommonNamesResponse> certificateCommonNames() {
        return Optional.ofNullable(this.certificateCommonNames);
    }
    /**
     * @return The list of client certificates referenced by common name that are allowed to manage the cluster.
     * 
     */
    public List<ClientCertificateCommonNameResponse> clientCertificateCommonNames() {
        return this.clientCertificateCommonNames == null ? List.of() : this.clientCertificateCommonNames;
    }
    /**
     * @return The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     * 
     */
    public List<ClientCertificateThumbprintResponse> clientCertificateThumbprints() {
        return this.clientCertificateThumbprints == null ? List.of() : this.clientCertificateThumbprints;
    }
    /**
     * @return The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     * 
     */
    public Optional<String> clusterCodeVersion() {
        return Optional.ofNullable(this.clusterCodeVersion);
    }
    /**
     * @return The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
     * 
     */
    public String clusterEndpoint() {
        return this.clusterEndpoint;
    }
    /**
     * @return A service generated unique identifier for the cluster resource.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The current state of the cluster.
     * 
     *   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
     *   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
     *   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
     *   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
     *   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
     *   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to &#39;Automatic&#39;.
     *   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
     *   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
     *   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
     *   - Ready - Indicates that the cluster is in a stable state.
     * 
     */
    public String clusterState() {
        return this.clusterState;
    }
    /**
     * @return The storage account information for storing Service Fabric diagnostic logs.
     * 
     */
    public Optional<DiagnosticsStorageAccountConfigResponse> diagnosticsStorageAccountConfig() {
        return Optional.ofNullable(this.diagnosticsStorageAccountConfig);
    }
    /**
     * @return Azure resource etag.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Indicates if the event store service is enabled.
     * 
     */
    public Optional<Boolean> eventStoreServiceEnabled() {
        return Optional.ofNullable(this.eventStoreServiceEnabled);
    }
    /**
     * @return The list of custom fabric settings to configure the cluster.
     * 
     */
    public List<SettingsSectionDescriptionResponse> fabricSettings() {
        return this.fabricSettings == null ? List.of() : this.fabricSettings;
    }
    /**
     * @return Azure resource identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Azure resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The http management endpoint of the cluster.
     * 
     */
    public String managementEndpoint() {
        return this.managementEndpoint;
    }
    /**
     * @return Azure resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of node types in the cluster.
     * 
     */
    public List<NodeTypeDescriptionResponse> nodeTypes() {
        return this.nodeTypes;
    }
    /**
     * @return The provisioning state of the cluster resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     * 
     */
    public Optional<String> reliabilityLevel() {
        return Optional.ofNullable(this.reliabilityLevel);
    }
    /**
     * @return The server certificate used by reverse proxy.
     * 
     */
    public Optional<CertificateDescriptionResponse> reverseProxyCertificate() {
        return Optional.ofNullable(this.reverseProxyCertificate);
    }
    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    public Optional<ServerCertificateCommonNamesResponse> reverseProxyCertificateCommonNames() {
        return Optional.ofNullable(this.reverseProxyCertificateCommonNames);
    }
    /**
     * @return Azure resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Azure resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The policy to use when upgrading the cluster.
     * 
     */
    public Optional<ClusterUpgradePolicyResponse> upgradeDescription() {
        return Optional.ofNullable(this.upgradeDescription);
    }
    /**
     * @return The upgrade mode of the cluster when new Service Fabric runtime version is available.
     * 
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     * 
     */
    public Optional<String> upgradeMode() {
        return Optional.ofNullable(this.upgradeMode);
    }
    /**
     * @return The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     * 
     */
    public Optional<String> vmImage() {
        return Optional.ofNullable(this.vmImage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> addOnFeatures;
        private @Nullable ApplicationTypeVersionsCleanupPolicyResponse applicationTypeVersionsCleanupPolicy;
        private List<ClusterVersionDetailsResponse> availableClusterVersions;
        private @Nullable AzureActiveDirectoryResponse azureActiveDirectory;
        private @Nullable CertificateDescriptionResponse certificate;
        private @Nullable ServerCertificateCommonNamesResponse certificateCommonNames;
        private @Nullable List<ClientCertificateCommonNameResponse> clientCertificateCommonNames;
        private @Nullable List<ClientCertificateThumbprintResponse> clientCertificateThumbprints;
        private @Nullable String clusterCodeVersion;
        private String clusterEndpoint;
        private String clusterId;
        private String clusterState;
        private @Nullable DiagnosticsStorageAccountConfigResponse diagnosticsStorageAccountConfig;
        private String etag;
        private @Nullable Boolean eventStoreServiceEnabled;
        private @Nullable List<SettingsSectionDescriptionResponse> fabricSettings;
        private String id;
        private String location;
        private String managementEndpoint;
        private String name;
        private List<NodeTypeDescriptionResponse> nodeTypes;
        private String provisioningState;
        private @Nullable String reliabilityLevel;
        private @Nullable CertificateDescriptionResponse reverseProxyCertificate;
        private @Nullable ServerCertificateCommonNamesResponse reverseProxyCertificateCommonNames;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable ClusterUpgradePolicyResponse upgradeDescription;
        private @Nullable String upgradeMode;
        private @Nullable String vmImage;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addOnFeatures = defaults.addOnFeatures;
    	      this.applicationTypeVersionsCleanupPolicy = defaults.applicationTypeVersionsCleanupPolicy;
    	      this.availableClusterVersions = defaults.availableClusterVersions;
    	      this.azureActiveDirectory = defaults.azureActiveDirectory;
    	      this.certificate = defaults.certificate;
    	      this.certificateCommonNames = defaults.certificateCommonNames;
    	      this.clientCertificateCommonNames = defaults.clientCertificateCommonNames;
    	      this.clientCertificateThumbprints = defaults.clientCertificateThumbprints;
    	      this.clusterCodeVersion = defaults.clusterCodeVersion;
    	      this.clusterEndpoint = defaults.clusterEndpoint;
    	      this.clusterId = defaults.clusterId;
    	      this.clusterState = defaults.clusterState;
    	      this.diagnosticsStorageAccountConfig = defaults.diagnosticsStorageAccountConfig;
    	      this.etag = defaults.etag;
    	      this.eventStoreServiceEnabled = defaults.eventStoreServiceEnabled;
    	      this.fabricSettings = defaults.fabricSettings;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.managementEndpoint = defaults.managementEndpoint;
    	      this.name = defaults.name;
    	      this.nodeTypes = defaults.nodeTypes;
    	      this.provisioningState = defaults.provisioningState;
    	      this.reliabilityLevel = defaults.reliabilityLevel;
    	      this.reverseProxyCertificate = defaults.reverseProxyCertificate;
    	      this.reverseProxyCertificateCommonNames = defaults.reverseProxyCertificateCommonNames;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.upgradeDescription = defaults.upgradeDescription;
    	      this.upgradeMode = defaults.upgradeMode;
    	      this.vmImage = defaults.vmImage;
        }

        @CustomType.Setter
        public Builder addOnFeatures(@Nullable List<String> addOnFeatures) {
            this.addOnFeatures = addOnFeatures;
            return this;
        }
        public Builder addOnFeatures(String... addOnFeatures) {
            return addOnFeatures(List.of(addOnFeatures));
        }
        @CustomType.Setter
        public Builder applicationTypeVersionsCleanupPolicy(@Nullable ApplicationTypeVersionsCleanupPolicyResponse applicationTypeVersionsCleanupPolicy) {
            this.applicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder availableClusterVersions(List<ClusterVersionDetailsResponse> availableClusterVersions) {
            this.availableClusterVersions = Objects.requireNonNull(availableClusterVersions);
            return this;
        }
        public Builder availableClusterVersions(ClusterVersionDetailsResponse... availableClusterVersions) {
            return availableClusterVersions(List.of(availableClusterVersions));
        }
        @CustomType.Setter
        public Builder azureActiveDirectory(@Nullable AzureActiveDirectoryResponse azureActiveDirectory) {
            this.azureActiveDirectory = azureActiveDirectory;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(@Nullable CertificateDescriptionResponse certificate) {
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateCommonNames(@Nullable ServerCertificateCommonNamesResponse certificateCommonNames) {
            this.certificateCommonNames = certificateCommonNames;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificateCommonNames(@Nullable List<ClientCertificateCommonNameResponse> clientCertificateCommonNames) {
            this.clientCertificateCommonNames = clientCertificateCommonNames;
            return this;
        }
        public Builder clientCertificateCommonNames(ClientCertificateCommonNameResponse... clientCertificateCommonNames) {
            return clientCertificateCommonNames(List.of(clientCertificateCommonNames));
        }
        @CustomType.Setter
        public Builder clientCertificateThumbprints(@Nullable List<ClientCertificateThumbprintResponse> clientCertificateThumbprints) {
            this.clientCertificateThumbprints = clientCertificateThumbprints;
            return this;
        }
        public Builder clientCertificateThumbprints(ClientCertificateThumbprintResponse... clientCertificateThumbprints) {
            return clientCertificateThumbprints(List.of(clientCertificateThumbprints));
        }
        @CustomType.Setter
        public Builder clusterCodeVersion(@Nullable String clusterCodeVersion) {
            this.clusterCodeVersion = clusterCodeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder clusterEndpoint(String clusterEndpoint) {
            this.clusterEndpoint = Objects.requireNonNull(clusterEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder clusterState(String clusterState) {
            this.clusterState = Objects.requireNonNull(clusterState);
            return this;
        }
        @CustomType.Setter
        public Builder diagnosticsStorageAccountConfig(@Nullable DiagnosticsStorageAccountConfigResponse diagnosticsStorageAccountConfig) {
            this.diagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder eventStoreServiceEnabled(@Nullable Boolean eventStoreServiceEnabled) {
            this.eventStoreServiceEnabled = eventStoreServiceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder fabricSettings(@Nullable List<SettingsSectionDescriptionResponse> fabricSettings) {
            this.fabricSettings = fabricSettings;
            return this;
        }
        public Builder fabricSettings(SettingsSectionDescriptionResponse... fabricSettings) {
            return fabricSettings(List.of(fabricSettings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder managementEndpoint(String managementEndpoint) {
            this.managementEndpoint = Objects.requireNonNull(managementEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeTypes(List<NodeTypeDescriptionResponse> nodeTypes) {
            this.nodeTypes = Objects.requireNonNull(nodeTypes);
            return this;
        }
        public Builder nodeTypes(NodeTypeDescriptionResponse... nodeTypes) {
            return nodeTypes(List.of(nodeTypes));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder reliabilityLevel(@Nullable String reliabilityLevel) {
            this.reliabilityLevel = reliabilityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder reverseProxyCertificate(@Nullable CertificateDescriptionResponse reverseProxyCertificate) {
            this.reverseProxyCertificate = reverseProxyCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder reverseProxyCertificateCommonNames(@Nullable ServerCertificateCommonNamesResponse reverseProxyCertificateCommonNames) {
            this.reverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeDescription(@Nullable ClusterUpgradePolicyResponse upgradeDescription) {
            this.upgradeDescription = upgradeDescription;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeMode(@Nullable String upgradeMode) {
            this.upgradeMode = upgradeMode;
            return this;
        }
        @CustomType.Setter
        public Builder vmImage(@Nullable String vmImage) {
            this.vmImage = vmImage;
            return this;
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.addOnFeatures = addOnFeatures;
            o.applicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            o.availableClusterVersions = availableClusterVersions;
            o.azureActiveDirectory = azureActiveDirectory;
            o.certificate = certificate;
            o.certificateCommonNames = certificateCommonNames;
            o.clientCertificateCommonNames = clientCertificateCommonNames;
            o.clientCertificateThumbprints = clientCertificateThumbprints;
            o.clusterCodeVersion = clusterCodeVersion;
            o.clusterEndpoint = clusterEndpoint;
            o.clusterId = clusterId;
            o.clusterState = clusterState;
            o.diagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
            o.etag = etag;
            o.eventStoreServiceEnabled = eventStoreServiceEnabled;
            o.fabricSettings = fabricSettings;
            o.id = id;
            o.location = location;
            o.managementEndpoint = managementEndpoint;
            o.name = name;
            o.nodeTypes = nodeTypes;
            o.provisioningState = provisioningState;
            o.reliabilityLevel = reliabilityLevel;
            o.reverseProxyCertificate = reverseProxyCertificate;
            o.reverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
            o.tags = tags;
            o.type = type;
            o.upgradeDescription = upgradeDescription;
            o.upgradeMode = upgradeMode;
            o.vmImage = vmImage;
            return o;
        }
    }
}
