// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OutboundRuleResponse {
    /**
     * @return The number of outbound ports to be used for NAT.
     * 
     */
    private @Nullable Integer allocatedOutboundPorts;
    /**
     * @return A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
     * 
     */
    private SubResourceResponse backendAddressPool;
    /**
     * @return Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     * 
     */
    private @Nullable Boolean enableTcpReset;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return The Frontend IP addresses of the load balancer.
     * 
     */
    private List<SubResourceResponse> frontendIPConfigurations;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return The timeout for the TCP idle connection.
     * 
     */
    private @Nullable Integer idleTimeoutInMinutes;
    /**
     * @return The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return The protocol for the outbound rule in load balancer.
     * 
     */
    private String protocol;
    /**
     * @return The provisioning state of the outbound rule resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private OutboundRuleResponse() {}
    /**
     * @return The number of outbound ports to be used for NAT.
     * 
     */
    public Optional<Integer> allocatedOutboundPorts() {
        return Optional.ofNullable(this.allocatedOutboundPorts);
    }
    /**
     * @return A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
     * 
     */
    public SubResourceResponse backendAddressPool() {
        return this.backendAddressPool;
    }
    /**
     * @return Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     * 
     */
    public Optional<Boolean> enableTcpReset() {
        return Optional.ofNullable(this.enableTcpReset);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The Frontend IP addresses of the load balancer.
     * 
     */
    public List<SubResourceResponse> frontendIPConfigurations() {
        return this.frontendIPConfigurations;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The timeout for the TCP idle connection.
     * 
     */
    public Optional<Integer> idleTimeoutInMinutes() {
        return Optional.ofNullable(this.idleTimeoutInMinutes);
    }
    /**
     * @return The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The protocol for the outbound rule in load balancer.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The provisioning state of the outbound rule resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OutboundRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer allocatedOutboundPorts;
        private SubResourceResponse backendAddressPool;
        private @Nullable Boolean enableTcpReset;
        private String etag;
        private List<SubResourceResponse> frontendIPConfigurations;
        private @Nullable String id;
        private @Nullable Integer idleTimeoutInMinutes;
        private @Nullable String name;
        private String protocol;
        private String provisioningState;
        private String type;
        public Builder() {}
        public Builder(OutboundRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedOutboundPorts = defaults.allocatedOutboundPorts;
    	      this.backendAddressPool = defaults.backendAddressPool;
    	      this.enableTcpReset = defaults.enableTcpReset;
    	      this.etag = defaults.etag;
    	      this.frontendIPConfigurations = defaults.frontendIPConfigurations;
    	      this.id = defaults.id;
    	      this.idleTimeoutInMinutes = defaults.idleTimeoutInMinutes;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder allocatedOutboundPorts(@Nullable Integer allocatedOutboundPorts) {
            this.allocatedOutboundPorts = allocatedOutboundPorts;
            return this;
        }
        @CustomType.Setter
        public Builder backendAddressPool(SubResourceResponse backendAddressPool) {
            this.backendAddressPool = Objects.requireNonNull(backendAddressPool);
            return this;
        }
        @CustomType.Setter
        public Builder enableTcpReset(@Nullable Boolean enableTcpReset) {
            this.enableTcpReset = enableTcpReset;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder frontendIPConfigurations(List<SubResourceResponse> frontendIPConfigurations) {
            this.frontendIPConfigurations = Objects.requireNonNull(frontendIPConfigurations);
            return this;
        }
        public Builder frontendIPConfigurations(SubResourceResponse... frontendIPConfigurations) {
            return frontendIPConfigurations(List.of(frontendIPConfigurations));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutInMinutes(@Nullable Integer idleTimeoutInMinutes) {
            this.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public OutboundRuleResponse build() {
            final var o = new OutboundRuleResponse();
            o.allocatedOutboundPorts = allocatedOutboundPorts;
            o.backendAddressPool = backendAddressPool;
            o.enableTcpReset = enableTcpReset;
            o.etag = etag;
            o.frontendIPConfigurations = frontendIPConfigurations;
            o.id = id;
            o.idleTimeoutInMinutes = idleTimeoutInMinutes;
            o.name = name;
            o.protocol = protocol;
            o.provisioningState = provisioningState;
            o.type = type;
            return o;
        }
    }
}
