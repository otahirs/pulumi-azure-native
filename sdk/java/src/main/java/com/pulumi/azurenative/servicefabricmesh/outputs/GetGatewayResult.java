// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.outputs;

import com.pulumi.azurenative.servicefabricmesh.outputs.HttpConfigResponse;
import com.pulumi.azurenative.servicefabricmesh.outputs.NetworkRefResponse;
import com.pulumi.azurenative.servicefabricmesh.outputs.TcpConfigResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGatewayResult {
    /**
     * @return User readable description of the gateway.
     * 
     */
    private @Nullable String description;
    /**
     * @return Network that the Application is using.
     * 
     */
    private NetworkRefResponse destinationNetwork;
    /**
     * @return Configuration for http connectivity for this gateway.
     * 
     */
    private @Nullable List<HttpConfigResponse> http;
    /**
     * @return Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return IP address of the gateway. This is populated in the response and is ignored for incoming requests.
     * 
     */
    private String ipAddress;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return State of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Network the gateway should listen on for requests.
     * 
     */
    private NetworkRefResponse sourceNetwork;
    /**
     * @return Status of the resource.
     * 
     */
    private String status;
    /**
     * @return Gives additional information about the current status of the gateway.
     * 
     */
    private String statusDetails;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Configuration for tcp connectivity for this gateway.
     * 
     */
    private @Nullable List<TcpConfigResponse> tcp;
    /**
     * @return The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    private String type;

    private GetGatewayResult() {}
    /**
     * @return User readable description of the gateway.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Network that the Application is using.
     * 
     */
    public NetworkRefResponse destinationNetwork() {
        return this.destinationNetwork;
    }
    /**
     * @return Configuration for http connectivity for this gateway.
     * 
     */
    public List<HttpConfigResponse> http() {
        return this.http == null ? List.of() : this.http;
    }
    /**
     * @return Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP address of the gateway. This is populated in the response and is ignored for incoming requests.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return State of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Network the gateway should listen on for requests.
     * 
     */
    public NetworkRefResponse sourceNetwork() {
        return this.sourceNetwork;
    }
    /**
     * @return Status of the resource.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Gives additional information about the current status of the gateway.
     * 
     */
    public String statusDetails() {
        return this.statusDetails;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Configuration for tcp connectivity for this gateway.
     * 
     */
    public List<TcpConfigResponse> tcp() {
        return this.tcp == null ? List.of() : this.tcp;
    }
    /**
     * @return The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private NetworkRefResponse destinationNetwork;
        private @Nullable List<HttpConfigResponse> http;
        private String id;
        private String ipAddress;
        private String location;
        private String name;
        private String provisioningState;
        private NetworkRefResponse sourceNetwork;
        private String status;
        private String statusDetails;
        private @Nullable Map<String,String> tags;
        private @Nullable List<TcpConfigResponse> tcp;
        private String type;
        public Builder() {}
        public Builder(GetGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.destinationNetwork = defaults.destinationNetwork;
    	      this.http = defaults.http;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sourceNetwork = defaults.sourceNetwork;
    	      this.status = defaults.status;
    	      this.statusDetails = defaults.statusDetails;
    	      this.tags = defaults.tags;
    	      this.tcp = defaults.tcp;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNetwork(NetworkRefResponse destinationNetwork) {
            this.destinationNetwork = Objects.requireNonNull(destinationNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder http(@Nullable List<HttpConfigResponse> http) {
            this.http = http;
            return this;
        }
        public Builder http(HttpConfigResponse... http) {
            return http(List.of(http));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder sourceNetwork(NetworkRefResponse sourceNetwork) {
            this.sourceNetwork = Objects.requireNonNull(sourceNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusDetails(String statusDetails) {
            this.statusDetails = Objects.requireNonNull(statusDetails);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(@Nullable List<TcpConfigResponse> tcp) {
            this.tcp = tcp;
            return this;
        }
        public Builder tcp(TcpConfigResponse... tcp) {
            return tcp(List.of(tcp));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetGatewayResult build() {
            final var o = new GetGatewayResult();
            o.description = description;
            o.destinationNetwork = destinationNetwork;
            o.http = http;
            o.id = id;
            o.ipAddress = ipAddress;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.sourceNetwork = sourceNetwork;
            o.status = status;
            o.statusDetails = statusDetails;
            o.tags = tags;
            o.tcp = tcp;
            o.type = type;
            return o;
        }
    }
}
