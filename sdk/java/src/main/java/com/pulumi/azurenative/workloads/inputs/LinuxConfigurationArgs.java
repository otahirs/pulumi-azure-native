// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.inputs.SshConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.SshKeyPairArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
 * 
 */
public final class LinuxConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinuxConfigurationArgs Empty = new LinuxConfigurationArgs();

    /**
     * Specifies whether password authentication should be disabled.
     * 
     */
    @Import(name="disablePasswordAuthentication")
    private @Nullable Output<Boolean> disablePasswordAuthentication;

    /**
     * @return Specifies whether password authentication should be disabled.
     * 
     */
    public Optional<Output<Boolean>> disablePasswordAuthentication() {
        return Optional.ofNullable(this.disablePasswordAuthentication);
    }

    /**
     * The OS Type
     * Expected value is &#39;Linux&#39;.
     * 
     */
    @Import(name="osType", required=true)
    private Output<String> osType;

    /**
     * @return The OS Type
     * Expected value is &#39;Linux&#39;.
     * 
     */
    public Output<String> osType() {
        return this.osType;
    }

    /**
     * Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use &#39;sshKeyPair&#39; instead)
     * 
     */
    @Import(name="ssh")
    private @Nullable Output<SshConfigurationArgs> ssh;

    /**
     * @return Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use &#39;sshKeyPair&#39; instead)
     * 
     */
    public Optional<Output<SshConfigurationArgs>> ssh() {
        return Optional.ofNullable(this.ssh);
    }

    /**
     * The SSH Key-pair used to authenticate with the VM&#39;s.
     * 
     */
    @Import(name="sshKeyPair")
    private @Nullable Output<SshKeyPairArgs> sshKeyPair;

    /**
     * @return The SSH Key-pair used to authenticate with the VM&#39;s.
     * 
     */
    public Optional<Output<SshKeyPairArgs>> sshKeyPair() {
        return Optional.ofNullable(this.sshKeyPair);
    }

    private LinuxConfigurationArgs() {}

    private LinuxConfigurationArgs(LinuxConfigurationArgs $) {
        this.disablePasswordAuthentication = $.disablePasswordAuthentication;
        this.osType = $.osType;
        this.ssh = $.ssh;
        this.sshKeyPair = $.sshKeyPair;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinuxConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinuxConfigurationArgs $;

        public Builder() {
            $ = new LinuxConfigurationArgs();
        }

        public Builder(LinuxConfigurationArgs defaults) {
            $ = new LinuxConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disablePasswordAuthentication Specifies whether password authentication should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disablePasswordAuthentication(@Nullable Output<Boolean> disablePasswordAuthentication) {
            $.disablePasswordAuthentication = disablePasswordAuthentication;
            return this;
        }

        /**
         * @param disablePasswordAuthentication Specifies whether password authentication should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disablePasswordAuthentication(Boolean disablePasswordAuthentication) {
            return disablePasswordAuthentication(Output.of(disablePasswordAuthentication));
        }

        /**
         * @param osType The OS Type
         * Expected value is &#39;Linux&#39;.
         * 
         * @return builder
         * 
         */
        public Builder osType(Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The OS Type
         * Expected value is &#39;Linux&#39;.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param ssh Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use &#39;sshKeyPair&#39; instead)
         * 
         * @return builder
         * 
         */
        public Builder ssh(@Nullable Output<SshConfigurationArgs> ssh) {
            $.ssh = ssh;
            return this;
        }

        /**
         * @param ssh Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use &#39;sshKeyPair&#39; instead)
         * 
         * @return builder
         * 
         */
        public Builder ssh(SshConfigurationArgs ssh) {
            return ssh(Output.of(ssh));
        }

        /**
         * @param sshKeyPair The SSH Key-pair used to authenticate with the VM&#39;s.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPair(@Nullable Output<SshKeyPairArgs> sshKeyPair) {
            $.sshKeyPair = sshKeyPair;
            return this;
        }

        /**
         * @param sshKeyPair The SSH Key-pair used to authenticate with the VM&#39;s.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyPair(SshKeyPairArgs sshKeyPair) {
            return sshKeyPair(Output.of(sshKeyPair));
        }

        public LinuxConfigurationArgs build() {
            $.osType = Codegen.stringProp("osType").output().arg($.osType).require();
            return $;
        }
    }

}
