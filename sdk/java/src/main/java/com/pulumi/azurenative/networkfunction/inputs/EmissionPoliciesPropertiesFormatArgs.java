// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.networkfunction.inputs;

import com.pulumi.azurenative.networkfunction.enums.EmissionType;
import com.pulumi.azurenative.networkfunction.inputs.EmissionPolicyDestinationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Emission policy properties.
 * 
 */
public final class EmissionPoliciesPropertiesFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmissionPoliciesPropertiesFormatArgs Empty = new EmissionPoliciesPropertiesFormatArgs();

    /**
     * Emission policy destinations.
     * 
     */
    @Import(name="emissionDestinations")
    private @Nullable Output<List<EmissionPolicyDestinationArgs>> emissionDestinations;

    /**
     * @return Emission policy destinations.
     * 
     */
    public Optional<Output<List<EmissionPolicyDestinationArgs>>> emissionDestinations() {
        return Optional.ofNullable(this.emissionDestinations);
    }

    /**
     * Emission format type.
     * 
     */
    @Import(name="emissionType")
    private @Nullable Output<Either<String,EmissionType>> emissionType;

    /**
     * @return Emission format type.
     * 
     */
    public Optional<Output<Either<String,EmissionType>>> emissionType() {
        return Optional.ofNullable(this.emissionType);
    }

    private EmissionPoliciesPropertiesFormatArgs() {}

    private EmissionPoliciesPropertiesFormatArgs(EmissionPoliciesPropertiesFormatArgs $) {
        this.emissionDestinations = $.emissionDestinations;
        this.emissionType = $.emissionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmissionPoliciesPropertiesFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmissionPoliciesPropertiesFormatArgs $;

        public Builder() {
            $ = new EmissionPoliciesPropertiesFormatArgs();
        }

        public Builder(EmissionPoliciesPropertiesFormatArgs defaults) {
            $ = new EmissionPoliciesPropertiesFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emissionDestinations Emission policy destinations.
         * 
         * @return builder
         * 
         */
        public Builder emissionDestinations(@Nullable Output<List<EmissionPolicyDestinationArgs>> emissionDestinations) {
            $.emissionDestinations = emissionDestinations;
            return this;
        }

        /**
         * @param emissionDestinations Emission policy destinations.
         * 
         * @return builder
         * 
         */
        public Builder emissionDestinations(List<EmissionPolicyDestinationArgs> emissionDestinations) {
            return emissionDestinations(Output.of(emissionDestinations));
        }

        /**
         * @param emissionDestinations Emission policy destinations.
         * 
         * @return builder
         * 
         */
        public Builder emissionDestinations(EmissionPolicyDestinationArgs... emissionDestinations) {
            return emissionDestinations(List.of(emissionDestinations));
        }

        /**
         * @param emissionType Emission format type.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(@Nullable Output<Either<String,EmissionType>> emissionType) {
            $.emissionType = emissionType;
            return this;
        }

        /**
         * @param emissionType Emission format type.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(Either<String,EmissionType> emissionType) {
            return emissionType(Output.of(emissionType));
        }

        /**
         * @param emissionType Emission format type.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(String emissionType) {
            return emissionType(Either.ofLeft(emissionType));
        }

        /**
         * @param emissionType Emission format type.
         * 
         * @return builder
         * 
         */
        public Builder emissionType(EmissionType emissionType) {
            return emissionType(Either.ofRight(emissionType));
        }

        public EmissionPoliciesPropertiesFormatArgs build() {
            return $;
        }
    }

}
