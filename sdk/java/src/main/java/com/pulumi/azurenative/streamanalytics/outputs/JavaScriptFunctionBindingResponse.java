// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JavaScriptFunctionBindingResponse {
    /**
     * @return The JavaScript code containing a single function definition. For example: &#39;function (x, y) { return x + y; }&#39;
     * 
     */
    private @Nullable String script;
    /**
     * @return Indicates the function binding type.
     * Expected value is &#39;Microsoft.StreamAnalytics/JavascriptUdf&#39;.
     * 
     */
    private String type;

    private JavaScriptFunctionBindingResponse() {}
    /**
     * @return The JavaScript code containing a single function definition. For example: &#39;function (x, y) { return x + y; }&#39;
     * 
     */
    public Optional<String> script() {
        return Optional.ofNullable(this.script);
    }
    /**
     * @return Indicates the function binding type.
     * Expected value is &#39;Microsoft.StreamAnalytics/JavascriptUdf&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JavaScriptFunctionBindingResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String script;
        private String type;
        public Builder() {}
        public Builder(JavaScriptFunctionBindingResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.script = defaults.script;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder script(@Nullable String script) {
            this.script = script;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public JavaScriptFunctionBindingResponse build() {
            final var o = new JavaScriptFunctionBindingResponse();
            o.script = script;
            o.type = type;
            return o;
        }
    }
}
