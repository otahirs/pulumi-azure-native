// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.outputs;

import com.pulumi.azurenative.costmanagement.outputs.ReportAggregationResponse;
import com.pulumi.azurenative.costmanagement.outputs.ReportDatasetConfigurationResponse;
import com.pulumi.azurenative.costmanagement.outputs.ReportFilterResponse;
import com.pulumi.azurenative.costmanagement.outputs.ReportGroupingResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportDatasetResponse {
    /**
     * @return Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     * 
     */
    private @Nullable Map<String,ReportAggregationResponse> aggregation;
    /**
     * @return Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     * 
     */
    private @Nullable ReportDatasetConfigurationResponse configuration;
    /**
     * @return Has filter expression to use in the report.
     * 
     */
    private @Nullable ReportFilterResponse filter;
    /**
     * @return The granularity of rows in the report.
     * 
     */
    private @Nullable String granularity;
    /**
     * @return Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     * 
     */
    private @Nullable List<ReportGroupingResponse> grouping;

    private ReportDatasetResponse() {}
    /**
     * @return Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     * 
     */
    public Map<String,ReportAggregationResponse> aggregation() {
        return this.aggregation == null ? Map.of() : this.aggregation;
    }
    /**
     * @return Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     * 
     */
    public Optional<ReportDatasetConfigurationResponse> configuration() {
        return Optional.ofNullable(this.configuration);
    }
    /**
     * @return Has filter expression to use in the report.
     * 
     */
    public Optional<ReportFilterResponse> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The granularity of rows in the report.
     * 
     */
    public Optional<String> granularity() {
        return Optional.ofNullable(this.granularity);
    }
    /**
     * @return Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     * 
     */
    public List<ReportGroupingResponse> grouping() {
        return this.grouping == null ? List.of() : this.grouping;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportDatasetResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,ReportAggregationResponse> aggregation;
        private @Nullable ReportDatasetConfigurationResponse configuration;
        private @Nullable ReportFilterResponse filter;
        private @Nullable String granularity;
        private @Nullable List<ReportGroupingResponse> grouping;
        public Builder() {}
        public Builder(ReportDatasetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.configuration = defaults.configuration;
    	      this.filter = defaults.filter;
    	      this.granularity = defaults.granularity;
    	      this.grouping = defaults.grouping;
        }

        @CustomType.Setter
        public Builder aggregation(@Nullable Map<String,ReportAggregationResponse> aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        @CustomType.Setter
        public Builder configuration(@Nullable ReportDatasetConfigurationResponse configuration) {
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable ReportFilterResponse filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder granularity(@Nullable String granularity) {
            this.granularity = granularity;
            return this;
        }
        @CustomType.Setter
        public Builder grouping(@Nullable List<ReportGroupingResponse> grouping) {
            this.grouping = grouping;
            return this;
        }
        public Builder grouping(ReportGroupingResponse... grouping) {
            return grouping(List.of(grouping));
        }
        public ReportDatasetResponse build() {
            final var o = new ReportDatasetResponse();
            o.aggregation = aggregation;
            o.configuration = configuration;
            o.filter = filter;
            o.granularity = granularity;
            o.grouping = grouping;
            return o;
        }
    }
}
