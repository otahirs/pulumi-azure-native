// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.outputs;

import com.pulumi.azurenative.costmanagement.outputs.KpiPropertiesResponse;
import com.pulumi.azurenative.costmanagement.outputs.PivotPropertiesResponse;
import com.pulumi.azurenative.costmanagement.outputs.ReportConfigDatasetResponse;
import com.pulumi.azurenative.costmanagement.outputs.ReportConfigTimePeriodResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetViewResult {
    /**
     * @return Show costs accumulated over time.
     * 
     */
    private @Nullable String accumulated;
    /**
     * @return Chart type of the main view in Cost Analysis. Required.
     * 
     */
    private @Nullable String chart;
    /**
     * @return Date the user created this view.
     * 
     */
    private String createdOn;
    /**
     * @return Selected currency.
     * 
     */
    private String currency;
    /**
     * @return Has definition for data in this report config.
     * 
     */
    private @Nullable ReportConfigDatasetResponse dataSet;
    /**
     * @return Selected date range for viewing cost in.
     * 
     */
    private String dateRange;
    /**
     * @return User input name of the view. Required.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    private @Nullable String eTag;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return Include monetary commitment
     * 
     */
    private Boolean includeMonetaryCommitment;
    /**
     * @return List of KPIs to show in Cost Analysis UI.
     * 
     */
    private @Nullable List<KpiPropertiesResponse> kpis;
    /**
     * @return Metric to use when displaying costs.
     * 
     */
    private @Nullable String metric;
    /**
     * @return Date when the user last modified this view.
     * 
     */
    private String modifiedOn;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Configuration of 3 sub-views in the Cost Analysis UI.
     * 
     */
    private @Nullable List<PivotPropertiesResponse> pivots;
    /**
     * @return Cost Management scope to save the view on. This includes &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;providers/Microsoft.Management/managementGroups/{managementGroupId}&#39; for Management Group scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
     * 
     */
    private @Nullable String scope;
    /**
     * @return Has time period for pulling data for the report.
     * 
     */
    private @Nullable ReportConfigTimePeriodResponse timePeriod;
    /**
     * @return The time frame for pulling data for the report. If custom, then a specific time period must be provided.
     * 
     */
    private String timeframe;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetViewResult() {}
    /**
     * @return Show costs accumulated over time.
     * 
     */
    public Optional<String> accumulated() {
        return Optional.ofNullable(this.accumulated);
    }
    /**
     * @return Chart type of the main view in Cost Analysis. Required.
     * 
     */
    public Optional<String> chart() {
        return Optional.ofNullable(this.chart);
    }
    /**
     * @return Date the user created this view.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Selected currency.
     * 
     */
    public String currency() {
        return this.currency;
    }
    /**
     * @return Has definition for data in this report config.
     * 
     */
    public Optional<ReportConfigDatasetResponse> dataSet() {
        return Optional.ofNullable(this.dataSet);
    }
    /**
     * @return Selected date range for viewing cost in.
     * 
     */
    public String dateRange() {
        return this.dateRange;
    }
    /**
     * @return User input name of the view. Required.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    public Optional<String> eTag() {
        return Optional.ofNullable(this.eTag);
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Include monetary commitment
     * 
     */
    public Boolean includeMonetaryCommitment() {
        return this.includeMonetaryCommitment;
    }
    /**
     * @return List of KPIs to show in Cost Analysis UI.
     * 
     */
    public List<KpiPropertiesResponse> kpis() {
        return this.kpis == null ? List.of() : this.kpis;
    }
    /**
     * @return Metric to use when displaying costs.
     * 
     */
    public Optional<String> metric() {
        return Optional.ofNullable(this.metric);
    }
    /**
     * @return Date when the user last modified this view.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Configuration of 3 sub-views in the Cost Analysis UI.
     * 
     */
    public List<PivotPropertiesResponse> pivots() {
        return this.pivots == null ? List.of() : this.pivots;
    }
    /**
     * @return Cost Management scope to save the view on. This includes &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;providers/Microsoft.Management/managementGroups/{managementGroupId}&#39; for Management Group scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Has time period for pulling data for the report.
     * 
     */
    public Optional<ReportConfigTimePeriodResponse> timePeriod() {
        return Optional.ofNullable(this.timePeriod);
    }
    /**
     * @return The time frame for pulling data for the report. If custom, then a specific time period must be provided.
     * 
     */
    public String timeframe() {
        return this.timeframe;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetViewResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accumulated;
        private @Nullable String chart;
        private String createdOn;
        private String currency;
        private @Nullable ReportConfigDatasetResponse dataSet;
        private String dateRange;
        private @Nullable String displayName;
        private @Nullable String eTag;
        private String id;
        private Boolean includeMonetaryCommitment;
        private @Nullable List<KpiPropertiesResponse> kpis;
        private @Nullable String metric;
        private String modifiedOn;
        private String name;
        private @Nullable List<PivotPropertiesResponse> pivots;
        private @Nullable String scope;
        private @Nullable ReportConfigTimePeriodResponse timePeriod;
        private String timeframe;
        private String type;
        public Builder() {}
        public Builder(GetViewResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accumulated = defaults.accumulated;
    	      this.chart = defaults.chart;
    	      this.createdOn = defaults.createdOn;
    	      this.currency = defaults.currency;
    	      this.dataSet = defaults.dataSet;
    	      this.dateRange = defaults.dateRange;
    	      this.displayName = defaults.displayName;
    	      this.eTag = defaults.eTag;
    	      this.id = defaults.id;
    	      this.includeMonetaryCommitment = defaults.includeMonetaryCommitment;
    	      this.kpis = defaults.kpis;
    	      this.metric = defaults.metric;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.pivots = defaults.pivots;
    	      this.scope = defaults.scope;
    	      this.timePeriod = defaults.timePeriod;
    	      this.timeframe = defaults.timeframe;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accumulated(@Nullable String accumulated) {
            this.accumulated = accumulated;
            return this;
        }
        @CustomType.Setter
        public Builder chart(@Nullable String chart) {
            this.chart = chart;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            this.createdOn = Objects.requireNonNull(createdOn);
            return this;
        }
        @CustomType.Setter
        public Builder currency(String currency) {
            this.currency = Objects.requireNonNull(currency);
            return this;
        }
        @CustomType.Setter
        public Builder dataSet(@Nullable ReportConfigDatasetResponse dataSet) {
            this.dataSet = dataSet;
            return this;
        }
        @CustomType.Setter
        public Builder dateRange(String dateRange) {
            this.dateRange = Objects.requireNonNull(dateRange);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder eTag(@Nullable String eTag) {
            this.eTag = eTag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder includeMonetaryCommitment(Boolean includeMonetaryCommitment) {
            this.includeMonetaryCommitment = Objects.requireNonNull(includeMonetaryCommitment);
            return this;
        }
        @CustomType.Setter
        public Builder kpis(@Nullable List<KpiPropertiesResponse> kpis) {
            this.kpis = kpis;
            return this;
        }
        public Builder kpis(KpiPropertiesResponse... kpis) {
            return kpis(List.of(kpis));
        }
        @CustomType.Setter
        public Builder metric(@Nullable String metric) {
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            this.modifiedOn = Objects.requireNonNull(modifiedOn);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder pivots(@Nullable List<PivotPropertiesResponse> pivots) {
            this.pivots = pivots;
            return this;
        }
        public Builder pivots(PivotPropertiesResponse... pivots) {
            return pivots(List.of(pivots));
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder timePeriod(@Nullable ReportConfigTimePeriodResponse timePeriod) {
            this.timePeriod = timePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder timeframe(String timeframe) {
            this.timeframe = Objects.requireNonNull(timeframe);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetViewResult build() {
            final var o = new GetViewResult();
            o.accumulated = accumulated;
            o.chart = chart;
            o.createdOn = createdOn;
            o.currency = currency;
            o.dataSet = dataSet;
            o.dateRange = dateRange;
            o.displayName = displayName;
            o.eTag = eTag;
            o.id = id;
            o.includeMonetaryCommitment = includeMonetaryCommitment;
            o.kpis = kpis;
            o.metric = metric;
            o.modifiedOn = modifiedOn;
            o.name = name;
            o.pivots = pivots;
            o.scope = scope;
            o.timePeriod = timePeriod;
            o.timeframe = timeframe;
            o.type = type;
            return o;
        }
    }
}
