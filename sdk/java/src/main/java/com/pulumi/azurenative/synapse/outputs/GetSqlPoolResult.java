// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.outputs;

import com.pulumi.azurenative.synapse.outputs.SkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSqlPoolResult {
    /**
     * @return Collation mode
     * 
     */
    private @Nullable String collation;
    /**
     * @return Specifies the mode of sql pool creation.
     * 
     * Default: regular sql pool creation.
     * 
     * PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
     * 
     * Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
     * 
     * Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&#39;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
     * 
     */
    private @Nullable String createMode;
    /**
     * @return Date the SQL pool was created
     * 
     */
    private @Nullable String creationDate;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return Maximum size in bytes
     * 
     */
    private @Nullable Double maxSizeBytes;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return Resource state
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return Backup database to restore from
     * 
     */
    private @Nullable String recoverableDatabaseId;
    /**
     * @return Snapshot time to restore
     * 
     */
    private @Nullable String restorePointInTime;
    /**
     * @return SQL pool SKU
     * 
     */
    private @Nullable SkuResponse sku;
    /**
     * @return Source database to create from
     * 
     */
    private @Nullable String sourceDatabaseId;
    /**
     * @return Resource status
     * 
     */
    private @Nullable String status;
    /**
     * @return The storage account type used to store backups for this sql pool.
     * 
     */
    private @Nullable String storageAccountType;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetSqlPoolResult() {}
    /**
     * @return Collation mode
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }
    /**
     * @return Specifies the mode of sql pool creation.
     * 
     * Default: regular sql pool creation.
     * 
     * PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
     * 
     * Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
     * 
     * Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&#39;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
     * 
     */
    public Optional<String> createMode() {
        return Optional.ofNullable(this.createMode);
    }
    /**
     * @return Date the SQL pool was created
     * 
     */
    public Optional<String> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Maximum size in bytes
     * 
     */
    public Optional<Double> maxSizeBytes() {
        return Optional.ofNullable(this.maxSizeBytes);
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Resource state
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return Backup database to restore from
     * 
     */
    public Optional<String> recoverableDatabaseId() {
        return Optional.ofNullable(this.recoverableDatabaseId);
    }
    /**
     * @return Snapshot time to restore
     * 
     */
    public Optional<String> restorePointInTime() {
        return Optional.ofNullable(this.restorePointInTime);
    }
    /**
     * @return SQL pool SKU
     * 
     */
    public Optional<SkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Source database to create from
     * 
     */
    public Optional<String> sourceDatabaseId() {
        return Optional.ofNullable(this.sourceDatabaseId);
    }
    /**
     * @return Resource status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The storage account type used to store backups for this sql pool.
     * 
     */
    public Optional<String> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String collation;
        private @Nullable String createMode;
        private @Nullable String creationDate;
        private String id;
        private String location;
        private @Nullable Double maxSizeBytes;
        private String name;
        private @Nullable String provisioningState;
        private @Nullable String recoverableDatabaseId;
        private @Nullable String restorePointInTime;
        private @Nullable SkuResponse sku;
        private @Nullable String sourceDatabaseId;
        private @Nullable String status;
        private @Nullable String storageAccountType;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetSqlPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collation = defaults.collation;
    	      this.createMode = defaults.createMode;
    	      this.creationDate = defaults.creationDate;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.maxSizeBytes = defaults.maxSizeBytes;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.recoverableDatabaseId = defaults.recoverableDatabaseId;
    	      this.restorePointInTime = defaults.restorePointInTime;
    	      this.sku = defaults.sku;
    	      this.sourceDatabaseId = defaults.sourceDatabaseId;
    	      this.status = defaults.status;
    	      this.storageAccountType = defaults.storageAccountType;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder collation(@Nullable String collation) {
            this.collation = collation;
            return this;
        }
        @CustomType.Setter
        public Builder createMode(@Nullable String createMode) {
            this.createMode = createMode;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(@Nullable String creationDate) {
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeBytes(@Nullable Double maxSizeBytes) {
            this.maxSizeBytes = maxSizeBytes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder recoverableDatabaseId(@Nullable String recoverableDatabaseId) {
            this.recoverableDatabaseId = recoverableDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder restorePointInTime(@Nullable String restorePointInTime) {
            this.restorePointInTime = restorePointInTime;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable SkuResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDatabaseId(@Nullable String sourceDatabaseId) {
            this.sourceDatabaseId = sourceDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(@Nullable String storageAccountType) {
            this.storageAccountType = storageAccountType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetSqlPoolResult build() {
            final var o = new GetSqlPoolResult();
            o.collation = collation;
            o.createMode = createMode;
            o.creationDate = creationDate;
            o.id = id;
            o.location = location;
            o.maxSizeBytes = maxSizeBytes;
            o.name = name;
            o.provisioningState = provisioningState;
            o.recoverableDatabaseId = recoverableDatabaseId;
            o.restorePointInTime = restorePointInTime;
            o.sku = sku;
            o.sourceDatabaseId = sourceDatabaseId;
            o.status = status;
            o.storageAccountType = storageAccountType;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
