// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse {
    /**
     * @return Number of applied changes
     * 
     */
    private Double appliedChanges;
    /**
     * @return Number of cdc deletes
     * 
     */
    private Double cdcDeleteCounter;
    /**
     * @return Number of cdc inserts
     * 
     */
    private Double cdcInsertCounter;
    /**
     * @return Number of cdc updates
     * 
     */
    private Double cdcUpdateCounter;
    /**
     * @return Name of the database
     * 
     */
    private String databaseName;
    /**
     * @return Migration end time
     * 
     */
    private String endedOn;
    /**
     * @return Number of tables completed in full load
     * 
     */
    private Double fullLoadCompletedTables;
    /**
     * @return Number of tables errored in full load
     * 
     */
    private Double fullLoadErroredTables;
    /**
     * @return Number of tables loading in full load
     * 
     */
    private Double fullLoadLoadingTables;
    /**
     * @return Number of tables queued in full load
     * 
     */
    private Double fullLoadQueuedTables;
    /**
     * @return Result identifier
     * 
     */
    private String id;
    /**
     * @return Number of incoming changes
     * 
     */
    private Double incomingChanges;
    /**
     * @return Indicates if initial load (full load) has been completed
     * 
     */
    private Boolean initializationCompleted;
    /**
     * @return CDC apply latency
     * 
     */
    private Double latency;
    /**
     * @return Migration state that this database is in
     * 
     */
    private String migrationState;
    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    private String resultType;
    /**
     * @return Migration start time
     * 
     */
    private String startedOn;

    private MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse() {}
    /**
     * @return Number of applied changes
     * 
     */
    public Double appliedChanges() {
        return this.appliedChanges;
    }
    /**
     * @return Number of cdc deletes
     * 
     */
    public Double cdcDeleteCounter() {
        return this.cdcDeleteCounter;
    }
    /**
     * @return Number of cdc inserts
     * 
     */
    public Double cdcInsertCounter() {
        return this.cdcInsertCounter;
    }
    /**
     * @return Number of cdc updates
     * 
     */
    public Double cdcUpdateCounter() {
        return this.cdcUpdateCounter;
    }
    /**
     * @return Name of the database
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }
    /**
     * @return Number of tables completed in full load
     * 
     */
    public Double fullLoadCompletedTables() {
        return this.fullLoadCompletedTables;
    }
    /**
     * @return Number of tables errored in full load
     * 
     */
    public Double fullLoadErroredTables() {
        return this.fullLoadErroredTables;
    }
    /**
     * @return Number of tables loading in full load
     * 
     */
    public Double fullLoadLoadingTables() {
        return this.fullLoadLoadingTables;
    }
    /**
     * @return Number of tables queued in full load
     * 
     */
    public Double fullLoadQueuedTables() {
        return this.fullLoadQueuedTables;
    }
    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Number of incoming changes
     * 
     */
    public Double incomingChanges() {
        return this.incomingChanges;
    }
    /**
     * @return Indicates if initial load (full load) has been completed
     * 
     */
    public Boolean initializationCompleted() {
        return this.initializationCompleted;
    }
    /**
     * @return CDC apply latency
     * 
     */
    public Double latency() {
        return this.latency;
    }
    /**
     * @return Migration state that this database is in
     * 
     */
    public String migrationState() {
        return this.migrationState;
    }
    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }
    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double appliedChanges;
        private Double cdcDeleteCounter;
        private Double cdcInsertCounter;
        private Double cdcUpdateCounter;
        private String databaseName;
        private String endedOn;
        private Double fullLoadCompletedTables;
        private Double fullLoadErroredTables;
        private Double fullLoadLoadingTables;
        private Double fullLoadQueuedTables;
        private String id;
        private Double incomingChanges;
        private Boolean initializationCompleted;
        private Double latency;
        private String migrationState;
        private String resultType;
        private String startedOn;
        public Builder() {}
        public Builder(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliedChanges = defaults.appliedChanges;
    	      this.cdcDeleteCounter = defaults.cdcDeleteCounter;
    	      this.cdcInsertCounter = defaults.cdcInsertCounter;
    	      this.cdcUpdateCounter = defaults.cdcUpdateCounter;
    	      this.databaseName = defaults.databaseName;
    	      this.endedOn = defaults.endedOn;
    	      this.fullLoadCompletedTables = defaults.fullLoadCompletedTables;
    	      this.fullLoadErroredTables = defaults.fullLoadErroredTables;
    	      this.fullLoadLoadingTables = defaults.fullLoadLoadingTables;
    	      this.fullLoadQueuedTables = defaults.fullLoadQueuedTables;
    	      this.id = defaults.id;
    	      this.incomingChanges = defaults.incomingChanges;
    	      this.initializationCompleted = defaults.initializationCompleted;
    	      this.latency = defaults.latency;
    	      this.migrationState = defaults.migrationState;
    	      this.resultType = defaults.resultType;
    	      this.startedOn = defaults.startedOn;
        }

        @CustomType.Setter
        public Builder appliedChanges(Double appliedChanges) {
            this.appliedChanges = Objects.requireNonNull(appliedChanges);
            return this;
        }
        @CustomType.Setter
        public Builder cdcDeleteCounter(Double cdcDeleteCounter) {
            this.cdcDeleteCounter = Objects.requireNonNull(cdcDeleteCounter);
            return this;
        }
        @CustomType.Setter
        public Builder cdcInsertCounter(Double cdcInsertCounter) {
            this.cdcInsertCounter = Objects.requireNonNull(cdcInsertCounter);
            return this;
        }
        @CustomType.Setter
        public Builder cdcUpdateCounter(Double cdcUpdateCounter) {
            this.cdcUpdateCounter = Objects.requireNonNull(cdcUpdateCounter);
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        @CustomType.Setter
        public Builder endedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }
        @CustomType.Setter
        public Builder fullLoadCompletedTables(Double fullLoadCompletedTables) {
            this.fullLoadCompletedTables = Objects.requireNonNull(fullLoadCompletedTables);
            return this;
        }
        @CustomType.Setter
        public Builder fullLoadErroredTables(Double fullLoadErroredTables) {
            this.fullLoadErroredTables = Objects.requireNonNull(fullLoadErroredTables);
            return this;
        }
        @CustomType.Setter
        public Builder fullLoadLoadingTables(Double fullLoadLoadingTables) {
            this.fullLoadLoadingTables = Objects.requireNonNull(fullLoadLoadingTables);
            return this;
        }
        @CustomType.Setter
        public Builder fullLoadQueuedTables(Double fullLoadQueuedTables) {
            this.fullLoadQueuedTables = Objects.requireNonNull(fullLoadQueuedTables);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder incomingChanges(Double incomingChanges) {
            this.incomingChanges = Objects.requireNonNull(incomingChanges);
            return this;
        }
        @CustomType.Setter
        public Builder initializationCompleted(Boolean initializationCompleted) {
            this.initializationCompleted = Objects.requireNonNull(initializationCompleted);
            return this;
        }
        @CustomType.Setter
        public Builder latency(Double latency) {
            this.latency = Objects.requireNonNull(latency);
            return this;
        }
        @CustomType.Setter
        public Builder migrationState(String migrationState) {
            this.migrationState = Objects.requireNonNull(migrationState);
            return this;
        }
        @CustomType.Setter
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        @CustomType.Setter
        public Builder startedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }
        public MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse build() {
            final var o = new MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse();
            o.appliedChanges = appliedChanges;
            o.cdcDeleteCounter = cdcDeleteCounter;
            o.cdcInsertCounter = cdcInsertCounter;
            o.cdcUpdateCounter = cdcUpdateCounter;
            o.databaseName = databaseName;
            o.endedOn = endedOn;
            o.fullLoadCompletedTables = fullLoadCompletedTables;
            o.fullLoadErroredTables = fullLoadErroredTables;
            o.fullLoadLoadingTables = fullLoadLoadingTables;
            o.fullLoadQueuedTables = fullLoadQueuedTables;
            o.id = id;
            o.incomingChanges = incomingChanges;
            o.initializationCompleted = initializationCompleted;
            o.latency = latency;
            o.migrationState = migrationState;
            o.resultType = resultType;
            o.startedOn = startedOn;
            return o;
        }
    }
}
