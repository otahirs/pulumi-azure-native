// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.vmwarecloudsimple.outputs;

import com.pulumi.azurenative.vmwarecloudsimple.outputs.GuestOSCustomizationResponse;
import com.pulumi.azurenative.vmwarecloudsimple.outputs.ResourcePoolResponse;
import com.pulumi.azurenative.vmwarecloudsimple.outputs.VirtualDiskControllerResponse;
import com.pulumi.azurenative.vmwarecloudsimple.outputs.VirtualDiskResponse;
import com.pulumi.azurenative.vmwarecloudsimple.outputs.VirtualNicResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualMachineResult {
    /**
     * @return The amount of memory
     * 
     */
    private Integer amountOfRam;
    /**
     * @return The list of Virtual Disks&#39; Controllers
     * 
     */
    private List<VirtualDiskControllerResponse> controllers;
    /**
     * @return Virtual machine properties
     * 
     */
    private @Nullable GuestOSCustomizationResponse customization;
    /**
     * @return The list of Virtual Disks
     * 
     */
    private @Nullable List<VirtualDiskResponse> disks;
    /**
     * @return The DNS name of Virtual Machine in VCenter
     * 
     */
    private String dnsname;
    /**
     * @return Expose Guest OS or not
     * 
     */
    private @Nullable Boolean exposeToGuestVM;
    /**
     * @return The path to virtual machine folder in VCenter
     * 
     */
    private String folder;
    /**
     * @return The name of Guest OS
     * 
     */
    private String guestOS;
    /**
     * @return The Guest OS type
     * 
     */
    private String guestOSType;
    /**
     * @return /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
     * 
     */
    private String id;
    /**
     * @return Azure region
     * 
     */
    private String location;
    /**
     * @return {virtualMachineName}
     * 
     */
    private String name;
    /**
     * @return The list of Virtual NICs
     * 
     */
    private @Nullable List<VirtualNicResponse> nics;
    /**
     * @return The number of CPU cores
     * 
     */
    private Integer numberOfCores;
    /**
     * @return Password for login. Deprecated - use customization property
     * 
     */
    private @Nullable String password;
    /**
     * @return Private Cloud Id
     * 
     */
    private String privateCloudId;
    /**
     * @return The provisioning status of the resource
     * 
     */
    private String provisioningState;
    /**
     * @return The public ip of Virtual Machine
     * 
     */
    private String publicIP;
    /**
     * @return Virtual Machines Resource Pool
     * 
     */
    private @Nullable ResourcePoolResponse resourcePool;
    /**
     * @return The status of Virtual machine
     * 
     */
    private String status;
    /**
     * @return The list of tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Virtual Machine Template Id
     * 
     */
    private @Nullable String templateId;
    /**
     * @return {resourceProviderNamespace}/{resourceType}
     * 
     */
    private String type;
    /**
     * @return Username for login. Deprecated - use customization property
     * 
     */
    private @Nullable String username;
    /**
     * @return The list of Virtual VSphere Networks
     * 
     */
    private @Nullable List<String> vSphereNetworks;
    /**
     * @return The internal id of Virtual Machine in VCenter
     * 
     */
    private String vmId;
    /**
     * @return VMware tools version
     * 
     */
    private String vmwaretools;

    private GetVirtualMachineResult() {}
    /**
     * @return The amount of memory
     * 
     */
    public Integer amountOfRam() {
        return this.amountOfRam;
    }
    /**
     * @return The list of Virtual Disks&#39; Controllers
     * 
     */
    public List<VirtualDiskControllerResponse> controllers() {
        return this.controllers;
    }
    /**
     * @return Virtual machine properties
     * 
     */
    public Optional<GuestOSCustomizationResponse> customization() {
        return Optional.ofNullable(this.customization);
    }
    /**
     * @return The list of Virtual Disks
     * 
     */
    public List<VirtualDiskResponse> disks() {
        return this.disks == null ? List.of() : this.disks;
    }
    /**
     * @return The DNS name of Virtual Machine in VCenter
     * 
     */
    public String dnsname() {
        return this.dnsname;
    }
    /**
     * @return Expose Guest OS or not
     * 
     */
    public Optional<Boolean> exposeToGuestVM() {
        return Optional.ofNullable(this.exposeToGuestVM);
    }
    /**
     * @return The path to virtual machine folder in VCenter
     * 
     */
    public String folder() {
        return this.folder;
    }
    /**
     * @return The name of Guest OS
     * 
     */
    public String guestOS() {
        return this.guestOS;
    }
    /**
     * @return The Guest OS type
     * 
     */
    public String guestOSType() {
        return this.guestOSType;
    }
    /**
     * @return /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Azure region
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return {virtualMachineName}
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of Virtual NICs
     * 
     */
    public List<VirtualNicResponse> nics() {
        return this.nics == null ? List.of() : this.nics;
    }
    /**
     * @return The number of CPU cores
     * 
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }
    /**
     * @return Password for login. Deprecated - use customization property
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Private Cloud Id
     * 
     */
    public String privateCloudId() {
        return this.privateCloudId;
    }
    /**
     * @return The provisioning status of the resource
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The public ip of Virtual Machine
     * 
     */
    public String publicIP() {
        return this.publicIP;
    }
    /**
     * @return Virtual Machines Resource Pool
     * 
     */
    public Optional<ResourcePoolResponse> resourcePool() {
        return Optional.ofNullable(this.resourcePool);
    }
    /**
     * @return The status of Virtual machine
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The list of tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Virtual Machine Template Id
     * 
     */
    public Optional<String> templateId() {
        return Optional.ofNullable(this.templateId);
    }
    /**
     * @return {resourceProviderNamespace}/{resourceType}
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Username for login. Deprecated - use customization property
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return The list of Virtual VSphere Networks
     * 
     */
    public List<String> vSphereNetworks() {
        return this.vSphereNetworks == null ? List.of() : this.vSphereNetworks;
    }
    /**
     * @return The internal id of Virtual Machine in VCenter
     * 
     */
    public String vmId() {
        return this.vmId;
    }
    /**
     * @return VMware tools version
     * 
     */
    public String vmwaretools() {
        return this.vmwaretools;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer amountOfRam;
        private List<VirtualDiskControllerResponse> controllers;
        private @Nullable GuestOSCustomizationResponse customization;
        private @Nullable List<VirtualDiskResponse> disks;
        private String dnsname;
        private @Nullable Boolean exposeToGuestVM;
        private String folder;
        private String guestOS;
        private String guestOSType;
        private String id;
        private String location;
        private String name;
        private @Nullable List<VirtualNicResponse> nics;
        private Integer numberOfCores;
        private @Nullable String password;
        private String privateCloudId;
        private String provisioningState;
        private String publicIP;
        private @Nullable ResourcePoolResponse resourcePool;
        private String status;
        private @Nullable Map<String,String> tags;
        private @Nullable String templateId;
        private String type;
        private @Nullable String username;
        private @Nullable List<String> vSphereNetworks;
        private String vmId;
        private String vmwaretools;
        public Builder() {}
        public Builder(GetVirtualMachineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amountOfRam = defaults.amountOfRam;
    	      this.controllers = defaults.controllers;
    	      this.customization = defaults.customization;
    	      this.disks = defaults.disks;
    	      this.dnsname = defaults.dnsname;
    	      this.exposeToGuestVM = defaults.exposeToGuestVM;
    	      this.folder = defaults.folder;
    	      this.guestOS = defaults.guestOS;
    	      this.guestOSType = defaults.guestOSType;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.nics = defaults.nics;
    	      this.numberOfCores = defaults.numberOfCores;
    	      this.password = defaults.password;
    	      this.privateCloudId = defaults.privateCloudId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicIP = defaults.publicIP;
    	      this.resourcePool = defaults.resourcePool;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.templateId = defaults.templateId;
    	      this.type = defaults.type;
    	      this.username = defaults.username;
    	      this.vSphereNetworks = defaults.vSphereNetworks;
    	      this.vmId = defaults.vmId;
    	      this.vmwaretools = defaults.vmwaretools;
        }

        @CustomType.Setter
        public Builder amountOfRam(Integer amountOfRam) {
            this.amountOfRam = Objects.requireNonNull(amountOfRam);
            return this;
        }
        @CustomType.Setter
        public Builder controllers(List<VirtualDiskControllerResponse> controllers) {
            this.controllers = Objects.requireNonNull(controllers);
            return this;
        }
        public Builder controllers(VirtualDiskControllerResponse... controllers) {
            return controllers(List.of(controllers));
        }
        @CustomType.Setter
        public Builder customization(@Nullable GuestOSCustomizationResponse customization) {
            this.customization = customization;
            return this;
        }
        @CustomType.Setter
        public Builder disks(@Nullable List<VirtualDiskResponse> disks) {
            this.disks = disks;
            return this;
        }
        public Builder disks(VirtualDiskResponse... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder dnsname(String dnsname) {
            this.dnsname = Objects.requireNonNull(dnsname);
            return this;
        }
        @CustomType.Setter
        public Builder exposeToGuestVM(@Nullable Boolean exposeToGuestVM) {
            this.exposeToGuestVM = exposeToGuestVM;
            return this;
        }
        @CustomType.Setter
        public Builder folder(String folder) {
            this.folder = Objects.requireNonNull(folder);
            return this;
        }
        @CustomType.Setter
        public Builder guestOS(String guestOS) {
            this.guestOS = Objects.requireNonNull(guestOS);
            return this;
        }
        @CustomType.Setter
        public Builder guestOSType(String guestOSType) {
            this.guestOSType = Objects.requireNonNull(guestOSType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nics(@Nullable List<VirtualNicResponse> nics) {
            this.nics = nics;
            return this;
        }
        public Builder nics(VirtualNicResponse... nics) {
            return nics(List.of(nics));
        }
        @CustomType.Setter
        public Builder numberOfCores(Integer numberOfCores) {
            this.numberOfCores = Objects.requireNonNull(numberOfCores);
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder privateCloudId(String privateCloudId) {
            this.privateCloudId = Objects.requireNonNull(privateCloudId);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder publicIP(String publicIP) {
            this.publicIP = Objects.requireNonNull(publicIP);
            return this;
        }
        @CustomType.Setter
        public Builder resourcePool(@Nullable ResourcePoolResponse resourcePool) {
            this.resourcePool = resourcePool;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder templateId(@Nullable String templateId) {
            this.templateId = templateId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder vSphereNetworks(@Nullable List<String> vSphereNetworks) {
            this.vSphereNetworks = vSphereNetworks;
            return this;
        }
        public Builder vSphereNetworks(String... vSphereNetworks) {
            return vSphereNetworks(List.of(vSphereNetworks));
        }
        @CustomType.Setter
        public Builder vmId(String vmId) {
            this.vmId = Objects.requireNonNull(vmId);
            return this;
        }
        @CustomType.Setter
        public Builder vmwaretools(String vmwaretools) {
            this.vmwaretools = Objects.requireNonNull(vmwaretools);
            return this;
        }
        public GetVirtualMachineResult build() {
            final var o = new GetVirtualMachineResult();
            o.amountOfRam = amountOfRam;
            o.controllers = controllers;
            o.customization = customization;
            o.disks = disks;
            o.dnsname = dnsname;
            o.exposeToGuestVM = exposeToGuestVM;
            o.folder = folder;
            o.guestOS = guestOS;
            o.guestOSType = guestOSType;
            o.id = id;
            o.location = location;
            o.name = name;
            o.nics = nics;
            o.numberOfCores = numberOfCores;
            o.password = password;
            o.privateCloudId = privateCloudId;
            o.provisioningState = provisioningState;
            o.publicIP = publicIP;
            o.resourcePool = resourcePool;
            o.status = status;
            o.tags = tags;
            o.templateId = templateId;
            o.type = type;
            o.username = username;
            o.vSphereNetworks = vSphereNetworks;
            o.vmId = vmId;
            o.vmwaretools = vmwaretools;
            return o;
        }
    }
}
