// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AmlComputeNodeInformationResponse {
    /**
     * @return ID of the compute node.
     * 
     */
    private String nodeId;
    /**
     * @return State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     * 
     */
    private String nodeState;
    /**
     * @return SSH port number of the node.
     * 
     */
    private Double port;
    /**
     * @return Private IP address of the compute node.
     * 
     */
    private String privateIpAddress;
    /**
     * @return Public IP address of the compute node.
     * 
     */
    private String publicIpAddress;
    /**
     * @return ID of the Experiment running on the node, if any else null.
     * 
     */
    private String runId;

    private AmlComputeNodeInformationResponse() {}
    /**
     * @return ID of the compute node.
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }
    /**
     * @return State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     * 
     */
    public String nodeState() {
        return this.nodeState;
    }
    /**
     * @return SSH port number of the node.
     * 
     */
    public Double port() {
        return this.port;
    }
    /**
     * @return Private IP address of the compute node.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return Public IP address of the compute node.
     * 
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }
    /**
     * @return ID of the Experiment running on the node, if any else null.
     * 
     */
    public String runId() {
        return this.runId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AmlComputeNodeInformationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String nodeId;
        private String nodeState;
        private Double port;
        private String privateIpAddress;
        private String publicIpAddress;
        private String runId;
        public Builder() {}
        public Builder(AmlComputeNodeInformationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nodeId = defaults.nodeId;
    	      this.nodeState = defaults.nodeState;
    	      this.port = defaults.port;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.runId = defaults.runId;
        }

        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            this.nodeId = Objects.requireNonNull(nodeId);
            return this;
        }
        @CustomType.Setter
        public Builder nodeState(String nodeState) {
            this.nodeState = Objects.requireNonNull(nodeState);
            return this;
        }
        @CustomType.Setter
        public Builder port(Double port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder publicIpAddress(String publicIpAddress) {
            this.publicIpAddress = Objects.requireNonNull(publicIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder runId(String runId) {
            this.runId = Objects.requireNonNull(runId);
            return this;
        }
        public AmlComputeNodeInformationResponse build() {
            final var o = new AmlComputeNodeInformationResponse();
            o.nodeId = nodeId;
            o.nodeState = nodeState;
            o.port = port;
            o.privateIpAddress = privateIpAddress;
            o.publicIpAddress = publicIpAddress;
            o.runId = runId;
            return o;
        }
    }
}
