// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.TriggerPipelineReferenceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomEventsTriggerResponse {
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return Trigger description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The list of event types that cause this trigger to fire.
     * 
     */
    private List<Object> events;
    /**
     * @return Pipelines that need to be started.
     * 
     */
    private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    private String runtimeState;
    /**
     * @return The ARM resource ID of the Azure Event Grid Topic.
     * 
     */
    private String scope;
    /**
     * @return The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
     * 
     */
    private @Nullable String subjectBeginsWith;
    /**
     * @return The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
     * 
     */
    private @Nullable String subjectEndsWith;
    /**
     * @return Trigger type.
     * Expected value is &#39;CustomEventsTrigger&#39;.
     * 
     */
    private String type;

    private CustomEventsTriggerResponse() {}
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return Trigger description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The list of event types that cause this trigger to fire.
     * 
     */
    public List<Object> events() {
        return this.events;
    }
    /**
     * @return Pipelines that need to be started.
     * 
     */
    public List<TriggerPipelineReferenceResponse> pipelines() {
        return this.pipelines == null ? List.of() : this.pipelines;
    }
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    public String runtimeState() {
        return this.runtimeState;
    }
    /**
     * @return The ARM resource ID of the Azure Event Grid Topic.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
     * 
     */
    public Optional<String> subjectBeginsWith() {
        return Optional.ofNullable(this.subjectBeginsWith);
    }
    /**
     * @return The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
     * 
     */
    public Optional<String> subjectEndsWith() {
        return Optional.ofNullable(this.subjectEndsWith);
    }
    /**
     * @return Trigger type.
     * Expected value is &#39;CustomEventsTrigger&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomEventsTriggerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable String description;
        private List<Object> events;
        private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
        private String runtimeState;
        private String scope;
        private @Nullable String subjectBeginsWith;
        private @Nullable String subjectEndsWith;
        private String type;
        public Builder() {}
        public Builder(CustomEventsTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.events = defaults.events;
    	      this.pipelines = defaults.pipelines;
    	      this.runtimeState = defaults.runtimeState;
    	      this.scope = defaults.scope;
    	      this.subjectBeginsWith = defaults.subjectBeginsWith;
    	      this.subjectEndsWith = defaults.subjectEndsWith;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder events(List<Object> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(Object... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder pipelines(@Nullable List<TriggerPipelineReferenceResponse> pipelines) {
            this.pipelines = pipelines;
            return this;
        }
        public Builder pipelines(TriggerPipelineReferenceResponse... pipelines) {
            return pipelines(List.of(pipelines));
        }
        @CustomType.Setter
        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        @CustomType.Setter
        public Builder subjectBeginsWith(@Nullable String subjectBeginsWith) {
            this.subjectBeginsWith = subjectBeginsWith;
            return this;
        }
        @CustomType.Setter
        public Builder subjectEndsWith(@Nullable String subjectEndsWith) {
            this.subjectEndsWith = subjectEndsWith;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public CustomEventsTriggerResponse build() {
            final var o = new CustomEventsTriggerResponse();
            o.annotations = annotations;
            o.description = description;
            o.events = events;
            o.pipelines = pipelines;
            o.runtimeState = runtimeState;
            o.scope = scope;
            o.subjectBeginsWith = subjectBeginsWith;
            o.subjectEndsWith = subjectEndsWith;
            o.type = type;
            return o;
        }
    }
}
