// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.consumption.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ForecastSpendResponse {
    /**
     * @return The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.
     * 
     */
    private Double amount;
    /**
     * @return The unit of measure for the budget amount.
     * 
     */
    private String unit;

    private ForecastSpendResponse() {}
    /**
     * @return The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.
     * 
     */
    public Double amount() {
        return this.amount;
    }
    /**
     * @return The unit of measure for the budget amount.
     * 
     */
    public String unit() {
        return this.unit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ForecastSpendResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double amount;
        private String unit;
        public Builder() {}
        public Builder(ForecastSpendResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.unit = defaults.unit;
        }

        @CustomType.Setter
        public Builder amount(Double amount) {
            this.amount = Objects.requireNonNull(amount);
            return this;
        }
        @CustomType.Setter
        public Builder unit(String unit) {
            this.unit = Objects.requireNonNull(unit);
            return this;
        }
        public ForecastSpendResponse build() {
            final var o = new ForecastSpendResponse();
            o.amount = amount;
            o.unit = unit;
            return o;
        }
    }
}
