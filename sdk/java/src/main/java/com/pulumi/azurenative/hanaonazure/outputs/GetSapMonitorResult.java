// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hanaonazure.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSapMonitorResult {
    /**
     * @return The value indicating whether to send analytics to Microsoft
     * 
     */
    private @Nullable Boolean enableCustomerAnalytics;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    private @Nullable String logAnalyticsWorkspaceArmId;
    /**
     * @return The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    private @Nullable String logAnalyticsWorkspaceId;
    /**
     * @return The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    private @Nullable String logAnalyticsWorkspaceSharedKey;
    /**
     * @return The name of the resource group the SAP Monitor resources get deployed into.
     * 
     */
    private String managedResourceGroupName;
    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    private @Nullable String monitorSubnet;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return State of provisioning of the HanaInstance
     * 
     */
    private String provisioningState;
    /**
     * @return The version of the payload running in the Collector VM
     * 
     */
    private String sapMonitorCollectorVersion;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetSapMonitorResult() {}
    /**
     * @return The value indicating whether to send analytics to Microsoft
     * 
     */
    public Optional<Boolean> enableCustomerAnalytics() {
        return Optional.ofNullable(this.enableCustomerAnalytics);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    public Optional<String> logAnalyticsWorkspaceArmId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceArmId);
    }
    /**
     * @return The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    public Optional<String> logAnalyticsWorkspaceId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceId);
    }
    /**
     * @return The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    public Optional<String> logAnalyticsWorkspaceSharedKey() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceSharedKey);
    }
    /**
     * @return The name of the resource group the SAP Monitor resources get deployed into.
     * 
     */
    public String managedResourceGroupName() {
        return this.managedResourceGroupName;
    }
    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    public Optional<String> monitorSubnet() {
        return Optional.ofNullable(this.monitorSubnet);
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return State of provisioning of the HanaInstance
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The version of the payload running in the Collector VM
     * 
     */
    public String sapMonitorCollectorVersion() {
        return this.sapMonitorCollectorVersion;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSapMonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableCustomerAnalytics;
        private String id;
        private String location;
        private @Nullable String logAnalyticsWorkspaceArmId;
        private @Nullable String logAnalyticsWorkspaceId;
        private @Nullable String logAnalyticsWorkspaceSharedKey;
        private String managedResourceGroupName;
        private @Nullable String monitorSubnet;
        private String name;
        private String provisioningState;
        private String sapMonitorCollectorVersion;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetSapMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableCustomerAnalytics = defaults.enableCustomerAnalytics;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspaceArmId = defaults.logAnalyticsWorkspaceArmId;
    	      this.logAnalyticsWorkspaceId = defaults.logAnalyticsWorkspaceId;
    	      this.logAnalyticsWorkspaceSharedKey = defaults.logAnalyticsWorkspaceSharedKey;
    	      this.managedResourceGroupName = defaults.managedResourceGroupName;
    	      this.monitorSubnet = defaults.monitorSubnet;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sapMonitorCollectorVersion = defaults.sapMonitorCollectorVersion;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder enableCustomerAnalytics(@Nullable Boolean enableCustomerAnalytics) {
            this.enableCustomerAnalytics = enableCustomerAnalytics;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceArmId(@Nullable String logAnalyticsWorkspaceArmId) {
            this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceId(@Nullable String logAnalyticsWorkspaceId) {
            this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceSharedKey(@Nullable String logAnalyticsWorkspaceSharedKey) {
            this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder managedResourceGroupName(String managedResourceGroupName) {
            this.managedResourceGroupName = Objects.requireNonNull(managedResourceGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder monitorSubnet(@Nullable String monitorSubnet) {
            this.monitorSubnet = monitorSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder sapMonitorCollectorVersion(String sapMonitorCollectorVersion) {
            this.sapMonitorCollectorVersion = Objects.requireNonNull(sapMonitorCollectorVersion);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetSapMonitorResult build() {
            final var o = new GetSapMonitorResult();
            o.enableCustomerAnalytics = enableCustomerAnalytics;
            o.id = id;
            o.location = location;
            o.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            o.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            o.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
            o.managedResourceGroupName = managedResourceGroupName;
            o.monitorSubnet = monitorSubnet;
            o.name = name;
            o.provisioningState = provisioningState;
            o.sapMonitorCollectorVersion = sapMonitorCollectorVersion;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
