// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.outputs;

import com.pulumi.azurenative.apimanagement.outputs.GroupContractPropertiesResponse;
import com.pulumi.azurenative.apimanagement.outputs.UserIdentityContractResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return Email address.
     * 
     */
    private @Nullable String email;
    /**
     * @return First name.
     * 
     */
    private @Nullable String firstName;
    /**
     * @return Collection of groups user is part of.
     * 
     */
    private List<GroupContractPropertiesResponse> groups;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Collection of user identities.
     * 
     */
    private @Nullable List<UserIdentityContractResponse> identities;
    /**
     * @return Last name.
     * 
     */
    private @Nullable String lastName;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Optional note about a user set by the administrator.
     * 
     */
    private @Nullable String note;
    /**
     * @return Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    private @Nullable String registrationDate;
    /**
     * @return Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
     * 
     */
    private @Nullable String state;
    /**
     * @return Resource type for API Management resource.
     * 
     */
    private String type;

    private GetUserResult() {}
    /**
     * @return Email address.
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return First name.
     * 
     */
    public Optional<String> firstName() {
        return Optional.ofNullable(this.firstName);
    }
    /**
     * @return Collection of groups user is part of.
     * 
     */
    public List<GroupContractPropertiesResponse> groups() {
        return this.groups;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Collection of user identities.
     * 
     */
    public List<UserIdentityContractResponse> identities() {
        return this.identities == null ? List.of() : this.identities;
    }
    /**
     * @return Last name.
     * 
     */
    public Optional<String> lastName() {
        return Optional.ofNullable(this.lastName);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional note about a user set by the administrator.
     * 
     */
    public Optional<String> note() {
        return Optional.ofNullable(this.note);
    }
    /**
     * @return Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public Optional<String> registrationDate() {
        return Optional.ofNullable(this.registrationDate);
    }
    /**
     * @return Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Resource type for API Management resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String email;
        private @Nullable String firstName;
        private List<GroupContractPropertiesResponse> groups;
        private String id;
        private @Nullable List<UserIdentityContractResponse> identities;
        private @Nullable String lastName;
        private String name;
        private @Nullable String note;
        private @Nullable String registrationDate;
        private @Nullable String state;
        private String type;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.identities = defaults.identities;
    	      this.lastName = defaults.lastName;
    	      this.name = defaults.name;
    	      this.note = defaults.note;
    	      this.registrationDate = defaults.registrationDate;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(@Nullable String firstName) {
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<GroupContractPropertiesResponse> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(GroupContractPropertiesResponse... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identities(@Nullable List<UserIdentityContractResponse> identities) {
            this.identities = identities;
            return this;
        }
        public Builder identities(UserIdentityContractResponse... identities) {
            return identities(List.of(identities));
        }
        @CustomType.Setter
        public Builder lastName(@Nullable String lastName) {
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder note(@Nullable String note) {
            this.note = note;
            return this;
        }
        @CustomType.Setter
        public Builder registrationDate(@Nullable String registrationDate) {
            this.registrationDate = registrationDate;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetUserResult build() {
            final var o = new GetUserResult();
            o.email = email;
            o.firstName = firstName;
            o.groups = groups;
            o.id = id;
            o.identities = identities;
            o.lastName = lastName;
            o.name = name;
            o.note = note;
            o.registrationDate = registrationDate;
            o.state = state;
            o.type = type;
            return o;
        }
    }
}
