// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.outputs;

import com.pulumi.azurenative.recoveryservices.outputs.HealthErrorResponse;
import com.pulumi.azurenative.recoveryservices.outputs.MobilityServiceUpdateResponse;
import com.pulumi.azurenative.recoveryservices.outputs.VersionDetailsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProcessServerResponse {
    /**
     * @return Agent expiry date.
     * 
     */
    private @Nullable String agentExpiryDate;
    /**
     * @return The version of the scout component on the server.
     * 
     */
    private @Nullable String agentVersion;
    /**
     * @return The agent version details.
     * 
     */
    private @Nullable VersionDetailsResponse agentVersionDetails;
    /**
     * @return The available memory.
     * 
     */
    private @Nullable Double availableMemoryInBytes;
    /**
     * @return The available space.
     * 
     */
    private @Nullable Double availableSpaceInBytes;
    /**
     * @return The percentage of the CPU load.
     * 
     */
    private @Nullable String cpuLoad;
    /**
     * @return The CPU load status.
     * 
     */
    private @Nullable String cpuLoadStatus;
    /**
     * @return The Process Server&#39;s friendly name.
     * 
     */
    private @Nullable String friendlyName;
    /**
     * @return The health of Process Server.
     * 
     */
    private String health;
    /**
     * @return Health errors.
     * 
     */
    private @Nullable List<HealthErrorResponse> healthErrors;
    /**
     * @return The agent generated Id.
     * 
     */
    private @Nullable String hostId;
    /**
     * @return The Process Server Id.
     * 
     */
    private @Nullable String id;
    /**
     * @return The IP address of the server.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return The last heartbeat received from the server.
     * 
     */
    private @Nullable String lastHeartbeat;
    /**
     * @return The servers configured with this PS.
     * 
     */
    private @Nullable String machineCount;
    /**
     * @return The MARS communication status.
     * 
     */
    private String marsCommunicationStatus;
    /**
     * @return The MARS registration status.
     * 
     */
    private String marsRegistrationStatus;
    /**
     * @return The memory usage status.
     * 
     */
    private @Nullable String memoryUsageStatus;
    /**
     * @return The list of the mobility service updates available on the Process Server.
     * 
     */
    private @Nullable List<MobilityServiceUpdateResponse> mobilityServiceUpdates;
    /**
     * @return The OS type of the server.
     * 
     */
    private @Nullable String osType;
    /**
     * @return OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.
     * 
     */
    private @Nullable String osVersion;
    /**
     * @return The PS service status.
     * 
     */
    private @Nullable String psServiceStatus;
    /**
     * @return The process server stats refresh time.
     * 
     */
    private String psStatsRefreshTime;
    /**
     * @return The number of replication pairs configured in this PS.
     * 
     */
    private @Nullable String replicationPairCount;
    /**
     * @return The space usage status.
     * 
     */
    private @Nullable String spaceUsageStatus;
    /**
     * @return The PS SSL cert expiry date.
     * 
     */
    private @Nullable String sslCertExpiryDate;
    /**
     * @return CS SSL cert expiry date.
     * 
     */
    private @Nullable Integer sslCertExpiryRemainingDays;
    /**
     * @return The percentage of the system load.
     * 
     */
    private @Nullable String systemLoad;
    /**
     * @return The system load status.
     * 
     */
    private @Nullable String systemLoadStatus;
    /**
     * @return The throughput in bytes.
     * 
     */
    private Double throughputInBytes;
    /**
     * @return The throughput in MBps.
     * 
     */
    private Double throughputInMBps;
    /**
     * @return The throughput status.
     * 
     */
    private String throughputStatus;
    /**
     * @return The uploading pending data in bytes.
     * 
     */
    private Double throughputUploadPendingDataInBytes;
    /**
     * @return The total memory.
     * 
     */
    private @Nullable Double totalMemoryInBytes;
    /**
     * @return The total space.
     * 
     */
    private @Nullable Double totalSpaceInBytes;
    /**
     * @return Version status
     * 
     */
    private @Nullable String versionStatus;

    private ProcessServerResponse() {}
    /**
     * @return Agent expiry date.
     * 
     */
    public Optional<String> agentExpiryDate() {
        return Optional.ofNullable(this.agentExpiryDate);
    }
    /**
     * @return The version of the scout component on the server.
     * 
     */
    public Optional<String> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }
    /**
     * @return The agent version details.
     * 
     */
    public Optional<VersionDetailsResponse> agentVersionDetails() {
        return Optional.ofNullable(this.agentVersionDetails);
    }
    /**
     * @return The available memory.
     * 
     */
    public Optional<Double> availableMemoryInBytes() {
        return Optional.ofNullable(this.availableMemoryInBytes);
    }
    /**
     * @return The available space.
     * 
     */
    public Optional<Double> availableSpaceInBytes() {
        return Optional.ofNullable(this.availableSpaceInBytes);
    }
    /**
     * @return The percentage of the CPU load.
     * 
     */
    public Optional<String> cpuLoad() {
        return Optional.ofNullable(this.cpuLoad);
    }
    /**
     * @return The CPU load status.
     * 
     */
    public Optional<String> cpuLoadStatus() {
        return Optional.ofNullable(this.cpuLoadStatus);
    }
    /**
     * @return The Process Server&#39;s friendly name.
     * 
     */
    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    /**
     * @return The health of Process Server.
     * 
     */
    public String health() {
        return this.health;
    }
    /**
     * @return Health errors.
     * 
     */
    public List<HealthErrorResponse> healthErrors() {
        return this.healthErrors == null ? List.of() : this.healthErrors;
    }
    /**
     * @return The agent generated Id.
     * 
     */
    public Optional<String> hostId() {
        return Optional.ofNullable(this.hostId);
    }
    /**
     * @return The Process Server Id.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The IP address of the server.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return The last heartbeat received from the server.
     * 
     */
    public Optional<String> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }
    /**
     * @return The servers configured with this PS.
     * 
     */
    public Optional<String> machineCount() {
        return Optional.ofNullable(this.machineCount);
    }
    /**
     * @return The MARS communication status.
     * 
     */
    public String marsCommunicationStatus() {
        return this.marsCommunicationStatus;
    }
    /**
     * @return The MARS registration status.
     * 
     */
    public String marsRegistrationStatus() {
        return this.marsRegistrationStatus;
    }
    /**
     * @return The memory usage status.
     * 
     */
    public Optional<String> memoryUsageStatus() {
        return Optional.ofNullable(this.memoryUsageStatus);
    }
    /**
     * @return The list of the mobility service updates available on the Process Server.
     * 
     */
    public List<MobilityServiceUpdateResponse> mobilityServiceUpdates() {
        return this.mobilityServiceUpdates == null ? List.of() : this.mobilityServiceUpdates;
    }
    /**
     * @return The OS type of the server.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }
    /**
     * @return OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.
     * 
     */
    public Optional<String> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }
    /**
     * @return The PS service status.
     * 
     */
    public Optional<String> psServiceStatus() {
        return Optional.ofNullable(this.psServiceStatus);
    }
    /**
     * @return The process server stats refresh time.
     * 
     */
    public String psStatsRefreshTime() {
        return this.psStatsRefreshTime;
    }
    /**
     * @return The number of replication pairs configured in this PS.
     * 
     */
    public Optional<String> replicationPairCount() {
        return Optional.ofNullable(this.replicationPairCount);
    }
    /**
     * @return The space usage status.
     * 
     */
    public Optional<String> spaceUsageStatus() {
        return Optional.ofNullable(this.spaceUsageStatus);
    }
    /**
     * @return The PS SSL cert expiry date.
     * 
     */
    public Optional<String> sslCertExpiryDate() {
        return Optional.ofNullable(this.sslCertExpiryDate);
    }
    /**
     * @return CS SSL cert expiry date.
     * 
     */
    public Optional<Integer> sslCertExpiryRemainingDays() {
        return Optional.ofNullable(this.sslCertExpiryRemainingDays);
    }
    /**
     * @return The percentage of the system load.
     * 
     */
    public Optional<String> systemLoad() {
        return Optional.ofNullable(this.systemLoad);
    }
    /**
     * @return The system load status.
     * 
     */
    public Optional<String> systemLoadStatus() {
        return Optional.ofNullable(this.systemLoadStatus);
    }
    /**
     * @return The throughput in bytes.
     * 
     */
    public Double throughputInBytes() {
        return this.throughputInBytes;
    }
    /**
     * @return The throughput in MBps.
     * 
     */
    public Double throughputInMBps() {
        return this.throughputInMBps;
    }
    /**
     * @return The throughput status.
     * 
     */
    public String throughputStatus() {
        return this.throughputStatus;
    }
    /**
     * @return The uploading pending data in bytes.
     * 
     */
    public Double throughputUploadPendingDataInBytes() {
        return this.throughputUploadPendingDataInBytes;
    }
    /**
     * @return The total memory.
     * 
     */
    public Optional<Double> totalMemoryInBytes() {
        return Optional.ofNullable(this.totalMemoryInBytes);
    }
    /**
     * @return The total space.
     * 
     */
    public Optional<Double> totalSpaceInBytes() {
        return Optional.ofNullable(this.totalSpaceInBytes);
    }
    /**
     * @return Version status
     * 
     */
    public Optional<String> versionStatus() {
        return Optional.ofNullable(this.versionStatus);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProcessServerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String agentExpiryDate;
        private @Nullable String agentVersion;
        private @Nullable VersionDetailsResponse agentVersionDetails;
        private @Nullable Double availableMemoryInBytes;
        private @Nullable Double availableSpaceInBytes;
        private @Nullable String cpuLoad;
        private @Nullable String cpuLoadStatus;
        private @Nullable String friendlyName;
        private String health;
        private @Nullable List<HealthErrorResponse> healthErrors;
        private @Nullable String hostId;
        private @Nullable String id;
        private @Nullable String ipAddress;
        private @Nullable String lastHeartbeat;
        private @Nullable String machineCount;
        private String marsCommunicationStatus;
        private String marsRegistrationStatus;
        private @Nullable String memoryUsageStatus;
        private @Nullable List<MobilityServiceUpdateResponse> mobilityServiceUpdates;
        private @Nullable String osType;
        private @Nullable String osVersion;
        private @Nullable String psServiceStatus;
        private String psStatsRefreshTime;
        private @Nullable String replicationPairCount;
        private @Nullable String spaceUsageStatus;
        private @Nullable String sslCertExpiryDate;
        private @Nullable Integer sslCertExpiryRemainingDays;
        private @Nullable String systemLoad;
        private @Nullable String systemLoadStatus;
        private Double throughputInBytes;
        private Double throughputInMBps;
        private String throughputStatus;
        private Double throughputUploadPendingDataInBytes;
        private @Nullable Double totalMemoryInBytes;
        private @Nullable Double totalSpaceInBytes;
        private @Nullable String versionStatus;
        public Builder() {}
        public Builder(ProcessServerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentExpiryDate = defaults.agentExpiryDate;
    	      this.agentVersion = defaults.agentVersion;
    	      this.agentVersionDetails = defaults.agentVersionDetails;
    	      this.availableMemoryInBytes = defaults.availableMemoryInBytes;
    	      this.availableSpaceInBytes = defaults.availableSpaceInBytes;
    	      this.cpuLoad = defaults.cpuLoad;
    	      this.cpuLoadStatus = defaults.cpuLoadStatus;
    	      this.friendlyName = defaults.friendlyName;
    	      this.health = defaults.health;
    	      this.healthErrors = defaults.healthErrors;
    	      this.hostId = defaults.hostId;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.machineCount = defaults.machineCount;
    	      this.marsCommunicationStatus = defaults.marsCommunicationStatus;
    	      this.marsRegistrationStatus = defaults.marsRegistrationStatus;
    	      this.memoryUsageStatus = defaults.memoryUsageStatus;
    	      this.mobilityServiceUpdates = defaults.mobilityServiceUpdates;
    	      this.osType = defaults.osType;
    	      this.osVersion = defaults.osVersion;
    	      this.psServiceStatus = defaults.psServiceStatus;
    	      this.psStatsRefreshTime = defaults.psStatsRefreshTime;
    	      this.replicationPairCount = defaults.replicationPairCount;
    	      this.spaceUsageStatus = defaults.spaceUsageStatus;
    	      this.sslCertExpiryDate = defaults.sslCertExpiryDate;
    	      this.sslCertExpiryRemainingDays = defaults.sslCertExpiryRemainingDays;
    	      this.systemLoad = defaults.systemLoad;
    	      this.systemLoadStatus = defaults.systemLoadStatus;
    	      this.throughputInBytes = defaults.throughputInBytes;
    	      this.throughputInMBps = defaults.throughputInMBps;
    	      this.throughputStatus = defaults.throughputStatus;
    	      this.throughputUploadPendingDataInBytes = defaults.throughputUploadPendingDataInBytes;
    	      this.totalMemoryInBytes = defaults.totalMemoryInBytes;
    	      this.totalSpaceInBytes = defaults.totalSpaceInBytes;
    	      this.versionStatus = defaults.versionStatus;
        }

        @CustomType.Setter
        public Builder agentExpiryDate(@Nullable String agentExpiryDate) {
            this.agentExpiryDate = agentExpiryDate;
            return this;
        }
        @CustomType.Setter
        public Builder agentVersion(@Nullable String agentVersion) {
            this.agentVersion = agentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder agentVersionDetails(@Nullable VersionDetailsResponse agentVersionDetails) {
            this.agentVersionDetails = agentVersionDetails;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemoryInBytes(@Nullable Double availableMemoryInBytes) {
            this.availableMemoryInBytes = availableMemoryInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder availableSpaceInBytes(@Nullable Double availableSpaceInBytes) {
            this.availableSpaceInBytes = availableSpaceInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder cpuLoad(@Nullable String cpuLoad) {
            this.cpuLoad = cpuLoad;
            return this;
        }
        @CustomType.Setter
        public Builder cpuLoadStatus(@Nullable String cpuLoadStatus) {
            this.cpuLoadStatus = cpuLoadStatus;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder health(String health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }
        @CustomType.Setter
        public Builder healthErrors(@Nullable List<HealthErrorResponse> healthErrors) {
            this.healthErrors = healthErrors;
            return this;
        }
        public Builder healthErrors(HealthErrorResponse... healthErrors) {
            return healthErrors(List.of(healthErrors));
        }
        @CustomType.Setter
        public Builder hostId(@Nullable String hostId) {
            this.hostId = hostId;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            this.lastHeartbeat = lastHeartbeat;
            return this;
        }
        @CustomType.Setter
        public Builder machineCount(@Nullable String machineCount) {
            this.machineCount = machineCount;
            return this;
        }
        @CustomType.Setter
        public Builder marsCommunicationStatus(String marsCommunicationStatus) {
            this.marsCommunicationStatus = Objects.requireNonNull(marsCommunicationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder marsRegistrationStatus(String marsRegistrationStatus) {
            this.marsRegistrationStatus = Objects.requireNonNull(marsRegistrationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder memoryUsageStatus(@Nullable String memoryUsageStatus) {
            this.memoryUsageStatus = memoryUsageStatus;
            return this;
        }
        @CustomType.Setter
        public Builder mobilityServiceUpdates(@Nullable List<MobilityServiceUpdateResponse> mobilityServiceUpdates) {
            this.mobilityServiceUpdates = mobilityServiceUpdates;
            return this;
        }
        public Builder mobilityServiceUpdates(MobilityServiceUpdateResponse... mobilityServiceUpdates) {
            return mobilityServiceUpdates(List.of(mobilityServiceUpdates));
        }
        @CustomType.Setter
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(@Nullable String osVersion) {
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder psServiceStatus(@Nullable String psServiceStatus) {
            this.psServiceStatus = psServiceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder psStatsRefreshTime(String psStatsRefreshTime) {
            this.psStatsRefreshTime = Objects.requireNonNull(psStatsRefreshTime);
            return this;
        }
        @CustomType.Setter
        public Builder replicationPairCount(@Nullable String replicationPairCount) {
            this.replicationPairCount = replicationPairCount;
            return this;
        }
        @CustomType.Setter
        public Builder spaceUsageStatus(@Nullable String spaceUsageStatus) {
            this.spaceUsageStatus = spaceUsageStatus;
            return this;
        }
        @CustomType.Setter
        public Builder sslCertExpiryDate(@Nullable String sslCertExpiryDate) {
            this.sslCertExpiryDate = sslCertExpiryDate;
            return this;
        }
        @CustomType.Setter
        public Builder sslCertExpiryRemainingDays(@Nullable Integer sslCertExpiryRemainingDays) {
            this.sslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
            return this;
        }
        @CustomType.Setter
        public Builder systemLoad(@Nullable String systemLoad) {
            this.systemLoad = systemLoad;
            return this;
        }
        @CustomType.Setter
        public Builder systemLoadStatus(@Nullable String systemLoadStatus) {
            this.systemLoadStatus = systemLoadStatus;
            return this;
        }
        @CustomType.Setter
        public Builder throughputInBytes(Double throughputInBytes) {
            this.throughputInBytes = Objects.requireNonNull(throughputInBytes);
            return this;
        }
        @CustomType.Setter
        public Builder throughputInMBps(Double throughputInMBps) {
            this.throughputInMBps = Objects.requireNonNull(throughputInMBps);
            return this;
        }
        @CustomType.Setter
        public Builder throughputStatus(String throughputStatus) {
            this.throughputStatus = Objects.requireNonNull(throughputStatus);
            return this;
        }
        @CustomType.Setter
        public Builder throughputUploadPendingDataInBytes(Double throughputUploadPendingDataInBytes) {
            this.throughputUploadPendingDataInBytes = Objects.requireNonNull(throughputUploadPendingDataInBytes);
            return this;
        }
        @CustomType.Setter
        public Builder totalMemoryInBytes(@Nullable Double totalMemoryInBytes) {
            this.totalMemoryInBytes = totalMemoryInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder totalSpaceInBytes(@Nullable Double totalSpaceInBytes) {
            this.totalSpaceInBytes = totalSpaceInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder versionStatus(@Nullable String versionStatus) {
            this.versionStatus = versionStatus;
            return this;
        }
        public ProcessServerResponse build() {
            final var o = new ProcessServerResponse();
            o.agentExpiryDate = agentExpiryDate;
            o.agentVersion = agentVersion;
            o.agentVersionDetails = agentVersionDetails;
            o.availableMemoryInBytes = availableMemoryInBytes;
            o.availableSpaceInBytes = availableSpaceInBytes;
            o.cpuLoad = cpuLoad;
            o.cpuLoadStatus = cpuLoadStatus;
            o.friendlyName = friendlyName;
            o.health = health;
            o.healthErrors = healthErrors;
            o.hostId = hostId;
            o.id = id;
            o.ipAddress = ipAddress;
            o.lastHeartbeat = lastHeartbeat;
            o.machineCount = machineCount;
            o.marsCommunicationStatus = marsCommunicationStatus;
            o.marsRegistrationStatus = marsRegistrationStatus;
            o.memoryUsageStatus = memoryUsageStatus;
            o.mobilityServiceUpdates = mobilityServiceUpdates;
            o.osType = osType;
            o.osVersion = osVersion;
            o.psServiceStatus = psServiceStatus;
            o.psStatsRefreshTime = psStatsRefreshTime;
            o.replicationPairCount = replicationPairCount;
            o.spaceUsageStatus = spaceUsageStatus;
            o.sslCertExpiryDate = sslCertExpiryDate;
            o.sslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
            o.systemLoad = systemLoad;
            o.systemLoadStatus = systemLoadStatus;
            o.throughputInBytes = throughputInBytes;
            o.throughputInMBps = throughputInMBps;
            o.throughputStatus = throughputStatus;
            o.throughputUploadPendingDataInBytes = throughputUploadPendingDataInBytes;
            o.totalMemoryInBytes = totalMemoryInBytes;
            o.totalSpaceInBytes = totalSpaceInBytes;
            o.versionStatus = versionStatus;
            return o;
        }
    }
}
