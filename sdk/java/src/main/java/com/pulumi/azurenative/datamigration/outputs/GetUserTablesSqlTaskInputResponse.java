// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserTablesSqlTaskInputResponse {
    /**
     * @return Connection information for SQL Server
     * 
     */
    private SqlConnectionInfoResponse connectionInfo;
    /**
     * @return List of database names to collect tables for
     * 
     */
    private List<String> selectedDatabases;

    private GetUserTablesSqlTaskInputResponse() {}
    /**
     * @return Connection information for SQL Server
     * 
     */
    public SqlConnectionInfoResponse connectionInfo() {
        return this.connectionInfo;
    }
    /**
     * @return List of database names to collect tables for
     * 
     */
    public List<String> selectedDatabases() {
        return this.selectedDatabases;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlTaskInputResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private SqlConnectionInfoResponse connectionInfo;
        private List<String> selectedDatabases;
        public Builder() {}
        public Builder(GetUserTablesSqlTaskInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionInfo = defaults.connectionInfo;
    	      this.selectedDatabases = defaults.selectedDatabases;
        }

        @CustomType.Setter
        public Builder connectionInfo(SqlConnectionInfoResponse connectionInfo) {
            this.connectionInfo = Objects.requireNonNull(connectionInfo);
            return this;
        }
        @CustomType.Setter
        public Builder selectedDatabases(List<String> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }
        public Builder selectedDatabases(String... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }
        public GetUserTablesSqlTaskInputResponse build() {
            final var o = new GetUserTablesSqlTaskInputResponse();
            o.connectionInfo = connectionInfo;
            o.selectedDatabases = selectedDatabases;
            return o;
        }
    }
}
