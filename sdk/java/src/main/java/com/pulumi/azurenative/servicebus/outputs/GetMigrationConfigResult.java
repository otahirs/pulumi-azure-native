// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMigrationConfigResult {
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
     * 
     */
    private String migrationState;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return Number of entities pending to be replicated.
     * 
     */
    private Double pendingReplicationOperationsCount;
    /**
     * @return Name to access Standard Namespace after migration
     * 
     */
    private String postMigrationName;
    /**
     * @return Provisioning state of Migration Configuration
     * 
     */
    private String provisioningState;
    /**
     * @return Existing premium Namespace ARM Id name which has no entities, will be used for migration
     * 
     */
    private String targetNamespace;
    /**
     * @return Resource type
     * 
     */
    private String type;

    private GetMigrationConfigResult() {}
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
     * 
     */
    public String migrationState() {
        return this.migrationState;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Number of entities pending to be replicated.
     * 
     */
    public Double pendingReplicationOperationsCount() {
        return this.pendingReplicationOperationsCount;
    }
    /**
     * @return Name to access Standard Namespace after migration
     * 
     */
    public String postMigrationName() {
        return this.postMigrationName;
    }
    /**
     * @return Provisioning state of Migration Configuration
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Existing premium Namespace ARM Id name which has no entities, will be used for migration
     * 
     */
    public String targetNamespace() {
        return this.targetNamespace;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMigrationConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String migrationState;
        private String name;
        private Double pendingReplicationOperationsCount;
        private String postMigrationName;
        private String provisioningState;
        private String targetNamespace;
        private String type;
        public Builder() {}
        public Builder(GetMigrationConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.migrationState = defaults.migrationState;
    	      this.name = defaults.name;
    	      this.pendingReplicationOperationsCount = defaults.pendingReplicationOperationsCount;
    	      this.postMigrationName = defaults.postMigrationName;
    	      this.provisioningState = defaults.provisioningState;
    	      this.targetNamespace = defaults.targetNamespace;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder migrationState(String migrationState) {
            this.migrationState = Objects.requireNonNull(migrationState);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder pendingReplicationOperationsCount(Double pendingReplicationOperationsCount) {
            this.pendingReplicationOperationsCount = Objects.requireNonNull(pendingReplicationOperationsCount);
            return this;
        }
        @CustomType.Setter
        public Builder postMigrationName(String postMigrationName) {
            this.postMigrationName = Objects.requireNonNull(postMigrationName);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder targetNamespace(String targetNamespace) {
            this.targetNamespace = Objects.requireNonNull(targetNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetMigrationConfigResult build() {
            final var o = new GetMigrationConfigResult();
            o.id = id;
            o.migrationState = migrationState;
            o.name = name;
            o.pendingReplicationOperationsCount = pendingReplicationOperationsCount;
            o.postMigrationName = postMigrationName;
            o.provisioningState = provisioningState;
            o.targetNamespace = targetNamespace;
            o.type = type;
            return o;
        }
    }
}
