// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningexperimentation.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return The immutable id of the team account which contains this project.
     * 
     */
    private String accountId;
    /**
     * @return The creation date of the project in ISO8601 format.
     * 
     */
    private String creationDate;
    /**
     * @return The description of this project.
     * 
     */
    private @Nullable String description;
    /**
     * @return The friendly name for this project.
     * 
     */
    private String friendlyName;
    /**
     * @return The reference to git repo for this project.
     * 
     */
    private @Nullable String gitrepo;
    /**
     * @return The resource ID.
     * 
     */
    private String id;
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    private String location;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The immutable id of this project.
     * 
     */
    private String projectId;
    /**
     * @return The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.
     * 
     */
    private String provisioningState;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;
    /**
     * @return The immutable id of the workspace which contains this project.
     * 
     */
    private String workspaceId;

    private GetProjectResult() {}
    /**
     * @return The immutable id of the team account which contains this project.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The creation date of the project in ISO8601 format.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The description of this project.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The friendly name for this project.
     * 
     */
    public String friendlyName() {
        return this.friendlyName;
    }
    /**
     * @return The reference to git repo for this project.
     * 
     */
    public Optional<String> gitrepo() {
        return Optional.ofNullable(this.gitrepo);
    }
    /**
     * @return The resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The immutable id of this project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The immutable id of the workspace which contains this project.
     * 
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String creationDate;
        private @Nullable String description;
        private String friendlyName;
        private @Nullable String gitrepo;
        private String id;
        private String location;
        private String name;
        private String projectId;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private String workspaceId;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.friendlyName = defaults.friendlyName;
    	      this.gitrepo = defaults.gitrepo;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.workspaceId = defaults.workspaceId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            this.friendlyName = Objects.requireNonNull(friendlyName);
            return this;
        }
        @CustomType.Setter
        public Builder gitrepo(@Nullable String gitrepo) {
            this.gitrepo = gitrepo;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.accountId = accountId;
            o.creationDate = creationDate;
            o.description = description;
            o.friendlyName = friendlyName;
            o.gitrepo = gitrepo;
            o.id = id;
            o.location = location;
            o.name = name;
            o.projectId = projectId;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.workspaceId = workspaceId;
            return o;
        }
    }
}
