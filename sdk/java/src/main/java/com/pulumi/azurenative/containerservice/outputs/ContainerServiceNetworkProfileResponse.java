// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.outputs;

import com.pulumi.azurenative.containerservice.outputs.ManagedClusterLoadBalancerProfileResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerServiceNetworkProfileResponse {
    /**
     * @return An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     * 
     */
    private @Nullable String dnsServiceIP;
    /**
     * @return A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     */
    private @Nullable String dockerBridgeCidr;
    /**
     * @return Profile of the cluster load balancer.
     * 
     */
    private @Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile;
    /**
     * @return The load balancer sku for the managed cluster.
     * 
     */
    private @Nullable String loadBalancerSku;
    /**
     * @return Network mode used for building Kubernetes network.
     * 
     */
    private @Nullable String networkMode;
    /**
     * @return Network plugin used for building Kubernetes network.
     * 
     */
    private @Nullable String networkPlugin;
    /**
     * @return Network policy used for building Kubernetes network.
     * 
     */
    private @Nullable String networkPolicy;
    /**
     * @return The outbound (egress) routing method.
     * 
     */
    private @Nullable String outboundType;
    /**
     * @return A CIDR notation IP range from which to assign pod IPs when kubenet is used.
     * 
     */
    private @Nullable String podCidr;
    /**
     * @return A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     * 
     */
    private @Nullable String serviceCidr;

    private ContainerServiceNetworkProfileResponse() {}
    /**
     * @return An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     * 
     */
    public Optional<String> dnsServiceIP() {
        return Optional.ofNullable(this.dnsServiceIP);
    }
    /**
     * @return A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     */
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    /**
     * @return Profile of the cluster load balancer.
     * 
     */
    public Optional<ManagedClusterLoadBalancerProfileResponse> loadBalancerProfile() {
        return Optional.ofNullable(this.loadBalancerProfile);
    }
    /**
     * @return The load balancer sku for the managed cluster.
     * 
     */
    public Optional<String> loadBalancerSku() {
        return Optional.ofNullable(this.loadBalancerSku);
    }
    /**
     * @return Network mode used for building Kubernetes network.
     * 
     */
    public Optional<String> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }
    /**
     * @return Network plugin used for building Kubernetes network.
     * 
     */
    public Optional<String> networkPlugin() {
        return Optional.ofNullable(this.networkPlugin);
    }
    /**
     * @return Network policy used for building Kubernetes network.
     * 
     */
    public Optional<String> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }
    /**
     * @return The outbound (egress) routing method.
     * 
     */
    public Optional<String> outboundType() {
        return Optional.ofNullable(this.outboundType);
    }
    /**
     * @return A CIDR notation IP range from which to assign pod IPs when kubenet is used.
     * 
     */
    public Optional<String> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }
    /**
     * @return A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     * 
     */
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerServiceNetworkProfileResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dnsServiceIP;
        private @Nullable String dockerBridgeCidr;
        private @Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile;
        private @Nullable String loadBalancerSku;
        private @Nullable String networkMode;
        private @Nullable String networkPlugin;
        private @Nullable String networkPolicy;
        private @Nullable String outboundType;
        private @Nullable String podCidr;
        private @Nullable String serviceCidr;
        public Builder() {}
        public Builder(ContainerServiceNetworkProfileResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIP = defaults.dnsServiceIP;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.loadBalancerProfile = defaults.loadBalancerProfile;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.networkMode = defaults.networkMode;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.outboundType = defaults.outboundType;
    	      this.podCidr = defaults.podCidr;
    	      this.serviceCidr = defaults.serviceCidr;
        }

        @CustomType.Setter
        public Builder dnsServiceIP(@Nullable String dnsServiceIP) {
            this.dnsServiceIP = dnsServiceIP;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerProfile(@Nullable ManagedClusterLoadBalancerProfileResponse loadBalancerProfile) {
            this.loadBalancerProfile = loadBalancerProfile;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSku(@Nullable String loadBalancerSku) {
            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        @CustomType.Setter
        public Builder networkMode(@Nullable String networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        @CustomType.Setter
        public Builder networkPlugin(@Nullable String networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicy(@Nullable String networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder outboundType(@Nullable String outboundType) {
            this.outboundType = outboundType;
            return this;
        }
        @CustomType.Setter
        public Builder podCidr(@Nullable String podCidr) {
            this.podCidr = podCidr;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }
        public ContainerServiceNetworkProfileResponse build() {
            final var o = new ContainerServiceNetworkProfileResponse();
            o.dnsServiceIP = dnsServiceIP;
            o.dockerBridgeCidr = dockerBridgeCidr;
            o.loadBalancerProfile = loadBalancerProfile;
            o.loadBalancerSku = loadBalancerSku;
            o.networkMode = networkMode;
            o.networkPlugin = networkPlugin;
            o.networkPolicy = networkPolicy;
            o.outboundType = outboundType;
            o.podCidr = podCidr;
            o.serviceCidr = serviceCidr;
            return o;
        }
    }
}
