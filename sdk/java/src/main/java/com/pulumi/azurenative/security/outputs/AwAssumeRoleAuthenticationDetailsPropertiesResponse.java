// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AwAssumeRoleAuthenticationDetailsPropertiesResponse {
    /**
     * @return The ID of the cloud account
     * 
     */
    private String accountId;
    /**
     * @return State of the multi-cloud connector
     * 
     */
    private String authenticationProvisioningState;
    /**
     * @return Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
     * Expected value is &#39;awsAssumeRole&#39;.
     * 
     */
    private String authenticationType;
    /**
     * @return Assumed role ID is an identifier that you can use to create temporary security credentials.
     * 
     */
    private String awsAssumeRoleArn;
    /**
     * @return A unique identifier that is required when you assume a role in another account.
     * 
     */
    private String awsExternalId;
    /**
     * @return The permissions detected in the cloud account.
     * 
     */
    private List<String> grantedPermissions;

    private AwAssumeRoleAuthenticationDetailsPropertiesResponse() {}
    /**
     * @return The ID of the cloud account
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return State of the multi-cloud connector
     * 
     */
    public String authenticationProvisioningState() {
        return this.authenticationProvisioningState;
    }
    /**
     * @return Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
     * Expected value is &#39;awsAssumeRole&#39;.
     * 
     */
    public String authenticationType() {
        return this.authenticationType;
    }
    /**
     * @return Assumed role ID is an identifier that you can use to create temporary security credentials.
     * 
     */
    public String awsAssumeRoleArn() {
        return this.awsAssumeRoleArn;
    }
    /**
     * @return A unique identifier that is required when you assume a role in another account.
     * 
     */
    public String awsExternalId() {
        return this.awsExternalId;
    }
    /**
     * @return The permissions detected in the cloud account.
     * 
     */
    public List<String> grantedPermissions() {
        return this.grantedPermissions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwAssumeRoleAuthenticationDetailsPropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String authenticationProvisioningState;
        private String authenticationType;
        private String awsAssumeRoleArn;
        private String awsExternalId;
        private List<String> grantedPermissions;
        public Builder() {}
        public Builder(AwAssumeRoleAuthenticationDetailsPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.authenticationProvisioningState = defaults.authenticationProvisioningState;
    	      this.authenticationType = defaults.authenticationType;
    	      this.awsAssumeRoleArn = defaults.awsAssumeRoleArn;
    	      this.awsExternalId = defaults.awsExternalId;
    	      this.grantedPermissions = defaults.grantedPermissions;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder authenticationProvisioningState(String authenticationProvisioningState) {
            this.authenticationProvisioningState = Objects.requireNonNull(authenticationProvisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }
        @CustomType.Setter
        public Builder awsAssumeRoleArn(String awsAssumeRoleArn) {
            this.awsAssumeRoleArn = Objects.requireNonNull(awsAssumeRoleArn);
            return this;
        }
        @CustomType.Setter
        public Builder awsExternalId(String awsExternalId) {
            this.awsExternalId = Objects.requireNonNull(awsExternalId);
            return this;
        }
        @CustomType.Setter
        public Builder grantedPermissions(List<String> grantedPermissions) {
            this.grantedPermissions = Objects.requireNonNull(grantedPermissions);
            return this;
        }
        public Builder grantedPermissions(String... grantedPermissions) {
            return grantedPermissions(List.of(grantedPermissions));
        }
        public AwAssumeRoleAuthenticationDetailsPropertiesResponse build() {
            final var o = new AwAssumeRoleAuthenticationDetailsPropertiesResponse();
            o.accountId = accountId;
            o.authenticationProvisioningState = authenticationProvisioningState;
            o.authenticationType = authenticationType;
            o.awsAssumeRoleArn = awsAssumeRoleArn;
            o.awsExternalId = awsExternalId;
            o.grantedPermissions = grantedPermissions;
            return o;
        }
    }
}
