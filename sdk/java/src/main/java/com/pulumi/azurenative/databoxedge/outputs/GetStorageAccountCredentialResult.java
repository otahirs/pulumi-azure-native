// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge.outputs;

import com.pulumi.azurenative.databoxedge.outputs.AsymmetricEncryptedSecretResponse;
import com.pulumi.azurenative.databoxedge.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStorageAccountCredentialResult {
    /**
     * @return Encrypted storage key.
     * 
     */
    private @Nullable AsymmetricEncryptedSecretResponse accountKey;
    /**
     * @return Type of storage accessed on the storage account.
     * 
     */
    private String accountType;
    /**
     * @return Alias for the storage account.
     * 
     */
    private String alias;
    /**
     * @return Blob end point for private clouds.
     * 
     */
    private @Nullable String blobDomainName;
    /**
     * @return Connection string for the storage account. Use this string if username and account key are not specified.
     * 
     */
    private @Nullable String connectionString;
    /**
     * @return The path ID that uniquely identifies the object.
     * 
     */
    private String id;
    /**
     * @return The object name.
     * 
     */
    private String name;
    /**
     * @return Signifies whether SSL needs to be enabled or not.
     * 
     */
    private String sslStatus;
    /**
     * @return Id of the storage account.
     * 
     */
    private @Nullable String storageAccountId;
    /**
     * @return StorageAccountCredential object
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return The hierarchical type of the object.
     * 
     */
    private String type;
    /**
     * @return Username for the storage account.
     * 
     */
    private @Nullable String userName;

    private GetStorageAccountCredentialResult() {}
    /**
     * @return Encrypted storage key.
     * 
     */
    public Optional<AsymmetricEncryptedSecretResponse> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }
    /**
     * @return Type of storage accessed on the storage account.
     * 
     */
    public String accountType() {
        return this.accountType;
    }
    /**
     * @return Alias for the storage account.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return Blob end point for private clouds.
     * 
     */
    public Optional<String> blobDomainName() {
        return Optional.ofNullable(this.blobDomainName);
    }
    /**
     * @return Connection string for the storage account. Use this string if username and account key are not specified.
     * 
     */
    public Optional<String> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }
    /**
     * @return The path ID that uniquely identifies the object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The object name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Signifies whether SSL needs to be enabled or not.
     * 
     */
    public String sslStatus() {
        return this.sslStatus;
    }
    /**
     * @return Id of the storage account.
     * 
     */
    public Optional<String> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }
    /**
     * @return StorageAccountCredential object
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return The hierarchical type of the object.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Username for the storage account.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStorageAccountCredentialResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AsymmetricEncryptedSecretResponse accountKey;
        private String accountType;
        private String alias;
        private @Nullable String blobDomainName;
        private @Nullable String connectionString;
        private String id;
        private String name;
        private String sslStatus;
        private @Nullable String storageAccountId;
        private SystemDataResponse systemData;
        private String type;
        private @Nullable String userName;
        public Builder() {}
        public Builder(GetStorageAccountCredentialResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountKey = defaults.accountKey;
    	      this.accountType = defaults.accountType;
    	      this.alias = defaults.alias;
    	      this.blobDomainName = defaults.blobDomainName;
    	      this.connectionString = defaults.connectionString;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.sslStatus = defaults.sslStatus;
    	      this.storageAccountId = defaults.storageAccountId;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder accountKey(@Nullable AsymmetricEncryptedSecretResponse accountKey) {
            this.accountKey = accountKey;
            return this;
        }
        @CustomType.Setter
        public Builder accountType(String accountType) {
            this.accountType = Objects.requireNonNull(accountType);
            return this;
        }
        @CustomType.Setter
        public Builder alias(String alias) {
            this.alias = Objects.requireNonNull(alias);
            return this;
        }
        @CustomType.Setter
        public Builder blobDomainName(@Nullable String blobDomainName) {
            this.blobDomainName = blobDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(@Nullable String connectionString) {
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder sslStatus(String sslStatus) {
            this.sslStatus = Objects.requireNonNull(sslStatus);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountId(@Nullable String storageAccountId) {
            this.storageAccountId = storageAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public GetStorageAccountCredentialResult build() {
            final var o = new GetStorageAccountCredentialResult();
            o.accountKey = accountKey;
            o.accountType = accountType;
            o.alias = alias;
            o.blobDomainName = blobDomainName;
            o.connectionString = connectionString;
            o.id = id;
            o.name = name;
            o.sslStatus = sslStatus;
            o.storageAccountId = storageAccountId;
            o.systemData = systemData;
            o.type = type;
            o.userName = userName;
            return o;
        }
    }
}
