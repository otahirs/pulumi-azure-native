// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.outputs;

import com.pulumi.azurenative.migrate.outputs.AutomaticResolutionPropertiesResponse;
import com.pulumi.azurenative.migrate.outputs.ManualResolutionPropertiesResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MoveResourceDependencyResponse {
    /**
     * @return Defines the properties for automatic resolution.
     * 
     */
    private @Nullable AutomaticResolutionPropertiesResponse automaticResolution;
    /**
     * @return Defines the dependency type.
     * 
     */
    private @Nullable String dependencyType;
    /**
     * @return Gets the source ARM ID of the dependent resource.
     * 
     */
    private @Nullable String id;
    /**
     * @return Gets or sets a value indicating whether the dependency is optional.
     * 
     */
    private @Nullable String isOptional;
    /**
     * @return Defines the properties for manual resolution.
     * 
     */
    private @Nullable ManualResolutionPropertiesResponse manualResolution;
    /**
     * @return Gets the dependency resolution status.
     * 
     */
    private @Nullable String resolutionStatus;
    /**
     * @return Defines the resolution type.
     * 
     */
    private @Nullable String resolutionType;

    private MoveResourceDependencyResponse() {}
    /**
     * @return Defines the properties for automatic resolution.
     * 
     */
    public Optional<AutomaticResolutionPropertiesResponse> automaticResolution() {
        return Optional.ofNullable(this.automaticResolution);
    }
    /**
     * @return Defines the dependency type.
     * 
     */
    public Optional<String> dependencyType() {
        return Optional.ofNullable(this.dependencyType);
    }
    /**
     * @return Gets the source ARM ID of the dependent resource.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Gets or sets a value indicating whether the dependency is optional.
     * 
     */
    public Optional<String> isOptional() {
        return Optional.ofNullable(this.isOptional);
    }
    /**
     * @return Defines the properties for manual resolution.
     * 
     */
    public Optional<ManualResolutionPropertiesResponse> manualResolution() {
        return Optional.ofNullable(this.manualResolution);
    }
    /**
     * @return Gets the dependency resolution status.
     * 
     */
    public Optional<String> resolutionStatus() {
        return Optional.ofNullable(this.resolutionStatus);
    }
    /**
     * @return Defines the resolution type.
     * 
     */
    public Optional<String> resolutionType() {
        return Optional.ofNullable(this.resolutionType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MoveResourceDependencyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AutomaticResolutionPropertiesResponse automaticResolution;
        private @Nullable String dependencyType;
        private @Nullable String id;
        private @Nullable String isOptional;
        private @Nullable ManualResolutionPropertiesResponse manualResolution;
        private @Nullable String resolutionStatus;
        private @Nullable String resolutionType;
        public Builder() {}
        public Builder(MoveResourceDependencyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automaticResolution = defaults.automaticResolution;
    	      this.dependencyType = defaults.dependencyType;
    	      this.id = defaults.id;
    	      this.isOptional = defaults.isOptional;
    	      this.manualResolution = defaults.manualResolution;
    	      this.resolutionStatus = defaults.resolutionStatus;
    	      this.resolutionType = defaults.resolutionType;
        }

        @CustomType.Setter
        public Builder automaticResolution(@Nullable AutomaticResolutionPropertiesResponse automaticResolution) {
            this.automaticResolution = automaticResolution;
            return this;
        }
        @CustomType.Setter
        public Builder dependencyType(@Nullable String dependencyType) {
            this.dependencyType = dependencyType;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isOptional(@Nullable String isOptional) {
            this.isOptional = isOptional;
            return this;
        }
        @CustomType.Setter
        public Builder manualResolution(@Nullable ManualResolutionPropertiesResponse manualResolution) {
            this.manualResolution = manualResolution;
            return this;
        }
        @CustomType.Setter
        public Builder resolutionStatus(@Nullable String resolutionStatus) {
            this.resolutionStatus = resolutionStatus;
            return this;
        }
        @CustomType.Setter
        public Builder resolutionType(@Nullable String resolutionType) {
            this.resolutionType = resolutionType;
            return this;
        }
        public MoveResourceDependencyResponse build() {
            final var o = new MoveResourceDependencyResponse();
            o.automaticResolution = automaticResolution;
            o.dependencyType = dependencyType;
            o.id = id;
            o.isOptional = isOptional;
            o.manualResolution = manualResolution;
            o.resolutionStatus = resolutionStatus;
            o.resolutionType = resolutionType;
            return o;
        }
    }
}
