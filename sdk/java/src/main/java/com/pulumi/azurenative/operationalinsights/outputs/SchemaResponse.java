// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.outputs;

import com.pulumi.azurenative.operationalinsights.outputs.ColumnResponse;
import com.pulumi.azurenative.operationalinsights.outputs.RestoredLogsResponse;
import com.pulumi.azurenative.operationalinsights.outputs.SearchResultsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SchemaResponse {
    /**
     * @return Table category.
     * 
     */
    private List<String> categories;
    /**
     * @return A list of table custom columns.
     * 
     */
    private @Nullable List<ColumnResponse> columns;
    /**
     * @return Table description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Table display name.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Table labels.
     * 
     */
    private List<String> labels;
    /**
     * @return Table name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Parameters of the restore operation that initiated this table.
     * 
     */
    private RestoredLogsResponse restoredLogs;
    /**
     * @return Parameters of the search job that initiated this table.
     * 
     */
    private SearchResultsResponse searchResults;
    /**
     * @return List of solutions the table is affiliated with
     * 
     */
    private List<String> solutions;
    /**
     * @return Table&#39;s creator.
     * 
     */
    private String source;
    /**
     * @return A list of table standard columns.
     * 
     */
    private List<ColumnResponse> standardColumns;
    /**
     * @return The subtype describes what APIs can be used to interact with the table, and what features are available against it.
     * 
     */
    private String tableSubType;
    /**
     * @return Table&#39;s creator.
     * 
     */
    private String tableType;

    private SchemaResponse() {}
    /**
     * @return Table category.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    /**
     * @return A list of table custom columns.
     * 
     */
    public List<ColumnResponse> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    /**
     * @return Table description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Table display name.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Table labels.
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    /**
     * @return Table name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Parameters of the restore operation that initiated this table.
     * 
     */
    public RestoredLogsResponse restoredLogs() {
        return this.restoredLogs;
    }
    /**
     * @return Parameters of the search job that initiated this table.
     * 
     */
    public SearchResultsResponse searchResults() {
        return this.searchResults;
    }
    /**
     * @return List of solutions the table is affiliated with
     * 
     */
    public List<String> solutions() {
        return this.solutions;
    }
    /**
     * @return Table&#39;s creator.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return A list of table standard columns.
     * 
     */
    public List<ColumnResponse> standardColumns() {
        return this.standardColumns;
    }
    /**
     * @return The subtype describes what APIs can be used to interact with the table, and what features are available against it.
     * 
     */
    public String tableSubType() {
        return this.tableSubType;
    }
    /**
     * @return Table&#39;s creator.
     * 
     */
    public String tableType() {
        return this.tableType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SchemaResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> categories;
        private @Nullable List<ColumnResponse> columns;
        private @Nullable String description;
        private @Nullable String displayName;
        private List<String> labels;
        private @Nullable String name;
        private RestoredLogsResponse restoredLogs;
        private SearchResultsResponse searchResults;
        private List<String> solutions;
        private String source;
        private List<ColumnResponse> standardColumns;
        private String tableSubType;
        private String tableType;
        public Builder() {}
        public Builder(SchemaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.columns = defaults.columns;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.restoredLogs = defaults.restoredLogs;
    	      this.searchResults = defaults.searchResults;
    	      this.solutions = defaults.solutions;
    	      this.source = defaults.source;
    	      this.standardColumns = defaults.standardColumns;
    	      this.tableSubType = defaults.tableSubType;
    	      this.tableType = defaults.tableType;
        }

        @CustomType.Setter
        public Builder categories(List<String> categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder columns(@Nullable List<ColumnResponse> columns) {
            this.columns = columns;
            return this;
        }
        public Builder columns(ColumnResponse... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder restoredLogs(RestoredLogsResponse restoredLogs) {
            this.restoredLogs = Objects.requireNonNull(restoredLogs);
            return this;
        }
        @CustomType.Setter
        public Builder searchResults(SearchResultsResponse searchResults) {
            this.searchResults = Objects.requireNonNull(searchResults);
            return this;
        }
        @CustomType.Setter
        public Builder solutions(List<String> solutions) {
            this.solutions = Objects.requireNonNull(solutions);
            return this;
        }
        public Builder solutions(String... solutions) {
            return solutions(List.of(solutions));
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder standardColumns(List<ColumnResponse> standardColumns) {
            this.standardColumns = Objects.requireNonNull(standardColumns);
            return this;
        }
        public Builder standardColumns(ColumnResponse... standardColumns) {
            return standardColumns(List.of(standardColumns));
        }
        @CustomType.Setter
        public Builder tableSubType(String tableSubType) {
            this.tableSubType = Objects.requireNonNull(tableSubType);
            return this;
        }
        @CustomType.Setter
        public Builder tableType(String tableType) {
            this.tableType = Objects.requireNonNull(tableType);
            return this;
        }
        public SchemaResponse build() {
            final var o = new SchemaResponse();
            o.categories = categories;
            o.columns = columns;
            o.description = description;
            o.displayName = displayName;
            o.labels = labels;
            o.name = name;
            o.restoredLogs = restoredLogs;
            o.searchResults = searchResults;
            o.solutions = solutions;
            o.source = source;
            o.standardColumns = standardColumns;
            o.tableSubType = tableSubType;
            o.tableType = tableType;
            return o;
        }
    }
}
