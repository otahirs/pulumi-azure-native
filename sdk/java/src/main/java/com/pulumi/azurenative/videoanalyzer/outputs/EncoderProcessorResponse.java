// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.outputs;

import com.pulumi.azurenative.videoanalyzer.outputs.EncoderCustomPresetResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.EncoderSystemPresetResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.NodeInputResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class EncoderProcessorResponse {
    /**
     * @return An array of upstream node references within the topology to be used as inputs for this node.
     * 
     */
    private List<NodeInputResponse> inputs;
    /**
     * @return Node name. Must be unique within the topology.
     * 
     */
    private String name;
    /**
     * @return The encoder preset, which defines the recipe or instructions on how the input content should be processed.
     * 
     */
    private Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset;
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
     * 
     */
    private String type;

    private EncoderProcessorResponse() {}
    /**
     * @return An array of upstream node references within the topology to be used as inputs for this node.
     * 
     */
    public List<NodeInputResponse> inputs() {
        return this.inputs;
    }
    /**
     * @return Node name. Must be unique within the topology.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The encoder preset, which defines the recipe or instructions on how the input content should be processed.
     * 
     */
    public Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset() {
        return this.preset;
    }
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncoderProcessorResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<NodeInputResponse> inputs;
        private String name;
        private Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset;
        private String type;
        public Builder() {}
        public Builder(EncoderProcessorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputs = defaults.inputs;
    	      this.name = defaults.name;
    	      this.preset = defaults.preset;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder inputs(List<NodeInputResponse> inputs) {
            this.inputs = Objects.requireNonNull(inputs);
            return this;
        }
        public Builder inputs(NodeInputResponse... inputs) {
            return inputs(List.of(inputs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder preset(Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset) {
            this.preset = Objects.requireNonNull(preset);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public EncoderProcessorResponse build() {
            final var o = new EncoderProcessorResponse();
            o.inputs = inputs;
            o.name = name;
            o.preset = preset;
            o.type = type;
            return o;
        }
    }
}
