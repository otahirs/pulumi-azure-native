// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devhub.inputs;

import com.pulumi.azurenative.devhub.enums.ManifestType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentPropertiesArgs Empty = new DeploymentPropertiesArgs();

    /**
     * Helm chart directory path in repository.
     * 
     */
    @Import(name="helmChartPath")
    private @Nullable Output<String> helmChartPath;

    /**
     * @return Helm chart directory path in repository.
     * 
     */
    public Optional<Output<String>> helmChartPath() {
        return Optional.ofNullable(this.helmChartPath);
    }

    /**
     * Helm Values.yaml file location in repository.
     * 
     */
    @Import(name="helmValues")
    private @Nullable Output<String> helmValues;

    /**
     * @return Helm Values.yaml file location in repository.
     * 
     */
    public Optional<Output<String>> helmValues() {
        return Optional.ofNullable(this.helmValues);
    }

    @Import(name="kubeManifestLocations")
    private @Nullable Output<List<String>> kubeManifestLocations;

    public Optional<Output<List<String>>> kubeManifestLocations() {
        return Optional.ofNullable(this.kubeManifestLocations);
    }

    /**
     * Determines the type of manifests within the repository.
     * 
     */
    @Import(name="manifestType")
    private @Nullable Output<Either<String,ManifestType>> manifestType;

    /**
     * @return Determines the type of manifests within the repository.
     * 
     */
    public Optional<Output<Either<String,ManifestType>>> manifestType() {
        return Optional.ofNullable(this.manifestType);
    }

    /**
     * Manifest override values.
     * 
     */
    @Import(name="overrides")
    private @Nullable Output<Map<String,String>> overrides;

    /**
     * @return Manifest override values.
     * 
     */
    public Optional<Output<Map<String,String>>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    private DeploymentPropertiesArgs() {}

    private DeploymentPropertiesArgs(DeploymentPropertiesArgs $) {
        this.helmChartPath = $.helmChartPath;
        this.helmValues = $.helmValues;
        this.kubeManifestLocations = $.kubeManifestLocations;
        this.manifestType = $.manifestType;
        this.overrides = $.overrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentPropertiesArgs $;

        public Builder() {
            $ = new DeploymentPropertiesArgs();
        }

        public Builder(DeploymentPropertiesArgs defaults) {
            $ = new DeploymentPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param helmChartPath Helm chart directory path in repository.
         * 
         * @return builder
         * 
         */
        public Builder helmChartPath(@Nullable Output<String> helmChartPath) {
            $.helmChartPath = helmChartPath;
            return this;
        }

        /**
         * @param helmChartPath Helm chart directory path in repository.
         * 
         * @return builder
         * 
         */
        public Builder helmChartPath(String helmChartPath) {
            return helmChartPath(Output.of(helmChartPath));
        }

        /**
         * @param helmValues Helm Values.yaml file location in repository.
         * 
         * @return builder
         * 
         */
        public Builder helmValues(@Nullable Output<String> helmValues) {
            $.helmValues = helmValues;
            return this;
        }

        /**
         * @param helmValues Helm Values.yaml file location in repository.
         * 
         * @return builder
         * 
         */
        public Builder helmValues(String helmValues) {
            return helmValues(Output.of(helmValues));
        }

        public Builder kubeManifestLocations(@Nullable Output<List<String>> kubeManifestLocations) {
            $.kubeManifestLocations = kubeManifestLocations;
            return this;
        }

        public Builder kubeManifestLocations(List<String> kubeManifestLocations) {
            return kubeManifestLocations(Output.of(kubeManifestLocations));
        }

        public Builder kubeManifestLocations(String... kubeManifestLocations) {
            return kubeManifestLocations(List.of(kubeManifestLocations));
        }

        /**
         * @param manifestType Determines the type of manifests within the repository.
         * 
         * @return builder
         * 
         */
        public Builder manifestType(@Nullable Output<Either<String,ManifestType>> manifestType) {
            $.manifestType = manifestType;
            return this;
        }

        /**
         * @param manifestType Determines the type of manifests within the repository.
         * 
         * @return builder
         * 
         */
        public Builder manifestType(Either<String,ManifestType> manifestType) {
            return manifestType(Output.of(manifestType));
        }

        /**
         * @param manifestType Determines the type of manifests within the repository.
         * 
         * @return builder
         * 
         */
        public Builder manifestType(String manifestType) {
            return manifestType(Either.ofLeft(manifestType));
        }

        /**
         * @param manifestType Determines the type of manifests within the repository.
         * 
         * @return builder
         * 
         */
        public Builder manifestType(ManifestType manifestType) {
            return manifestType(Either.ofRight(manifestType));
        }

        /**
         * @param overrides Manifest override values.
         * 
         * @return builder
         * 
         */
        public Builder overrides(@Nullable Output<Map<String,String>> overrides) {
            $.overrides = overrides;
            return this;
        }

        /**
         * @param overrides Manifest override values.
         * 
         * @return builder
         * 
         */
        public Builder overrides(Map<String,String> overrides) {
            return overrides(Output.of(overrides));
        }

        public DeploymentPropertiesArgs build() {
            return $;
        }
    }

}
