// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.communication;

import com.pulumi.azurenative.communication.enums.DomainManagement;
import com.pulumi.azurenative.communication.enums.UserEngagementTracking;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    /**
     * Describes how a Domains resource is being managed.
     * 
     */
    @Import(name="domainManagement", required=true)
    private Output<Either<String,DomainManagement>> domainManagement;

    /**
     * @return Describes how a Domains resource is being managed.
     * 
     */
    public Output<Either<String,DomainManagement>> domainManagement() {
        return this.domainManagement;
    }

    /**
     * The name of the Domains resource.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return The name of the Domains resource.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The name of the EmailService resource.
     * 
     */
    @Import(name="emailServiceName", required=true)
    private Output<String> emailServiceName;

    /**
     * @return The name of the EmailService resource.
     * 
     */
    public Output<String> emailServiceName() {
        return this.emailServiceName;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Describes whether user engagement tracking is enabled or disabled.
     * 
     */
    @Import(name="userEngagementTracking")
    private @Nullable Output<Either<String,UserEngagementTracking>> userEngagementTracking;

    /**
     * @return Describes whether user engagement tracking is enabled or disabled.
     * 
     */
    public Optional<Output<Either<String,UserEngagementTracking>>> userEngagementTracking() {
        return Optional.ofNullable(this.userEngagementTracking);
    }

    /**
     * Collection of valid sender usernames. This is a key-value pair where key=username and value=display name.
     * 
     */
    @Import(name="validSenderUsernames")
    private @Nullable Output<Map<String,String>> validSenderUsernames;

    /**
     * @return Collection of valid sender usernames. This is a key-value pair where key=username and value=display name.
     * 
     */
    public Optional<Output<Map<String,String>>> validSenderUsernames() {
        return Optional.ofNullable(this.validSenderUsernames);
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.domainManagement = $.domainManagement;
        this.domainName = $.domainName;
        this.emailServiceName = $.emailServiceName;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.userEngagementTracking = $.userEngagementTracking;
        this.validSenderUsernames = $.validSenderUsernames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainManagement Describes how a Domains resource is being managed.
         * 
         * @return builder
         * 
         */
        public Builder domainManagement(Output<Either<String,DomainManagement>> domainManagement) {
            $.domainManagement = domainManagement;
            return this;
        }

        /**
         * @param domainManagement Describes how a Domains resource is being managed.
         * 
         * @return builder
         * 
         */
        public Builder domainManagement(Either<String,DomainManagement> domainManagement) {
            return domainManagement(Output.of(domainManagement));
        }

        /**
         * @param domainManagement Describes how a Domains resource is being managed.
         * 
         * @return builder
         * 
         */
        public Builder domainManagement(String domainManagement) {
            return domainManagement(Either.ofLeft(domainManagement));
        }

        /**
         * @param domainManagement Describes how a Domains resource is being managed.
         * 
         * @return builder
         * 
         */
        public Builder domainManagement(DomainManagement domainManagement) {
            return domainManagement(Either.ofRight(domainManagement));
        }

        /**
         * @param domainName The name of the Domains resource.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The name of the Domains resource.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param emailServiceName The name of the EmailService resource.
         * 
         * @return builder
         * 
         */
        public Builder emailServiceName(Output<String> emailServiceName) {
            $.emailServiceName = emailServiceName;
            return this;
        }

        /**
         * @param emailServiceName The name of the EmailService resource.
         * 
         * @return builder
         * 
         */
        public Builder emailServiceName(String emailServiceName) {
            return emailServiceName(Output.of(emailServiceName));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param userEngagementTracking Describes whether user engagement tracking is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder userEngagementTracking(@Nullable Output<Either<String,UserEngagementTracking>> userEngagementTracking) {
            $.userEngagementTracking = userEngagementTracking;
            return this;
        }

        /**
         * @param userEngagementTracking Describes whether user engagement tracking is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder userEngagementTracking(Either<String,UserEngagementTracking> userEngagementTracking) {
            return userEngagementTracking(Output.of(userEngagementTracking));
        }

        /**
         * @param userEngagementTracking Describes whether user engagement tracking is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder userEngagementTracking(String userEngagementTracking) {
            return userEngagementTracking(Either.ofLeft(userEngagementTracking));
        }

        /**
         * @param userEngagementTracking Describes whether user engagement tracking is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder userEngagementTracking(UserEngagementTracking userEngagementTracking) {
            return userEngagementTracking(Either.ofRight(userEngagementTracking));
        }

        /**
         * @param validSenderUsernames Collection of valid sender usernames. This is a key-value pair where key=username and value=display name.
         * 
         * @return builder
         * 
         */
        public Builder validSenderUsernames(@Nullable Output<Map<String,String>> validSenderUsernames) {
            $.validSenderUsernames = validSenderUsernames;
            return this;
        }

        /**
         * @param validSenderUsernames Collection of valid sender usernames. This is a key-value pair where key=username and value=display name.
         * 
         * @return builder
         * 
         */
        public Builder validSenderUsernames(Map<String,String> validSenderUsernames) {
            return validSenderUsernames(Output.of(validSenderUsernames));
        }

        public DomainArgs build() {
            $.domainManagement = Objects.requireNonNull($.domainManagement, "expected parameter 'domainManagement' to be non-null");
            $.emailServiceName = Objects.requireNonNull($.emailServiceName, "expected parameter 'emailServiceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
