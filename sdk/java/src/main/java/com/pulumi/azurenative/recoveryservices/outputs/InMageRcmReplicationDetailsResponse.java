// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.outputs;

import com.pulumi.azurenative.recoveryservices.outputs.InMageRcmAgentUpgradeBlockingErrorDetailsResponse;
import com.pulumi.azurenative.recoveryservices.outputs.InMageRcmLastAgentUpgradeErrorDetailsResponse;
import com.pulumi.azurenative.recoveryservices.outputs.InMageRcmMobilityAgentDetailsResponse;
import com.pulumi.azurenative.recoveryservices.outputs.InMageRcmNicDetailsResponse;
import com.pulumi.azurenative.recoveryservices.outputs.InMageRcmProtectedDiskDetailsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class InMageRcmReplicationDetailsResponse {
    /**
     * @return The agent upgrade blocking error information.
     * 
     */
    private List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails;
    /**
     * @return The agent auto upgrade state.
     * 
     */
    private String agentUpgradeState;
    /**
     * @return The allocated memory in MB.
     * 
     */
    private Double allocatedMemoryInMB;
    /**
     * @return The type of the discovered VM.
     * 
     */
    private String discoveryType;
    /**
     * @return The ARM Id of the discovered VM.
     * 
     */
    private String fabricDiscoveryMachineId;
    /**
     * @return The recovery point Id to which the VM was failed over.
     * 
     */
    private String failoverRecoveryPointId;
    /**
     * @return The firmware type.
     * 
     */
    private String firmwareType;
    /**
     * @return The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    private Double initialReplicationProcessedBytes;
    /**
     * @return The initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    private Integer initialReplicationProgressPercentage;
    /**
     * @return The initial replication transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    private Double initialReplicationTransferredBytes;
    /**
     * @return Gets the Instance type.
     * Expected value is &#39;InMageRcm&#39;.
     * 
     */
    private String instanceType;
    /**
     * @return The virtual machine internal identifier.
     * 
     */
    private String internalIdentifier;
    /**
     * @return A value indicating whether last agent upgrade was successful or not.
     * 
     */
    private String isLastUpgradeSuccessful;
    /**
     * @return The last agent upgrade error information.
     * 
     */
    private List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails;
    /**
     * @return The last agent upgrade failed or cancelled job Id.
     * 
     */
    private String lastAgentUpgradeFailedJobId;
    /**
     * @return The last agent upgrade type.
     * 
     */
    private String lastAgentUpgradeType;
    /**
     * @return The last recovery point Id.
     * 
     */
    private String lastRecoveryPointId;
    /**
     * @return The last recovery point received time.
     * 
     */
    private String lastRecoveryPointReceived;
    /**
     * @return The last recovery point objective calculated time.
     * 
     */
    private String lastRpoCalculatedTime;
    /**
     * @return The last recovery point objective value.
     * 
     */
    private Double lastRpoInSeconds;
    /**
     * @return License Type of the VM to be used.
     * 
     */
    private String licenseType;
    /**
     * @return The mobility agent information.
     * 
     */
    private InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails;
    /**
     * @return The multi VM group name.
     * 
     */
    private String multiVmGroupName;
    /**
     * @return The type of the OS on the VM.
     * 
     */
    private String osType;
    /**
     * @return The process server Id.
     * 
     */
    private String processServerId;
    /**
     * @return The process server name.
     * 
     */
    private String processServerName;
    /**
     * @return The processor core count.
     * 
     */
    private Integer processorCoreCount;
    /**
     * @return The list of protected disks.
     * 
     */
    private List<InMageRcmProtectedDiskDetailsResponse> protectedDisks;
    /**
     * @return The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    private Double resyncProcessedBytes;
    /**
     * @return The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    private Integer resyncProgressPercentage;
    /**
     * @return A value indicating whether resync is required.
     * 
     */
    private String resyncRequired;
    /**
     * @return The resync state.
     * 
     */
    private String resyncState;
    /**
     * @return The resync transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    private Double resyncTransferredBytes;
    /**
     * @return The run-as account Id.
     * 
     */
    private String runAsAccountId;
    /**
     * @return The target availability set Id.
     * 
     */
    private String targetAvailabilitySetId;
    /**
     * @return The target availability zone.
     * 
     */
    private String targetAvailabilityZone;
    /**
     * @return The target boot diagnostics storage account ARM Id.
     * 
     */
    private String targetBootDiagnosticsStorageAccountId;
    /**
     * @return The target generation.
     * 
     */
    private String targetGeneration;
    /**
     * @return The target network Id.
     * 
     */
    private String targetNetworkId;
    /**
     * @return The target proximity placement group Id.
     * 
     */
    private String targetProximityPlacementGroupId;
    /**
     * @return The target resource group Id.
     * 
     */
    private String targetResourceGroupId;
    /**
     * @return Target VM name.
     * 
     */
    private String targetVmName;
    /**
     * @return The target VM size.
     * 
     */
    private String targetVmSize;
    /**
     * @return The test network Id.
     * 
     */
    private String testNetworkId;
    /**
     * @return The network details.
     * 
     */
    private List<InMageRcmNicDetailsResponse> vmNics;

    private InMageRcmReplicationDetailsResponse() {}
    /**
     * @return The agent upgrade blocking error information.
     * 
     */
    public List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails() {
        return this.agentUpgradeBlockingErrorDetails;
    }
    /**
     * @return The agent auto upgrade state.
     * 
     */
    public String agentUpgradeState() {
        return this.agentUpgradeState;
    }
    /**
     * @return The allocated memory in MB.
     * 
     */
    public Double allocatedMemoryInMB() {
        return this.allocatedMemoryInMB;
    }
    /**
     * @return The type of the discovered VM.
     * 
     */
    public String discoveryType() {
        return this.discoveryType;
    }
    /**
     * @return The ARM Id of the discovered VM.
     * 
     */
    public String fabricDiscoveryMachineId() {
        return this.fabricDiscoveryMachineId;
    }
    /**
     * @return The recovery point Id to which the VM was failed over.
     * 
     */
    public String failoverRecoveryPointId() {
        return this.failoverRecoveryPointId;
    }
    /**
     * @return The firmware type.
     * 
     */
    public String firmwareType() {
        return this.firmwareType;
    }
    /**
     * @return The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    public Double initialReplicationProcessedBytes() {
        return this.initialReplicationProcessedBytes;
    }
    /**
     * @return The initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    public Integer initialReplicationProgressPercentage() {
        return this.initialReplicationProgressPercentage;
    }
    /**
     * @return The initial replication transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    public Double initialReplicationTransferredBytes() {
        return this.initialReplicationTransferredBytes;
    }
    /**
     * @return Gets the Instance type.
     * Expected value is &#39;InMageRcm&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return The virtual machine internal identifier.
     * 
     */
    public String internalIdentifier() {
        return this.internalIdentifier;
    }
    /**
     * @return A value indicating whether last agent upgrade was successful or not.
     * 
     */
    public String isLastUpgradeSuccessful() {
        return this.isLastUpgradeSuccessful;
    }
    /**
     * @return The last agent upgrade error information.
     * 
     */
    public List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails() {
        return this.lastAgentUpgradeErrorDetails;
    }
    /**
     * @return The last agent upgrade failed or cancelled job Id.
     * 
     */
    public String lastAgentUpgradeFailedJobId() {
        return this.lastAgentUpgradeFailedJobId;
    }
    /**
     * @return The last agent upgrade type.
     * 
     */
    public String lastAgentUpgradeType() {
        return this.lastAgentUpgradeType;
    }
    /**
     * @return The last recovery point Id.
     * 
     */
    public String lastRecoveryPointId() {
        return this.lastRecoveryPointId;
    }
    /**
     * @return The last recovery point received time.
     * 
     */
    public String lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }
    /**
     * @return The last recovery point objective calculated time.
     * 
     */
    public String lastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime;
    }
    /**
     * @return The last recovery point objective value.
     * 
     */
    public Double lastRpoInSeconds() {
        return this.lastRpoInSeconds;
    }
    /**
     * @return License Type of the VM to be used.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return The mobility agent information.
     * 
     */
    public InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails() {
        return this.mobilityAgentDetails;
    }
    /**
     * @return The multi VM group name.
     * 
     */
    public String multiVmGroupName() {
        return this.multiVmGroupName;
    }
    /**
     * @return The type of the OS on the VM.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The process server Id.
     * 
     */
    public String processServerId() {
        return this.processServerId;
    }
    /**
     * @return The process server name.
     * 
     */
    public String processServerName() {
        return this.processServerName;
    }
    /**
     * @return The processor core count.
     * 
     */
    public Integer processorCoreCount() {
        return this.processorCoreCount;
    }
    /**
     * @return The list of protected disks.
     * 
     */
    public List<InMageRcmProtectedDiskDetailsResponse> protectedDisks() {
        return this.protectedDisks;
    }
    /**
     * @return The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    public Double resyncProcessedBytes() {
        return this.resyncProcessedBytes;
    }
    /**
     * @return The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    public Integer resyncProgressPercentage() {
        return this.resyncProgressPercentage;
    }
    /**
     * @return A value indicating whether resync is required.
     * 
     */
    public String resyncRequired() {
        return this.resyncRequired;
    }
    /**
     * @return The resync state.
     * 
     */
    public String resyncState() {
        return this.resyncState;
    }
    /**
     * @return The resync transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    public Double resyncTransferredBytes() {
        return this.resyncTransferredBytes;
    }
    /**
     * @return The run-as account Id.
     * 
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }
    /**
     * @return The target availability set Id.
     * 
     */
    public String targetAvailabilitySetId() {
        return this.targetAvailabilitySetId;
    }
    /**
     * @return The target availability zone.
     * 
     */
    public String targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }
    /**
     * @return The target boot diagnostics storage account ARM Id.
     * 
     */
    public String targetBootDiagnosticsStorageAccountId() {
        return this.targetBootDiagnosticsStorageAccountId;
    }
    /**
     * @return The target generation.
     * 
     */
    public String targetGeneration() {
        return this.targetGeneration;
    }
    /**
     * @return The target network Id.
     * 
     */
    public String targetNetworkId() {
        return this.targetNetworkId;
    }
    /**
     * @return The target proximity placement group Id.
     * 
     */
    public String targetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId;
    }
    /**
     * @return The target resource group Id.
     * 
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }
    /**
     * @return Target VM name.
     * 
     */
    public String targetVmName() {
        return this.targetVmName;
    }
    /**
     * @return The target VM size.
     * 
     */
    public String targetVmSize() {
        return this.targetVmSize;
    }
    /**
     * @return The test network Id.
     * 
     */
    public String testNetworkId() {
        return this.testNetworkId;
    }
    /**
     * @return The network details.
     * 
     */
    public List<InMageRcmNicDetailsResponse> vmNics() {
        return this.vmNics;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InMageRcmReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails;
        private String agentUpgradeState;
        private Double allocatedMemoryInMB;
        private String discoveryType;
        private String fabricDiscoveryMachineId;
        private String failoverRecoveryPointId;
        private String firmwareType;
        private Double initialReplicationProcessedBytes;
        private Integer initialReplicationProgressPercentage;
        private Double initialReplicationTransferredBytes;
        private String instanceType;
        private String internalIdentifier;
        private String isLastUpgradeSuccessful;
        private List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails;
        private String lastAgentUpgradeFailedJobId;
        private String lastAgentUpgradeType;
        private String lastRecoveryPointId;
        private String lastRecoveryPointReceived;
        private String lastRpoCalculatedTime;
        private Double lastRpoInSeconds;
        private String licenseType;
        private InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails;
        private String multiVmGroupName;
        private String osType;
        private String processServerId;
        private String processServerName;
        private Integer processorCoreCount;
        private List<InMageRcmProtectedDiskDetailsResponse> protectedDisks;
        private Double resyncProcessedBytes;
        private Integer resyncProgressPercentage;
        private String resyncRequired;
        private String resyncState;
        private Double resyncTransferredBytes;
        private String runAsAccountId;
        private String targetAvailabilitySetId;
        private String targetAvailabilityZone;
        private String targetBootDiagnosticsStorageAccountId;
        private String targetGeneration;
        private String targetNetworkId;
        private String targetProximityPlacementGroupId;
        private String targetResourceGroupId;
        private String targetVmName;
        private String targetVmSize;
        private String testNetworkId;
        private List<InMageRcmNicDetailsResponse> vmNics;
        public Builder() {}
        public Builder(InMageRcmReplicationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentUpgradeBlockingErrorDetails = defaults.agentUpgradeBlockingErrorDetails;
    	      this.agentUpgradeState = defaults.agentUpgradeState;
    	      this.allocatedMemoryInMB = defaults.allocatedMemoryInMB;
    	      this.discoveryType = defaults.discoveryType;
    	      this.fabricDiscoveryMachineId = defaults.fabricDiscoveryMachineId;
    	      this.failoverRecoveryPointId = defaults.failoverRecoveryPointId;
    	      this.firmwareType = defaults.firmwareType;
    	      this.initialReplicationProcessedBytes = defaults.initialReplicationProcessedBytes;
    	      this.initialReplicationProgressPercentage = defaults.initialReplicationProgressPercentage;
    	      this.initialReplicationTransferredBytes = defaults.initialReplicationTransferredBytes;
    	      this.instanceType = defaults.instanceType;
    	      this.internalIdentifier = defaults.internalIdentifier;
    	      this.isLastUpgradeSuccessful = defaults.isLastUpgradeSuccessful;
    	      this.lastAgentUpgradeErrorDetails = defaults.lastAgentUpgradeErrorDetails;
    	      this.lastAgentUpgradeFailedJobId = defaults.lastAgentUpgradeFailedJobId;
    	      this.lastAgentUpgradeType = defaults.lastAgentUpgradeType;
    	      this.lastRecoveryPointId = defaults.lastRecoveryPointId;
    	      this.lastRecoveryPointReceived = defaults.lastRecoveryPointReceived;
    	      this.lastRpoCalculatedTime = defaults.lastRpoCalculatedTime;
    	      this.lastRpoInSeconds = defaults.lastRpoInSeconds;
    	      this.licenseType = defaults.licenseType;
    	      this.mobilityAgentDetails = defaults.mobilityAgentDetails;
    	      this.multiVmGroupName = defaults.multiVmGroupName;
    	      this.osType = defaults.osType;
    	      this.processServerId = defaults.processServerId;
    	      this.processServerName = defaults.processServerName;
    	      this.processorCoreCount = defaults.processorCoreCount;
    	      this.protectedDisks = defaults.protectedDisks;
    	      this.resyncProcessedBytes = defaults.resyncProcessedBytes;
    	      this.resyncProgressPercentage = defaults.resyncProgressPercentage;
    	      this.resyncRequired = defaults.resyncRequired;
    	      this.resyncState = defaults.resyncState;
    	      this.resyncTransferredBytes = defaults.resyncTransferredBytes;
    	      this.runAsAccountId = defaults.runAsAccountId;
    	      this.targetAvailabilitySetId = defaults.targetAvailabilitySetId;
    	      this.targetAvailabilityZone = defaults.targetAvailabilityZone;
    	      this.targetBootDiagnosticsStorageAccountId = defaults.targetBootDiagnosticsStorageAccountId;
    	      this.targetGeneration = defaults.targetGeneration;
    	      this.targetNetworkId = defaults.targetNetworkId;
    	      this.targetProximityPlacementGroupId = defaults.targetProximityPlacementGroupId;
    	      this.targetResourceGroupId = defaults.targetResourceGroupId;
    	      this.targetVmName = defaults.targetVmName;
    	      this.targetVmSize = defaults.targetVmSize;
    	      this.testNetworkId = defaults.testNetworkId;
    	      this.vmNics = defaults.vmNics;
        }

        @CustomType.Setter
        public Builder agentUpgradeBlockingErrorDetails(List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails) {
            this.agentUpgradeBlockingErrorDetails = Objects.requireNonNull(agentUpgradeBlockingErrorDetails);
            return this;
        }
        public Builder agentUpgradeBlockingErrorDetails(InMageRcmAgentUpgradeBlockingErrorDetailsResponse... agentUpgradeBlockingErrorDetails) {
            return agentUpgradeBlockingErrorDetails(List.of(agentUpgradeBlockingErrorDetails));
        }
        @CustomType.Setter
        public Builder agentUpgradeState(String agentUpgradeState) {
            this.agentUpgradeState = Objects.requireNonNull(agentUpgradeState);
            return this;
        }
        @CustomType.Setter
        public Builder allocatedMemoryInMB(Double allocatedMemoryInMB) {
            this.allocatedMemoryInMB = Objects.requireNonNull(allocatedMemoryInMB);
            return this;
        }
        @CustomType.Setter
        public Builder discoveryType(String discoveryType) {
            this.discoveryType = Objects.requireNonNull(discoveryType);
            return this;
        }
        @CustomType.Setter
        public Builder fabricDiscoveryMachineId(String fabricDiscoveryMachineId) {
            this.fabricDiscoveryMachineId = Objects.requireNonNull(fabricDiscoveryMachineId);
            return this;
        }
        @CustomType.Setter
        public Builder failoverRecoveryPointId(String failoverRecoveryPointId) {
            this.failoverRecoveryPointId = Objects.requireNonNull(failoverRecoveryPointId);
            return this;
        }
        @CustomType.Setter
        public Builder firmwareType(String firmwareType) {
            this.firmwareType = Objects.requireNonNull(firmwareType);
            return this;
        }
        @CustomType.Setter
        public Builder initialReplicationProcessedBytes(Double initialReplicationProcessedBytes) {
            this.initialReplicationProcessedBytes = Objects.requireNonNull(initialReplicationProcessedBytes);
            return this;
        }
        @CustomType.Setter
        public Builder initialReplicationProgressPercentage(Integer initialReplicationProgressPercentage) {
            this.initialReplicationProgressPercentage = Objects.requireNonNull(initialReplicationProgressPercentage);
            return this;
        }
        @CustomType.Setter
        public Builder initialReplicationTransferredBytes(Double initialReplicationTransferredBytes) {
            this.initialReplicationTransferredBytes = Objects.requireNonNull(initialReplicationTransferredBytes);
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            this.instanceType = Objects.requireNonNull(instanceType);
            return this;
        }
        @CustomType.Setter
        public Builder internalIdentifier(String internalIdentifier) {
            this.internalIdentifier = Objects.requireNonNull(internalIdentifier);
            return this;
        }
        @CustomType.Setter
        public Builder isLastUpgradeSuccessful(String isLastUpgradeSuccessful) {
            this.isLastUpgradeSuccessful = Objects.requireNonNull(isLastUpgradeSuccessful);
            return this;
        }
        @CustomType.Setter
        public Builder lastAgentUpgradeErrorDetails(List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails) {
            this.lastAgentUpgradeErrorDetails = Objects.requireNonNull(lastAgentUpgradeErrorDetails);
            return this;
        }
        public Builder lastAgentUpgradeErrorDetails(InMageRcmLastAgentUpgradeErrorDetailsResponse... lastAgentUpgradeErrorDetails) {
            return lastAgentUpgradeErrorDetails(List.of(lastAgentUpgradeErrorDetails));
        }
        @CustomType.Setter
        public Builder lastAgentUpgradeFailedJobId(String lastAgentUpgradeFailedJobId) {
            this.lastAgentUpgradeFailedJobId = Objects.requireNonNull(lastAgentUpgradeFailedJobId);
            return this;
        }
        @CustomType.Setter
        public Builder lastAgentUpgradeType(String lastAgentUpgradeType) {
            this.lastAgentUpgradeType = Objects.requireNonNull(lastAgentUpgradeType);
            return this;
        }
        @CustomType.Setter
        public Builder lastRecoveryPointId(String lastRecoveryPointId) {
            this.lastRecoveryPointId = Objects.requireNonNull(lastRecoveryPointId);
            return this;
        }
        @CustomType.Setter
        public Builder lastRecoveryPointReceived(String lastRecoveryPointReceived) {
            this.lastRecoveryPointReceived = Objects.requireNonNull(lastRecoveryPointReceived);
            return this;
        }
        @CustomType.Setter
        public Builder lastRpoCalculatedTime(String lastRpoCalculatedTime) {
            this.lastRpoCalculatedTime = Objects.requireNonNull(lastRpoCalculatedTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastRpoInSeconds(Double lastRpoInSeconds) {
            this.lastRpoInSeconds = Objects.requireNonNull(lastRpoInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            this.licenseType = Objects.requireNonNull(licenseType);
            return this;
        }
        @CustomType.Setter
        public Builder mobilityAgentDetails(InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails) {
            this.mobilityAgentDetails = Objects.requireNonNull(mobilityAgentDetails);
            return this;
        }
        @CustomType.Setter
        public Builder multiVmGroupName(String multiVmGroupName) {
            this.multiVmGroupName = Objects.requireNonNull(multiVmGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder processServerId(String processServerId) {
            this.processServerId = Objects.requireNonNull(processServerId);
            return this;
        }
        @CustomType.Setter
        public Builder processServerName(String processServerName) {
            this.processServerName = Objects.requireNonNull(processServerName);
            return this;
        }
        @CustomType.Setter
        public Builder processorCoreCount(Integer processorCoreCount) {
            this.processorCoreCount = Objects.requireNonNull(processorCoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder protectedDisks(List<InMageRcmProtectedDiskDetailsResponse> protectedDisks) {
            this.protectedDisks = Objects.requireNonNull(protectedDisks);
            return this;
        }
        public Builder protectedDisks(InMageRcmProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }
        @CustomType.Setter
        public Builder resyncProcessedBytes(Double resyncProcessedBytes) {
            this.resyncProcessedBytes = Objects.requireNonNull(resyncProcessedBytes);
            return this;
        }
        @CustomType.Setter
        public Builder resyncProgressPercentage(Integer resyncProgressPercentage) {
            this.resyncProgressPercentage = Objects.requireNonNull(resyncProgressPercentage);
            return this;
        }
        @CustomType.Setter
        public Builder resyncRequired(String resyncRequired) {
            this.resyncRequired = Objects.requireNonNull(resyncRequired);
            return this;
        }
        @CustomType.Setter
        public Builder resyncState(String resyncState) {
            this.resyncState = Objects.requireNonNull(resyncState);
            return this;
        }
        @CustomType.Setter
        public Builder resyncTransferredBytes(Double resyncTransferredBytes) {
            this.resyncTransferredBytes = Objects.requireNonNull(resyncTransferredBytes);
            return this;
        }
        @CustomType.Setter
        public Builder runAsAccountId(String runAsAccountId) {
            this.runAsAccountId = Objects.requireNonNull(runAsAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder targetAvailabilitySetId(String targetAvailabilitySetId) {
            this.targetAvailabilitySetId = Objects.requireNonNull(targetAvailabilitySetId);
            return this;
        }
        @CustomType.Setter
        public Builder targetAvailabilityZone(String targetAvailabilityZone) {
            this.targetAvailabilityZone = Objects.requireNonNull(targetAvailabilityZone);
            return this;
        }
        @CustomType.Setter
        public Builder targetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
            this.targetBootDiagnosticsStorageAccountId = Objects.requireNonNull(targetBootDiagnosticsStorageAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder targetGeneration(String targetGeneration) {
            this.targetGeneration = Objects.requireNonNull(targetGeneration);
            return this;
        }
        @CustomType.Setter
        public Builder targetNetworkId(String targetNetworkId) {
            this.targetNetworkId = Objects.requireNonNull(targetNetworkId);
            return this;
        }
        @CustomType.Setter
        public Builder targetProximityPlacementGroupId(String targetProximityPlacementGroupId) {
            this.targetProximityPlacementGroupId = Objects.requireNonNull(targetProximityPlacementGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceGroupId(String targetResourceGroupId) {
            this.targetResourceGroupId = Objects.requireNonNull(targetResourceGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder targetVmName(String targetVmName) {
            this.targetVmName = Objects.requireNonNull(targetVmName);
            return this;
        }
        @CustomType.Setter
        public Builder targetVmSize(String targetVmSize) {
            this.targetVmSize = Objects.requireNonNull(targetVmSize);
            return this;
        }
        @CustomType.Setter
        public Builder testNetworkId(String testNetworkId) {
            this.testNetworkId = Objects.requireNonNull(testNetworkId);
            return this;
        }
        @CustomType.Setter
        public Builder vmNics(List<InMageRcmNicDetailsResponse> vmNics) {
            this.vmNics = Objects.requireNonNull(vmNics);
            return this;
        }
        public Builder vmNics(InMageRcmNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }
        public InMageRcmReplicationDetailsResponse build() {
            final var o = new InMageRcmReplicationDetailsResponse();
            o.agentUpgradeBlockingErrorDetails = agentUpgradeBlockingErrorDetails;
            o.agentUpgradeState = agentUpgradeState;
            o.allocatedMemoryInMB = allocatedMemoryInMB;
            o.discoveryType = discoveryType;
            o.fabricDiscoveryMachineId = fabricDiscoveryMachineId;
            o.failoverRecoveryPointId = failoverRecoveryPointId;
            o.firmwareType = firmwareType;
            o.initialReplicationProcessedBytes = initialReplicationProcessedBytes;
            o.initialReplicationProgressPercentage = initialReplicationProgressPercentage;
            o.initialReplicationTransferredBytes = initialReplicationTransferredBytes;
            o.instanceType = instanceType;
            o.internalIdentifier = internalIdentifier;
            o.isLastUpgradeSuccessful = isLastUpgradeSuccessful;
            o.lastAgentUpgradeErrorDetails = lastAgentUpgradeErrorDetails;
            o.lastAgentUpgradeFailedJobId = lastAgentUpgradeFailedJobId;
            o.lastAgentUpgradeType = lastAgentUpgradeType;
            o.lastRecoveryPointId = lastRecoveryPointId;
            o.lastRecoveryPointReceived = lastRecoveryPointReceived;
            o.lastRpoCalculatedTime = lastRpoCalculatedTime;
            o.lastRpoInSeconds = lastRpoInSeconds;
            o.licenseType = licenseType;
            o.mobilityAgentDetails = mobilityAgentDetails;
            o.multiVmGroupName = multiVmGroupName;
            o.osType = osType;
            o.processServerId = processServerId;
            o.processServerName = processServerName;
            o.processorCoreCount = processorCoreCount;
            o.protectedDisks = protectedDisks;
            o.resyncProcessedBytes = resyncProcessedBytes;
            o.resyncProgressPercentage = resyncProgressPercentage;
            o.resyncRequired = resyncRequired;
            o.resyncState = resyncState;
            o.resyncTransferredBytes = resyncTransferredBytes;
            o.runAsAccountId = runAsAccountId;
            o.targetAvailabilitySetId = targetAvailabilitySetId;
            o.targetAvailabilityZone = targetAvailabilityZone;
            o.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            o.targetGeneration = targetGeneration;
            o.targetNetworkId = targetNetworkId;
            o.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
            o.targetResourceGroupId = targetResourceGroupId;
            o.targetVmName = targetVmName;
            o.targetVmSize = targetVmSize;
            o.testNetworkId = testNetworkId;
            o.vmNics = vmNics;
            return o;
        }
    }
}
