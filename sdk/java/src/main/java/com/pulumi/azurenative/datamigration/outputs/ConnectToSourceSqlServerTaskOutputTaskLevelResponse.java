// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class ConnectToSourceSqlServerTaskOutputTaskLevelResponse {
    /**
     * @return Source agent jobs as a map from agent job name to id.
     * 
     */
    private Map<String,String> agentJobs;
    /**
     * @return Source databases as a map from database name to database id
     * 
     */
    private Map<String,String> databases;
    /**
     * @return Result identifier
     * 
     */
    private String id;
    /**
     * @return Source logins as a map from login name to login id.
     * 
     */
    private Map<String,String> logins;
    /**
     * @return Type of result - database level or task level
     * Expected value is &#39;TaskLevelOutput&#39;.
     * 
     */
    private String resultType;
    /**
     * @return Source server brand version
     * 
     */
    private String sourceServerBrandVersion;
    /**
     * @return Source server version
     * 
     */
    private String sourceServerVersion;
    /**
     * @return Validation errors
     * 
     */
    private List<ReportableExceptionResponse> validationErrors;

    private ConnectToSourceSqlServerTaskOutputTaskLevelResponse() {}
    /**
     * @return Source agent jobs as a map from agent job name to id.
     * 
     */
    public Map<String,String> agentJobs() {
        return this.agentJobs;
    }
    /**
     * @return Source databases as a map from database name to database id
     * 
     */
    public Map<String,String> databases() {
        return this.databases;
    }
    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Source logins as a map from login name to login id.
     * 
     */
    public Map<String,String> logins() {
        return this.logins;
    }
    /**
     * @return Type of result - database level or task level
     * Expected value is &#39;TaskLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }
    /**
     * @return Source server brand version
     * 
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }
    /**
     * @return Source server version
     * 
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }
    /**
     * @return Validation errors
     * 
     */
    public List<ReportableExceptionResponse> validationErrors() {
        return this.validationErrors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectToSourceSqlServerTaskOutputTaskLevelResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> agentJobs;
        private Map<String,String> databases;
        private String id;
        private Map<String,String> logins;
        private String resultType;
        private String sourceServerBrandVersion;
        private String sourceServerVersion;
        private List<ReportableExceptionResponse> validationErrors;
        public Builder() {}
        public Builder(ConnectToSourceSqlServerTaskOutputTaskLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentJobs = defaults.agentJobs;
    	      this.databases = defaults.databases;
    	      this.id = defaults.id;
    	      this.logins = defaults.logins;
    	      this.resultType = defaults.resultType;
    	      this.sourceServerBrandVersion = defaults.sourceServerBrandVersion;
    	      this.sourceServerVersion = defaults.sourceServerVersion;
    	      this.validationErrors = defaults.validationErrors;
        }

        @CustomType.Setter
        public Builder agentJobs(Map<String,String> agentJobs) {
            this.agentJobs = Objects.requireNonNull(agentJobs);
            return this;
        }
        @CustomType.Setter
        public Builder databases(Map<String,String> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder logins(Map<String,String> logins) {
            this.logins = Objects.requireNonNull(logins);
            return this;
        }
        @CustomType.Setter
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        @CustomType.Setter
        public Builder sourceServerBrandVersion(String sourceServerBrandVersion) {
            this.sourceServerBrandVersion = Objects.requireNonNull(sourceServerBrandVersion);
            return this;
        }
        @CustomType.Setter
        public Builder sourceServerVersion(String sourceServerVersion) {
            this.sourceServerVersion = Objects.requireNonNull(sourceServerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder validationErrors(List<ReportableExceptionResponse> validationErrors) {
            this.validationErrors = Objects.requireNonNull(validationErrors);
            return this;
        }
        public Builder validationErrors(ReportableExceptionResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }
        public ConnectToSourceSqlServerTaskOutputTaskLevelResponse build() {
            final var o = new ConnectToSourceSqlServerTaskOutputTaskLevelResponse();
            o.agentJobs = agentJobs;
            o.databases = databases;
            o.id = id;
            o.logins = logins;
            o.resultType = resultType;
            o.sourceServerBrandVersion = sourceServerBrandVersion;
            o.sourceServerVersion = sourceServerVersion;
            o.validationErrors = validationErrors;
            return o;
        }
    }
}
