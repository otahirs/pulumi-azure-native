// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Descriptor for what needs to be reviewed
 * 
 */
public final class AccessReviewScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessReviewScopeArgs Empty = new AccessReviewScopeArgs();

    /**
     * This is used to indicate the resource id(s) to exclude
     * 
     */
    @Import(name="excludeResourceId")
    private @Nullable Output<String> excludeResourceId;

    /**
     * @return This is used to indicate the resource id(s) to exclude
     * 
     */
    public Optional<Output<String>> excludeResourceId() {
        return Optional.ofNullable(this.excludeResourceId);
    }

    /**
     * This is used to indicate the role definition id(s) to exclude
     * 
     */
    @Import(name="excludeRoleDefinitionId")
    private @Nullable Output<String> excludeRoleDefinitionId;

    /**
     * @return This is used to indicate the role definition id(s) to exclude
     * 
     */
    public Optional<Output<String>> excludeRoleDefinitionId() {
        return Optional.ofNullable(this.excludeRoleDefinitionId);
    }

    /**
     * Flag to indicate whether to expand nested memberships or not.
     * 
     */
    @Import(name="expandNestedMemberships")
    private @Nullable Output<Boolean> expandNestedMemberships;

    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    public Optional<Output<Boolean>> expandNestedMemberships() {
        return Optional.ofNullable(this.expandNestedMemberships);
    }

    /**
     * Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
     * 
     */
    @Import(name="inactiveDuration")
    private @Nullable Output<String> inactiveDuration;

    /**
     * @return Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
     * 
     */
    public Optional<Output<String>> inactiveDuration() {
        return Optional.ofNullable(this.inactiveDuration);
    }

    /**
     * Flag to indicate whether to expand nested memberships or not.
     * 
     */
    @Import(name="includeAccessBelowResource")
    private @Nullable Output<Boolean> includeAccessBelowResource;

    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    public Optional<Output<Boolean>> includeAccessBelowResource() {
        return Optional.ofNullable(this.includeAccessBelowResource);
    }

    /**
     * Flag to indicate whether to expand nested memberships or not.
     * 
     */
    @Import(name="includeInheritedAccess")
    private @Nullable Output<Boolean> includeInheritedAccess;

    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    public Optional<Output<Boolean>> includeInheritedAccess() {
        return Optional.ofNullable(this.includeInheritedAccess);
    }

    private AccessReviewScopeArgs() {}

    private AccessReviewScopeArgs(AccessReviewScopeArgs $) {
        this.excludeResourceId = $.excludeResourceId;
        this.excludeRoleDefinitionId = $.excludeRoleDefinitionId;
        this.expandNestedMemberships = $.expandNestedMemberships;
        this.inactiveDuration = $.inactiveDuration;
        this.includeAccessBelowResource = $.includeAccessBelowResource;
        this.includeInheritedAccess = $.includeInheritedAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessReviewScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessReviewScopeArgs $;

        public Builder() {
            $ = new AccessReviewScopeArgs();
        }

        public Builder(AccessReviewScopeArgs defaults) {
            $ = new AccessReviewScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludeResourceId This is used to indicate the resource id(s) to exclude
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceId(@Nullable Output<String> excludeResourceId) {
            $.excludeResourceId = excludeResourceId;
            return this;
        }

        /**
         * @param excludeResourceId This is used to indicate the resource id(s) to exclude
         * 
         * @return builder
         * 
         */
        public Builder excludeResourceId(String excludeResourceId) {
            return excludeResourceId(Output.of(excludeResourceId));
        }

        /**
         * @param excludeRoleDefinitionId This is used to indicate the role definition id(s) to exclude
         * 
         * @return builder
         * 
         */
        public Builder excludeRoleDefinitionId(@Nullable Output<String> excludeRoleDefinitionId) {
            $.excludeRoleDefinitionId = excludeRoleDefinitionId;
            return this;
        }

        /**
         * @param excludeRoleDefinitionId This is used to indicate the role definition id(s) to exclude
         * 
         * @return builder
         * 
         */
        public Builder excludeRoleDefinitionId(String excludeRoleDefinitionId) {
            return excludeRoleDefinitionId(Output.of(excludeRoleDefinitionId));
        }

        /**
         * @param expandNestedMemberships Flag to indicate whether to expand nested memberships or not.
         * 
         * @return builder
         * 
         */
        public Builder expandNestedMemberships(@Nullable Output<Boolean> expandNestedMemberships) {
            $.expandNestedMemberships = expandNestedMemberships;
            return this;
        }

        /**
         * @param expandNestedMemberships Flag to indicate whether to expand nested memberships or not.
         * 
         * @return builder
         * 
         */
        public Builder expandNestedMemberships(Boolean expandNestedMemberships) {
            return expandNestedMemberships(Output.of(expandNestedMemberships));
        }

        /**
         * @param inactiveDuration Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
         * 
         * @return builder
         * 
         */
        public Builder inactiveDuration(@Nullable Output<String> inactiveDuration) {
            $.inactiveDuration = inactiveDuration;
            return this;
        }

        /**
         * @param inactiveDuration Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
         * 
         * @return builder
         * 
         */
        public Builder inactiveDuration(String inactiveDuration) {
            return inactiveDuration(Output.of(inactiveDuration));
        }

        /**
         * @param includeAccessBelowResource Flag to indicate whether to expand nested memberships or not.
         * 
         * @return builder
         * 
         */
        public Builder includeAccessBelowResource(@Nullable Output<Boolean> includeAccessBelowResource) {
            $.includeAccessBelowResource = includeAccessBelowResource;
            return this;
        }

        /**
         * @param includeAccessBelowResource Flag to indicate whether to expand nested memberships or not.
         * 
         * @return builder
         * 
         */
        public Builder includeAccessBelowResource(Boolean includeAccessBelowResource) {
            return includeAccessBelowResource(Output.of(includeAccessBelowResource));
        }

        /**
         * @param includeInheritedAccess Flag to indicate whether to expand nested memberships or not.
         * 
         * @return builder
         * 
         */
        public Builder includeInheritedAccess(@Nullable Output<Boolean> includeInheritedAccess) {
            $.includeInheritedAccess = includeInheritedAccess;
            return this;
        }

        /**
         * @param includeInheritedAccess Flag to indicate whether to expand nested memberships or not.
         * 
         * @return builder
         * 
         */
        public Builder includeInheritedAccess(Boolean includeInheritedAccess) {
            return includeInheritedAccess(Output.of(includeInheritedAccess));
        }

        public AccessReviewScopeArgs build() {
            return $;
        }
    }

}
