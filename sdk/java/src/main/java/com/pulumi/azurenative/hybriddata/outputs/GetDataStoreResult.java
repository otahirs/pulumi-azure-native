// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybriddata.outputs;

import com.pulumi.azurenative.hybriddata.outputs.CustomerSecretResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataStoreResult {
    /**
     * @return List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     * 
     */
    private @Nullable List<CustomerSecretResponse> customerSecrets;
    /**
     * @return The arm id of the data store type.
     * 
     */
    private String dataStoreTypeId;
    /**
     * @return A generic json used differently by each data source type.
     * 
     */
    private @Nullable Object extendedProperties;
    /**
     * @return Id of the object.
     * 
     */
    private String id;
    /**
     * @return Name of the object.
     * 
     */
    private String name;
    /**
     * @return Arm Id for the manager resource to which the data source is associated. This is optional.
     * 
     */
    private @Nullable String repositoryId;
    /**
     * @return State of the data source.
     * 
     */
    private String state;
    /**
     * @return Type of the object.
     * 
     */
    private String type;

    private GetDataStoreResult() {}
    /**
     * @return List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     * 
     */
    public List<CustomerSecretResponse> customerSecrets() {
        return this.customerSecrets == null ? List.of() : this.customerSecrets;
    }
    /**
     * @return The arm id of the data store type.
     * 
     */
    public String dataStoreTypeId() {
        return this.dataStoreTypeId;
    }
    /**
     * @return A generic json used differently by each data source type.
     * 
     */
    public Optional<Object> extendedProperties() {
        return Optional.ofNullable(this.extendedProperties);
    }
    /**
     * @return Id of the object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the object.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Arm Id for the manager resource to which the data source is associated. This is optional.
     * 
     */
    public Optional<String> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }
    /**
     * @return State of the data source.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Type of the object.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataStoreResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<CustomerSecretResponse> customerSecrets;
        private String dataStoreTypeId;
        private @Nullable Object extendedProperties;
        private String id;
        private String name;
        private @Nullable String repositoryId;
        private String state;
        private String type;
        public Builder() {}
        public Builder(GetDataStoreResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customerSecrets = defaults.customerSecrets;
    	      this.dataStoreTypeId = defaults.dataStoreTypeId;
    	      this.extendedProperties = defaults.extendedProperties;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.repositoryId = defaults.repositoryId;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder customerSecrets(@Nullable List<CustomerSecretResponse> customerSecrets) {
            this.customerSecrets = customerSecrets;
            return this;
        }
        public Builder customerSecrets(CustomerSecretResponse... customerSecrets) {
            return customerSecrets(List.of(customerSecrets));
        }
        @CustomType.Setter
        public Builder dataStoreTypeId(String dataStoreTypeId) {
            this.dataStoreTypeId = Objects.requireNonNull(dataStoreTypeId);
            return this;
        }
        @CustomType.Setter
        public Builder extendedProperties(@Nullable Object extendedProperties) {
            this.extendedProperties = extendedProperties;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(@Nullable String repositoryId) {
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDataStoreResult build() {
            final var o = new GetDataStoreResult();
            o.customerSecrets = customerSecrets;
            o.dataStoreTypeId = dataStoreTypeId;
            o.extendedProperties = extendedProperties;
            o.id = id;
            o.name = name;
            o.repositoryId = repositoryId;
            o.state = state;
            o.type = type;
            return o;
        }
    }
}
