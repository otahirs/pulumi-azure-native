// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.outputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.outputs.DataFlowReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.DataFlowStagingInfoResponse;
import com.pulumi.azurenative.datafactory.outputs.ExecuteDataFlowActivityTypePropertiesResponseCompute;
import com.pulumi.azurenative.datafactory.outputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.UserPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExecuteDataFlowActivityResponse {
    /**
     * @return Compute properties for data flow activity.
     * 
     */
    private @Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute;
    /**
     * @return Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
     * 
     */
    private @Nullable Object continueOnError;
    /**
     * @return Data flow reference.
     * 
     */
    private DataFlowReferenceResponse dataFlow;
    /**
     * @return Activity depends on condition.
     * 
     */
    private @Nullable List<ActivityDependencyResponse> dependsOn;
    /**
     * @return Activity description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The integration runtime reference.
     * 
     */
    private @Nullable IntegrationRuntimeReferenceResponse integrationRuntime;
    /**
     * @return Linked service reference.
     * 
     */
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;
    /**
     * @return Activity name.
     * 
     */
    private String name;
    /**
     * @return Activity policy.
     * 
     */
    private @Nullable ActivityPolicyResponse policy;
    /**
     * @return Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
     * 
     */
    private @Nullable Object runConcurrently;
    /**
     * @return Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
     * 
     */
    private @Nullable Object sourceStagingConcurrency;
    /**
     * @return Staging info for execute data flow activity.
     * 
     */
    private @Nullable DataFlowStagingInfoResponse staging;
    /**
     * @return Trace level setting used for data flow monitoring output. Supported values are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or Expression with resultType string)
     * 
     */
    private @Nullable Object traceLevel;
    /**
     * @return Type of activity.
     * Expected value is &#39;ExecuteDataFlow&#39;.
     * 
     */
    private String type;
    /**
     * @return Activity user properties.
     * 
     */
    private @Nullable List<UserPropertyResponse> userProperties;

    private ExecuteDataFlowActivityResponse() {}
    /**
     * @return Compute properties for data flow activity.
     * 
     */
    public Optional<ExecuteDataFlowActivityTypePropertiesResponseCompute> compute() {
        return Optional.ofNullable(this.compute);
    }
    /**
     * @return Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
     * 
     */
    public Optional<Object> continueOnError() {
        return Optional.ofNullable(this.continueOnError);
    }
    /**
     * @return Data flow reference.
     * 
     */
    public DataFlowReferenceResponse dataFlow() {
        return this.dataFlow;
    }
    /**
     * @return Activity depends on condition.
     * 
     */
    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> integrationRuntime() {
        return Optional.ofNullable(this.integrationRuntime);
    }
    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }
    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
     * 
     */
    public Optional<Object> runConcurrently() {
        return Optional.ofNullable(this.runConcurrently);
    }
    /**
     * @return Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
     * 
     */
    public Optional<Object> sourceStagingConcurrency() {
        return Optional.ofNullable(this.sourceStagingConcurrency);
    }
    /**
     * @return Staging info for execute data flow activity.
     * 
     */
    public Optional<DataFlowStagingInfoResponse> staging() {
        return Optional.ofNullable(this.staging);
    }
    /**
     * @return Trace level setting used for data flow monitoring output. Supported values are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or Expression with resultType string)
     * 
     */
    public Optional<Object> traceLevel() {
        return Optional.ofNullable(this.traceLevel);
    }
    /**
     * @return Type of activity.
     * Expected value is &#39;ExecuteDataFlow&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Activity user properties.
     * 
     */
    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecuteDataFlowActivityResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute;
        private @Nullable Object continueOnError;
        private DataFlowReferenceResponse dataFlow;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private @Nullable IntegrationRuntimeReferenceResponse integrationRuntime;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Object runConcurrently;
        private @Nullable Object sourceStagingConcurrency;
        private @Nullable DataFlowStagingInfoResponse staging;
        private @Nullable Object traceLevel;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;
        public Builder() {}
        public Builder(ExecuteDataFlowActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compute = defaults.compute;
    	      this.continueOnError = defaults.continueOnError;
    	      this.dataFlow = defaults.dataFlow;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.integrationRuntime = defaults.integrationRuntime;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.runConcurrently = defaults.runConcurrently;
    	      this.sourceStagingConcurrency = defaults.sourceStagingConcurrency;
    	      this.staging = defaults.staging;
    	      this.traceLevel = defaults.traceLevel;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        @CustomType.Setter
        public Builder compute(@Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute) {
            this.compute = compute;
            return this;
        }
        @CustomType.Setter
        public Builder continueOnError(@Nullable Object continueOnError) {
            this.continueOnError = continueOnError;
            return this;
        }
        @CustomType.Setter
        public Builder dataFlow(DataFlowReferenceResponse dataFlow) {
            this.dataFlow = Objects.requireNonNull(dataFlow);
            return this;
        }
        @CustomType.Setter
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder integrationRuntime(@Nullable IntegrationRuntimeReferenceResponse integrationRuntime) {
            this.integrationRuntime = integrationRuntime;
            return this;
        }
        @CustomType.Setter
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder runConcurrently(@Nullable Object runConcurrently) {
            this.runConcurrently = runConcurrently;
            return this;
        }
        @CustomType.Setter
        public Builder sourceStagingConcurrency(@Nullable Object sourceStagingConcurrency) {
            this.sourceStagingConcurrency = sourceStagingConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder staging(@Nullable DataFlowStagingInfoResponse staging) {
            this.staging = staging;
            return this;
        }
        @CustomType.Setter
        public Builder traceLevel(@Nullable Object traceLevel) {
            this.traceLevel = traceLevel;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }
        public ExecuteDataFlowActivityResponse build() {
            final var o = new ExecuteDataFlowActivityResponse();
            o.compute = compute;
            o.continueOnError = continueOnError;
            o.dataFlow = dataFlow;
            o.dependsOn = dependsOn;
            o.description = description;
            o.integrationRuntime = integrationRuntime;
            o.linkedServiceName = linkedServiceName;
            o.name = name;
            o.policy = policy;
            o.runConcurrently = runConcurrently;
            o.sourceStagingConcurrency = sourceStagingConcurrency;
            o.staging = staging;
            o.traceLevel = traceLevel;
            o.type = type;
            o.userProperties = userProperties;
            return o;
        }
    }
}
