// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.outputs;

import com.pulumi.azurenative.synapse.outputs.AutoPausePropertiesResponse;
import com.pulumi.azurenative.synapse.outputs.AutoScalePropertiesResponse;
import com.pulumi.azurenative.synapse.outputs.DynamicExecutorAllocationResponse;
import com.pulumi.azurenative.synapse.outputs.LibraryInfoResponse;
import com.pulumi.azurenative.synapse.outputs.LibraryRequirementsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBigDataPoolResult {
    /**
     * @return Auto-pausing properties
     * 
     */
    private @Nullable AutoPausePropertiesResponse autoPause;
    /**
     * @return Auto-scaling properties
     * 
     */
    private @Nullable AutoScalePropertiesResponse autoScale;
    /**
     * @return The cache size
     * 
     */
    private @Nullable Integer cacheSize;
    /**
     * @return The time when the Big Data pool was created.
     * 
     */
    private @Nullable String creationDate;
    /**
     * @return List of custom libraries/packages associated with the spark pool.
     * 
     */
    private @Nullable List<LibraryInfoResponse> customLibraries;
    /**
     * @return The default folder where Spark logs will be written.
     * 
     */
    private @Nullable String defaultSparkLogFolder;
    /**
     * @return Dynamic Executor Allocation
     * 
     */
    private @Nullable DynamicExecutorAllocationResponse dynamicExecutorAllocation;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return Whether compute isolation is required or not.
     * 
     */
    private @Nullable Boolean isComputeIsolationEnabled;
    /**
     * @return The time when the Big Data pool was updated successfully.
     * 
     */
    private String lastSucceededTimestamp;
    /**
     * @return Library version requirements
     * 
     */
    private @Nullable LibraryRequirementsResponse libraryRequirements;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return The number of nodes in the Big Data pool.
     * 
     */
    private @Nullable Integer nodeCount;
    /**
     * @return The level of compute power that each node in the Big Data pool has.
     * 
     */
    private @Nullable String nodeSize;
    /**
     * @return The kind of nodes that the Big Data pool provides.
     * 
     */
    private @Nullable String nodeSizeFamily;
    /**
     * @return The state of the Big Data pool.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return Whether session level packages enabled.
     * 
     */
    private @Nullable Boolean sessionLevelPackagesEnabled;
    /**
     * @return Spark configuration file to specify additional properties
     * 
     */
    private @Nullable LibraryRequirementsResponse sparkConfigProperties;
    /**
     * @return The Spark events folder
     * 
     */
    private @Nullable String sparkEventsFolder;
    /**
     * @return The Apache Spark version.
     * 
     */
    private @Nullable String sparkVersion;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetBigDataPoolResult() {}
    /**
     * @return Auto-pausing properties
     * 
     */
    public Optional<AutoPausePropertiesResponse> autoPause() {
        return Optional.ofNullable(this.autoPause);
    }
    /**
     * @return Auto-scaling properties
     * 
     */
    public Optional<AutoScalePropertiesResponse> autoScale() {
        return Optional.ofNullable(this.autoScale);
    }
    /**
     * @return The cache size
     * 
     */
    public Optional<Integer> cacheSize() {
        return Optional.ofNullable(this.cacheSize);
    }
    /**
     * @return The time when the Big Data pool was created.
     * 
     */
    public Optional<String> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }
    /**
     * @return List of custom libraries/packages associated with the spark pool.
     * 
     */
    public List<LibraryInfoResponse> customLibraries() {
        return this.customLibraries == null ? List.of() : this.customLibraries;
    }
    /**
     * @return The default folder where Spark logs will be written.
     * 
     */
    public Optional<String> defaultSparkLogFolder() {
        return Optional.ofNullable(this.defaultSparkLogFolder);
    }
    /**
     * @return Dynamic Executor Allocation
     * 
     */
    public Optional<DynamicExecutorAllocationResponse> dynamicExecutorAllocation() {
        return Optional.ofNullable(this.dynamicExecutorAllocation);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether compute isolation is required or not.
     * 
     */
    public Optional<Boolean> isComputeIsolationEnabled() {
        return Optional.ofNullable(this.isComputeIsolationEnabled);
    }
    /**
     * @return The time when the Big Data pool was updated successfully.
     * 
     */
    public String lastSucceededTimestamp() {
        return this.lastSucceededTimestamp;
    }
    /**
     * @return Library version requirements
     * 
     */
    public Optional<LibraryRequirementsResponse> libraryRequirements() {
        return Optional.ofNullable(this.libraryRequirements);
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of nodes in the Big Data pool.
     * 
     */
    public Optional<Integer> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }
    /**
     * @return The level of compute power that each node in the Big Data pool has.
     * 
     */
    public Optional<String> nodeSize() {
        return Optional.ofNullable(this.nodeSize);
    }
    /**
     * @return The kind of nodes that the Big Data pool provides.
     * 
     */
    public Optional<String> nodeSizeFamily() {
        return Optional.ofNullable(this.nodeSizeFamily);
    }
    /**
     * @return The state of the Big Data pool.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return Whether session level packages enabled.
     * 
     */
    public Optional<Boolean> sessionLevelPackagesEnabled() {
        return Optional.ofNullable(this.sessionLevelPackagesEnabled);
    }
    /**
     * @return Spark configuration file to specify additional properties
     * 
     */
    public Optional<LibraryRequirementsResponse> sparkConfigProperties() {
        return Optional.ofNullable(this.sparkConfigProperties);
    }
    /**
     * @return The Spark events folder
     * 
     */
    public Optional<String> sparkEventsFolder() {
        return Optional.ofNullable(this.sparkEventsFolder);
    }
    /**
     * @return The Apache Spark version.
     * 
     */
    public Optional<String> sparkVersion() {
        return Optional.ofNullable(this.sparkVersion);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBigDataPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AutoPausePropertiesResponse autoPause;
        private @Nullable AutoScalePropertiesResponse autoScale;
        private @Nullable Integer cacheSize;
        private @Nullable String creationDate;
        private @Nullable List<LibraryInfoResponse> customLibraries;
        private @Nullable String defaultSparkLogFolder;
        private @Nullable DynamicExecutorAllocationResponse dynamicExecutorAllocation;
        private String id;
        private @Nullable Boolean isComputeIsolationEnabled;
        private String lastSucceededTimestamp;
        private @Nullable LibraryRequirementsResponse libraryRequirements;
        private String location;
        private String name;
        private @Nullable Integer nodeCount;
        private @Nullable String nodeSize;
        private @Nullable String nodeSizeFamily;
        private @Nullable String provisioningState;
        private @Nullable Boolean sessionLevelPackagesEnabled;
        private @Nullable LibraryRequirementsResponse sparkConfigProperties;
        private @Nullable String sparkEventsFolder;
        private @Nullable String sparkVersion;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetBigDataPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoPause = defaults.autoPause;
    	      this.autoScale = defaults.autoScale;
    	      this.cacheSize = defaults.cacheSize;
    	      this.creationDate = defaults.creationDate;
    	      this.customLibraries = defaults.customLibraries;
    	      this.defaultSparkLogFolder = defaults.defaultSparkLogFolder;
    	      this.dynamicExecutorAllocation = defaults.dynamicExecutorAllocation;
    	      this.id = defaults.id;
    	      this.isComputeIsolationEnabled = defaults.isComputeIsolationEnabled;
    	      this.lastSucceededTimestamp = defaults.lastSucceededTimestamp;
    	      this.libraryRequirements = defaults.libraryRequirements;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodeSize = defaults.nodeSize;
    	      this.nodeSizeFamily = defaults.nodeSizeFamily;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sessionLevelPackagesEnabled = defaults.sessionLevelPackagesEnabled;
    	      this.sparkConfigProperties = defaults.sparkConfigProperties;
    	      this.sparkEventsFolder = defaults.sparkEventsFolder;
    	      this.sparkVersion = defaults.sparkVersion;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder autoPause(@Nullable AutoPausePropertiesResponse autoPause) {
            this.autoPause = autoPause;
            return this;
        }
        @CustomType.Setter
        public Builder autoScale(@Nullable AutoScalePropertiesResponse autoScale) {
            this.autoScale = autoScale;
            return this;
        }
        @CustomType.Setter
        public Builder cacheSize(@Nullable Integer cacheSize) {
            this.cacheSize = cacheSize;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(@Nullable String creationDate) {
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder customLibraries(@Nullable List<LibraryInfoResponse> customLibraries) {
            this.customLibraries = customLibraries;
            return this;
        }
        public Builder customLibraries(LibraryInfoResponse... customLibraries) {
            return customLibraries(List.of(customLibraries));
        }
        @CustomType.Setter
        public Builder defaultSparkLogFolder(@Nullable String defaultSparkLogFolder) {
            this.defaultSparkLogFolder = defaultSparkLogFolder;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicExecutorAllocation(@Nullable DynamicExecutorAllocationResponse dynamicExecutorAllocation) {
            this.dynamicExecutorAllocation = dynamicExecutorAllocation;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isComputeIsolationEnabled(@Nullable Boolean isComputeIsolationEnabled) {
            this.isComputeIsolationEnabled = isComputeIsolationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lastSucceededTimestamp(String lastSucceededTimestamp) {
            this.lastSucceededTimestamp = Objects.requireNonNull(lastSucceededTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder libraryRequirements(@Nullable LibraryRequirementsResponse libraryRequirements) {
            this.libraryRequirements = libraryRequirements;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(@Nullable Integer nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSize(@Nullable String nodeSize) {
            this.nodeSize = nodeSize;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSizeFamily(@Nullable String nodeSizeFamily) {
            this.nodeSizeFamily = nodeSizeFamily;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder sessionLevelPackagesEnabled(@Nullable Boolean sessionLevelPackagesEnabled) {
            this.sessionLevelPackagesEnabled = sessionLevelPackagesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sparkConfigProperties(@Nullable LibraryRequirementsResponse sparkConfigProperties) {
            this.sparkConfigProperties = sparkConfigProperties;
            return this;
        }
        @CustomType.Setter
        public Builder sparkEventsFolder(@Nullable String sparkEventsFolder) {
            this.sparkEventsFolder = sparkEventsFolder;
            return this;
        }
        @CustomType.Setter
        public Builder sparkVersion(@Nullable String sparkVersion) {
            this.sparkVersion = sparkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetBigDataPoolResult build() {
            final var o = new GetBigDataPoolResult();
            o.autoPause = autoPause;
            o.autoScale = autoScale;
            o.cacheSize = cacheSize;
            o.creationDate = creationDate;
            o.customLibraries = customLibraries;
            o.defaultSparkLogFolder = defaultSparkLogFolder;
            o.dynamicExecutorAllocation = dynamicExecutorAllocation;
            o.id = id;
            o.isComputeIsolationEnabled = isComputeIsolationEnabled;
            o.lastSucceededTimestamp = lastSucceededTimestamp;
            o.libraryRequirements = libraryRequirements;
            o.location = location;
            o.name = name;
            o.nodeCount = nodeCount;
            o.nodeSize = nodeSize;
            o.nodeSizeFamily = nodeSizeFamily;
            o.provisioningState = provisioningState;
            o.sessionLevelPackagesEnabled = sessionLevelPackagesEnabled;
            o.sparkConfigProperties = sparkConfigProperties;
            o.sparkEventsFolder = sparkEventsFolder;
            o.sparkVersion = sparkVersion;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
