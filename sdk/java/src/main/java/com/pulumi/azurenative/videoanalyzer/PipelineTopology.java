// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.videoanalyzer.PipelineTopologyArgs;
import com.pulumi.azurenative.videoanalyzer.outputs.EncoderProcessorResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.ParameterDeclarationResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.RtspSourceResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.SkuResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.SystemDataResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.VideoSinkResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.VideoSourceResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras&#39; RTSP endpoints and credentials. Overall a topology is composed of the following:
 * 
 *   - Parameters: list of user defined parameters that can be references across the topology nodes.
 *   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
 *   - Processors: list of nodes which perform data analysis or transformations.
 *   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
 *     API Version: 2021-11-01-preview.
 * 
 * ## Example Usage
 * ### Create or update a pipeline topology with an Rtsp source and video sink.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var pipelineTopology = new PipelineTopology(&#34;pipelineTopology&#34;, PipelineTopologyArgs.builder()        
 *             .accountName(&#34;testaccount2&#34;)
 *             .description(&#34;Pipeline Topology 1 Description&#34;)
 *             .kind(&#34;Live&#34;)
 *             .parameters(            
 *                 Map.ofEntries(
 *                     Map.entry(&#34;default&#34;, &#34;rtsp://microsoft.com/video.mp4&#34;),
 *                     Map.entry(&#34;description&#34;, &#34;rtsp source url parameter&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rtspUrlParameter&#34;),
 *                     Map.entry(&#34;type&#34;, &#34;String&#34;)
 *                 ),
 *                 Map.ofEntries(
 *                     Map.entry(&#34;default&#34;, &#34;password&#34;),
 *                     Map.entry(&#34;description&#34;, &#34;rtsp source password parameter&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;rtspPasswordParameter&#34;),
 *                     Map.entry(&#34;type&#34;, &#34;SecretString&#34;)
 *                 ))
 *             .pipelineTopologyName(&#34;pipelineTopology1&#34;)
 *             .resourceGroupName(&#34;testrg&#34;)
 *             .sinks(Map.ofEntries(
 *                 Map.entry(&#34;inputs&#34;, Map.of(&#34;nodeName&#34;, &#34;rtspSource&#34;)),
 *                 Map.entry(&#34;name&#34;, &#34;videoSink&#34;),
 *                 Map.entry(&#34;type&#34;, &#34;#Microsoft.VideoAnalyzer.VideoSink&#34;),
 *                 Map.entry(&#34;videoCreationProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;description&#34;, &#34;Parking lot south entrance&#34;),
 *                     Map.entry(&#34;segmentLength&#34;, &#34;PT30S&#34;),
 *                     Map.entry(&#34;title&#34;, &#34;Parking Lot (Camera 1)&#34;)
 *                 )),
 *                 Map.entry(&#34;videoName&#34;, &#34;camera001&#34;),
 *                 Map.entry(&#34;videoPublishingOptions&#34;, Map.ofEntries(
 *                     Map.entry(&#34;disableArchive&#34;, &#34;false&#34;),
 *                     Map.entry(&#34;disableRtspPublishing&#34;, &#34;true&#34;)
 *                 ))
 *             ))
 *             .sku(Map.of(&#34;name&#34;, &#34;Live_S1&#34;))
 *             .sources(Map.ofEntries(
 *                 Map.entry(&#34;endpoint&#34;, Map.ofEntries(
 *                     Map.entry(&#34;credentials&#34;, Map.ofEntries(
 *                         Map.entry(&#34;password&#34;, rtspPasswordParameter),
 *                         Map.entry(&#34;type&#34;, &#34;#Microsoft.VideoAnalyzer.UsernamePasswordCredentials&#34;),
 *                         Map.entry(&#34;username&#34;, &#34;username&#34;)
 *                     )),
 *                     Map.entry(&#34;type&#34;, &#34;#Microsoft.VideoAnalyzer.UnsecuredEndpoint&#34;),
 *                     Map.entry(&#34;url&#34;, rtspUrlParameter)
 *                 )),
 *                 Map.entry(&#34;name&#34;, &#34;rtspSource&#34;),
 *                 Map.entry(&#34;transport&#34;, &#34;Http&#34;),
 *                 Map.entry(&#34;type&#34;, &#34;#Microsoft.VideoAnalyzer.RtspSource&#34;)
 *             ))
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:videoanalyzer:PipelineTopology pipelineTopology1 /subscriptions/591e76c3-3e97-44db-879c-3e2b12961b62/resourceGroups/testrg/providers/Microsoft.Media/videoAnalyzers/testaccount2/pipelineTopologies/pipelineTopology1 
 * ```
 * 
 */
@ResourceType(type="azure-native:videoanalyzer:PipelineTopology")
public class PipelineTopology extends com.pulumi.resources.CustomResource {
    /**
     * An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Topology kind.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return Topology kind.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of &#34;${PARAMETER_NAME}&#34; string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
     * 
     */
    @Export(name="parameters", type=List.class, parameters={ParameterDeclarationResponse.class})
    private Output</* @Nullable */ List<ParameterDeclarationResponse>> parameters;

    /**
     * @return List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of &#34;${PARAMETER_NAME}&#34; string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
     * 
     */
    public Output<Optional<List<ParameterDeclarationResponse>>> parameters() {
        return Codegen.optional(this.parameters);
    }
    /**
     * List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
     * 
     */
    @Export(name="processors", type=List.class, parameters={EncoderProcessorResponse.class})
    private Output</* @Nullable */ List<EncoderProcessorResponse>> processors;

    /**
     * @return List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
     * 
     */
    public Output<Optional<List<EncoderProcessorResponse>>> processors() {
        return Codegen.optional(this.processors);
    }
    /**
     * List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
     * 
     */
    @Export(name="sinks", type=List.class, parameters={VideoSinkResponse.class})
    private Output<List<VideoSinkResponse>> sinks;

    /**
     * @return List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
     * 
     */
    public Output<List<VideoSinkResponse>> sinks() {
        return this.sinks;
    }
    /**
     * Describes the properties of a SKU.
     * 
     */
    @Export(name="sku", type=SkuResponse.class, parameters={})
    private Output<SkuResponse> sku;

    /**
     * @return Describes the properties of a SKU.
     * 
     */
    public Output<SkuResponse> sku() {
        return this.sku;
    }
    /**
     * List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
     * 
     */
    @Export(name="sources", type=List.class, parameters={Either.class})
    private Output<List<Either<RtspSourceResponse,VideoSourceResponse>>> sources;

    /**
     * @return List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
     * 
     */
    public Output<List<Either<RtspSourceResponse,VideoSourceResponse>>> sources() {
        return this.sources;
    }
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    @Export(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public Output<SystemDataResponse> systemData() {
        return this.systemData;
    }
    /**
     * The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PipelineTopology(String name) {
        this(name, PipelineTopologyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PipelineTopology(String name, PipelineTopologyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PipelineTopology(String name, PipelineTopologyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:videoanalyzer:PipelineTopology", name, args == null ? PipelineTopologyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PipelineTopology(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:videoanalyzer:PipelineTopology", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:videoanalyzer/v20211101preview:PipelineTopology").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PipelineTopology get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PipelineTopology(name, id, options);
    }
}
