// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase.outputs;

import com.pulumi.azurenative.testbase.outputs.CommandResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TestResponse {
    /**
     * @return The commands used in the test.
     * 
     */
    private List<CommandResponse> commands;
    /**
     * @return Indicates if this test is active.It doesn&#39;t schedule test for not active Test.
     * 
     */
    private @Nullable Boolean isActive;
    /**
     * @return The type of the test.
     * 
     */
    private String testType;
    /**
     * @return Resource identifier of the validation test result.
     * 
     */
    private String validationResultId;
    /**
     * @return The status of the validation run of the package.
     * 
     */
    private String validationRunStatus;

    private TestResponse() {}
    /**
     * @return The commands used in the test.
     * 
     */
    public List<CommandResponse> commands() {
        return this.commands;
    }
    /**
     * @return Indicates if this test is active.It doesn&#39;t schedule test for not active Test.
     * 
     */
    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }
    /**
     * @return The type of the test.
     * 
     */
    public String testType() {
        return this.testType;
    }
    /**
     * @return Resource identifier of the validation test result.
     * 
     */
    public String validationResultId() {
        return this.validationResultId;
    }
    /**
     * @return The status of the validation run of the package.
     * 
     */
    public String validationRunStatus() {
        return this.validationRunStatus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<CommandResponse> commands;
        private @Nullable Boolean isActive;
        private String testType;
        private String validationResultId;
        private String validationRunStatus;
        public Builder() {}
        public Builder(TestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commands = defaults.commands;
    	      this.isActive = defaults.isActive;
    	      this.testType = defaults.testType;
    	      this.validationResultId = defaults.validationResultId;
    	      this.validationRunStatus = defaults.validationRunStatus;
        }

        @CustomType.Setter
        public Builder commands(List<CommandResponse> commands) {
            this.commands = Objects.requireNonNull(commands);
            return this;
        }
        public Builder commands(CommandResponse... commands) {
            return commands(List.of(commands));
        }
        @CustomType.Setter
        public Builder isActive(@Nullable Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder testType(String testType) {
            this.testType = Objects.requireNonNull(testType);
            return this;
        }
        @CustomType.Setter
        public Builder validationResultId(String validationResultId) {
            this.validationResultId = Objects.requireNonNull(validationResultId);
            return this;
        }
        @CustomType.Setter
        public Builder validationRunStatus(String validationRunStatus) {
            this.validationRunStatus = Objects.requireNonNull(validationRunStatus);
            return this;
        }
        public TestResponse build() {
            final var o = new TestResponse();
            o.commands = commands;
            o.isActive = isActive;
            o.testType = testType;
            o.validationResultId = validationResultId;
            o.validationRunStatus = validationRunStatus;
            return o;
        }
    }
}
