// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.TriggerPipelineReferenceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BlobTriggerResponse {
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return Trigger description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The path of the container/folder that will trigger the pipeline.
     * 
     */
    private String folderPath;
    /**
     * @return The Azure Storage linked service reference.
     * 
     */
    private LinkedServiceReferenceResponse linkedService;
    /**
     * @return The max number of parallel files to handle when it is triggered.
     * 
     */
    private Integer maxConcurrency;
    /**
     * @return Pipelines that need to be started.
     * 
     */
    private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    private String runtimeState;
    /**
     * @return Trigger type.
     * Expected value is &#39;BlobTrigger&#39;.
     * 
     */
    private String type;

    private BlobTriggerResponse() {}
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return Trigger description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The path of the container/folder that will trigger the pipeline.
     * 
     */
    public String folderPath() {
        return this.folderPath;
    }
    /**
     * @return The Azure Storage linked service reference.
     * 
     */
    public LinkedServiceReferenceResponse linkedService() {
        return this.linkedService;
    }
    /**
     * @return The max number of parallel files to handle when it is triggered.
     * 
     */
    public Integer maxConcurrency() {
        return this.maxConcurrency;
    }
    /**
     * @return Pipelines that need to be started.
     * 
     */
    public List<TriggerPipelineReferenceResponse> pipelines() {
        return this.pipelines == null ? List.of() : this.pipelines;
    }
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    public String runtimeState() {
        return this.runtimeState;
    }
    /**
     * @return Trigger type.
     * Expected value is &#39;BlobTrigger&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobTriggerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable String description;
        private String folderPath;
        private LinkedServiceReferenceResponse linkedService;
        private Integer maxConcurrency;
        private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
        private String runtimeState;
        private String type;
        public Builder() {}
        public Builder(BlobTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.folderPath = defaults.folderPath;
    	      this.linkedService = defaults.linkedService;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.pipelines = defaults.pipelines;
    	      this.runtimeState = defaults.runtimeState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(String folderPath) {
            this.folderPath = Objects.requireNonNull(folderPath);
            return this;
        }
        @CustomType.Setter
        public Builder linkedService(LinkedServiceReferenceResponse linkedService) {
            this.linkedService = Objects.requireNonNull(linkedService);
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrency(Integer maxConcurrency) {
            this.maxConcurrency = Objects.requireNonNull(maxConcurrency);
            return this;
        }
        @CustomType.Setter
        public Builder pipelines(@Nullable List<TriggerPipelineReferenceResponse> pipelines) {
            this.pipelines = pipelines;
            return this;
        }
        public Builder pipelines(TriggerPipelineReferenceResponse... pipelines) {
            return pipelines(List.of(pipelines));
        }
        @CustomType.Setter
        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public BlobTriggerResponse build() {
            final var o = new BlobTriggerResponse();
            o.annotations = annotations;
            o.description = description;
            o.folderPath = folderPath;
            o.linkedService = linkedService;
            o.maxConcurrency = maxConcurrency;
            o.pipelines = pipelines;
            o.runtimeState = runtimeState;
            o.type = type;
            return o;
        }
    }
}
