// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AvroFormatResponse;
import com.pulumi.azurenative.datafactory.outputs.DatasetCompressionResponse;
import com.pulumi.azurenative.datafactory.outputs.DatasetResponseFolder;
import com.pulumi.azurenative.datafactory.outputs.JsonFormatResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.OrcFormatResponse;
import com.pulumi.azurenative.datafactory.outputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.ParquetFormatResponse;
import com.pulumi.azurenative.datafactory.outputs.TextFormatResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AzureBlobDatasetResponse {
    /**
     * @return List of tags that can be used for describing the Dataset.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return The data compression method used for the blob storage.
     * 
     */
    private @Nullable DatasetCompressionResponse compression;
    /**
     * @return Dataset description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The name of the Azure Blob. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object fileName;
    /**
     * @return The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    private @Nullable DatasetResponseFolder folder;
    /**
     * @return The path of the Azure Blob storage. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object folderPath;
    /**
     * @return The format of the Azure Blob storage.
     * 
     */
    private @Nullable Object format;
    /**
     * @return Linked service reference.
     * 
     */
    private LinkedServiceReferenceResponse linkedServiceName;
    /**
     * @return The end of Azure Blob&#39;s modified datetime. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object modifiedDatetimeEnd;
    /**
     * @return The start of Azure Blob&#39;s modified datetime. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object modifiedDatetimeStart;
    /**
     * @return Parameters for dataset.
     * 
     */
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;
    /**
     * @return Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    private @Nullable Object schema;
    /**
     * @return Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    private @Nullable Object structure;
    /**
     * @return The root of blob path. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object tableRootLocation;
    /**
     * @return Type of dataset.
     * Expected value is &#39;AzureBlob&#39;.
     * 
     */
    private String type;

    private AzureBlobDatasetResponse() {}
    /**
     * @return List of tags that can be used for describing the Dataset.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return The data compression method used for the blob storage.
     * 
     */
    public Optional<DatasetCompressionResponse> compression() {
        return Optional.ofNullable(this.compression);
    }
    /**
     * @return Dataset description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The name of the Azure Blob. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> fileName() {
        return Optional.ofNullable(this.fileName);
    }
    /**
     * @return The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    public Optional<DatasetResponseFolder> folder() {
        return Optional.ofNullable(this.folder);
    }
    /**
     * @return The path of the Azure Blob storage. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }
    /**
     * @return The format of the Azure Blob storage.
     * 
     */
    public Optional<Object> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return Linked service reference.
     * 
     */
    public LinkedServiceReferenceResponse linkedServiceName() {
        return this.linkedServiceName;
    }
    /**
     * @return The end of Azure Blob&#39;s modified datetime. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> modifiedDatetimeEnd() {
        return Optional.ofNullable(this.modifiedDatetimeEnd);
    }
    /**
     * @return The start of Azure Blob&#39;s modified datetime. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> modifiedDatetimeStart() {
        return Optional.ofNullable(this.modifiedDatetimeStart);
    }
    /**
     * @return Parameters for dataset.
     * 
     */
    public Map<String,ParameterSpecificationResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    public Optional<Object> schema() {
        return Optional.ofNullable(this.schema);
    }
    /**
     * @return Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    public Optional<Object> structure() {
        return Optional.ofNullable(this.structure);
    }
    /**
     * @return The root of blob path. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> tableRootLocation() {
        return Optional.ofNullable(this.tableRootLocation);
    }
    /**
     * @return Type of dataset.
     * Expected value is &#39;AzureBlob&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureBlobDatasetResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable DatasetCompressionResponse compression;
        private @Nullable String description;
        private @Nullable Object fileName;
        private @Nullable DatasetResponseFolder folder;
        private @Nullable Object folderPath;
        private @Nullable Object format;
        private LinkedServiceReferenceResponse linkedServiceName;
        private @Nullable Object modifiedDatetimeEnd;
        private @Nullable Object modifiedDatetimeStart;
        private @Nullable Map<String,ParameterSpecificationResponse> parameters;
        private @Nullable Object schema;
        private @Nullable Object structure;
        private @Nullable Object tableRootLocation;
        private String type;
        public Builder() {}
        public Builder(AzureBlobDatasetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.compression = defaults.compression;
    	      this.description = defaults.description;
    	      this.fileName = defaults.fileName;
    	      this.folder = defaults.folder;
    	      this.folderPath = defaults.folderPath;
    	      this.format = defaults.format;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.modifiedDatetimeEnd = defaults.modifiedDatetimeEnd;
    	      this.modifiedDatetimeStart = defaults.modifiedDatetimeStart;
    	      this.parameters = defaults.parameters;
    	      this.schema = defaults.schema;
    	      this.structure = defaults.structure;
    	      this.tableRootLocation = defaults.tableRootLocation;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder compression(@Nullable DatasetCompressionResponse compression) {
            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(@Nullable Object fileName) {
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder folder(@Nullable DatasetResponseFolder folder) {
            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(@Nullable Object folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable Object format) {
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder linkedServiceName(LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = Objects.requireNonNull(linkedServiceName);
            return this;
        }
        @CustomType.Setter
        public Builder modifiedDatetimeEnd(@Nullable Object modifiedDatetimeEnd) {
            this.modifiedDatetimeEnd = modifiedDatetimeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedDatetimeStart(@Nullable Object modifiedDatetimeStart) {
            this.modifiedDatetimeStart = modifiedDatetimeStart;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder schema(@Nullable Object schema) {
            this.schema = schema;
            return this;
        }
        @CustomType.Setter
        public Builder structure(@Nullable Object structure) {
            this.structure = structure;
            return this;
        }
        @CustomType.Setter
        public Builder tableRootLocation(@Nullable Object tableRootLocation) {
            this.tableRootLocation = tableRootLocation;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public AzureBlobDatasetResponse build() {
            final var o = new AzureBlobDatasetResponse();
            o.annotations = annotations;
            o.compression = compression;
            o.description = description;
            o.fileName = fileName;
            o.folder = folder;
            o.folderPath = folderPath;
            o.format = format;
            o.linkedServiceName = linkedServiceName;
            o.modifiedDatetimeEnd = modifiedDatetimeEnd;
            o.modifiedDatetimeStart = modifiedDatetimeStart;
            o.parameters = parameters;
            o.schema = schema;
            o.structure = structure;
            o.tableRootLocation = tableRootLocation;
            o.type = type;
            return o;
        }
    }
}
