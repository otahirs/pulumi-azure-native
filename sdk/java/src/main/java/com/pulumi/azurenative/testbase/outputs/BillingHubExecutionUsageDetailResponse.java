// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BillingHubExecutionUsageDetailResponse {
    private @Nullable String applicationName;
    private @Nullable String applicationVersion;
    private @Nullable Double billedCharges;
    private @Nullable String endTimeStamp;
    private @Nullable String executionRequestId;
    private @Nullable String meterId;
    private @Nullable String osBuild;
    private @Nullable String release;
    private @Nullable String sku;
    private @Nullable String startTimeStamp;
    private @Nullable String testType;
    private @Nullable String updateType;
    private @Nullable Double usedBillableHours;
    private @Nullable Double usedFreeHours;

    private BillingHubExecutionUsageDetailResponse() {}
    public Optional<String> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }
    public Optional<String> applicationVersion() {
        return Optional.ofNullable(this.applicationVersion);
    }
    public Optional<Double> billedCharges() {
        return Optional.ofNullable(this.billedCharges);
    }
    public Optional<String> endTimeStamp() {
        return Optional.ofNullable(this.endTimeStamp);
    }
    public Optional<String> executionRequestId() {
        return Optional.ofNullable(this.executionRequestId);
    }
    public Optional<String> meterId() {
        return Optional.ofNullable(this.meterId);
    }
    public Optional<String> osBuild() {
        return Optional.ofNullable(this.osBuild);
    }
    public Optional<String> release() {
        return Optional.ofNullable(this.release);
    }
    public Optional<String> sku() {
        return Optional.ofNullable(this.sku);
    }
    public Optional<String> startTimeStamp() {
        return Optional.ofNullable(this.startTimeStamp);
    }
    public Optional<String> testType() {
        return Optional.ofNullable(this.testType);
    }
    public Optional<String> updateType() {
        return Optional.ofNullable(this.updateType);
    }
    public Optional<Double> usedBillableHours() {
        return Optional.ofNullable(this.usedBillableHours);
    }
    public Optional<Double> usedFreeHours() {
        return Optional.ofNullable(this.usedFreeHours);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BillingHubExecutionUsageDetailResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationName;
        private @Nullable String applicationVersion;
        private @Nullable Double billedCharges;
        private @Nullable String endTimeStamp;
        private @Nullable String executionRequestId;
        private @Nullable String meterId;
        private @Nullable String osBuild;
        private @Nullable String release;
        private @Nullable String sku;
        private @Nullable String startTimeStamp;
        private @Nullable String testType;
        private @Nullable String updateType;
        private @Nullable Double usedBillableHours;
        private @Nullable Double usedFreeHours;
        public Builder() {}
        public Builder(BillingHubExecutionUsageDetailResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationName = defaults.applicationName;
    	      this.applicationVersion = defaults.applicationVersion;
    	      this.billedCharges = defaults.billedCharges;
    	      this.endTimeStamp = defaults.endTimeStamp;
    	      this.executionRequestId = defaults.executionRequestId;
    	      this.meterId = defaults.meterId;
    	      this.osBuild = defaults.osBuild;
    	      this.release = defaults.release;
    	      this.sku = defaults.sku;
    	      this.startTimeStamp = defaults.startTimeStamp;
    	      this.testType = defaults.testType;
    	      this.updateType = defaults.updateType;
    	      this.usedBillableHours = defaults.usedBillableHours;
    	      this.usedFreeHours = defaults.usedFreeHours;
        }

        @CustomType.Setter
        public Builder applicationName(@Nullable String applicationName) {
            this.applicationName = applicationName;
            return this;
        }
        @CustomType.Setter
        public Builder applicationVersion(@Nullable String applicationVersion) {
            this.applicationVersion = applicationVersion;
            return this;
        }
        @CustomType.Setter
        public Builder billedCharges(@Nullable Double billedCharges) {
            this.billedCharges = billedCharges;
            return this;
        }
        @CustomType.Setter
        public Builder endTimeStamp(@Nullable String endTimeStamp) {
            this.endTimeStamp = endTimeStamp;
            return this;
        }
        @CustomType.Setter
        public Builder executionRequestId(@Nullable String executionRequestId) {
            this.executionRequestId = executionRequestId;
            return this;
        }
        @CustomType.Setter
        public Builder meterId(@Nullable String meterId) {
            this.meterId = meterId;
            return this;
        }
        @CustomType.Setter
        public Builder osBuild(@Nullable String osBuild) {
            this.osBuild = osBuild;
            return this;
        }
        @CustomType.Setter
        public Builder release(@Nullable String release) {
            this.release = release;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable String sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder startTimeStamp(@Nullable String startTimeStamp) {
            this.startTimeStamp = startTimeStamp;
            return this;
        }
        @CustomType.Setter
        public Builder testType(@Nullable String testType) {
            this.testType = testType;
            return this;
        }
        @CustomType.Setter
        public Builder updateType(@Nullable String updateType) {
            this.updateType = updateType;
            return this;
        }
        @CustomType.Setter
        public Builder usedBillableHours(@Nullable Double usedBillableHours) {
            this.usedBillableHours = usedBillableHours;
            return this;
        }
        @CustomType.Setter
        public Builder usedFreeHours(@Nullable Double usedFreeHours) {
            this.usedFreeHours = usedFreeHours;
            return this;
        }
        public BillingHubExecutionUsageDetailResponse build() {
            final var o = new BillingHubExecutionUsageDetailResponse();
            o.applicationName = applicationName;
            o.applicationVersion = applicationVersion;
            o.billedCharges = billedCharges;
            o.endTimeStamp = endTimeStamp;
            o.executionRequestId = executionRequestId;
            o.meterId = meterId;
            o.osBuild = osBuild;
            o.release = release;
            o.sku = sku;
            o.startTimeStamp = startTimeStamp;
            o.testType = testType;
            o.updateType = updateType;
            o.usedBillableHours = usedBillableHours;
            o.usedFreeHours = usedFreeHours;
            return o;
        }
    }
}
