// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.Ipv6CircuitConnectionConfigResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExpressRouteCircuitConnectionResponse {
    /**
     * @return /29 IP address space to carve out Customer addresses for tunnels.
     * 
     */
    private @Nullable String addressPrefix;
    /**
     * @return The authorization key.
     * 
     */
    private @Nullable String authorizationKey;
    /**
     * @return Express Route Circuit connection state.
     * 
     */
    private String circuitConnectionStatus;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
     * 
     */
    private @Nullable SubResourceResponse expressRouteCircuitPeering;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return IPv6 Address PrefixProperties of the express route circuit connection.
     * 
     */
    private @Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig;
    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return Reference to Express Route Circuit Private Peering Resource of the peered circuit.
     * 
     */
    private @Nullable SubResourceResponse peerExpressRouteCircuitPeering;
    /**
     * @return The provisioning state of the express route circuit connection resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private ExpressRouteCircuitConnectionResponse() {}
    /**
     * @return /29 IP address space to carve out Customer addresses for tunnels.
     * 
     */
    public Optional<String> addressPrefix() {
        return Optional.ofNullable(this.addressPrefix);
    }
    /**
     * @return The authorization key.
     * 
     */
    public Optional<String> authorizationKey() {
        return Optional.ofNullable(this.authorizationKey);
    }
    /**
     * @return Express Route Circuit connection state.
     * 
     */
    public String circuitConnectionStatus() {
        return this.circuitConnectionStatus;
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
     * 
     */
    public Optional<SubResourceResponse> expressRouteCircuitPeering() {
        return Optional.ofNullable(this.expressRouteCircuitPeering);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return IPv6 Address PrefixProperties of the express route circuit connection.
     * 
     */
    public Optional<Ipv6CircuitConnectionConfigResponse> ipv6CircuitConnectionConfig() {
        return Optional.ofNullable(this.ipv6CircuitConnectionConfig);
    }
    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Reference to Express Route Circuit Private Peering Resource of the peered circuit.
     * 
     */
    public Optional<SubResourceResponse> peerExpressRouteCircuitPeering() {
        return Optional.ofNullable(this.peerExpressRouteCircuitPeering);
    }
    /**
     * @return The provisioning state of the express route circuit connection resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRouteCircuitConnectionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String addressPrefix;
        private @Nullable String authorizationKey;
        private String circuitConnectionStatus;
        private String etag;
        private @Nullable SubResourceResponse expressRouteCircuitPeering;
        private @Nullable String id;
        private @Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig;
        private @Nullable String name;
        private @Nullable SubResourceResponse peerExpressRouteCircuitPeering;
        private String provisioningState;
        private String type;
        public Builder() {}
        public Builder(ExpressRouteCircuitConnectionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPrefix = defaults.addressPrefix;
    	      this.authorizationKey = defaults.authorizationKey;
    	      this.circuitConnectionStatus = defaults.circuitConnectionStatus;
    	      this.etag = defaults.etag;
    	      this.expressRouteCircuitPeering = defaults.expressRouteCircuitPeering;
    	      this.id = defaults.id;
    	      this.ipv6CircuitConnectionConfig = defaults.ipv6CircuitConnectionConfig;
    	      this.name = defaults.name;
    	      this.peerExpressRouteCircuitPeering = defaults.peerExpressRouteCircuitPeering;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder addressPrefix(@Nullable String addressPrefix) {
            this.addressPrefix = addressPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationKey(@Nullable String authorizationKey) {
            this.authorizationKey = authorizationKey;
            return this;
        }
        @CustomType.Setter
        public Builder circuitConnectionStatus(String circuitConnectionStatus) {
            this.circuitConnectionStatus = Objects.requireNonNull(circuitConnectionStatus);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder expressRouteCircuitPeering(@Nullable SubResourceResponse expressRouteCircuitPeering) {
            this.expressRouteCircuitPeering = expressRouteCircuitPeering;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CircuitConnectionConfig(@Nullable Ipv6CircuitConnectionConfigResponse ipv6CircuitConnectionConfig) {
            this.ipv6CircuitConnectionConfig = ipv6CircuitConnectionConfig;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peerExpressRouteCircuitPeering(@Nullable SubResourceResponse peerExpressRouteCircuitPeering) {
            this.peerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ExpressRouteCircuitConnectionResponse build() {
            final var o = new ExpressRouteCircuitConnectionResponse();
            o.addressPrefix = addressPrefix;
            o.authorizationKey = authorizationKey;
            o.circuitConnectionStatus = circuitConnectionStatus;
            o.etag = etag;
            o.expressRouteCircuitPeering = expressRouteCircuitPeering;
            o.id = id;
            o.ipv6CircuitConnectionConfig = ipv6CircuitConnectionConfig;
            o.name = name;
            o.peerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
            o.provisioningState = provisioningState;
            o.type = type;
            return o;
        }
    }
}
