// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.outputs;

import com.pulumi.azurenative.workloads.outputs.ManagedRGConfigurationResponse;
import com.pulumi.azurenative.workloads.outputs.MonitorPropertiesResponseErrors;
import com.pulumi.azurenative.workloads.outputs.SystemDataResponse;
import com.pulumi.azurenative.workloads.outputs.UserAssignedServiceIdentityResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetmonitorResult {
    /**
     * @return The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
     * 
     */
    private @Nullable String appLocation;
    /**
     * @return Defines the SAP monitor errors.
     * 
     */
    private MonitorPropertiesResponseErrors errors;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return Managed service identity (user assigned identities)
     * 
     */
    private @Nullable UserAssignedServiceIdentityResponse identity;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
     * 
     */
    private @Nullable String logAnalyticsWorkspaceArmId;
    /**
     * @return Managed resource group configuration
     * 
     */
    private @Nullable ManagedRGConfigurationResponse managedResourceGroupConfiguration;
    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    private @Nullable String monitorSubnet;
    /**
     * @return The ARM ID of the MSI used for SAP monitoring.
     * 
     */
    private String msiArmId;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return State of provisioning of the SAP monitor.
     * 
     */
    private String provisioningState;
    /**
     * @return Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
     * 
     */
    private @Nullable String routingPreference;
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetmonitorResult() {}
    /**
     * @return The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
     * 
     */
    public Optional<String> appLocation() {
        return Optional.ofNullable(this.appLocation);
    }
    /**
     * @return Defines the SAP monitor errors.
     * 
     */
    public MonitorPropertiesResponseErrors errors() {
        return this.errors;
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Managed service identity (user assigned identities)
     * 
     */
    public Optional<UserAssignedServiceIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
     * 
     */
    public Optional<String> logAnalyticsWorkspaceArmId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceArmId);
    }
    /**
     * @return Managed resource group configuration
     * 
     */
    public Optional<ManagedRGConfigurationResponse> managedResourceGroupConfiguration() {
        return Optional.ofNullable(this.managedResourceGroupConfiguration);
    }
    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    public Optional<String> monitorSubnet() {
        return Optional.ofNullable(this.monitorSubnet);
    }
    /**
     * @return The ARM ID of the MSI used for SAP monitoring.
     * 
     */
    public String msiArmId() {
        return this.msiArmId;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return State of provisioning of the SAP monitor.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
     * 
     */
    public Optional<String> routingPreference() {
        return Optional.ofNullable(this.routingPreference);
    }
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetmonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String appLocation;
        private MonitorPropertiesResponseErrors errors;
        private String id;
        private @Nullable UserAssignedServiceIdentityResponse identity;
        private String location;
        private @Nullable String logAnalyticsWorkspaceArmId;
        private @Nullable ManagedRGConfigurationResponse managedResourceGroupConfiguration;
        private @Nullable String monitorSubnet;
        private String msiArmId;
        private String name;
        private String provisioningState;
        private @Nullable String routingPreference;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetmonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appLocation = defaults.appLocation;
    	      this.errors = defaults.errors;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspaceArmId = defaults.logAnalyticsWorkspaceArmId;
    	      this.managedResourceGroupConfiguration = defaults.managedResourceGroupConfiguration;
    	      this.monitorSubnet = defaults.monitorSubnet;
    	      this.msiArmId = defaults.msiArmId;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.routingPreference = defaults.routingPreference;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder appLocation(@Nullable String appLocation) {
            this.appLocation = appLocation;
            return this;
        }
        @CustomType.Setter
        public Builder errors(MonitorPropertiesResponseErrors errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable UserAssignedServiceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceArmId(@Nullable String logAnalyticsWorkspaceArmId) {
            this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            return this;
        }
        @CustomType.Setter
        public Builder managedResourceGroupConfiguration(@Nullable ManagedRGConfigurationResponse managedResourceGroupConfiguration) {
            this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder monitorSubnet(@Nullable String monitorSubnet) {
            this.monitorSubnet = monitorSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder msiArmId(String msiArmId) {
            this.msiArmId = Objects.requireNonNull(msiArmId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder routingPreference(@Nullable String routingPreference) {
            this.routingPreference = routingPreference;
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetmonitorResult build() {
            final var o = new GetmonitorResult();
            o.appLocation = appLocation;
            o.errors = errors;
            o.id = id;
            o.identity = identity;
            o.location = location;
            o.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            o.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
            o.monitorSubnet = monitorSubnet;
            o.msiArmId = msiArmId;
            o.name = name;
            o.provisioningState = provisioningState;
            o.routingPreference = routingPreference;
            o.systemData = systemData;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
