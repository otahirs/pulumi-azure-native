// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.outputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.outputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.SSISExecutionCredentialResponse;
import com.pulumi.azurenative.datafactory.outputs.SSISExecutionParameterResponse;
import com.pulumi.azurenative.datafactory.outputs.SSISLogLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.SSISPackageLocationResponse;
import com.pulumi.azurenative.datafactory.outputs.SSISPropertyOverrideResponse;
import com.pulumi.azurenative.datafactory.outputs.UserPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExecuteSSISPackageActivityResponse {
    /**
     * @return The integration runtime reference.
     * 
     */
    private IntegrationRuntimeReferenceResponse connectVia;
    /**
     * @return Activity depends on condition.
     * 
     */
    private @Nullable List<ActivityDependencyResponse> dependsOn;
    /**
     * @return Activity description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object environmentPath;
    /**
     * @return The package execution credential.
     * 
     */
    private @Nullable SSISExecutionCredentialResponse executionCredential;
    /**
     * @return Linked service reference.
     * 
     */
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;
    /**
     * @return SSIS package execution log location.
     * 
     */
    private @Nullable SSISLogLocationResponse logLocation;
    /**
     * @return The logging level of SSIS package execution. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object loggingLevel;
    /**
     * @return Activity name.
     * 
     */
    private String name;
    /**
     * @return The package level connection managers to execute the SSIS package.
     * 
     */
    private @Nullable Map<String,Map<String,SSISExecutionParameterResponse>> packageConnectionManagers;
    /**
     * @return SSIS package location.
     * 
     */
    private SSISPackageLocationResponse packageLocation;
    /**
     * @return The package level parameters to execute the SSIS package.
     * 
     */
    private @Nullable Map<String,SSISExecutionParameterResponse> packageParameters;
    /**
     * @return Activity policy.
     * 
     */
    private @Nullable ActivityPolicyResponse policy;
    /**
     * @return The project level connection managers to execute the SSIS package.
     * 
     */
    private @Nullable Map<String,Map<String,SSISExecutionParameterResponse>> projectConnectionManagers;
    /**
     * @return The project level parameters to execute the SSIS package.
     * 
     */
    private @Nullable Map<String,SSISExecutionParameterResponse> projectParameters;
    /**
     * @return The property overrides to execute the SSIS package.
     * 
     */
    private @Nullable Map<String,SSISPropertyOverrideResponse> propertyOverrides;
    /**
     * @return Specifies the runtime to execute SSIS package. The value should be &#34;x86&#34; or &#34;x64&#34;. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object runtime;
    /**
     * @return Type of activity.
     * Expected value is &#39;ExecuteSSISPackage&#39;.
     * 
     */
    private String type;
    /**
     * @return Activity user properties.
     * 
     */
    private @Nullable List<UserPropertyResponse> userProperties;

    private ExecuteSSISPackageActivityResponse() {}
    /**
     * @return The integration runtime reference.
     * 
     */
    public IntegrationRuntimeReferenceResponse connectVia() {
        return this.connectVia;
    }
    /**
     * @return Activity depends on condition.
     * 
     */
    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> environmentPath() {
        return Optional.ofNullable(this.environmentPath);
    }
    /**
     * @return The package execution credential.
     * 
     */
    public Optional<SSISExecutionCredentialResponse> executionCredential() {
        return Optional.ofNullable(this.executionCredential);
    }
    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }
    /**
     * @return SSIS package execution log location.
     * 
     */
    public Optional<SSISLogLocationResponse> logLocation() {
        return Optional.ofNullable(this.logLocation);
    }
    /**
     * @return The logging level of SSIS package execution. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }
    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The package level connection managers to execute the SSIS package.
     * 
     */
    public Map<String,Map<String,SSISExecutionParameterResponse>> packageConnectionManagers() {
        return this.packageConnectionManagers == null ? Map.of() : this.packageConnectionManagers;
    }
    /**
     * @return SSIS package location.
     * 
     */
    public SSISPackageLocationResponse packageLocation() {
        return this.packageLocation;
    }
    /**
     * @return The package level parameters to execute the SSIS package.
     * 
     */
    public Map<String,SSISExecutionParameterResponse> packageParameters() {
        return this.packageParameters == null ? Map.of() : this.packageParameters;
    }
    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return The project level connection managers to execute the SSIS package.
     * 
     */
    public Map<String,Map<String,SSISExecutionParameterResponse>> projectConnectionManagers() {
        return this.projectConnectionManagers == null ? Map.of() : this.projectConnectionManagers;
    }
    /**
     * @return The project level parameters to execute the SSIS package.
     * 
     */
    public Map<String,SSISExecutionParameterResponse> projectParameters() {
        return this.projectParameters == null ? Map.of() : this.projectParameters;
    }
    /**
     * @return The property overrides to execute the SSIS package.
     * 
     */
    public Map<String,SSISPropertyOverrideResponse> propertyOverrides() {
        return this.propertyOverrides == null ? Map.of() : this.propertyOverrides;
    }
    /**
     * @return Specifies the runtime to execute SSIS package. The value should be &#34;x86&#34; or &#34;x64&#34;. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> runtime() {
        return Optional.ofNullable(this.runtime);
    }
    /**
     * @return Type of activity.
     * Expected value is &#39;ExecuteSSISPackage&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Activity user properties.
     * 
     */
    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecuteSSISPackageActivityResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private IntegrationRuntimeReferenceResponse connectVia;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private @Nullable Object environmentPath;
        private @Nullable SSISExecutionCredentialResponse executionCredential;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private @Nullable SSISLogLocationResponse logLocation;
        private @Nullable Object loggingLevel;
        private String name;
        private @Nullable Map<String,Map<String,SSISExecutionParameterResponse>> packageConnectionManagers;
        private SSISPackageLocationResponse packageLocation;
        private @Nullable Map<String,SSISExecutionParameterResponse> packageParameters;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Map<String,Map<String,SSISExecutionParameterResponse>> projectConnectionManagers;
        private @Nullable Map<String,SSISExecutionParameterResponse> projectParameters;
        private @Nullable Map<String,SSISPropertyOverrideResponse> propertyOverrides;
        private @Nullable Object runtime;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;
        public Builder() {}
        public Builder(ExecuteSSISPackageActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectVia = defaults.connectVia;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.environmentPath = defaults.environmentPath;
    	      this.executionCredential = defaults.executionCredential;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.logLocation = defaults.logLocation;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.name = defaults.name;
    	      this.packageConnectionManagers = defaults.packageConnectionManagers;
    	      this.packageLocation = defaults.packageLocation;
    	      this.packageParameters = defaults.packageParameters;
    	      this.policy = defaults.policy;
    	      this.projectConnectionManagers = defaults.projectConnectionManagers;
    	      this.projectParameters = defaults.projectParameters;
    	      this.propertyOverrides = defaults.propertyOverrides;
    	      this.runtime = defaults.runtime;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        @CustomType.Setter
        public Builder connectVia(IntegrationRuntimeReferenceResponse connectVia) {
            this.connectVia = Objects.requireNonNull(connectVia);
            return this;
        }
        @CustomType.Setter
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder environmentPath(@Nullable Object environmentPath) {
            this.environmentPath = environmentPath;
            return this;
        }
        @CustomType.Setter
        public Builder executionCredential(@Nullable SSISExecutionCredentialResponse executionCredential) {
            this.executionCredential = executionCredential;
            return this;
        }
        @CustomType.Setter
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder logLocation(@Nullable SSISLogLocationResponse logLocation) {
            this.logLocation = logLocation;
            return this;
        }
        @CustomType.Setter
        public Builder loggingLevel(@Nullable Object loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder packageConnectionManagers(@Nullable Map<String,Map<String,SSISExecutionParameterResponse>> packageConnectionManagers) {
            this.packageConnectionManagers = packageConnectionManagers;
            return this;
        }
        @CustomType.Setter
        public Builder packageLocation(SSISPackageLocationResponse packageLocation) {
            this.packageLocation = Objects.requireNonNull(packageLocation);
            return this;
        }
        @CustomType.Setter
        public Builder packageParameters(@Nullable Map<String,SSISExecutionParameterResponse> packageParameters) {
            this.packageParameters = packageParameters;
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder projectConnectionManagers(@Nullable Map<String,Map<String,SSISExecutionParameterResponse>> projectConnectionManagers) {
            this.projectConnectionManagers = projectConnectionManagers;
            return this;
        }
        @CustomType.Setter
        public Builder projectParameters(@Nullable Map<String,SSISExecutionParameterResponse> projectParameters) {
            this.projectParameters = projectParameters;
            return this;
        }
        @CustomType.Setter
        public Builder propertyOverrides(@Nullable Map<String,SSISPropertyOverrideResponse> propertyOverrides) {
            this.propertyOverrides = propertyOverrides;
            return this;
        }
        @CustomType.Setter
        public Builder runtime(@Nullable Object runtime) {
            this.runtime = runtime;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }
        public ExecuteSSISPackageActivityResponse build() {
            final var o = new ExecuteSSISPackageActivityResponse();
            o.connectVia = connectVia;
            o.dependsOn = dependsOn;
            o.description = description;
            o.environmentPath = environmentPath;
            o.executionCredential = executionCredential;
            o.linkedServiceName = linkedServiceName;
            o.logLocation = logLocation;
            o.loggingLevel = loggingLevel;
            o.name = name;
            o.packageConnectionManagers = packageConnectionManagers;
            o.packageLocation = packageLocation;
            o.packageParameters = packageParameters;
            o.policy = policy;
            o.projectConnectionManagers = projectConnectionManagers;
            o.projectParameters = projectParameters;
            o.propertyOverrides = propertyOverrides;
            o.runtime = runtime;
            o.type = type;
            o.userProperties = userProperties;
            return o;
        }
    }
}
