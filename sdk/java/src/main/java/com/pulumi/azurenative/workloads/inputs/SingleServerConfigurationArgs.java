// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.enums.SAPDatabaseType;
import com.pulumi.azurenative.workloads.inputs.NetworkConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.VirtualMachineConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Gets or sets the single server configuration.
 * 
 */
public final class SingleServerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SingleServerConfigurationArgs Empty = new SingleServerConfigurationArgs();

    /**
     * The application resource group where SAP system resources will be deployed.
     * 
     */
    @Import(name="appResourceGroup", required=true)
    private Output<String> appResourceGroup;

    /**
     * @return The application resource group where SAP system resources will be deployed.
     * 
     */
    public Output<String> appResourceGroup() {
        return this.appResourceGroup;
    }

    /**
     * The database type.
     * 
     */
    @Import(name="databaseType")
    private @Nullable Output<Either<String,SAPDatabaseType>> databaseType;

    /**
     * @return The database type.
     * 
     */
    public Optional<Output<Either<String,SAPDatabaseType>>> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    /**
     * The deployment Type.
     * Expected value is &#39;SingleServer&#39;.
     * 
     */
    @Import(name="deploymentType", required=true)
    private Output<String> deploymentType;

    /**
     * @return The deployment Type.
     * Expected value is &#39;SingleServer&#39;.
     * 
     */
    public Output<String> deploymentType() {
        return this.deploymentType;
    }

    /**
     * Network configuration for the server
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<NetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Network configuration for the server
     * 
     */
    public Optional<Output<NetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * The subnet id.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The subnet id.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Gets or sets the virtual machine configuration.
     * 
     */
    @Import(name="virtualMachineConfiguration", required=true)
    private Output<VirtualMachineConfigurationArgs> virtualMachineConfiguration;

    /**
     * @return Gets or sets the virtual machine configuration.
     * 
     */
    public Output<VirtualMachineConfigurationArgs> virtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    private SingleServerConfigurationArgs() {}

    private SingleServerConfigurationArgs(SingleServerConfigurationArgs $) {
        this.appResourceGroup = $.appResourceGroup;
        this.databaseType = $.databaseType;
        this.deploymentType = $.deploymentType;
        this.networkConfiguration = $.networkConfiguration;
        this.subnetId = $.subnetId;
        this.virtualMachineConfiguration = $.virtualMachineConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingleServerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingleServerConfigurationArgs $;

        public Builder() {
            $ = new SingleServerConfigurationArgs();
        }

        public Builder(SingleServerConfigurationArgs defaults) {
            $ = new SingleServerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appResourceGroup The application resource group where SAP system resources will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder appResourceGroup(Output<String> appResourceGroup) {
            $.appResourceGroup = appResourceGroup;
            return this;
        }

        /**
         * @param appResourceGroup The application resource group where SAP system resources will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder appResourceGroup(String appResourceGroup) {
            return appResourceGroup(Output.of(appResourceGroup));
        }

        /**
         * @param databaseType The database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable Output<Either<String,SAPDatabaseType>> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType The database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Either<String,SAPDatabaseType> databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param databaseType The database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Either.ofLeft(databaseType));
        }

        /**
         * @param databaseType The database type.
         * 
         * @return builder
         * 
         */
        public Builder databaseType(SAPDatabaseType databaseType) {
            return databaseType(Either.ofRight(databaseType));
        }

        /**
         * @param deploymentType The deployment Type.
         * Expected value is &#39;SingleServer&#39;.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The deployment Type.
         * Expected value is &#39;SingleServer&#39;.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param networkConfiguration Network configuration for the server
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<NetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Network configuration for the server
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(NetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param subnetId The subnet id.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The subnet id.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param virtualMachineConfiguration Gets or sets the virtual machine configuration.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineConfiguration(Output<VirtualMachineConfigurationArgs> virtualMachineConfiguration) {
            $.virtualMachineConfiguration = virtualMachineConfiguration;
            return this;
        }

        /**
         * @param virtualMachineConfiguration Gets or sets the virtual machine configuration.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineConfiguration(VirtualMachineConfigurationArgs virtualMachineConfiguration) {
            return virtualMachineConfiguration(Output.of(virtualMachineConfiguration));
        }

        public SingleServerConfigurationArgs build() {
            $.appResourceGroup = Objects.requireNonNull($.appResourceGroup, "expected parameter 'appResourceGroup' to be non-null");
            $.deploymentType = Codegen.stringProp("deploymentType").output().arg($.deploymentType).require();
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.virtualMachineConfiguration = Objects.requireNonNull($.virtualMachineConfiguration, "expected parameter 'virtualMachineConfiguration' to be non-null");
            return $;
        }
    }

}
