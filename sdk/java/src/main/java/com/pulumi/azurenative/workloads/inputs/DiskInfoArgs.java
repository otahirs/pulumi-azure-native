// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.enums.DiskStorageType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Disk resource creation details
 * 
 */
public final class DiskInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskInfoArgs Empty = new DiskInfoArgs();

    /**
     * Disk size in GB
     * 
     */
    @Import(name="sizeInGB")
    private @Nullable Output<Double> sizeInGB;

    /**
     * @return Disk size in GB
     * 
     */
    public Optional<Output<Double>> sizeInGB() {
        return Optional.ofNullable(this.sizeInGB);
    }

    /**
     * Storage type
     * 
     */
    @Import(name="storageType", required=true)
    private Output<DiskStorageType> storageType;

    /**
     * @return Storage type
     * 
     */
    public Output<DiskStorageType> storageType() {
        return this.storageType;
    }

    private DiskInfoArgs() {}

    private DiskInfoArgs(DiskInfoArgs $) {
        this.sizeInGB = $.sizeInGB;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskInfoArgs $;

        public Builder() {
            $ = new DiskInfoArgs();
        }

        public Builder(DiskInfoArgs defaults) {
            $ = new DiskInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sizeInGB Disk size in GB
         * 
         * @return builder
         * 
         */
        public Builder sizeInGB(@Nullable Output<Double> sizeInGB) {
            $.sizeInGB = sizeInGB;
            return this;
        }

        /**
         * @param sizeInGB Disk size in GB
         * 
         * @return builder
         * 
         */
        public Builder sizeInGB(Double sizeInGB) {
            return sizeInGB(Output.of(sizeInGB));
        }

        /**
         * @param storageType Storage type
         * 
         * @return builder
         * 
         */
        public Builder storageType(Output<DiskStorageType> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType Storage type
         * 
         * @return builder
         * 
         */
        public Builder storageType(DiskStorageType storageType) {
            return storageType(Output.of(storageType));
        }

        public DiskInfoArgs build() {
            $.storageType = Objects.requireNonNull($.storageType, "expected parameter 'storageType' to be non-null");
            return $;
        }
    }

}
