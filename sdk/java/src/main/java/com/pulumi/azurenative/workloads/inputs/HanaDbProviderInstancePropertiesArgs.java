// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Gets or sets the provider properties.
 * 
 */
public final class HanaDbProviderInstancePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final HanaDbProviderInstancePropertiesArgs Empty = new HanaDbProviderInstancePropertiesArgs();

    /**
     * Gets or sets the hana database name.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return Gets or sets the hana database name.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    /**
     * Gets or sets the database password.
     * 
     */
    @Import(name="dbPassword")
    private @Nullable Output<String> dbPassword;

    /**
     * @return Gets or sets the database password.
     * 
     */
    public Optional<Output<String>> dbPassword() {
        return Optional.ofNullable(this.dbPassword);
    }

    /**
     * Gets or sets the key vault URI to secret with the database password.
     * 
     */
    @Import(name="dbPasswordUri")
    private @Nullable Output<String> dbPasswordUri;

    /**
     * @return Gets or sets the key vault URI to secret with the database password.
     * 
     */
    public Optional<Output<String>> dbPasswordUri() {
        return Optional.ofNullable(this.dbPasswordUri);
    }

    /**
     * Gets or sets the blob URI to SSL certificate for the DB.
     * 
     */
    @Import(name="dbSslCertificateUri")
    private @Nullable Output<String> dbSslCertificateUri;

    /**
     * @return Gets or sets the blob URI to SSL certificate for the DB.
     * 
     */
    public Optional<Output<String>> dbSslCertificateUri() {
        return Optional.ofNullable(this.dbSslCertificateUri);
    }

    /**
     * Gets or sets the database user name.
     * 
     */
    @Import(name="dbUsername")
    private @Nullable Output<String> dbUsername;

    /**
     * @return Gets or sets the database user name.
     * 
     */
    public Optional<Output<String>> dbUsername() {
        return Optional.ofNullable(this.dbUsername);
    }

    /**
     * Gets or sets the target virtual machine size.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Gets or sets the target virtual machine size.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Gets or sets the database instance number.
     * 
     */
    @Import(name="instanceNumber")
    private @Nullable Output<String> instanceNumber;

    /**
     * @return Gets or sets the database instance number.
     * 
     */
    public Optional<Output<String>> instanceNumber() {
        return Optional.ofNullable(this.instanceNumber);
    }

    /**
     * The provider type. For example, the value can be SapHana.
     * Expected value is &#39;SapHana&#39;.
     * 
     */
    @Import(name="providerType", required=true)
    private Output<String> providerType;

    /**
     * @return The provider type. For example, the value can be SapHana.
     * Expected value is &#39;SapHana&#39;.
     * 
     */
    public Output<String> providerType() {
        return this.providerType;
    }

    /**
     * Gets or sets the database sql port.
     * 
     */
    @Import(name="sqlPort")
    private @Nullable Output<String> sqlPort;

    /**
     * @return Gets or sets the database sql port.
     * 
     */
    public Optional<Output<String>> sqlPort() {
        return Optional.ofNullable(this.sqlPort);
    }

    /**
     * Gets or sets the hostname(s) in the SSL certificate.
     * 
     */
    @Import(name="sslHostNameInCertificate")
    private @Nullable Output<String> sslHostNameInCertificate;

    /**
     * @return Gets or sets the hostname(s) in the SSL certificate.
     * 
     */
    public Optional<Output<String>> sslHostNameInCertificate() {
        return Optional.ofNullable(this.sslHostNameInCertificate);
    }

    private HanaDbProviderInstancePropertiesArgs() {}

    private HanaDbProviderInstancePropertiesArgs(HanaDbProviderInstancePropertiesArgs $) {
        this.dbName = $.dbName;
        this.dbPassword = $.dbPassword;
        this.dbPasswordUri = $.dbPasswordUri;
        this.dbSslCertificateUri = $.dbSslCertificateUri;
        this.dbUsername = $.dbUsername;
        this.hostname = $.hostname;
        this.instanceNumber = $.instanceNumber;
        this.providerType = $.providerType;
        this.sqlPort = $.sqlPort;
        this.sslHostNameInCertificate = $.sslHostNameInCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HanaDbProviderInstancePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HanaDbProviderInstancePropertiesArgs $;

        public Builder() {
            $ = new HanaDbProviderInstancePropertiesArgs();
        }

        public Builder(HanaDbProviderInstancePropertiesArgs defaults) {
            $ = new HanaDbProviderInstancePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbName Gets or sets the hana database name.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName Gets or sets the hana database name.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param dbPassword Gets or sets the database password.
         * 
         * @return builder
         * 
         */
        public Builder dbPassword(@Nullable Output<String> dbPassword) {
            $.dbPassword = dbPassword;
            return this;
        }

        /**
         * @param dbPassword Gets or sets the database password.
         * 
         * @return builder
         * 
         */
        public Builder dbPassword(String dbPassword) {
            return dbPassword(Output.of(dbPassword));
        }

        /**
         * @param dbPasswordUri Gets or sets the key vault URI to secret with the database password.
         * 
         * @return builder
         * 
         */
        public Builder dbPasswordUri(@Nullable Output<String> dbPasswordUri) {
            $.dbPasswordUri = dbPasswordUri;
            return this;
        }

        /**
         * @param dbPasswordUri Gets or sets the key vault URI to secret with the database password.
         * 
         * @return builder
         * 
         */
        public Builder dbPasswordUri(String dbPasswordUri) {
            return dbPasswordUri(Output.of(dbPasswordUri));
        }

        /**
         * @param dbSslCertificateUri Gets or sets the blob URI to SSL certificate for the DB.
         * 
         * @return builder
         * 
         */
        public Builder dbSslCertificateUri(@Nullable Output<String> dbSslCertificateUri) {
            $.dbSslCertificateUri = dbSslCertificateUri;
            return this;
        }

        /**
         * @param dbSslCertificateUri Gets or sets the blob URI to SSL certificate for the DB.
         * 
         * @return builder
         * 
         */
        public Builder dbSslCertificateUri(String dbSslCertificateUri) {
            return dbSslCertificateUri(Output.of(dbSslCertificateUri));
        }

        /**
         * @param dbUsername Gets or sets the database user name.
         * 
         * @return builder
         * 
         */
        public Builder dbUsername(@Nullable Output<String> dbUsername) {
            $.dbUsername = dbUsername;
            return this;
        }

        /**
         * @param dbUsername Gets or sets the database user name.
         * 
         * @return builder
         * 
         */
        public Builder dbUsername(String dbUsername) {
            return dbUsername(Output.of(dbUsername));
        }

        /**
         * @param hostname Gets or sets the target virtual machine size.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Gets or sets the target virtual machine size.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param instanceNumber Gets or sets the database instance number.
         * 
         * @return builder
         * 
         */
        public Builder instanceNumber(@Nullable Output<String> instanceNumber) {
            $.instanceNumber = instanceNumber;
            return this;
        }

        /**
         * @param instanceNumber Gets or sets the database instance number.
         * 
         * @return builder
         * 
         */
        public Builder instanceNumber(String instanceNumber) {
            return instanceNumber(Output.of(instanceNumber));
        }

        /**
         * @param providerType The provider type. For example, the value can be SapHana.
         * Expected value is &#39;SapHana&#39;.
         * 
         * @return builder
         * 
         */
        public Builder providerType(Output<String> providerType) {
            $.providerType = providerType;
            return this;
        }

        /**
         * @param providerType The provider type. For example, the value can be SapHana.
         * Expected value is &#39;SapHana&#39;.
         * 
         * @return builder
         * 
         */
        public Builder providerType(String providerType) {
            return providerType(Output.of(providerType));
        }

        /**
         * @param sqlPort Gets or sets the database sql port.
         * 
         * @return builder
         * 
         */
        public Builder sqlPort(@Nullable Output<String> sqlPort) {
            $.sqlPort = sqlPort;
            return this;
        }

        /**
         * @param sqlPort Gets or sets the database sql port.
         * 
         * @return builder
         * 
         */
        public Builder sqlPort(String sqlPort) {
            return sqlPort(Output.of(sqlPort));
        }

        /**
         * @param sslHostNameInCertificate Gets or sets the hostname(s) in the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslHostNameInCertificate(@Nullable Output<String> sslHostNameInCertificate) {
            $.sslHostNameInCertificate = sslHostNameInCertificate;
            return this;
        }

        /**
         * @param sslHostNameInCertificate Gets or sets the hostname(s) in the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslHostNameInCertificate(String sslHostNameInCertificate) {
            return sslHostNameInCertificate(Output.of(sslHostNameInCertificate));
        }

        public HanaDbProviderInstancePropertiesArgs build() {
            $.providerType = Codegen.stringProp("providerType").output().arg($.providerType).require();
            return $;
        }
    }

}
