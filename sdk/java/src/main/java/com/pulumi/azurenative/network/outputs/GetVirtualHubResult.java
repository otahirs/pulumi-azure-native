// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.VirtualHubRouteTableResponse;
import com.pulumi.azurenative.network.outputs.VirtualHubRouteTableV2Response;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualHubResult {
    /**
     * @return Address-prefix for this VirtualHub.
     * 
     */
    private @Nullable String addressPrefix;
    /**
     * @return Flag to control transit for VirtualRouter hub.
     * 
     */
    private @Nullable Boolean allowBranchToBranchTraffic;
    /**
     * @return The azureFirewall associated with this VirtualHub.
     * 
     */
    private @Nullable SubResourceResponse azureFirewall;
    /**
     * @return List of references to Bgp Connections.
     * 
     */
    private List<SubResourceResponse> bgpConnections;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return The expressRouteGateway associated with this VirtualHub.
     * 
     */
    private @Nullable SubResourceResponse expressRouteGateway;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return List of references to IpConfigurations.
     * 
     */
    private List<SubResourceResponse> ipConfigurations;
    /**
     * @return Resource location.
     * 
     */
    private String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The P2SVpnGateway associated with this VirtualHub.
     * 
     */
    private @Nullable SubResourceResponse p2SVpnGateway;
    /**
     * @return The provisioning state of the virtual hub resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The routeTable associated with this virtual hub.
     * 
     */
    private @Nullable VirtualHubRouteTableResponse routeTable;
    /**
     * @return The routing state.
     * 
     */
    private String routingState;
    /**
     * @return The securityPartnerProvider associated with this VirtualHub.
     * 
     */
    private @Nullable SubResourceResponse securityPartnerProvider;
    /**
     * @return The Security Provider name.
     * 
     */
    private @Nullable String securityProviderName;
    /**
     * @return The sku of this VirtualHub.
     * 
     */
    private @Nullable String sku;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return List of all virtual hub route table v2s associated with this VirtualHub.
     * 
     */
    private @Nullable List<VirtualHubRouteTableV2Response> virtualHubRouteTableV2s;
    /**
     * @return VirtualRouter ASN.
     * 
     */
    private @Nullable Double virtualRouterAsn;
    /**
     * @return VirtualRouter IPs.
     * 
     */
    private @Nullable List<String> virtualRouterIps;
    /**
     * @return The VirtualWAN to which the VirtualHub belongs.
     * 
     */
    private @Nullable SubResourceResponse virtualWan;
    /**
     * @return The VpnGateway associated with this VirtualHub.
     * 
     */
    private @Nullable SubResourceResponse vpnGateway;

    private GetVirtualHubResult() {}
    /**
     * @return Address-prefix for this VirtualHub.
     * 
     */
    public Optional<String> addressPrefix() {
        return Optional.ofNullable(this.addressPrefix);
    }
    /**
     * @return Flag to control transit for VirtualRouter hub.
     * 
     */
    public Optional<Boolean> allowBranchToBranchTraffic() {
        return Optional.ofNullable(this.allowBranchToBranchTraffic);
    }
    /**
     * @return The azureFirewall associated with this VirtualHub.
     * 
     */
    public Optional<SubResourceResponse> azureFirewall() {
        return Optional.ofNullable(this.azureFirewall);
    }
    /**
     * @return List of references to Bgp Connections.
     * 
     */
    public List<SubResourceResponse> bgpConnections() {
        return this.bgpConnections;
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The expressRouteGateway associated with this VirtualHub.
     * 
     */
    public Optional<SubResourceResponse> expressRouteGateway() {
        return Optional.ofNullable(this.expressRouteGateway);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return List of references to IpConfigurations.
     * 
     */
    public List<SubResourceResponse> ipConfigurations() {
        return this.ipConfigurations;
    }
    /**
     * @return Resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The P2SVpnGateway associated with this VirtualHub.
     * 
     */
    public Optional<SubResourceResponse> p2SVpnGateway() {
        return Optional.ofNullable(this.p2SVpnGateway);
    }
    /**
     * @return The provisioning state of the virtual hub resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The routeTable associated with this virtual hub.
     * 
     */
    public Optional<VirtualHubRouteTableResponse> routeTable() {
        return Optional.ofNullable(this.routeTable);
    }
    /**
     * @return The routing state.
     * 
     */
    public String routingState() {
        return this.routingState;
    }
    /**
     * @return The securityPartnerProvider associated with this VirtualHub.
     * 
     */
    public Optional<SubResourceResponse> securityPartnerProvider() {
        return Optional.ofNullable(this.securityPartnerProvider);
    }
    /**
     * @return The Security Provider name.
     * 
     */
    public Optional<String> securityProviderName() {
        return Optional.ofNullable(this.securityProviderName);
    }
    /**
     * @return The sku of this VirtualHub.
     * 
     */
    public Optional<String> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return List of all virtual hub route table v2s associated with this VirtualHub.
     * 
     */
    public List<VirtualHubRouteTableV2Response> virtualHubRouteTableV2s() {
        return this.virtualHubRouteTableV2s == null ? List.of() : this.virtualHubRouteTableV2s;
    }
    /**
     * @return VirtualRouter ASN.
     * 
     */
    public Optional<Double> virtualRouterAsn() {
        return Optional.ofNullable(this.virtualRouterAsn);
    }
    /**
     * @return VirtualRouter IPs.
     * 
     */
    public List<String> virtualRouterIps() {
        return this.virtualRouterIps == null ? List.of() : this.virtualRouterIps;
    }
    /**
     * @return The VirtualWAN to which the VirtualHub belongs.
     * 
     */
    public Optional<SubResourceResponse> virtualWan() {
        return Optional.ofNullable(this.virtualWan);
    }
    /**
     * @return The VpnGateway associated with this VirtualHub.
     * 
     */
    public Optional<SubResourceResponse> vpnGateway() {
        return Optional.ofNullable(this.vpnGateway);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualHubResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String addressPrefix;
        private @Nullable Boolean allowBranchToBranchTraffic;
        private @Nullable SubResourceResponse azureFirewall;
        private List<SubResourceResponse> bgpConnections;
        private String etag;
        private @Nullable SubResourceResponse expressRouteGateway;
        private @Nullable String id;
        private List<SubResourceResponse> ipConfigurations;
        private String location;
        private String name;
        private @Nullable SubResourceResponse p2SVpnGateway;
        private String provisioningState;
        private @Nullable VirtualHubRouteTableResponse routeTable;
        private String routingState;
        private @Nullable SubResourceResponse securityPartnerProvider;
        private @Nullable String securityProviderName;
        private @Nullable String sku;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<VirtualHubRouteTableV2Response> virtualHubRouteTableV2s;
        private @Nullable Double virtualRouterAsn;
        private @Nullable List<String> virtualRouterIps;
        private @Nullable SubResourceResponse virtualWan;
        private @Nullable SubResourceResponse vpnGateway;
        public Builder() {}
        public Builder(GetVirtualHubResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPrefix = defaults.addressPrefix;
    	      this.allowBranchToBranchTraffic = defaults.allowBranchToBranchTraffic;
    	      this.azureFirewall = defaults.azureFirewall;
    	      this.bgpConnections = defaults.bgpConnections;
    	      this.etag = defaults.etag;
    	      this.expressRouteGateway = defaults.expressRouteGateway;
    	      this.id = defaults.id;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.p2SVpnGateway = defaults.p2SVpnGateway;
    	      this.provisioningState = defaults.provisioningState;
    	      this.routeTable = defaults.routeTable;
    	      this.routingState = defaults.routingState;
    	      this.securityPartnerProvider = defaults.securityPartnerProvider;
    	      this.securityProviderName = defaults.securityProviderName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualHubRouteTableV2s = defaults.virtualHubRouteTableV2s;
    	      this.virtualRouterAsn = defaults.virtualRouterAsn;
    	      this.virtualRouterIps = defaults.virtualRouterIps;
    	      this.virtualWan = defaults.virtualWan;
    	      this.vpnGateway = defaults.vpnGateway;
        }

        @CustomType.Setter
        public Builder addressPrefix(@Nullable String addressPrefix) {
            this.addressPrefix = addressPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder allowBranchToBranchTraffic(@Nullable Boolean allowBranchToBranchTraffic) {
            this.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder azureFirewall(@Nullable SubResourceResponse azureFirewall) {
            this.azureFirewall = azureFirewall;
            return this;
        }
        @CustomType.Setter
        public Builder bgpConnections(List<SubResourceResponse> bgpConnections) {
            this.bgpConnections = Objects.requireNonNull(bgpConnections);
            return this;
        }
        public Builder bgpConnections(SubResourceResponse... bgpConnections) {
            return bgpConnections(List.of(bgpConnections));
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder expressRouteGateway(@Nullable SubResourceResponse expressRouteGateway) {
            this.expressRouteGateway = expressRouteGateway;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipConfigurations(List<SubResourceResponse> ipConfigurations) {
            this.ipConfigurations = Objects.requireNonNull(ipConfigurations);
            return this;
        }
        public Builder ipConfigurations(SubResourceResponse... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder p2SVpnGateway(@Nullable SubResourceResponse p2SVpnGateway) {
            this.p2SVpnGateway = p2SVpnGateway;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder routeTable(@Nullable VirtualHubRouteTableResponse routeTable) {
            this.routeTable = routeTable;
            return this;
        }
        @CustomType.Setter
        public Builder routingState(String routingState) {
            this.routingState = Objects.requireNonNull(routingState);
            return this;
        }
        @CustomType.Setter
        public Builder securityPartnerProvider(@Nullable SubResourceResponse securityPartnerProvider) {
            this.securityPartnerProvider = securityPartnerProvider;
            return this;
        }
        @CustomType.Setter
        public Builder securityProviderName(@Nullable String securityProviderName) {
            this.securityProviderName = securityProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable String sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualHubRouteTableV2s(@Nullable List<VirtualHubRouteTableV2Response> virtualHubRouteTableV2s) {
            this.virtualHubRouteTableV2s = virtualHubRouteTableV2s;
            return this;
        }
        public Builder virtualHubRouteTableV2s(VirtualHubRouteTableV2Response... virtualHubRouteTableV2s) {
            return virtualHubRouteTableV2s(List.of(virtualHubRouteTableV2s));
        }
        @CustomType.Setter
        public Builder virtualRouterAsn(@Nullable Double virtualRouterAsn) {
            this.virtualRouterAsn = virtualRouterAsn;
            return this;
        }
        @CustomType.Setter
        public Builder virtualRouterIps(@Nullable List<String> virtualRouterIps) {
            this.virtualRouterIps = virtualRouterIps;
            return this;
        }
        public Builder virtualRouterIps(String... virtualRouterIps) {
            return virtualRouterIps(List.of(virtualRouterIps));
        }
        @CustomType.Setter
        public Builder virtualWan(@Nullable SubResourceResponse virtualWan) {
            this.virtualWan = virtualWan;
            return this;
        }
        @CustomType.Setter
        public Builder vpnGateway(@Nullable SubResourceResponse vpnGateway) {
            this.vpnGateway = vpnGateway;
            return this;
        }
        public GetVirtualHubResult build() {
            final var o = new GetVirtualHubResult();
            o.addressPrefix = addressPrefix;
            o.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            o.azureFirewall = azureFirewall;
            o.bgpConnections = bgpConnections;
            o.etag = etag;
            o.expressRouteGateway = expressRouteGateway;
            o.id = id;
            o.ipConfigurations = ipConfigurations;
            o.location = location;
            o.name = name;
            o.p2SVpnGateway = p2SVpnGateway;
            o.provisioningState = provisioningState;
            o.routeTable = routeTable;
            o.routingState = routingState;
            o.securityPartnerProvider = securityPartnerProvider;
            o.securityProviderName = securityProviderName;
            o.sku = sku;
            o.tags = tags;
            o.type = type;
            o.virtualHubRouteTableV2s = virtualHubRouteTableV2s;
            o.virtualRouterAsn = virtualRouterAsn;
            o.virtualRouterIps = virtualRouterIps;
            o.virtualWan = virtualWan;
            o.vpnGateway = vpnGateway;
            return o;
        }
    }
}
