// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.LiveEventEndpointResponse;
import com.pulumi.azurenative.media.outputs.LiveEventPreviewAccessControlResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LiveEventPreviewResponse {
    /**
     * @return The access control for live event preview.
     * 
     */
    private @Nullable LiveEventPreviewAccessControlResponse accessControl;
    /**
     * @return An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
     * 
     */
    private @Nullable String alternativeMediaId;
    /**
     * @return The endpoints for preview. Do not share the preview URL with the live event audience.
     * 
     */
    private @Nullable List<LiveEventEndpointResponse> endpoints;
    /**
     * @return The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
     * 
     */
    private @Nullable String previewLocator;
    /**
     * @return The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
     * 
     */
    private @Nullable String streamingPolicyName;

    private LiveEventPreviewResponse() {}
    /**
     * @return The access control for live event preview.
     * 
     */
    public Optional<LiveEventPreviewAccessControlResponse> accessControl() {
        return Optional.ofNullable(this.accessControl);
    }
    /**
     * @return An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
     * 
     */
    public Optional<String> alternativeMediaId() {
        return Optional.ofNullable(this.alternativeMediaId);
    }
    /**
     * @return The endpoints for preview. Do not share the preview URL with the live event audience.
     * 
     */
    public List<LiveEventEndpointResponse> endpoints() {
        return this.endpoints == null ? List.of() : this.endpoints;
    }
    /**
     * @return The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
     * 
     */
    public Optional<String> previewLocator() {
        return Optional.ofNullable(this.previewLocator);
    }
    /**
     * @return The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
     * 
     */
    public Optional<String> streamingPolicyName() {
        return Optional.ofNullable(this.streamingPolicyName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LiveEventPreviewResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable LiveEventPreviewAccessControlResponse accessControl;
        private @Nullable String alternativeMediaId;
        private @Nullable List<LiveEventEndpointResponse> endpoints;
        private @Nullable String previewLocator;
        private @Nullable String streamingPolicyName;
        public Builder() {}
        public Builder(LiveEventPreviewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessControl = defaults.accessControl;
    	      this.alternativeMediaId = defaults.alternativeMediaId;
    	      this.endpoints = defaults.endpoints;
    	      this.previewLocator = defaults.previewLocator;
    	      this.streamingPolicyName = defaults.streamingPolicyName;
        }

        @CustomType.Setter
        public Builder accessControl(@Nullable LiveEventPreviewAccessControlResponse accessControl) {
            this.accessControl = accessControl;
            return this;
        }
        @CustomType.Setter
        public Builder alternativeMediaId(@Nullable String alternativeMediaId) {
            this.alternativeMediaId = alternativeMediaId;
            return this;
        }
        @CustomType.Setter
        public Builder endpoints(@Nullable List<LiveEventEndpointResponse> endpoints) {
            this.endpoints = endpoints;
            return this;
        }
        public Builder endpoints(LiveEventEndpointResponse... endpoints) {
            return endpoints(List.of(endpoints));
        }
        @CustomType.Setter
        public Builder previewLocator(@Nullable String previewLocator) {
            this.previewLocator = previewLocator;
            return this;
        }
        @CustomType.Setter
        public Builder streamingPolicyName(@Nullable String streamingPolicyName) {
            this.streamingPolicyName = streamingPolicyName;
            return this;
        }
        public LiveEventPreviewResponse build() {
            final var o = new LiveEventPreviewResponse();
            o.accessControl = accessControl;
            o.alternativeMediaId = alternativeMediaId;
            o.endpoints = endpoints;
            o.previewLocator = previewLocator;
            o.streamingPolicyName = streamingPolicyName;
            return o;
        }
    }
}
