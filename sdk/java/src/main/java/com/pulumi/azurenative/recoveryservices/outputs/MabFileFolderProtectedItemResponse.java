// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.outputs;

import com.pulumi.azurenative.recoveryservices.outputs.MabFileFolderProtectedItemExtendedInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MabFileFolderProtectedItemResponse {
    /**
     * @return Type of backup management for the backed up item.
     * 
     */
    private @Nullable String backupManagementType;
    /**
     * @return Name of the backup set the backup item belongs to
     * 
     */
    private @Nullable String backupSetName;
    /**
     * @return Name of the computer associated with this backup item.
     * 
     */
    private @Nullable String computerName;
    /**
     * @return Unique name of container
     * 
     */
    private @Nullable String containerName;
    /**
     * @return Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
     * 
     */
    private @Nullable String createMode;
    /**
     * @return Sync time for deferred deletion in UTC
     * 
     */
    private @Nullable Double deferredDeleteSyncTimeInUTC;
    /**
     * @return Time for deferred deletion in UTC
     * 
     */
    private @Nullable String deferredDeleteTimeInUTC;
    /**
     * @return Time remaining before the DS marked for deferred delete is permanently deleted
     * 
     */
    private @Nullable String deferredDeleteTimeRemaining;
    /**
     * @return Additional information with this backup item.
     * 
     */
    private @Nullable MabFileFolderProtectedItemExtendedInfoResponse extendedInfo;
    /**
     * @return Friendly name of this backup item.
     * 
     */
    private @Nullable String friendlyName;
    /**
     * @return Flag to identify whether the deferred deleted DS is to be purged soon
     * 
     */
    private @Nullable Boolean isDeferredDeleteScheduleUpcoming;
    /**
     * @return Flag to identify that deferred deleted DS is to be moved into Pause state
     * 
     */
    private @Nullable Boolean isRehydrate;
    /**
     * @return Flag to identify whether the DS is scheduled for deferred delete
     * 
     */
    private @Nullable Boolean isScheduledForDeferredDelete;
    /**
     * @return Status of last backup operation.
     * 
     */
    private @Nullable String lastBackupStatus;
    /**
     * @return Timestamp of the last backup operation on this backup item.
     * 
     */
    private @Nullable String lastBackupTime;
    /**
     * @return Timestamp when the last (latest) backup copy was created for this backup item.
     * 
     */
    private @Nullable String lastRecoveryPoint;
    /**
     * @return ID of the backup policy with which this item is backed up.
     * 
     */
    private @Nullable String policyId;
    /**
     * @return backup item type.
     * Expected value is &#39;MabFileFolderProtectedItem&#39;.
     * 
     */
    private String protectedItemType;
    /**
     * @return Protected, ProtectionStopped, IRPending or ProtectionError
     * 
     */
    private @Nullable String protectionState;
    /**
     * @return ARM ID of the resource to be backed up.
     * 
     */
    private @Nullable String sourceResourceId;
    /**
     * @return Type of workload this item represents.
     * 
     */
    private @Nullable String workloadType;

    private MabFileFolderProtectedItemResponse() {}
    /**
     * @return Type of backup management for the backed up item.
     * 
     */
    public Optional<String> backupManagementType() {
        return Optional.ofNullable(this.backupManagementType);
    }
    /**
     * @return Name of the backup set the backup item belongs to
     * 
     */
    public Optional<String> backupSetName() {
        return Optional.ofNullable(this.backupSetName);
    }
    /**
     * @return Name of the computer associated with this backup item.
     * 
     */
    public Optional<String> computerName() {
        return Optional.ofNullable(this.computerName);
    }
    /**
     * @return Unique name of container
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }
    /**
     * @return Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
     * 
     */
    public Optional<String> createMode() {
        return Optional.ofNullable(this.createMode);
    }
    /**
     * @return Sync time for deferred deletion in UTC
     * 
     */
    public Optional<Double> deferredDeleteSyncTimeInUTC() {
        return Optional.ofNullable(this.deferredDeleteSyncTimeInUTC);
    }
    /**
     * @return Time for deferred deletion in UTC
     * 
     */
    public Optional<String> deferredDeleteTimeInUTC() {
        return Optional.ofNullable(this.deferredDeleteTimeInUTC);
    }
    /**
     * @return Time remaining before the DS marked for deferred delete is permanently deleted
     * 
     */
    public Optional<String> deferredDeleteTimeRemaining() {
        return Optional.ofNullable(this.deferredDeleteTimeRemaining);
    }
    /**
     * @return Additional information with this backup item.
     * 
     */
    public Optional<MabFileFolderProtectedItemExtendedInfoResponse> extendedInfo() {
        return Optional.ofNullable(this.extendedInfo);
    }
    /**
     * @return Friendly name of this backup item.
     * 
     */
    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    /**
     * @return Flag to identify whether the deferred deleted DS is to be purged soon
     * 
     */
    public Optional<Boolean> isDeferredDeleteScheduleUpcoming() {
        return Optional.ofNullable(this.isDeferredDeleteScheduleUpcoming);
    }
    /**
     * @return Flag to identify that deferred deleted DS is to be moved into Pause state
     * 
     */
    public Optional<Boolean> isRehydrate() {
        return Optional.ofNullable(this.isRehydrate);
    }
    /**
     * @return Flag to identify whether the DS is scheduled for deferred delete
     * 
     */
    public Optional<Boolean> isScheduledForDeferredDelete() {
        return Optional.ofNullable(this.isScheduledForDeferredDelete);
    }
    /**
     * @return Status of last backup operation.
     * 
     */
    public Optional<String> lastBackupStatus() {
        return Optional.ofNullable(this.lastBackupStatus);
    }
    /**
     * @return Timestamp of the last backup operation on this backup item.
     * 
     */
    public Optional<String> lastBackupTime() {
        return Optional.ofNullable(this.lastBackupTime);
    }
    /**
     * @return Timestamp when the last (latest) backup copy was created for this backup item.
     * 
     */
    public Optional<String> lastRecoveryPoint() {
        return Optional.ofNullable(this.lastRecoveryPoint);
    }
    /**
     * @return ID of the backup policy with which this item is backed up.
     * 
     */
    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }
    /**
     * @return backup item type.
     * Expected value is &#39;MabFileFolderProtectedItem&#39;.
     * 
     */
    public String protectedItemType() {
        return this.protectedItemType;
    }
    /**
     * @return Protected, ProtectionStopped, IRPending or ProtectionError
     * 
     */
    public Optional<String> protectionState() {
        return Optional.ofNullable(this.protectionState);
    }
    /**
     * @return ARM ID of the resource to be backed up.
     * 
     */
    public Optional<String> sourceResourceId() {
        return Optional.ofNullable(this.sourceResourceId);
    }
    /**
     * @return Type of workload this item represents.
     * 
     */
    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MabFileFolderProtectedItemResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backupManagementType;
        private @Nullable String backupSetName;
        private @Nullable String computerName;
        private @Nullable String containerName;
        private @Nullable String createMode;
        private @Nullable Double deferredDeleteSyncTimeInUTC;
        private @Nullable String deferredDeleteTimeInUTC;
        private @Nullable String deferredDeleteTimeRemaining;
        private @Nullable MabFileFolderProtectedItemExtendedInfoResponse extendedInfo;
        private @Nullable String friendlyName;
        private @Nullable Boolean isDeferredDeleteScheduleUpcoming;
        private @Nullable Boolean isRehydrate;
        private @Nullable Boolean isScheduledForDeferredDelete;
        private @Nullable String lastBackupStatus;
        private @Nullable String lastBackupTime;
        private @Nullable String lastRecoveryPoint;
        private @Nullable String policyId;
        private String protectedItemType;
        private @Nullable String protectionState;
        private @Nullable String sourceResourceId;
        private @Nullable String workloadType;
        public Builder() {}
        public Builder(MabFileFolderProtectedItemResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupManagementType = defaults.backupManagementType;
    	      this.backupSetName = defaults.backupSetName;
    	      this.computerName = defaults.computerName;
    	      this.containerName = defaults.containerName;
    	      this.createMode = defaults.createMode;
    	      this.deferredDeleteSyncTimeInUTC = defaults.deferredDeleteSyncTimeInUTC;
    	      this.deferredDeleteTimeInUTC = defaults.deferredDeleteTimeInUTC;
    	      this.deferredDeleteTimeRemaining = defaults.deferredDeleteTimeRemaining;
    	      this.extendedInfo = defaults.extendedInfo;
    	      this.friendlyName = defaults.friendlyName;
    	      this.isDeferredDeleteScheduleUpcoming = defaults.isDeferredDeleteScheduleUpcoming;
    	      this.isRehydrate = defaults.isRehydrate;
    	      this.isScheduledForDeferredDelete = defaults.isScheduledForDeferredDelete;
    	      this.lastBackupStatus = defaults.lastBackupStatus;
    	      this.lastBackupTime = defaults.lastBackupTime;
    	      this.lastRecoveryPoint = defaults.lastRecoveryPoint;
    	      this.policyId = defaults.policyId;
    	      this.protectedItemType = defaults.protectedItemType;
    	      this.protectionState = defaults.protectionState;
    	      this.sourceResourceId = defaults.sourceResourceId;
    	      this.workloadType = defaults.workloadType;
        }

        @CustomType.Setter
        public Builder backupManagementType(@Nullable String backupManagementType) {
            this.backupManagementType = backupManagementType;
            return this;
        }
        @CustomType.Setter
        public Builder backupSetName(@Nullable String backupSetName) {
            this.backupSetName = backupSetName;
            return this;
        }
        @CustomType.Setter
        public Builder computerName(@Nullable String computerName) {
            this.computerName = computerName;
            return this;
        }
        @CustomType.Setter
        public Builder containerName(@Nullable String containerName) {
            this.containerName = containerName;
            return this;
        }
        @CustomType.Setter
        public Builder createMode(@Nullable String createMode) {
            this.createMode = createMode;
            return this;
        }
        @CustomType.Setter
        public Builder deferredDeleteSyncTimeInUTC(@Nullable Double deferredDeleteSyncTimeInUTC) {
            this.deferredDeleteSyncTimeInUTC = deferredDeleteSyncTimeInUTC;
            return this;
        }
        @CustomType.Setter
        public Builder deferredDeleteTimeInUTC(@Nullable String deferredDeleteTimeInUTC) {
            this.deferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            return this;
        }
        @CustomType.Setter
        public Builder deferredDeleteTimeRemaining(@Nullable String deferredDeleteTimeRemaining) {
            this.deferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            return this;
        }
        @CustomType.Setter
        public Builder extendedInfo(@Nullable MabFileFolderProtectedItemExtendedInfoResponse extendedInfo) {
            this.extendedInfo = extendedInfo;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder isDeferredDeleteScheduleUpcoming(@Nullable Boolean isDeferredDeleteScheduleUpcoming) {
            this.isDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            return this;
        }
        @CustomType.Setter
        public Builder isRehydrate(@Nullable Boolean isRehydrate) {
            this.isRehydrate = isRehydrate;
            return this;
        }
        @CustomType.Setter
        public Builder isScheduledForDeferredDelete(@Nullable Boolean isScheduledForDeferredDelete) {
            this.isScheduledForDeferredDelete = isScheduledForDeferredDelete;
            return this;
        }
        @CustomType.Setter
        public Builder lastBackupStatus(@Nullable String lastBackupStatus) {
            this.lastBackupStatus = lastBackupStatus;
            return this;
        }
        @CustomType.Setter
        public Builder lastBackupTime(@Nullable String lastBackupTime) {
            this.lastBackupTime = lastBackupTime;
            return this;
        }
        @CustomType.Setter
        public Builder lastRecoveryPoint(@Nullable String lastRecoveryPoint) {
            this.lastRecoveryPoint = lastRecoveryPoint;
            return this;
        }
        @CustomType.Setter
        public Builder policyId(@Nullable String policyId) {
            this.policyId = policyId;
            return this;
        }
        @CustomType.Setter
        public Builder protectedItemType(String protectedItemType) {
            this.protectedItemType = Objects.requireNonNull(protectedItemType);
            return this;
        }
        @CustomType.Setter
        public Builder protectionState(@Nullable String protectionState) {
            this.protectionState = protectionState;
            return this;
        }
        @CustomType.Setter
        public Builder sourceResourceId(@Nullable String sourceResourceId) {
            this.sourceResourceId = sourceResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder workloadType(@Nullable String workloadType) {
            this.workloadType = workloadType;
            return this;
        }
        public MabFileFolderProtectedItemResponse build() {
            final var o = new MabFileFolderProtectedItemResponse();
            o.backupManagementType = backupManagementType;
            o.backupSetName = backupSetName;
            o.computerName = computerName;
            o.containerName = containerName;
            o.createMode = createMode;
            o.deferredDeleteSyncTimeInUTC = deferredDeleteSyncTimeInUTC;
            o.deferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            o.deferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            o.extendedInfo = extendedInfo;
            o.friendlyName = friendlyName;
            o.isDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            o.isRehydrate = isRehydrate;
            o.isScheduledForDeferredDelete = isScheduledForDeferredDelete;
            o.lastBackupStatus = lastBackupStatus;
            o.lastBackupTime = lastBackupTime;
            o.lastRecoveryPoint = lastRecoveryPoint;
            o.policyId = policyId;
            o.protectedItemType = protectedItemType;
            o.protectionState = protectionState;
            o.sourceResourceId = sourceResourceId;
            o.workloadType = workloadType;
            return o;
        }
    }
}
