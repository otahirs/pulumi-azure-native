// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.outputs;

import com.pulumi.azurenative.labservices.outputs.LatestOperationResultResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLabResult {
    /**
     * @return Object id of the user that created the lab.
     * 
     */
    private String createdByObjectId;
    /**
     * @return Lab creator name
     * 
     */
    private String createdByUserPrincipalName;
    /**
     * @return Creation date for the lab
     * 
     */
    private String createdDate;
    /**
     * @return The identifier of the resource.
     * 
     */
    private String id;
    /**
     * @return Invitation code that users can use to join a lab.
     * 
     */
    private String invitationCode;
    /**
     * @return The details of the latest operation. ex: status, error
     * 
     */
    private LatestOperationResultResponse latestOperationResult;
    /**
     * @return The location of the resource.
     * 
     */
    private @Nullable String location;
    /**
     * @return Maximum number of users allowed in the lab.
     * 
     */
    private @Nullable Integer maxUsersInLab;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The provisioning status of the resource.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    private @Nullable String uniqueIdentifier;
    /**
     * @return Maximum duration a user can use an environment for in the lab.
     * 
     */
    private @Nullable String usageQuota;
    /**
     * @return Lab user access mode (open to all vs. restricted to those listed on the lab).
     * 
     */
    private @Nullable String userAccessMode;
    /**
     * @return Maximum value MaxUsersInLab can be set to, as specified by the service
     * 
     */
    private Integer userQuota;

    private GetLabResult() {}
    /**
     * @return Object id of the user that created the lab.
     * 
     */
    public String createdByObjectId() {
        return this.createdByObjectId;
    }
    /**
     * @return Lab creator name
     * 
     */
    public String createdByUserPrincipalName() {
        return this.createdByUserPrincipalName;
    }
    /**
     * @return Creation date for the lab
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Invitation code that users can use to join a lab.
     * 
     */
    public String invitationCode() {
        return this.invitationCode;
    }
    /**
     * @return The details of the latest operation. ex: status, error
     * 
     */
    public LatestOperationResultResponse latestOperationResult() {
        return this.latestOperationResult;
    }
    /**
     * @return The location of the resource.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Maximum number of users allowed in the lab.
     * 
     */
    public Optional<Integer> maxUsersInLab() {
        return Optional.ofNullable(this.maxUsersInLab);
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning status of the resource.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public Optional<String> uniqueIdentifier() {
        return Optional.ofNullable(this.uniqueIdentifier);
    }
    /**
     * @return Maximum duration a user can use an environment for in the lab.
     * 
     */
    public Optional<String> usageQuota() {
        return Optional.ofNullable(this.usageQuota);
    }
    /**
     * @return Lab user access mode (open to all vs. restricted to those listed on the lab).
     * 
     */
    public Optional<String> userAccessMode() {
        return Optional.ofNullable(this.userAccessMode);
    }
    /**
     * @return Maximum value MaxUsersInLab can be set to, as specified by the service
     * 
     */
    public Integer userQuota() {
        return this.userQuota;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLabResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdByObjectId;
        private String createdByUserPrincipalName;
        private String createdDate;
        private String id;
        private String invitationCode;
        private LatestOperationResultResponse latestOperationResult;
        private @Nullable String location;
        private @Nullable Integer maxUsersInLab;
        private String name;
        private @Nullable String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable String uniqueIdentifier;
        private @Nullable String usageQuota;
        private @Nullable String userAccessMode;
        private Integer userQuota;
        public Builder() {}
        public Builder(GetLabResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdByObjectId = defaults.createdByObjectId;
    	      this.createdByUserPrincipalName = defaults.createdByUserPrincipalName;
    	      this.createdDate = defaults.createdDate;
    	      this.id = defaults.id;
    	      this.invitationCode = defaults.invitationCode;
    	      this.latestOperationResult = defaults.latestOperationResult;
    	      this.location = defaults.location;
    	      this.maxUsersInLab = defaults.maxUsersInLab;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
    	      this.usageQuota = defaults.usageQuota;
    	      this.userAccessMode = defaults.userAccessMode;
    	      this.userQuota = defaults.userQuota;
        }

        @CustomType.Setter
        public Builder createdByObjectId(String createdByObjectId) {
            this.createdByObjectId = Objects.requireNonNull(createdByObjectId);
            return this;
        }
        @CustomType.Setter
        public Builder createdByUserPrincipalName(String createdByUserPrincipalName) {
            this.createdByUserPrincipalName = Objects.requireNonNull(createdByUserPrincipalName);
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder invitationCode(String invitationCode) {
            this.invitationCode = Objects.requireNonNull(invitationCode);
            return this;
        }
        @CustomType.Setter
        public Builder latestOperationResult(LatestOperationResultResponse latestOperationResult) {
            this.latestOperationResult = Objects.requireNonNull(latestOperationResult);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maxUsersInLab(@Nullable Integer maxUsersInLab) {
            this.maxUsersInLab = maxUsersInLab;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueIdentifier(@Nullable String uniqueIdentifier) {
            this.uniqueIdentifier = uniqueIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder usageQuota(@Nullable String usageQuota) {
            this.usageQuota = usageQuota;
            return this;
        }
        @CustomType.Setter
        public Builder userAccessMode(@Nullable String userAccessMode) {
            this.userAccessMode = userAccessMode;
            return this;
        }
        @CustomType.Setter
        public Builder userQuota(Integer userQuota) {
            this.userQuota = Objects.requireNonNull(userQuota);
            return this;
        }
        public GetLabResult build() {
            final var o = new GetLabResult();
            o.createdByObjectId = createdByObjectId;
            o.createdByUserPrincipalName = createdByUserPrincipalName;
            o.createdDate = createdDate;
            o.id = id;
            o.invitationCode = invitationCode;
            o.latestOperationResult = latestOperationResult;
            o.location = location;
            o.maxUsersInLab = maxUsersInLab;
            o.name = name;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.uniqueIdentifier = uniqueIdentifier;
            o.usageQuota = usageQuota;
            o.userAccessMode = userAccessMode;
            o.userQuota = userQuota;
            return o;
        }
    }
}
