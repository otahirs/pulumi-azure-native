// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.enums.SAPDatabaseType;
import com.pulumi.azurenative.workloads.enums.SAPDeploymentType;
import com.pulumi.azurenative.workloads.enums.SAPEnvironmentType;
import com.pulumi.azurenative.workloads.enums.SAPProductType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetSAPDiskConfigurationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSAPDiskConfigurationsArgs Empty = new GetSAPDiskConfigurationsArgs();

    /**
     * The geo-location where the SAP resources will be created.
     * 
     */
    @Import(name="appLocation", required=true)
    private Output<String> appLocation;

    /**
     * @return The geo-location where the SAP resources will be created.
     * 
     */
    public Output<String> appLocation() {
        return this.appLocation;
    }

    /**
     * The database type. Eg: HANA, DB2, etc
     * 
     */
    @Import(name="databaseType", required=true)
    private Output<Either<String,SAPDatabaseType>> databaseType;

    /**
     * @return The database type. Eg: HANA, DB2, etc
     * 
     */
    public Output<Either<String,SAPDatabaseType>> databaseType() {
        return this.databaseType;
    }

    /**
     * The VM SKU for database instance.
     * 
     */
    @Import(name="dbVmSku", required=true)
    private Output<String> dbVmSku;

    /**
     * @return The VM SKU for database instance.
     * 
     */
    public Output<String> dbVmSku() {
        return this.dbVmSku;
    }

    /**
     * The deployment type. Eg: SingleServer/ThreeTier
     * 
     */
    @Import(name="deploymentType", required=true)
    private Output<Either<String,SAPDeploymentType>> deploymentType;

    /**
     * @return The deployment type. Eg: SingleServer/ThreeTier
     * 
     */
    public Output<Either<String,SAPDeploymentType>> deploymentType() {
        return this.deploymentType;
    }

    /**
     * Defines the environment type - Production/Non Production.
     * 
     */
    @Import(name="environment", required=true)
    private Output<Either<String,SAPEnvironmentType>> environment;

    /**
     * @return Defines the environment type - Production/Non Production.
     * 
     */
    public Output<Either<String,SAPEnvironmentType>> environment() {
        return this.environment;
    }

    /**
     * The name of Azure region.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The name of Azure region.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Defines the SAP Product type.
     * 
     */
    @Import(name="sapProduct", required=true)
    private Output<Either<String,SAPProductType>> sapProduct;

    /**
     * @return Defines the SAP Product type.
     * 
     */
    public Output<Either<String,SAPProductType>> sapProduct() {
        return this.sapProduct;
    }

    private GetSAPDiskConfigurationsArgs() {}

    private GetSAPDiskConfigurationsArgs(GetSAPDiskConfigurationsArgs $) {
        this.appLocation = $.appLocation;
        this.databaseType = $.databaseType;
        this.dbVmSku = $.dbVmSku;
        this.deploymentType = $.deploymentType;
        this.environment = $.environment;
        this.location = $.location;
        this.sapProduct = $.sapProduct;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSAPDiskConfigurationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSAPDiskConfigurationsArgs $;

        public Builder() {
            $ = new GetSAPDiskConfigurationsArgs();
        }

        public Builder(GetSAPDiskConfigurationsArgs defaults) {
            $ = new GetSAPDiskConfigurationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appLocation The geo-location where the SAP resources will be created.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(Output<String> appLocation) {
            $.appLocation = appLocation;
            return this;
        }

        /**
         * @param appLocation The geo-location where the SAP resources will be created.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(String appLocation) {
            return appLocation(Output.of(appLocation));
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Output<Either<String,SAPDatabaseType>> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(Either<String,SAPDatabaseType> databaseType) {
            return databaseType(Output.of(databaseType));
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Either.ofLeft(databaseType));
        }

        /**
         * @param databaseType The database type. Eg: HANA, DB2, etc
         * 
         * @return builder
         * 
         */
        public Builder databaseType(SAPDatabaseType databaseType) {
            return databaseType(Either.ofRight(databaseType));
        }

        /**
         * @param dbVmSku The VM SKU for database instance.
         * 
         * @return builder
         * 
         */
        public Builder dbVmSku(Output<String> dbVmSku) {
            $.dbVmSku = dbVmSku;
            return this;
        }

        /**
         * @param dbVmSku The VM SKU for database instance.
         * 
         * @return builder
         * 
         */
        public Builder dbVmSku(String dbVmSku) {
            return dbVmSku(Output.of(dbVmSku));
        }

        /**
         * @param deploymentType The deployment type. Eg: SingleServer/ThreeTier
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(Output<Either<String,SAPDeploymentType>> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The deployment type. Eg: SingleServer/ThreeTier
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(Either<String,SAPDeploymentType> deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param deploymentType The deployment type. Eg: SingleServer/ThreeTier
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Either.ofLeft(deploymentType));
        }

        /**
         * @param deploymentType The deployment type. Eg: SingleServer/ThreeTier
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(SAPDeploymentType deploymentType) {
            return deploymentType(Either.ofRight(deploymentType));
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<Either<String,SAPEnvironmentType>> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(Either<String,SAPEnvironmentType> environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Either.ofLeft(environment));
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(SAPEnvironmentType environment) {
            return environment(Either.ofRight(environment));
        }

        /**
         * @param location The name of Azure region.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of Azure region.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(Output<Either<String,SAPProductType>> sapProduct) {
            $.sapProduct = sapProduct;
            return this;
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(Either<String,SAPProductType> sapProduct) {
            return sapProduct(Output.of(sapProduct));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(String sapProduct) {
            return sapProduct(Either.ofLeft(sapProduct));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(SAPProductType sapProduct) {
            return sapProduct(Either.ofRight(sapProduct));
        }

        public GetSAPDiskConfigurationsArgs build() {
            $.appLocation = Objects.requireNonNull($.appLocation, "expected parameter 'appLocation' to be non-null");
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            $.dbVmSku = Objects.requireNonNull($.dbVmSku, "expected parameter 'dbVmSku' to be non-null");
            $.deploymentType = Objects.requireNonNull($.deploymentType, "expected parameter 'deploymentType' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.sapProduct = Objects.requireNonNull($.sapProduct, "expected parameter 'sapProduct' to be non-null");
            return $;
        }
    }

}
