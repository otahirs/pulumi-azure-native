// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration.outputs;

import com.pulumi.azurenative.kubernetesconfiguration.outputs.RepositoryRefDefinitionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitRepositoryDefinitionResponse {
    /**
     * @return Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     * 
     */
    private @Nullable String httpsCAFile;
    /**
     * @return Base64-encoded HTTPS username used to access private git repositories over HTTPS
     * 
     */
    private @Nullable String httpsUser;
    /**
     * @return Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    private @Nullable String localAuthRef;
    /**
     * @return The source reference for the GitRepository object.
     * 
     */
    private @Nullable RepositoryRefDefinitionResponse repositoryRef;
    /**
     * @return Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     * 
     */
    private @Nullable String sshKnownHosts;
    /**
     * @return The interval at which to re-reconcile the cluster git repository source with the remote.
     * 
     */
    private @Nullable Double syncIntervalInSeconds;
    /**
     * @return The maximum time to attempt to reconcile the cluster git repository source with the remote.
     * 
     */
    private @Nullable Double timeoutInSeconds;
    /**
     * @return The URL to sync for the flux configuration git repository.
     * 
     */
    private @Nullable String url;

    private GitRepositoryDefinitionResponse() {}
    /**
     * @return Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     * 
     */
    public Optional<String> httpsCAFile() {
        return Optional.ofNullable(this.httpsCAFile);
    }
    /**
     * @return Base64-encoded HTTPS username used to access private git repositories over HTTPS
     * 
     */
    public Optional<String> httpsUser() {
        return Optional.ofNullable(this.httpsUser);
    }
    /**
     * @return Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    public Optional<String> localAuthRef() {
        return Optional.ofNullable(this.localAuthRef);
    }
    /**
     * @return The source reference for the GitRepository object.
     * 
     */
    public Optional<RepositoryRefDefinitionResponse> repositoryRef() {
        return Optional.ofNullable(this.repositoryRef);
    }
    /**
     * @return Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     * 
     */
    public Optional<String> sshKnownHosts() {
        return Optional.ofNullable(this.sshKnownHosts);
    }
    /**
     * @return The interval at which to re-reconcile the cluster git repository source with the remote.
     * 
     */
    public Optional<Double> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }
    /**
     * @return The maximum time to attempt to reconcile the cluster git repository source with the remote.
     * 
     */
    public Optional<Double> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }
    /**
     * @return The URL to sync for the flux configuration git repository.
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitRepositoryDefinitionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String httpsCAFile;
        private @Nullable String httpsUser;
        private @Nullable String localAuthRef;
        private @Nullable RepositoryRefDefinitionResponse repositoryRef;
        private @Nullable String sshKnownHosts;
        private @Nullable Double syncIntervalInSeconds;
        private @Nullable Double timeoutInSeconds;
        private @Nullable String url;
        public Builder() {}
        public Builder(GitRepositoryDefinitionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpsCAFile = defaults.httpsCAFile;
    	      this.httpsUser = defaults.httpsUser;
    	      this.localAuthRef = defaults.localAuthRef;
    	      this.repositoryRef = defaults.repositoryRef;
    	      this.sshKnownHosts = defaults.sshKnownHosts;
    	      this.syncIntervalInSeconds = defaults.syncIntervalInSeconds;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder httpsCAFile(@Nullable String httpsCAFile) {
            this.httpsCAFile = httpsCAFile;
            return this;
        }
        @CustomType.Setter
        public Builder httpsUser(@Nullable String httpsUser) {
            this.httpsUser = httpsUser;
            return this;
        }
        @CustomType.Setter
        public Builder localAuthRef(@Nullable String localAuthRef) {
            this.localAuthRef = localAuthRef;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryRef(@Nullable RepositoryRefDefinitionResponse repositoryRef) {
            this.repositoryRef = repositoryRef;
            return this;
        }
        @CustomType.Setter
        public Builder sshKnownHosts(@Nullable String sshKnownHosts) {
            this.sshKnownHosts = sshKnownHosts;
            return this;
        }
        @CustomType.Setter
        public Builder syncIntervalInSeconds(@Nullable Double syncIntervalInSeconds) {
            this.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(@Nullable Double timeoutInSeconds) {
            this.timeoutInSeconds = timeoutInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }
        public GitRepositoryDefinitionResponse build() {
            final var o = new GitRepositoryDefinitionResponse();
            o.httpsCAFile = httpsCAFile;
            o.httpsUser = httpsUser;
            o.localAuthRef = localAuthRef;
            o.repositoryRef = repositoryRef;
            o.sshKnownHosts = sshKnownHosts;
            o.syncIntervalInSeconds = syncIntervalInSeconds;
            o.timeoutInSeconds = timeoutInSeconds;
            o.url = url;
            return o;
        }
    }
}
