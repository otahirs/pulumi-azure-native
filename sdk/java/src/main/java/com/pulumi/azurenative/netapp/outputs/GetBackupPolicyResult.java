// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.outputs;

import com.pulumi.azurenative.netapp.outputs.VolumeBackupsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBackupPolicyResult {
    /**
     * @return Daily backups count to keep
     * 
     */
    private @Nullable Integer dailyBackupsToKeep;
    /**
     * @return The property to decide policy is enabled or not
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return Resource location
     * 
     */
    private String location;
    /**
     * @return Monthly backups count to keep
     * 
     */
    private @Nullable Integer monthlyBackupsToKeep;
    /**
     * @return Name of backup policy
     * 
     */
    private String name;
    /**
     * @return Azure lifecycle management
     * 
     */
    private String provisioningState;
    /**
     * @return Resource tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type
     * 
     */
    private String type;
    /**
     * @return A list of volumes assigned to this policy
     * 
     */
    private @Nullable List<VolumeBackupsResponse> volumeBackups;
    /**
     * @return Volumes using current backup policy
     * 
     */
    private @Nullable Integer volumesAssigned;
    /**
     * @return Weekly backups count to keep
     * 
     */
    private @Nullable Integer weeklyBackupsToKeep;
    /**
     * @return Yearly backups count to keep
     * 
     */
    private @Nullable Integer yearlyBackupsToKeep;

    private GetBackupPolicyResult() {}
    /**
     * @return Daily backups count to keep
     * 
     */
    public Optional<Integer> dailyBackupsToKeep() {
        return Optional.ofNullable(this.dailyBackupsToKeep);
    }
    /**
     * @return The property to decide policy is enabled or not
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Monthly backups count to keep
     * 
     */
    public Optional<Integer> monthlyBackupsToKeep() {
        return Optional.ofNullable(this.monthlyBackupsToKeep);
    }
    /**
     * @return Name of backup policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Azure lifecycle management
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A list of volumes assigned to this policy
     * 
     */
    public List<VolumeBackupsResponse> volumeBackups() {
        return this.volumeBackups == null ? List.of() : this.volumeBackups;
    }
    /**
     * @return Volumes using current backup policy
     * 
     */
    public Optional<Integer> volumesAssigned() {
        return Optional.ofNullable(this.volumesAssigned);
    }
    /**
     * @return Weekly backups count to keep
     * 
     */
    public Optional<Integer> weeklyBackupsToKeep() {
        return Optional.ofNullable(this.weeklyBackupsToKeep);
    }
    /**
     * @return Yearly backups count to keep
     * 
     */
    public Optional<Integer> yearlyBackupsToKeep() {
        return Optional.ofNullable(this.yearlyBackupsToKeep);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer dailyBackupsToKeep;
        private @Nullable Boolean enabled;
        private String id;
        private String location;
        private @Nullable Integer monthlyBackupsToKeep;
        private String name;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<VolumeBackupsResponse> volumeBackups;
        private @Nullable Integer volumesAssigned;
        private @Nullable Integer weeklyBackupsToKeep;
        private @Nullable Integer yearlyBackupsToKeep;
        public Builder() {}
        public Builder(GetBackupPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dailyBackupsToKeep = defaults.dailyBackupsToKeep;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.monthlyBackupsToKeep = defaults.monthlyBackupsToKeep;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.volumeBackups = defaults.volumeBackups;
    	      this.volumesAssigned = defaults.volumesAssigned;
    	      this.weeklyBackupsToKeep = defaults.weeklyBackupsToKeep;
    	      this.yearlyBackupsToKeep = defaults.yearlyBackupsToKeep;
        }

        @CustomType.Setter
        public Builder dailyBackupsToKeep(@Nullable Integer dailyBackupsToKeep) {
            this.dailyBackupsToKeep = dailyBackupsToKeep;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder monthlyBackupsToKeep(@Nullable Integer monthlyBackupsToKeep) {
            this.monthlyBackupsToKeep = monthlyBackupsToKeep;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder volumeBackups(@Nullable List<VolumeBackupsResponse> volumeBackups) {
            this.volumeBackups = volumeBackups;
            return this;
        }
        public Builder volumeBackups(VolumeBackupsResponse... volumeBackups) {
            return volumeBackups(List.of(volumeBackups));
        }
        @CustomType.Setter
        public Builder volumesAssigned(@Nullable Integer volumesAssigned) {
            this.volumesAssigned = volumesAssigned;
            return this;
        }
        @CustomType.Setter
        public Builder weeklyBackupsToKeep(@Nullable Integer weeklyBackupsToKeep) {
            this.weeklyBackupsToKeep = weeklyBackupsToKeep;
            return this;
        }
        @CustomType.Setter
        public Builder yearlyBackupsToKeep(@Nullable Integer yearlyBackupsToKeep) {
            this.yearlyBackupsToKeep = yearlyBackupsToKeep;
            return this;
        }
        public GetBackupPolicyResult build() {
            final var o = new GetBackupPolicyResult();
            o.dailyBackupsToKeep = dailyBackupsToKeep;
            o.enabled = enabled;
            o.id = id;
            o.location = location;
            o.monthlyBackupsToKeep = monthlyBackupsToKeep;
            o.name = name;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.volumeBackups = volumeBackups;
            o.volumesAssigned = volumesAssigned;
            o.weeklyBackupsToKeep = weeklyBackupsToKeep;
            o.yearlyBackupsToKeep = yearlyBackupsToKeep;
            return o;
        }
    }
}
