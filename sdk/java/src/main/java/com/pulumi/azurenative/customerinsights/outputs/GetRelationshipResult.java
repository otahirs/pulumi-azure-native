// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.outputs;

import com.pulumi.azurenative.customerinsights.outputs.PropertyDefinitionResponse;
import com.pulumi.azurenative.customerinsights.outputs.RelationshipTypeMappingResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRelationshipResult {
    /**
     * @return The Relationship Cardinality.
     * 
     */
    private @Nullable String cardinality;
    /**
     * @return Localized descriptions for the Relationship.
     * 
     */
    private @Nullable Map<String,String> description;
    /**
     * @return Localized display name for the Relationship.
     * 
     */
    private @Nullable Map<String,String> displayName;
    /**
     * @return The expiry date time in UTC.
     * 
     */
    private @Nullable String expiryDateTimeUtc;
    /**
     * @return The properties of the Relationship.
     * 
     */
    private @Nullable List<PropertyDefinitionResponse> fields;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Optional property to be used to map fields in profile to their strong ids in related profile.
     * 
     */
    private @Nullable List<RelationshipTypeMappingResponse> lookupMappings;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Profile type.
     * 
     */
    private String profileType;
    /**
     * @return Provisioning state.
     * 
     */
    private String provisioningState;
    /**
     * @return Related profile being referenced.
     * 
     */
    private String relatedProfileType;
    /**
     * @return The relationship guid id.
     * 
     */
    private String relationshipGuidId;
    /**
     * @return The Relationship name.
     * 
     */
    private String relationshipName;
    /**
     * @return The hub name.
     * 
     */
    private String tenantId;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetRelationshipResult() {}
    /**
     * @return The Relationship Cardinality.
     * 
     */
    public Optional<String> cardinality() {
        return Optional.ofNullable(this.cardinality);
    }
    /**
     * @return Localized descriptions for the Relationship.
     * 
     */
    public Map<String,String> description() {
        return this.description == null ? Map.of() : this.description;
    }
    /**
     * @return Localized display name for the Relationship.
     * 
     */
    public Map<String,String> displayName() {
        return this.displayName == null ? Map.of() : this.displayName;
    }
    /**
     * @return The expiry date time in UTC.
     * 
     */
    public Optional<String> expiryDateTimeUtc() {
        return Optional.ofNullable(this.expiryDateTimeUtc);
    }
    /**
     * @return The properties of the Relationship.
     * 
     */
    public List<PropertyDefinitionResponse> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Optional property to be used to map fields in profile to their strong ids in related profile.
     * 
     */
    public List<RelationshipTypeMappingResponse> lookupMappings() {
        return this.lookupMappings == null ? List.of() : this.lookupMappings;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Profile type.
     * 
     */
    public String profileType() {
        return this.profileType;
    }
    /**
     * @return Provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Related profile being referenced.
     * 
     */
    public String relatedProfileType() {
        return this.relatedProfileType;
    }
    /**
     * @return The relationship guid id.
     * 
     */
    public String relationshipGuidId() {
        return this.relationshipGuidId;
    }
    /**
     * @return The Relationship name.
     * 
     */
    public String relationshipName() {
        return this.relationshipName;
    }
    /**
     * @return The hub name.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRelationshipResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cardinality;
        private @Nullable Map<String,String> description;
        private @Nullable Map<String,String> displayName;
        private @Nullable String expiryDateTimeUtc;
        private @Nullable List<PropertyDefinitionResponse> fields;
        private String id;
        private @Nullable List<RelationshipTypeMappingResponse> lookupMappings;
        private String name;
        private String profileType;
        private String provisioningState;
        private String relatedProfileType;
        private String relationshipGuidId;
        private String relationshipName;
        private String tenantId;
        private String type;
        public Builder() {}
        public Builder(GetRelationshipResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cardinality = defaults.cardinality;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.expiryDateTimeUtc = defaults.expiryDateTimeUtc;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.lookupMappings = defaults.lookupMappings;
    	      this.name = defaults.name;
    	      this.profileType = defaults.profileType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.relatedProfileType = defaults.relatedProfileType;
    	      this.relationshipGuidId = defaults.relationshipGuidId;
    	      this.relationshipName = defaults.relationshipName;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cardinality(@Nullable String cardinality) {
            this.cardinality = cardinality;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable Map<String,String> description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable Map<String,String> displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder expiryDateTimeUtc(@Nullable String expiryDateTimeUtc) {
            this.expiryDateTimeUtc = expiryDateTimeUtc;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<PropertyDefinitionResponse> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(PropertyDefinitionResponse... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lookupMappings(@Nullable List<RelationshipTypeMappingResponse> lookupMappings) {
            this.lookupMappings = lookupMappings;
            return this;
        }
        public Builder lookupMappings(RelationshipTypeMappingResponse... lookupMappings) {
            return lookupMappings(List.of(lookupMappings));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder profileType(String profileType) {
            this.profileType = Objects.requireNonNull(profileType);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder relatedProfileType(String relatedProfileType) {
            this.relatedProfileType = Objects.requireNonNull(relatedProfileType);
            return this;
        }
        @CustomType.Setter
        public Builder relationshipGuidId(String relationshipGuidId) {
            this.relationshipGuidId = Objects.requireNonNull(relationshipGuidId);
            return this;
        }
        @CustomType.Setter
        public Builder relationshipName(String relationshipName) {
            this.relationshipName = Objects.requireNonNull(relationshipName);
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetRelationshipResult build() {
            final var o = new GetRelationshipResult();
            o.cardinality = cardinality;
            o.description = description;
            o.displayName = displayName;
            o.expiryDateTimeUtc = expiryDateTimeUtc;
            o.fields = fields;
            o.id = id;
            o.lookupMappings = lookupMappings;
            o.name = name;
            o.profileType = profileType;
            o.provisioningState = provisioningState;
            o.relatedProfileType = relatedProfileType;
            o.relationshipGuidId = relationshipGuidId;
            o.relationshipName = relationshipName;
            o.tenantId = tenantId;
            o.type = type;
            return o;
        }
    }
}
