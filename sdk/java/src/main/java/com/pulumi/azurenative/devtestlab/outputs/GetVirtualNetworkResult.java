// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.outputs;

import com.pulumi.azurenative.devtestlab.outputs.ExternalSubnetResponse;
import com.pulumi.azurenative.devtestlab.outputs.SubnetOverrideResponse;
import com.pulumi.azurenative.devtestlab.outputs.SubnetResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualNetworkResult {
    /**
     * @return The allowed subnets of the virtual network.
     * 
     */
    private @Nullable List<SubnetResponse> allowedSubnets;
    /**
     * @return The creation date of the virtual network.
     * 
     */
    private String createdDate;
    /**
     * @return The description of the virtual network.
     * 
     */
    private @Nullable String description;
    /**
     * @return The Microsoft.Network resource identifier of the virtual network.
     * 
     */
    private @Nullable String externalProviderResourceId;
    /**
     * @return The external subnet properties.
     * 
     */
    private List<ExternalSubnetResponse> externalSubnets;
    /**
     * @return The identifier of the resource.
     * 
     */
    private String id;
    /**
     * @return The location of the resource.
     * 
     */
    private @Nullable String location;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The provisioning status of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The subnet overrides of the virtual network.
     * 
     */
    private @Nullable List<SubnetOverrideResponse> subnetOverrides;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    private String uniqueIdentifier;

    private GetVirtualNetworkResult() {}
    /**
     * @return The allowed subnets of the virtual network.
     * 
     */
    public List<SubnetResponse> allowedSubnets() {
        return this.allowedSubnets == null ? List.of() : this.allowedSubnets;
    }
    /**
     * @return The creation date of the virtual network.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return The description of the virtual network.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The Microsoft.Network resource identifier of the virtual network.
     * 
     */
    public Optional<String> externalProviderResourceId() {
        return Optional.ofNullable(this.externalProviderResourceId);
    }
    /**
     * @return The external subnet properties.
     * 
     */
    public List<ExternalSubnetResponse> externalSubnets() {
        return this.externalSubnets;
    }
    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the resource.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning status of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The subnet overrides of the virtual network.
     * 
     */
    public List<SubnetOverrideResponse> subnetOverrides() {
        return this.subnetOverrides == null ? List.of() : this.subnetOverrides;
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<SubnetResponse> allowedSubnets;
        private String createdDate;
        private @Nullable String description;
        private @Nullable String externalProviderResourceId;
        private List<ExternalSubnetResponse> externalSubnets;
        private String id;
        private @Nullable String location;
        private String name;
        private String provisioningState;
        private @Nullable List<SubnetOverrideResponse> subnetOverrides;
        private @Nullable Map<String,String> tags;
        private String type;
        private String uniqueIdentifier;
        public Builder() {}
        public Builder(GetVirtualNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedSubnets = defaults.allowedSubnets;
    	      this.createdDate = defaults.createdDate;
    	      this.description = defaults.description;
    	      this.externalProviderResourceId = defaults.externalProviderResourceId;
    	      this.externalSubnets = defaults.externalSubnets;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.subnetOverrides = defaults.subnetOverrides;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        @CustomType.Setter
        public Builder allowedSubnets(@Nullable List<SubnetResponse> allowedSubnets) {
            this.allowedSubnets = allowedSubnets;
            return this;
        }
        public Builder allowedSubnets(SubnetResponse... allowedSubnets) {
            return allowedSubnets(List.of(allowedSubnets));
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder externalProviderResourceId(@Nullable String externalProviderResourceId) {
            this.externalProviderResourceId = externalProviderResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder externalSubnets(List<ExternalSubnetResponse> externalSubnets) {
            this.externalSubnets = Objects.requireNonNull(externalSubnets);
            return this;
        }
        public Builder externalSubnets(ExternalSubnetResponse... externalSubnets) {
            return externalSubnets(List.of(externalSubnets));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder subnetOverrides(@Nullable List<SubnetOverrideResponse> subnetOverrides) {
            this.subnetOverrides = subnetOverrides;
            return this;
        }
        public Builder subnetOverrides(SubnetOverrideResponse... subnetOverrides) {
            return subnetOverrides(List.of(subnetOverrides));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            this.uniqueIdentifier = Objects.requireNonNull(uniqueIdentifier);
            return this;
        }
        public GetVirtualNetworkResult build() {
            final var o = new GetVirtualNetworkResult();
            o.allowedSubnets = allowedSubnets;
            o.createdDate = createdDate;
            o.description = description;
            o.externalProviderResourceId = externalProviderResourceId;
            o.externalSubnets = externalSubnets;
            o.id = id;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.subnetOverrides = subnetOverrides;
            o.tags = tags;
            o.type = type;
            o.uniqueIdentifier = uniqueIdentifier;
            return o;
        }
    }
}
