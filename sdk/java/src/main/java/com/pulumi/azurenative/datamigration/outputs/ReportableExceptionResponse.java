// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportableExceptionResponse {
    /**
     * @return Actionable steps for this exception
     * 
     */
    private @Nullable String actionableMessage;
    /**
     * @return The path to the file where exception occurred
     * 
     */
    private String filePath;
    /**
     * @return Coded numerical value that is assigned to a specific exception
     * 
     */
    private Integer hResult;
    /**
     * @return The line number where exception occurred
     * 
     */
    private String lineNumber;
    /**
     * @return Error message
     * 
     */
    private String message;
    /**
     * @return Stack trace
     * 
     */
    private String stackTrace;

    private ReportableExceptionResponse() {}
    /**
     * @return Actionable steps for this exception
     * 
     */
    public Optional<String> actionableMessage() {
        return Optional.ofNullable(this.actionableMessage);
    }
    /**
     * @return The path to the file where exception occurred
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return Coded numerical value that is assigned to a specific exception
     * 
     */
    public Integer hResult() {
        return this.hResult;
    }
    /**
     * @return The line number where exception occurred
     * 
     */
    public String lineNumber() {
        return this.lineNumber;
    }
    /**
     * @return Error message
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return Stack trace
     * 
     */
    public String stackTrace() {
        return this.stackTrace;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportableExceptionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String actionableMessage;
        private String filePath;
        private Integer hResult;
        private String lineNumber;
        private String message;
        private String stackTrace;
        public Builder() {}
        public Builder(ReportableExceptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actionableMessage = defaults.actionableMessage;
    	      this.filePath = defaults.filePath;
    	      this.hResult = defaults.hResult;
    	      this.lineNumber = defaults.lineNumber;
    	      this.message = defaults.message;
    	      this.stackTrace = defaults.stackTrace;
        }

        @CustomType.Setter
        public Builder actionableMessage(@Nullable String actionableMessage) {
            this.actionableMessage = actionableMessage;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            this.filePath = Objects.requireNonNull(filePath);
            return this;
        }
        @CustomType.Setter
        public Builder hResult(Integer hResult) {
            this.hResult = Objects.requireNonNull(hResult);
            return this;
        }
        @CustomType.Setter
        public Builder lineNumber(String lineNumber) {
            this.lineNumber = Objects.requireNonNull(lineNumber);
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }
        @CustomType.Setter
        public Builder stackTrace(String stackTrace) {
            this.stackTrace = Objects.requireNonNull(stackTrace);
            return this;
        }
        public ReportableExceptionResponse build() {
            final var o = new ReportableExceptionResponse();
            o.actionableMessage = actionableMessage;
            o.filePath = filePath;
            o.hResult = hResult;
            o.lineNumber = lineNumber;
            o.message = message;
            o.stackTrace = stackTrace;
            return o;
        }
    }
}
