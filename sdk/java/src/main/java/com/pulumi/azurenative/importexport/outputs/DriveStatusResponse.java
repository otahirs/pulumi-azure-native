// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.importexport.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DriveStatusResponse {
    /**
     * @return The BitLocker key used to encrypt the drive.
     * 
     */
    private @Nullable String bitLockerKey;
    /**
     * @return Bytes successfully transferred for the drive.
     * 
     */
    private @Nullable Double bytesSucceeded;
    /**
     * @return Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
     * 
     */
    private @Nullable String copyStatus;
    /**
     * @return The drive header hash value.
     * 
     */
    private @Nullable String driveHeaderHash;
    /**
     * @return The drive&#39;s hardware serial number, without spaces.
     * 
     */
    private @Nullable String driveId;
    /**
     * @return A URI that points to the blob containing the error log for the data transfer operation.
     * 
     */
    private @Nullable String errorLogUri;
    /**
     * @return The relative path of the manifest file on the drive.
     * 
     */
    private @Nullable String manifestFile;
    /**
     * @return The Base16-encoded MD5 hash of the manifest file on the drive.
     * 
     */
    private @Nullable String manifestHash;
    /**
     * @return A URI that points to the blob containing the drive manifest file.
     * 
     */
    private @Nullable String manifestUri;
    /**
     * @return Percentage completed for the drive.
     * 
     */
    private @Nullable Integer percentComplete;
    /**
     * @return The drive&#39;s current state.
     * 
     */
    private @Nullable String state;
    /**
     * @return A URI that points to the blob containing the verbose log for the data transfer operation.
     * 
     */
    private @Nullable String verboseLogUri;

    private DriveStatusResponse() {}
    /**
     * @return The BitLocker key used to encrypt the drive.
     * 
     */
    public Optional<String> bitLockerKey() {
        return Optional.ofNullable(this.bitLockerKey);
    }
    /**
     * @return Bytes successfully transferred for the drive.
     * 
     */
    public Optional<Double> bytesSucceeded() {
        return Optional.ofNullable(this.bytesSucceeded);
    }
    /**
     * @return Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
     * 
     */
    public Optional<String> copyStatus() {
        return Optional.ofNullable(this.copyStatus);
    }
    /**
     * @return The drive header hash value.
     * 
     */
    public Optional<String> driveHeaderHash() {
        return Optional.ofNullable(this.driveHeaderHash);
    }
    /**
     * @return The drive&#39;s hardware serial number, without spaces.
     * 
     */
    public Optional<String> driveId() {
        return Optional.ofNullable(this.driveId);
    }
    /**
     * @return A URI that points to the blob containing the error log for the data transfer operation.
     * 
     */
    public Optional<String> errorLogUri() {
        return Optional.ofNullable(this.errorLogUri);
    }
    /**
     * @return The relative path of the manifest file on the drive.
     * 
     */
    public Optional<String> manifestFile() {
        return Optional.ofNullable(this.manifestFile);
    }
    /**
     * @return The Base16-encoded MD5 hash of the manifest file on the drive.
     * 
     */
    public Optional<String> manifestHash() {
        return Optional.ofNullable(this.manifestHash);
    }
    /**
     * @return A URI that points to the blob containing the drive manifest file.
     * 
     */
    public Optional<String> manifestUri() {
        return Optional.ofNullable(this.manifestUri);
    }
    /**
     * @return Percentage completed for the drive.
     * 
     */
    public Optional<Integer> percentComplete() {
        return Optional.ofNullable(this.percentComplete);
    }
    /**
     * @return The drive&#39;s current state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A URI that points to the blob containing the verbose log for the data transfer operation.
     * 
     */
    public Optional<String> verboseLogUri() {
        return Optional.ofNullable(this.verboseLogUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DriveStatusResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bitLockerKey;
        private @Nullable Double bytesSucceeded;
        private @Nullable String copyStatus;
        private @Nullable String driveHeaderHash;
        private @Nullable String driveId;
        private @Nullable String errorLogUri;
        private @Nullable String manifestFile;
        private @Nullable String manifestHash;
        private @Nullable String manifestUri;
        private @Nullable Integer percentComplete;
        private @Nullable String state;
        private @Nullable String verboseLogUri;
        public Builder() {}
        public Builder(DriveStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitLockerKey = defaults.bitLockerKey;
    	      this.bytesSucceeded = defaults.bytesSucceeded;
    	      this.copyStatus = defaults.copyStatus;
    	      this.driveHeaderHash = defaults.driveHeaderHash;
    	      this.driveId = defaults.driveId;
    	      this.errorLogUri = defaults.errorLogUri;
    	      this.manifestFile = defaults.manifestFile;
    	      this.manifestHash = defaults.manifestHash;
    	      this.manifestUri = defaults.manifestUri;
    	      this.percentComplete = defaults.percentComplete;
    	      this.state = defaults.state;
    	      this.verboseLogUri = defaults.verboseLogUri;
        }

        @CustomType.Setter
        public Builder bitLockerKey(@Nullable String bitLockerKey) {
            this.bitLockerKey = bitLockerKey;
            return this;
        }
        @CustomType.Setter
        public Builder bytesSucceeded(@Nullable Double bytesSucceeded) {
            this.bytesSucceeded = bytesSucceeded;
            return this;
        }
        @CustomType.Setter
        public Builder copyStatus(@Nullable String copyStatus) {
            this.copyStatus = copyStatus;
            return this;
        }
        @CustomType.Setter
        public Builder driveHeaderHash(@Nullable String driveHeaderHash) {
            this.driveHeaderHash = driveHeaderHash;
            return this;
        }
        @CustomType.Setter
        public Builder driveId(@Nullable String driveId) {
            this.driveId = driveId;
            return this;
        }
        @CustomType.Setter
        public Builder errorLogUri(@Nullable String errorLogUri) {
            this.errorLogUri = errorLogUri;
            return this;
        }
        @CustomType.Setter
        public Builder manifestFile(@Nullable String manifestFile) {
            this.manifestFile = manifestFile;
            return this;
        }
        @CustomType.Setter
        public Builder manifestHash(@Nullable String manifestHash) {
            this.manifestHash = manifestHash;
            return this;
        }
        @CustomType.Setter
        public Builder manifestUri(@Nullable String manifestUri) {
            this.manifestUri = manifestUri;
            return this;
        }
        @CustomType.Setter
        public Builder percentComplete(@Nullable Integer percentComplete) {
            this.percentComplete = percentComplete;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder verboseLogUri(@Nullable String verboseLogUri) {
            this.verboseLogUri = verboseLogUri;
            return this;
        }
        public DriveStatusResponse build() {
            final var o = new DriveStatusResponse();
            o.bitLockerKey = bitLockerKey;
            o.bytesSucceeded = bytesSucceeded;
            o.copyStatus = copyStatus;
            o.driveHeaderHash = driveHeaderHash;
            o.driveId = driveId;
            o.errorLogUri = errorLogUri;
            o.manifestFile = manifestFile;
            o.manifestHash = manifestHash;
            o.manifestUri = manifestUri;
            o.percentComplete = percentComplete;
            o.state = state;
            o.verboseLogUri = verboseLogUri;
            return o;
        }
    }
}
