// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancingRuleResponse {
    /**
     * @return A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
     * 
     */
    private @Nullable SubResourceResponse backendAddressPool;
    /**
     * @return The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables &#34;Any Port&#34;.
     * 
     */
    private @Nullable Integer backendPort;
    /**
     * @return Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
     * 
     */
    private @Nullable Boolean disableOutboundSnat;
    /**
     * @return Configures a virtual machine&#39;s endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can&#39;t be changed after you create the endpoint.
     * 
     */
    private @Nullable Boolean enableFloatingIP;
    /**
     * @return Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     * 
     */
    private @Nullable Boolean enableTcpReset;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return A reference to frontend IP addresses.
     * 
     */
    private @Nullable SubResourceResponse frontendIPConfiguration;
    /**
     * @return The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables &#34;Any Port&#34;.
     * 
     */
    private Integer frontendPort;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     * 
     */
    private @Nullable Integer idleTimeoutInMinutes;
    /**
     * @return The load distribution policy for this rule.
     * 
     */
    private @Nullable String loadDistribution;
    /**
     * @return The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return The reference to the load balancer probe used by the load balancing rule.
     * 
     */
    private @Nullable SubResourceResponse probe;
    /**
     * @return The reference to the transport protocol used by the load balancing rule.
     * 
     */
    private String protocol;
    /**
     * @return The provisioning state of the load balancing rule resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private LoadBalancingRuleResponse() {}
    /**
     * @return A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
     * 
     */
    public Optional<SubResourceResponse> backendAddressPool() {
        return Optional.ofNullable(this.backendAddressPool);
    }
    /**
     * @return The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables &#34;Any Port&#34;.
     * 
     */
    public Optional<Integer> backendPort() {
        return Optional.ofNullable(this.backendPort);
    }
    /**
     * @return Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
     * 
     */
    public Optional<Boolean> disableOutboundSnat() {
        return Optional.ofNullable(this.disableOutboundSnat);
    }
    /**
     * @return Configures a virtual machine&#39;s endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can&#39;t be changed after you create the endpoint.
     * 
     */
    public Optional<Boolean> enableFloatingIP() {
        return Optional.ofNullable(this.enableFloatingIP);
    }
    /**
     * @return Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
     * 
     */
    public Optional<Boolean> enableTcpReset() {
        return Optional.ofNullable(this.enableTcpReset);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return A reference to frontend IP addresses.
     * 
     */
    public Optional<SubResourceResponse> frontendIPConfiguration() {
        return Optional.ofNullable(this.frontendIPConfiguration);
    }
    /**
     * @return The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables &#34;Any Port&#34;.
     * 
     */
    public Integer frontendPort() {
        return this.frontendPort;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
     * 
     */
    public Optional<Integer> idleTimeoutInMinutes() {
        return Optional.ofNullable(this.idleTimeoutInMinutes);
    }
    /**
     * @return The load distribution policy for this rule.
     * 
     */
    public Optional<String> loadDistribution() {
        return Optional.ofNullable(this.loadDistribution);
    }
    /**
     * @return The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The reference to the load balancer probe used by the load balancing rule.
     * 
     */
    public Optional<SubResourceResponse> probe() {
        return Optional.ofNullable(this.probe);
    }
    /**
     * @return The reference to the transport protocol used by the load balancing rule.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The provisioning state of the load balancing rule resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancingRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SubResourceResponse backendAddressPool;
        private @Nullable Integer backendPort;
        private @Nullable Boolean disableOutboundSnat;
        private @Nullable Boolean enableFloatingIP;
        private @Nullable Boolean enableTcpReset;
        private String etag;
        private @Nullable SubResourceResponse frontendIPConfiguration;
        private Integer frontendPort;
        private @Nullable String id;
        private @Nullable Integer idleTimeoutInMinutes;
        private @Nullable String loadDistribution;
        private @Nullable String name;
        private @Nullable SubResourceResponse probe;
        private String protocol;
        private String provisioningState;
        private String type;
        public Builder() {}
        public Builder(LoadBalancingRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPool = defaults.backendAddressPool;
    	      this.backendPort = defaults.backendPort;
    	      this.disableOutboundSnat = defaults.disableOutboundSnat;
    	      this.enableFloatingIP = defaults.enableFloatingIP;
    	      this.enableTcpReset = defaults.enableTcpReset;
    	      this.etag = defaults.etag;
    	      this.frontendIPConfiguration = defaults.frontendIPConfiguration;
    	      this.frontendPort = defaults.frontendPort;
    	      this.id = defaults.id;
    	      this.idleTimeoutInMinutes = defaults.idleTimeoutInMinutes;
    	      this.loadDistribution = defaults.loadDistribution;
    	      this.name = defaults.name;
    	      this.probe = defaults.probe;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder backendAddressPool(@Nullable SubResourceResponse backendAddressPool) {
            this.backendAddressPool = backendAddressPool;
            return this;
        }
        @CustomType.Setter
        public Builder backendPort(@Nullable Integer backendPort) {
            this.backendPort = backendPort;
            return this;
        }
        @CustomType.Setter
        public Builder disableOutboundSnat(@Nullable Boolean disableOutboundSnat) {
            this.disableOutboundSnat = disableOutboundSnat;
            return this;
        }
        @CustomType.Setter
        public Builder enableFloatingIP(@Nullable Boolean enableFloatingIP) {
            this.enableFloatingIP = enableFloatingIP;
            return this;
        }
        @CustomType.Setter
        public Builder enableTcpReset(@Nullable Boolean enableTcpReset) {
            this.enableTcpReset = enableTcpReset;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder frontendIPConfiguration(@Nullable SubResourceResponse frontendIPConfiguration) {
            this.frontendIPConfiguration = frontendIPConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder frontendPort(Integer frontendPort) {
            this.frontendPort = Objects.requireNonNull(frontendPort);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutInMinutes(@Nullable Integer idleTimeoutInMinutes) {
            this.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder loadDistribution(@Nullable String loadDistribution) {
            this.loadDistribution = loadDistribution;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder probe(@Nullable SubResourceResponse probe) {
            this.probe = probe;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public LoadBalancingRuleResponse build() {
            final var o = new LoadBalancingRuleResponse();
            o.backendAddressPool = backendAddressPool;
            o.backendPort = backendPort;
            o.disableOutboundSnat = disableOutboundSnat;
            o.enableFloatingIP = enableFloatingIP;
            o.enableTcpReset = enableTcpReset;
            o.etag = etag;
            o.frontendIPConfiguration = frontendIPConfiguration;
            o.frontendPort = frontendPort;
            o.id = id;
            o.idleTimeoutInMinutes = idleTimeoutInMinutes;
            o.loadDistribution = loadDistribution;
            o.name = name;
            o.probe = probe;
            o.protocol = protocol;
            o.provisioningState = provisioningState;
            o.type = type;
            return o;
        }
    }
}
