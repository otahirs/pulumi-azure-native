// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.outputs;

import com.pulumi.azurenative.sqlvirtualmachine.outputs.LoadBalancerConfigurationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAvailabilityGroupListenerResult {
    /**
     * @return Name of the availability group.
     * 
     */
    private @Nullable String availabilityGroupName;
    /**
     * @return Create a default availability group if it does not exist.
     * 
     */
    private @Nullable Boolean createDefaultAvailabilityGroupIfNotExist;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return List of load balancer configurations for an availability group listener.
     * 
     */
    private @Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Listener port.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Provisioning state to track the async operation status.
     * 
     */
    private String provisioningState;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetAvailabilityGroupListenerResult() {}
    /**
     * @return Name of the availability group.
     * 
     */
    public Optional<String> availabilityGroupName() {
        return Optional.ofNullable(this.availabilityGroupName);
    }
    /**
     * @return Create a default availability group if it does not exist.
     * 
     */
    public Optional<Boolean> createDefaultAvailabilityGroupIfNotExist() {
        return Optional.ofNullable(this.createDefaultAvailabilityGroupIfNotExist);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of load balancer configurations for an availability group listener.
     * 
     */
    public List<LoadBalancerConfigurationResponse> loadBalancerConfigurations() {
        return this.loadBalancerConfigurations == null ? List.of() : this.loadBalancerConfigurations;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Listener port.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Provisioning state to track the async operation status.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAvailabilityGroupListenerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String availabilityGroupName;
        private @Nullable Boolean createDefaultAvailabilityGroupIfNotExist;
        private String id;
        private @Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations;
        private String name;
        private @Nullable Integer port;
        private String provisioningState;
        private String type;
        public Builder() {}
        public Builder(GetAvailabilityGroupListenerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityGroupName = defaults.availabilityGroupName;
    	      this.createDefaultAvailabilityGroupIfNotExist = defaults.createDefaultAvailabilityGroupIfNotExist;
    	      this.id = defaults.id;
    	      this.loadBalancerConfigurations = defaults.loadBalancerConfigurations;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityGroupName(@Nullable String availabilityGroupName) {
            this.availabilityGroupName = availabilityGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder createDefaultAvailabilityGroupIfNotExist(@Nullable Boolean createDefaultAvailabilityGroupIfNotExist) {
            this.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerConfigurations(@Nullable List<LoadBalancerConfigurationResponse> loadBalancerConfigurations) {
            this.loadBalancerConfigurations = loadBalancerConfigurations;
            return this;
        }
        public Builder loadBalancerConfigurations(LoadBalancerConfigurationResponse... loadBalancerConfigurations) {
            return loadBalancerConfigurations(List.of(loadBalancerConfigurations));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetAvailabilityGroupListenerResult build() {
            final var o = new GetAvailabilityGroupListenerResult();
            o.availabilityGroupName = availabilityGroupName;
            o.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
            o.id = id;
            o.loadBalancerConfigurations = loadBalancerConfigurations;
            o.name = name;
            o.port = port;
            o.provisioningState = provisioningState;
            o.type = type;
            return o;
        }
    }
}
