// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConnectorResult {
    /**
     * @return ID of the connector.
     * 
     */
    private Integer connectorId;
    /**
     * @return Name of the connector.
     * 
     */
    private @Nullable String connectorName;
    /**
     * @return The connector properties.
     * 
     */
    private Map<String,Object> connectorProperties;
    /**
     * @return Type of connector.
     * 
     */
    private String connectorType;
    /**
     * @return The created time.
     * 
     */
    private String created;
    /**
     * @return Description of the connector.
     * 
     */
    private @Nullable String description;
    /**
     * @return Display name of the connector.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return If this is an internal connector.
     * 
     */
    private @Nullable Boolean isInternal;
    /**
     * @return The last modified time.
     * 
     */
    private String lastModified;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return State of connector.
     * 
     */
    private String state;
    /**
     * @return The hub name.
     * 
     */
    private String tenantId;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetConnectorResult() {}
    /**
     * @return ID of the connector.
     * 
     */
    public Integer connectorId() {
        return this.connectorId;
    }
    /**
     * @return Name of the connector.
     * 
     */
    public Optional<String> connectorName() {
        return Optional.ofNullable(this.connectorName);
    }
    /**
     * @return The connector properties.
     * 
     */
    public Map<String,Object> connectorProperties() {
        return this.connectorProperties;
    }
    /**
     * @return Type of connector.
     * 
     */
    public String connectorType() {
        return this.connectorType;
    }
    /**
     * @return The created time.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Description of the connector.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Display name of the connector.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If this is an internal connector.
     * 
     */
    public Optional<Boolean> isInternal() {
        return Optional.ofNullable(this.isInternal);
    }
    /**
     * @return The last modified time.
     * 
     */
    public String lastModified() {
        return this.lastModified;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return State of connector.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The hub name.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer connectorId;
        private @Nullable String connectorName;
        private Map<String,Object> connectorProperties;
        private String connectorType;
        private String created;
        private @Nullable String description;
        private @Nullable String displayName;
        private String id;
        private @Nullable Boolean isInternal;
        private String lastModified;
        private String name;
        private String state;
        private String tenantId;
        private String type;
        public Builder() {}
        public Builder(GetConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.connectorName = defaults.connectorName;
    	      this.connectorProperties = defaults.connectorProperties;
    	      this.connectorType = defaults.connectorType;
    	      this.created = defaults.created;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.isInternal = defaults.isInternal;
    	      this.lastModified = defaults.lastModified;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.tenantId = defaults.tenantId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder connectorId(Integer connectorId) {
            this.connectorId = Objects.requireNonNull(connectorId);
            return this;
        }
        @CustomType.Setter
        public Builder connectorName(@Nullable String connectorName) {
            this.connectorName = connectorName;
            return this;
        }
        @CustomType.Setter
        public Builder connectorProperties(Map<String,Object> connectorProperties) {
            this.connectorProperties = Objects.requireNonNull(connectorProperties);
            return this;
        }
        @CustomType.Setter
        public Builder connectorType(String connectorType) {
            this.connectorType = Objects.requireNonNull(connectorType);
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isInternal(@Nullable Boolean isInternal) {
            this.isInternal = isInternal;
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            this.lastModified = Objects.requireNonNull(lastModified);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetConnectorResult build() {
            final var o = new GetConnectorResult();
            o.connectorId = connectorId;
            o.connectorName = connectorName;
            o.connectorProperties = connectorProperties;
            o.connectorType = connectorType;
            o.created = created;
            o.description = description;
            o.displayName = displayName;
            o.id = id;
            o.isInternal = isInternal;
            o.lastModified = lastModified;
            o.name = name;
            o.state = state;
            o.tenantId = tenantId;
            o.type = type;
            return o;
        }
    }
}
