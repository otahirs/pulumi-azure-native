// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SapTableLinkedServiceResponse {
    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object clientId;
    /**
     * @return The integration runtime reference.
     * 
     */
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;
    /**
     * @return Linked service description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object encryptedCredential;
    /**
     * @return Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object language;
    /**
     * @return The Logon Group for the SAP System. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object logonGroup;
    /**
     * @return The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object messageServer;
    /**
     * @return The service name or port number of the Message Server. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object messageServerService;
    /**
     * @return Parameters for linked service.
     * 
     */
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;
    /**
     * @return Password to access the SAP server where the table is located.
     * 
     */
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;
    /**
     * @return Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object server;
    /**
     * @return External security product&#39;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object sncLibraryPath;
    /**
     * @return SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object sncMode;
    /**
     * @return Initiator&#39;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object sncMyName;
    /**
     * @return Communication partner&#39;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object sncPartnerName;
    /**
     * @return SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object sncQop;
    /**
     * @return SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object systemId;
    /**
     * @return System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object systemNumber;
    /**
     * @return Type of linked service.
     * Expected value is &#39;SapTable&#39;.
     * 
     */
    private String type;
    /**
     * @return Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    private @Nullable Object userName;

    private SapTableLinkedServiceResponse() {}
    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }
    /**
     * @return Linked service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }
    /**
     * @return Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> language() {
        return Optional.ofNullable(this.language);
    }
    /**
     * @return The Logon Group for the SAP System. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> logonGroup() {
        return Optional.ofNullable(this.logonGroup);
    }
    /**
     * @return The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> messageServer() {
        return Optional.ofNullable(this.messageServer);
    }
    /**
     * @return The service name or port number of the Message Server. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> messageServerService() {
        return Optional.ofNullable(this.messageServerService);
    }
    /**
     * @return Parameters for linked service.
     * 
     */
    public Map<String,ParameterSpecificationResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * @return Password to access the SAP server where the table is located.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> server() {
        return Optional.ofNullable(this.server);
    }
    /**
     * @return External security product&#39;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sncLibraryPath() {
        return Optional.ofNullable(this.sncLibraryPath);
    }
    /**
     * @return SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sncMode() {
        return Optional.ofNullable(this.sncMode);
    }
    /**
     * @return Initiator&#39;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sncMyName() {
        return Optional.ofNullable(this.sncMyName);
    }
    /**
     * @return Communication partner&#39;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sncPartnerName() {
        return Optional.ofNullable(this.sncPartnerName);
    }
    /**
     * @return SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sncQop() {
        return Optional.ofNullable(this.sncQop);
    }
    /**
     * @return SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> systemId() {
        return Optional.ofNullable(this.systemId);
    }
    /**
     * @return System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> systemNumber() {
        return Optional.ofNullable(this.systemNumber);
    }
    /**
     * @return Type of linked service.
     * Expected value is &#39;SapTable&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SapTableLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable Object clientId;
        private @Nullable IntegrationRuntimeReferenceResponse connectVia;
        private @Nullable String description;
        private @Nullable Object encryptedCredential;
        private @Nullable Object language;
        private @Nullable Object logonGroup;
        private @Nullable Object messageServer;
        private @Nullable Object messageServerService;
        private @Nullable Map<String,ParameterSpecificationResponse> parameters;
        private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;
        private @Nullable Object server;
        private @Nullable Object sncLibraryPath;
        private @Nullable Object sncMode;
        private @Nullable Object sncMyName;
        private @Nullable Object sncPartnerName;
        private @Nullable Object sncQop;
        private @Nullable Object systemId;
        private @Nullable Object systemNumber;
        private String type;
        private @Nullable Object userName;
        public Builder() {}
        public Builder(SapTableLinkedServiceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.clientId = defaults.clientId;
    	      this.connectVia = defaults.connectVia;
    	      this.description = defaults.description;
    	      this.encryptedCredential = defaults.encryptedCredential;
    	      this.language = defaults.language;
    	      this.logonGroup = defaults.logonGroup;
    	      this.messageServer = defaults.messageServer;
    	      this.messageServerService = defaults.messageServerService;
    	      this.parameters = defaults.parameters;
    	      this.password = defaults.password;
    	      this.server = defaults.server;
    	      this.sncLibraryPath = defaults.sncLibraryPath;
    	      this.sncMode = defaults.sncMode;
    	      this.sncMyName = defaults.sncMyName;
    	      this.sncPartnerName = defaults.sncPartnerName;
    	      this.sncQop = defaults.sncQop;
    	      this.systemId = defaults.systemId;
    	      this.systemNumber = defaults.systemNumber;
    	      this.type = defaults.type;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder clientId(@Nullable Object clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            this.connectVia = connectVia;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            this.encryptedCredential = encryptedCredential;
            return this;
        }
        @CustomType.Setter
        public Builder language(@Nullable Object language) {
            this.language = language;
            return this;
        }
        @CustomType.Setter
        public Builder logonGroup(@Nullable Object logonGroup) {
            this.logonGroup = logonGroup;
            return this;
        }
        @CustomType.Setter
        public Builder messageServer(@Nullable Object messageServer) {
            this.messageServer = messageServer;
            return this;
        }
        @CustomType.Setter
        public Builder messageServerService(@Nullable Object messageServerService) {
            this.messageServerService = messageServerService;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder server(@Nullable Object server) {
            this.server = server;
            return this;
        }
        @CustomType.Setter
        public Builder sncLibraryPath(@Nullable Object sncLibraryPath) {
            this.sncLibraryPath = sncLibraryPath;
            return this;
        }
        @CustomType.Setter
        public Builder sncMode(@Nullable Object sncMode) {
            this.sncMode = sncMode;
            return this;
        }
        @CustomType.Setter
        public Builder sncMyName(@Nullable Object sncMyName) {
            this.sncMyName = sncMyName;
            return this;
        }
        @CustomType.Setter
        public Builder sncPartnerName(@Nullable Object sncPartnerName) {
            this.sncPartnerName = sncPartnerName;
            return this;
        }
        @CustomType.Setter
        public Builder sncQop(@Nullable Object sncQop) {
            this.sncQop = sncQop;
            return this;
        }
        @CustomType.Setter
        public Builder systemId(@Nullable Object systemId) {
            this.systemId = systemId;
            return this;
        }
        @CustomType.Setter
        public Builder systemNumber(@Nullable Object systemNumber) {
            this.systemNumber = systemNumber;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable Object userName) {
            this.userName = userName;
            return this;
        }
        public SapTableLinkedServiceResponse build() {
            final var o = new SapTableLinkedServiceResponse();
            o.annotations = annotations;
            o.clientId = clientId;
            o.connectVia = connectVia;
            o.description = description;
            o.encryptedCredential = encryptedCredential;
            o.language = language;
            o.logonGroup = logonGroup;
            o.messageServer = messageServer;
            o.messageServerService = messageServerService;
            o.parameters = parameters;
            o.password = password;
            o.server = server;
            o.sncLibraryPath = sncLibraryPath;
            o.sncMode = sncMode;
            o.sncMyName = sncMyName;
            o.sncPartnerName = sncPartnerName;
            o.sncQop = sncQop;
            o.systemId = systemId;
            o.systemNumber = systemNumber;
            o.type = type;
            o.userName = userName;
            return o;
        }
    }
}
