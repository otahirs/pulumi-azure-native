// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databricks.outputs;

import com.pulumi.azurenative.databricks.outputs.AddressSpaceResponse;
import com.pulumi.azurenative.databricks.outputs.VirtualNetworkPeeringPropertiesFormatResponseDatabricksVirtualNetwork;
import com.pulumi.azurenative.databricks.outputs.VirtualNetworkPeeringPropertiesFormatResponseRemoteVirtualNetwork;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetvNetPeeringResult {
    /**
     * @return Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    private @Nullable Boolean allowForwardedTraffic;
    /**
     * @return If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    private @Nullable Boolean allowGatewayTransit;
    /**
     * @return Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    private @Nullable Boolean allowVirtualNetworkAccess;
    /**
     * @return The reference to the databricks virtual network address space.
     * 
     */
    private @Nullable AddressSpaceResponse databricksAddressSpace;
    /**
     * @return  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering).
     * 
     */
    private @Nullable VirtualNetworkPeeringPropertiesFormatResponseDatabricksVirtualNetwork databricksVirtualNetwork;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Name of the virtual network peering resource
     * 
     */
    private String name;
    /**
     * @return The status of the virtual network peering.
     * 
     */
    private String peeringState;
    /**
     * @return The provisioning state of the virtual network peering resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The reference to the remote virtual network address space.
     * 
     */
    private @Nullable AddressSpaceResponse remoteAddressSpace;
    /**
     * @return  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering).
     * 
     */
    private VirtualNetworkPeeringPropertiesFormatResponseRemoteVirtualNetwork remoteVirtualNetwork;
    /**
     * @return type of the virtual network peering resource
     * 
     */
    private String type;
    /**
     * @return If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    private @Nullable Boolean useRemoteGateways;

    private GetvNetPeeringResult() {}
    /**
     * @return Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    public Optional<Boolean> allowForwardedTraffic() {
        return Optional.ofNullable(this.allowForwardedTraffic);
    }
    /**
     * @return If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    public Optional<Boolean> allowGatewayTransit() {
        return Optional.ofNullable(this.allowGatewayTransit);
    }
    /**
     * @return Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    public Optional<Boolean> allowVirtualNetworkAccess() {
        return Optional.ofNullable(this.allowVirtualNetworkAccess);
    }
    /**
     * @return The reference to the databricks virtual network address space.
     * 
     */
    public Optional<AddressSpaceResponse> databricksAddressSpace() {
        return Optional.ofNullable(this.databricksAddressSpace);
    }
    /**
     * @return  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering).
     * 
     */
    public Optional<VirtualNetworkPeeringPropertiesFormatResponseDatabricksVirtualNetwork> databricksVirtualNetwork() {
        return Optional.ofNullable(this.databricksVirtualNetwork);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the virtual network peering resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The status of the virtual network peering.
     * 
     */
    public String peeringState() {
        return this.peeringState;
    }
    /**
     * @return The provisioning state of the virtual network peering resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The reference to the remote virtual network address space.
     * 
     */
    public Optional<AddressSpaceResponse> remoteAddressSpace() {
        return Optional.ofNullable(this.remoteAddressSpace);
    }
    /**
     * @return  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering).
     * 
     */
    public VirtualNetworkPeeringPropertiesFormatResponseRemoteVirtualNetwork remoteVirtualNetwork() {
        return this.remoteVirtualNetwork;
    }
    /**
     * @return type of the virtual network peering resource
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    public Optional<Boolean> useRemoteGateways() {
        return Optional.ofNullable(this.useRemoteGateways);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetvNetPeeringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowForwardedTraffic;
        private @Nullable Boolean allowGatewayTransit;
        private @Nullable Boolean allowVirtualNetworkAccess;
        private @Nullable AddressSpaceResponse databricksAddressSpace;
        private @Nullable VirtualNetworkPeeringPropertiesFormatResponseDatabricksVirtualNetwork databricksVirtualNetwork;
        private String id;
        private String name;
        private String peeringState;
        private String provisioningState;
        private @Nullable AddressSpaceResponse remoteAddressSpace;
        private VirtualNetworkPeeringPropertiesFormatResponseRemoteVirtualNetwork remoteVirtualNetwork;
        private String type;
        private @Nullable Boolean useRemoteGateways;
        public Builder() {}
        public Builder(GetvNetPeeringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowForwardedTraffic = defaults.allowForwardedTraffic;
    	      this.allowGatewayTransit = defaults.allowGatewayTransit;
    	      this.allowVirtualNetworkAccess = defaults.allowVirtualNetworkAccess;
    	      this.databricksAddressSpace = defaults.databricksAddressSpace;
    	      this.databricksVirtualNetwork = defaults.databricksVirtualNetwork;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.peeringState = defaults.peeringState;
    	      this.provisioningState = defaults.provisioningState;
    	      this.remoteAddressSpace = defaults.remoteAddressSpace;
    	      this.remoteVirtualNetwork = defaults.remoteVirtualNetwork;
    	      this.type = defaults.type;
    	      this.useRemoteGateways = defaults.useRemoteGateways;
        }

        @CustomType.Setter
        public Builder allowForwardedTraffic(@Nullable Boolean allowForwardedTraffic) {
            this.allowForwardedTraffic = allowForwardedTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder allowGatewayTransit(@Nullable Boolean allowGatewayTransit) {
            this.allowGatewayTransit = allowGatewayTransit;
            return this;
        }
        @CustomType.Setter
        public Builder allowVirtualNetworkAccess(@Nullable Boolean allowVirtualNetworkAccess) {
            this.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder databricksAddressSpace(@Nullable AddressSpaceResponse databricksAddressSpace) {
            this.databricksAddressSpace = databricksAddressSpace;
            return this;
        }
        @CustomType.Setter
        public Builder databricksVirtualNetwork(@Nullable VirtualNetworkPeeringPropertiesFormatResponseDatabricksVirtualNetwork databricksVirtualNetwork) {
            this.databricksVirtualNetwork = databricksVirtualNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peeringState(String peeringState) {
            this.peeringState = Objects.requireNonNull(peeringState);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder remoteAddressSpace(@Nullable AddressSpaceResponse remoteAddressSpace) {
            this.remoteAddressSpace = remoteAddressSpace;
            return this;
        }
        @CustomType.Setter
        public Builder remoteVirtualNetwork(VirtualNetworkPeeringPropertiesFormatResponseRemoteVirtualNetwork remoteVirtualNetwork) {
            this.remoteVirtualNetwork = Objects.requireNonNull(remoteVirtualNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder useRemoteGateways(@Nullable Boolean useRemoteGateways) {
            this.useRemoteGateways = useRemoteGateways;
            return this;
        }
        public GetvNetPeeringResult build() {
            final var o = new GetvNetPeeringResult();
            o.allowForwardedTraffic = allowForwardedTraffic;
            o.allowGatewayTransit = allowGatewayTransit;
            o.allowVirtualNetworkAccess = allowVirtualNetworkAccess;
            o.databricksAddressSpace = databricksAddressSpace;
            o.databricksVirtualNetwork = databricksVirtualNetwork;
            o.id = id;
            o.name = name;
            o.peeringState = peeringState;
            o.provisioningState = provisioningState;
            o.remoteAddressSpace = remoteAddressSpace;
            o.remoteVirtualNetwork = remoteVirtualNetwork;
            o.type = type;
            o.useRemoteGateways = useRemoteGateways;
            return o;
        }
    }
}
