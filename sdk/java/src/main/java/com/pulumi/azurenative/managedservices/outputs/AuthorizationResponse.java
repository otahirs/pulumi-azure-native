// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthorizationResponse {
    /**
     * @return The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    private @Nullable List<String> delegatedRoleDefinitionIds;
    /**
     * @return Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    private String principalId;
    /**
     * @return Display name of the principal Id.
     * 
     */
    private @Nullable String principalIdDisplayName;
    /**
     * @return The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    private String roleDefinitionId;

    private AuthorizationResponse() {}
    /**
     * @return The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    public List<String> delegatedRoleDefinitionIds() {
        return this.delegatedRoleDefinitionIds == null ? List.of() : this.delegatedRoleDefinitionIds;
    }
    /**
     * @return Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    public String principalId() {
        return this.principalId;
    }
    /**
     * @return Display name of the principal Id.
     * 
     */
    public Optional<String> principalIdDisplayName() {
        return Optional.ofNullable(this.principalIdDisplayName);
    }
    /**
     * @return The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> delegatedRoleDefinitionIds;
        private String principalId;
        private @Nullable String principalIdDisplayName;
        private String roleDefinitionId;
        public Builder() {}
        public Builder(AuthorizationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delegatedRoleDefinitionIds = defaults.delegatedRoleDefinitionIds;
    	      this.principalId = defaults.principalId;
    	      this.principalIdDisplayName = defaults.principalIdDisplayName;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
        }

        @CustomType.Setter
        public Builder delegatedRoleDefinitionIds(@Nullable List<String> delegatedRoleDefinitionIds) {
            this.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            return this;
        }
        public Builder delegatedRoleDefinitionIds(String... delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(List.of(delegatedRoleDefinitionIds));
        }
        @CustomType.Setter
        public Builder principalId(String principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }
        @CustomType.Setter
        public Builder principalIdDisplayName(@Nullable String principalIdDisplayName) {
            this.principalIdDisplayName = principalIdDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder roleDefinitionId(String roleDefinitionId) {
            this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId);
            return this;
        }
        public AuthorizationResponse build() {
            final var o = new AuthorizationResponse();
            o.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            o.principalId = principalId;
            o.principalIdDisplayName = principalIdDisplayName;
            o.roleDefinitionId = roleDefinitionId;
            return o;
        }
    }
}
