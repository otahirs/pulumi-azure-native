// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGatewayHostnameConfigurationResult {
    /**
     * @return Identifier of Certificate entity that will be used for TLS connection establishment
     * 
     */
    private @Nullable String certificateId;
    /**
     * @return Hostname value. Supports valid domain name, partial or full wildcard
     * 
     */
    private @Nullable String hostname;
    /**
     * @return Specifies if HTTP/2.0 is supported
     * 
     */
    private @Nullable Boolean http2Enabled;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Determines whether gateway requests client certificate
     * 
     */
    private @Nullable Boolean negotiateClientCertificate;
    /**
     * @return Specifies if TLS 1.0 is supported
     * 
     */
    private @Nullable Boolean tls10Enabled;
    /**
     * @return Specifies if TLS 1.1 is supported
     * 
     */
    private @Nullable Boolean tls11Enabled;
    /**
     * @return Resource type for API Management resource.
     * 
     */
    private String type;

    private GetGatewayHostnameConfigurationResult() {}
    /**
     * @return Identifier of Certificate entity that will be used for TLS connection establishment
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return Hostname value. Supports valid domain name, partial or full wildcard
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return Specifies if HTTP/2.0 is supported
     * 
     */
    public Optional<Boolean> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Determines whether gateway requests client certificate
     * 
     */
    public Optional<Boolean> negotiateClientCertificate() {
        return Optional.ofNullable(this.negotiateClientCertificate);
    }
    /**
     * @return Specifies if TLS 1.0 is supported
     * 
     */
    public Optional<Boolean> tls10Enabled() {
        return Optional.ofNullable(this.tls10Enabled);
    }
    /**
     * @return Specifies if TLS 1.1 is supported
     * 
     */
    public Optional<Boolean> tls11Enabled() {
        return Optional.ofNullable(this.tls11Enabled);
    }
    /**
     * @return Resource type for API Management resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayHostnameConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateId;
        private @Nullable String hostname;
        private @Nullable Boolean http2Enabled;
        private String id;
        private String name;
        private @Nullable Boolean negotiateClientCertificate;
        private @Nullable Boolean tls10Enabled;
        private @Nullable Boolean tls11Enabled;
        private String type;
        public Builder() {}
        public Builder(GetGatewayHostnameConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.hostname = defaults.hostname;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.negotiateClientCertificate = defaults.negotiateClientCertificate;
    	      this.tls10Enabled = defaults.tls10Enabled;
    	      this.tls11Enabled = defaults.tls11Enabled;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(@Nullable Boolean http2Enabled) {
            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder negotiateClientCertificate(@Nullable Boolean negotiateClientCertificate) {
            this.negotiateClientCertificate = negotiateClientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder tls10Enabled(@Nullable Boolean tls10Enabled) {
            this.tls10Enabled = tls10Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder tls11Enabled(@Nullable Boolean tls11Enabled) {
            this.tls11Enabled = tls11Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetGatewayHostnameConfigurationResult build() {
            final var o = new GetGatewayHostnameConfigurationResult();
            o.certificateId = certificateId;
            o.hostname = hostname;
            o.http2Enabled = http2Enabled;
            o.id = id;
            o.name = name;
            o.negotiateClientCertificate = negotiateClientCertificate;
            o.tls10Enabled = tls10Enabled;
            o.tls11Enabled = tls11Enabled;
            o.type = type;
            return o;
        }
    }
}
