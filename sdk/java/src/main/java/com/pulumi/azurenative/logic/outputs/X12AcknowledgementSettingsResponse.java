// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class X12AcknowledgementSettingsResponse {
    /**
     * @return The acknowledgement control number lower bound.
     * 
     */
    private Integer acknowledgementControlNumberLowerBound;
    /**
     * @return The acknowledgement control number prefix.
     * 
     */
    private @Nullable String acknowledgementControlNumberPrefix;
    /**
     * @return The acknowledgement control number suffix.
     * 
     */
    private @Nullable String acknowledgementControlNumberSuffix;
    /**
     * @return The acknowledgement control number upper bound.
     * 
     */
    private Integer acknowledgementControlNumberUpperBound;
    /**
     * @return The value indicating whether to batch functional acknowledgements.
     * 
     */
    private Boolean batchFunctionalAcknowledgements;
    /**
     * @return The value indicating whether to batch implementation acknowledgements.
     * 
     */
    private Boolean batchImplementationAcknowledgements;
    /**
     * @return The value indicating whether to batch the technical acknowledgements.
     * 
     */
    private Boolean batchTechnicalAcknowledgements;
    /**
     * @return The functional acknowledgement version.
     * 
     */
    private @Nullable String functionalAcknowledgementVersion;
    /**
     * @return The implementation acknowledgement version.
     * 
     */
    private @Nullable String implementationAcknowledgementVersion;
    /**
     * @return The value indicating whether functional acknowledgement is needed.
     * 
     */
    private Boolean needFunctionalAcknowledgement;
    /**
     * @return The value indicating whether implementation acknowledgement is needed.
     * 
     */
    private Boolean needImplementationAcknowledgement;
    /**
     * @return The value indicating whether a loop is needed for valid messages.
     * 
     */
    private Boolean needLoopForValidMessages;
    /**
     * @return The value indicating whether technical acknowledgement is needed.
     * 
     */
    private Boolean needTechnicalAcknowledgement;
    /**
     * @return The value indicating whether to rollover acknowledgement control number.
     * 
     */
    private Boolean rolloverAcknowledgementControlNumber;
    /**
     * @return The value indicating whether to send synchronous acknowledgement.
     * 
     */
    private Boolean sendSynchronousAcknowledgement;

    private X12AcknowledgementSettingsResponse() {}
    /**
     * @return The acknowledgement control number lower bound.
     * 
     */
    public Integer acknowledgementControlNumberLowerBound() {
        return this.acknowledgementControlNumberLowerBound;
    }
    /**
     * @return The acknowledgement control number prefix.
     * 
     */
    public Optional<String> acknowledgementControlNumberPrefix() {
        return Optional.ofNullable(this.acknowledgementControlNumberPrefix);
    }
    /**
     * @return The acknowledgement control number suffix.
     * 
     */
    public Optional<String> acknowledgementControlNumberSuffix() {
        return Optional.ofNullable(this.acknowledgementControlNumberSuffix);
    }
    /**
     * @return The acknowledgement control number upper bound.
     * 
     */
    public Integer acknowledgementControlNumberUpperBound() {
        return this.acknowledgementControlNumberUpperBound;
    }
    /**
     * @return The value indicating whether to batch functional acknowledgements.
     * 
     */
    public Boolean batchFunctionalAcknowledgements() {
        return this.batchFunctionalAcknowledgements;
    }
    /**
     * @return The value indicating whether to batch implementation acknowledgements.
     * 
     */
    public Boolean batchImplementationAcknowledgements() {
        return this.batchImplementationAcknowledgements;
    }
    /**
     * @return The value indicating whether to batch the technical acknowledgements.
     * 
     */
    public Boolean batchTechnicalAcknowledgements() {
        return this.batchTechnicalAcknowledgements;
    }
    /**
     * @return The functional acknowledgement version.
     * 
     */
    public Optional<String> functionalAcknowledgementVersion() {
        return Optional.ofNullable(this.functionalAcknowledgementVersion);
    }
    /**
     * @return The implementation acknowledgement version.
     * 
     */
    public Optional<String> implementationAcknowledgementVersion() {
        return Optional.ofNullable(this.implementationAcknowledgementVersion);
    }
    /**
     * @return The value indicating whether functional acknowledgement is needed.
     * 
     */
    public Boolean needFunctionalAcknowledgement() {
        return this.needFunctionalAcknowledgement;
    }
    /**
     * @return The value indicating whether implementation acknowledgement is needed.
     * 
     */
    public Boolean needImplementationAcknowledgement() {
        return this.needImplementationAcknowledgement;
    }
    /**
     * @return The value indicating whether a loop is needed for valid messages.
     * 
     */
    public Boolean needLoopForValidMessages() {
        return this.needLoopForValidMessages;
    }
    /**
     * @return The value indicating whether technical acknowledgement is needed.
     * 
     */
    public Boolean needTechnicalAcknowledgement() {
        return this.needTechnicalAcknowledgement;
    }
    /**
     * @return The value indicating whether to rollover acknowledgement control number.
     * 
     */
    public Boolean rolloverAcknowledgementControlNumber() {
        return this.rolloverAcknowledgementControlNumber;
    }
    /**
     * @return The value indicating whether to send synchronous acknowledgement.
     * 
     */
    public Boolean sendSynchronousAcknowledgement() {
        return this.sendSynchronousAcknowledgement;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12AcknowledgementSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer acknowledgementControlNumberLowerBound;
        private @Nullable String acknowledgementControlNumberPrefix;
        private @Nullable String acknowledgementControlNumberSuffix;
        private Integer acknowledgementControlNumberUpperBound;
        private Boolean batchFunctionalAcknowledgements;
        private Boolean batchImplementationAcknowledgements;
        private Boolean batchTechnicalAcknowledgements;
        private @Nullable String functionalAcknowledgementVersion;
        private @Nullable String implementationAcknowledgementVersion;
        private Boolean needFunctionalAcknowledgement;
        private Boolean needImplementationAcknowledgement;
        private Boolean needLoopForValidMessages;
        private Boolean needTechnicalAcknowledgement;
        private Boolean rolloverAcknowledgementControlNumber;
        private Boolean sendSynchronousAcknowledgement;
        public Builder() {}
        public Builder(X12AcknowledgementSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acknowledgementControlNumberLowerBound = defaults.acknowledgementControlNumberLowerBound;
    	      this.acknowledgementControlNumberPrefix = defaults.acknowledgementControlNumberPrefix;
    	      this.acknowledgementControlNumberSuffix = defaults.acknowledgementControlNumberSuffix;
    	      this.acknowledgementControlNumberUpperBound = defaults.acknowledgementControlNumberUpperBound;
    	      this.batchFunctionalAcknowledgements = defaults.batchFunctionalAcknowledgements;
    	      this.batchImplementationAcknowledgements = defaults.batchImplementationAcknowledgements;
    	      this.batchTechnicalAcknowledgements = defaults.batchTechnicalAcknowledgements;
    	      this.functionalAcknowledgementVersion = defaults.functionalAcknowledgementVersion;
    	      this.implementationAcknowledgementVersion = defaults.implementationAcknowledgementVersion;
    	      this.needFunctionalAcknowledgement = defaults.needFunctionalAcknowledgement;
    	      this.needImplementationAcknowledgement = defaults.needImplementationAcknowledgement;
    	      this.needLoopForValidMessages = defaults.needLoopForValidMessages;
    	      this.needTechnicalAcknowledgement = defaults.needTechnicalAcknowledgement;
    	      this.rolloverAcknowledgementControlNumber = defaults.rolloverAcknowledgementControlNumber;
    	      this.sendSynchronousAcknowledgement = defaults.sendSynchronousAcknowledgement;
        }

        @CustomType.Setter
        public Builder acknowledgementControlNumberLowerBound(Integer acknowledgementControlNumberLowerBound) {
            this.acknowledgementControlNumberLowerBound = Objects.requireNonNull(acknowledgementControlNumberLowerBound);
            return this;
        }
        @CustomType.Setter
        public Builder acknowledgementControlNumberPrefix(@Nullable String acknowledgementControlNumberPrefix) {
            this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder acknowledgementControlNumberSuffix(@Nullable String acknowledgementControlNumberSuffix) {
            this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder acknowledgementControlNumberUpperBound(Integer acknowledgementControlNumberUpperBound) {
            this.acknowledgementControlNumberUpperBound = Objects.requireNonNull(acknowledgementControlNumberUpperBound);
            return this;
        }
        @CustomType.Setter
        public Builder batchFunctionalAcknowledgements(Boolean batchFunctionalAcknowledgements) {
            this.batchFunctionalAcknowledgements = Objects.requireNonNull(batchFunctionalAcknowledgements);
            return this;
        }
        @CustomType.Setter
        public Builder batchImplementationAcknowledgements(Boolean batchImplementationAcknowledgements) {
            this.batchImplementationAcknowledgements = Objects.requireNonNull(batchImplementationAcknowledgements);
            return this;
        }
        @CustomType.Setter
        public Builder batchTechnicalAcknowledgements(Boolean batchTechnicalAcknowledgements) {
            this.batchTechnicalAcknowledgements = Objects.requireNonNull(batchTechnicalAcknowledgements);
            return this;
        }
        @CustomType.Setter
        public Builder functionalAcknowledgementVersion(@Nullable String functionalAcknowledgementVersion) {
            this.functionalAcknowledgementVersion = functionalAcknowledgementVersion;
            return this;
        }
        @CustomType.Setter
        public Builder implementationAcknowledgementVersion(@Nullable String implementationAcknowledgementVersion) {
            this.implementationAcknowledgementVersion = implementationAcknowledgementVersion;
            return this;
        }
        @CustomType.Setter
        public Builder needFunctionalAcknowledgement(Boolean needFunctionalAcknowledgement) {
            this.needFunctionalAcknowledgement = Objects.requireNonNull(needFunctionalAcknowledgement);
            return this;
        }
        @CustomType.Setter
        public Builder needImplementationAcknowledgement(Boolean needImplementationAcknowledgement) {
            this.needImplementationAcknowledgement = Objects.requireNonNull(needImplementationAcknowledgement);
            return this;
        }
        @CustomType.Setter
        public Builder needLoopForValidMessages(Boolean needLoopForValidMessages) {
            this.needLoopForValidMessages = Objects.requireNonNull(needLoopForValidMessages);
            return this;
        }
        @CustomType.Setter
        public Builder needTechnicalAcknowledgement(Boolean needTechnicalAcknowledgement) {
            this.needTechnicalAcknowledgement = Objects.requireNonNull(needTechnicalAcknowledgement);
            return this;
        }
        @CustomType.Setter
        public Builder rolloverAcknowledgementControlNumber(Boolean rolloverAcknowledgementControlNumber) {
            this.rolloverAcknowledgementControlNumber = Objects.requireNonNull(rolloverAcknowledgementControlNumber);
            return this;
        }
        @CustomType.Setter
        public Builder sendSynchronousAcknowledgement(Boolean sendSynchronousAcknowledgement) {
            this.sendSynchronousAcknowledgement = Objects.requireNonNull(sendSynchronousAcknowledgement);
            return this;
        }
        public X12AcknowledgementSettingsResponse build() {
            final var o = new X12AcknowledgementSettingsResponse();
            o.acknowledgementControlNumberLowerBound = acknowledgementControlNumberLowerBound;
            o.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
            o.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
            o.acknowledgementControlNumberUpperBound = acknowledgementControlNumberUpperBound;
            o.batchFunctionalAcknowledgements = batchFunctionalAcknowledgements;
            o.batchImplementationAcknowledgements = batchImplementationAcknowledgements;
            o.batchTechnicalAcknowledgements = batchTechnicalAcknowledgements;
            o.functionalAcknowledgementVersion = functionalAcknowledgementVersion;
            o.implementationAcknowledgementVersion = implementationAcknowledgementVersion;
            o.needFunctionalAcknowledgement = needFunctionalAcknowledgement;
            o.needImplementationAcknowledgement = needImplementationAcknowledgement;
            o.needLoopForValidMessages = needLoopForValidMessages;
            o.needTechnicalAcknowledgement = needTechnicalAcknowledgement;
            o.rolloverAcknowledgementControlNumber = rolloverAcknowledgementControlNumber;
            o.sendSynchronousAcknowledgement = sendSynchronousAcknowledgement;
            return o;
        }
    }
}
