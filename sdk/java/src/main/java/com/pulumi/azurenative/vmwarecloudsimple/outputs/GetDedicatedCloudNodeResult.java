// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.vmwarecloudsimple.outputs;

import com.pulumi.azurenative.vmwarecloudsimple.outputs.SkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDedicatedCloudNodeResult {
    /**
     * @return Availability Zone id, e.g. &#34;az1&#34;
     * 
     */
    private String availabilityZoneId;
    /**
     * @return Availability Zone name, e.g. &#34;Availability Zone 1&#34;
     * 
     */
    private String availabilityZoneName;
    /**
     * @return VMWare Cloud Rack Name
     * 
     */
    private String cloudRackName;
    /**
     * @return date time the resource was created
     * 
     */
    private String created;
    /**
     * @return SKU&#39;s id
     * 
     */
    private String id;
    /**
     * @return Azure region
     * 
     */
    private String location;
    /**
     * @return SKU&#39;s name
     * 
     */
    private String name;
    /**
     * @return count of nodes to create
     * 
     */
    private Integer nodesCount;
    /**
     * @return Placement Group id, e.g. &#34;n1&#34;
     * 
     */
    private String placementGroupId;
    /**
     * @return Placement Name, e.g. &#34;Placement Group 1&#34;
     * 
     */
    private String placementGroupName;
    /**
     * @return Private Cloud Id
     * 
     */
    private String privateCloudId;
    /**
     * @return Resource Pool Name
     * 
     */
    private String privateCloudName;
    /**
     * @return The provisioning status of the resource
     * 
     */
    private String provisioningState;
    /**
     * @return purchase id
     * 
     */
    private String purchaseId;
    /**
     * @return Dedicated Cloud Nodes SKU
     * 
     */
    private @Nullable SkuResponse sku;
    /**
     * @return Node status, indicates is private cloud set up on this node or not
     * 
     */
    private String status;
    /**
     * @return Dedicated Cloud Nodes tags
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return {resourceProviderNamespace}/{resourceType}
     * 
     */
    private String type;
    /**
     * @return VMWare Cluster Name
     * 
     */
    private String vmwareClusterName;

    private GetDedicatedCloudNodeResult() {}
    /**
     * @return Availability Zone id, e.g. &#34;az1&#34;
     * 
     */
    public String availabilityZoneId() {
        return this.availabilityZoneId;
    }
    /**
     * @return Availability Zone name, e.g. &#34;Availability Zone 1&#34;
     * 
     */
    public String availabilityZoneName() {
        return this.availabilityZoneName;
    }
    /**
     * @return VMWare Cloud Rack Name
     * 
     */
    public String cloudRackName() {
        return this.cloudRackName;
    }
    /**
     * @return date time the resource was created
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return SKU&#39;s id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Azure region
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return SKU&#39;s name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return count of nodes to create
     * 
     */
    public Integer nodesCount() {
        return this.nodesCount;
    }
    /**
     * @return Placement Group id, e.g. &#34;n1&#34;
     * 
     */
    public String placementGroupId() {
        return this.placementGroupId;
    }
    /**
     * @return Placement Name, e.g. &#34;Placement Group 1&#34;
     * 
     */
    public String placementGroupName() {
        return this.placementGroupName;
    }
    /**
     * @return Private Cloud Id
     * 
     */
    public String privateCloudId() {
        return this.privateCloudId;
    }
    /**
     * @return Resource Pool Name
     * 
     */
    public String privateCloudName() {
        return this.privateCloudName;
    }
    /**
     * @return The provisioning status of the resource
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return purchase id
     * 
     */
    public String purchaseId() {
        return this.purchaseId;
    }
    /**
     * @return Dedicated Cloud Nodes SKU
     * 
     */
    public Optional<SkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Node status, indicates is private cloud set up on this node or not
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Dedicated Cloud Nodes tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return {resourceProviderNamespace}/{resourceType}
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return VMWare Cluster Name
     * 
     */
    public String vmwareClusterName() {
        return this.vmwareClusterName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDedicatedCloudNodeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityZoneId;
        private String availabilityZoneName;
        private String cloudRackName;
        private String created;
        private String id;
        private String location;
        private String name;
        private Integer nodesCount;
        private String placementGroupId;
        private String placementGroupName;
        private String privateCloudId;
        private String privateCloudName;
        private String provisioningState;
        private String purchaseId;
        private @Nullable SkuResponse sku;
        private String status;
        private @Nullable Map<String,String> tags;
        private String type;
        private String vmwareClusterName;
        public Builder() {}
        public Builder(GetDedicatedCloudNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZoneId = defaults.availabilityZoneId;
    	      this.availabilityZoneName = defaults.availabilityZoneName;
    	      this.cloudRackName = defaults.cloudRackName;
    	      this.created = defaults.created;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.nodesCount = defaults.nodesCount;
    	      this.placementGroupId = defaults.placementGroupId;
    	      this.placementGroupName = defaults.placementGroupName;
    	      this.privateCloudId = defaults.privateCloudId;
    	      this.privateCloudName = defaults.privateCloudName;
    	      this.provisioningState = defaults.provisioningState;
    	      this.purchaseId = defaults.purchaseId;
    	      this.sku = defaults.sku;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vmwareClusterName = defaults.vmwareClusterName;
        }

        @CustomType.Setter
        public Builder availabilityZoneId(String availabilityZoneId) {
            this.availabilityZoneId = Objects.requireNonNull(availabilityZoneId);
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZoneName(String availabilityZoneName) {
            this.availabilityZoneName = Objects.requireNonNull(availabilityZoneName);
            return this;
        }
        @CustomType.Setter
        public Builder cloudRackName(String cloudRackName) {
            this.cloudRackName = Objects.requireNonNull(cloudRackName);
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodesCount(Integer nodesCount) {
            this.nodesCount = Objects.requireNonNull(nodesCount);
            return this;
        }
        @CustomType.Setter
        public Builder placementGroupId(String placementGroupId) {
            this.placementGroupId = Objects.requireNonNull(placementGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder placementGroupName(String placementGroupName) {
            this.placementGroupName = Objects.requireNonNull(placementGroupName);
            return this;
        }
        @CustomType.Setter
        public Builder privateCloudId(String privateCloudId) {
            this.privateCloudId = Objects.requireNonNull(privateCloudId);
            return this;
        }
        @CustomType.Setter
        public Builder privateCloudName(String privateCloudName) {
            this.privateCloudName = Objects.requireNonNull(privateCloudName);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder purchaseId(String purchaseId) {
            this.purchaseId = Objects.requireNonNull(purchaseId);
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable SkuResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder vmwareClusterName(String vmwareClusterName) {
            this.vmwareClusterName = Objects.requireNonNull(vmwareClusterName);
            return this;
        }
        public GetDedicatedCloudNodeResult build() {
            final var o = new GetDedicatedCloudNodeResult();
            o.availabilityZoneId = availabilityZoneId;
            o.availabilityZoneName = availabilityZoneName;
            o.cloudRackName = cloudRackName;
            o.created = created;
            o.id = id;
            o.location = location;
            o.name = name;
            o.nodesCount = nodesCount;
            o.placementGroupId = placementGroupId;
            o.placementGroupName = placementGroupName;
            o.privateCloudId = privateCloudId;
            o.privateCloudName = privateCloudName;
            o.provisioningState = provisioningState;
            o.purchaseId = purchaseId;
            o.sku = sku;
            o.status = status;
            o.tags = tags;
            o.type = type;
            o.vmwareClusterName = vmwareClusterName;
            return o;
        }
    }
}
