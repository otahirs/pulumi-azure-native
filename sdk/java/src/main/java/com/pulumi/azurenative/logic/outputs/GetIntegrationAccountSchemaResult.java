// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.azurenative.logic.outputs.ContentLinkResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIntegrationAccountSchemaResult {
    /**
     * @return The changed time.
     * 
     */
    private String changedTime;
    /**
     * @return The content.
     * 
     */
    private @Nullable String content;
    /**
     * @return The content link.
     * 
     */
    private ContentLinkResponse contentLink;
    /**
     * @return The content type.
     * 
     */
    private @Nullable String contentType;
    /**
     * @return The created time.
     * 
     */
    private String createdTime;
    /**
     * @return The document name.
     * 
     */
    private @Nullable String documentName;
    /**
     * @return The file name.
     * 
     */
    private @Nullable String fileName;
    /**
     * @return The resource id.
     * 
     */
    private String id;
    /**
     * @return The resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return The metadata.
     * 
     */
    private @Nullable Object metadata;
    /**
     * @return Gets the resource name.
     * 
     */
    private String name;
    /**
     * @return The schema type.
     * 
     */
    private String schemaType;
    /**
     * @return The resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The target namespace of the schema.
     * 
     */
    private @Nullable String targetNamespace;
    /**
     * @return Gets the resource type.
     * 
     */
    private String type;

    private GetIntegrationAccountSchemaResult() {}
    /**
     * @return The changed time.
     * 
     */
    public String changedTime() {
        return this.changedTime;
    }
    /**
     * @return The content.
     * 
     */
    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }
    /**
     * @return The content link.
     * 
     */
    public ContentLinkResponse contentLink() {
        return this.contentLink;
    }
    /**
     * @return The content type.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return The created time.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return The document name.
     * 
     */
    public Optional<String> documentName() {
        return Optional.ofNullable(this.documentName);
    }
    /**
     * @return The file name.
     * 
     */
    public Optional<String> fileName() {
        return Optional.ofNullable(this.fileName);
    }
    /**
     * @return The resource id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The metadata.
     * 
     */
    public Optional<Object> metadata() {
        return Optional.ofNullable(this.metadata);
    }
    /**
     * @return Gets the resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The schema type.
     * 
     */
    public String schemaType() {
        return this.schemaType;
    }
    /**
     * @return The resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The target namespace of the schema.
     * 
     */
    public Optional<String> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }
    /**
     * @return Gets the resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIntegrationAccountSchemaResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String changedTime;
        private @Nullable String content;
        private ContentLinkResponse contentLink;
        private @Nullable String contentType;
        private String createdTime;
        private @Nullable String documentName;
        private @Nullable String fileName;
        private String id;
        private @Nullable String location;
        private @Nullable Object metadata;
        private String name;
        private String schemaType;
        private @Nullable Map<String,String> tags;
        private @Nullable String targetNamespace;
        private String type;
        public Builder() {}
        public Builder(GetIntegrationAccountSchemaResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.changedTime = defaults.changedTime;
    	      this.content = defaults.content;
    	      this.contentLink = defaults.contentLink;
    	      this.contentType = defaults.contentType;
    	      this.createdTime = defaults.createdTime;
    	      this.documentName = defaults.documentName;
    	      this.fileName = defaults.fileName;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.schemaType = defaults.schemaType;
    	      this.tags = defaults.tags;
    	      this.targetNamespace = defaults.targetNamespace;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder changedTime(String changedTime) {
            this.changedTime = Objects.requireNonNull(changedTime);
            return this;
        }
        @CustomType.Setter
        public Builder content(@Nullable String content) {
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentLink(ContentLinkResponse contentLink) {
            this.contentLink = Objects.requireNonNull(contentLink);
            return this;
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        @CustomType.Setter
        public Builder documentName(@Nullable String documentName) {
            this.documentName = documentName;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(@Nullable String fileName) {
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable Object metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(String schemaType) {
            this.schemaType = Objects.requireNonNull(schemaType);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetNamespace(@Nullable String targetNamespace) {
            this.targetNamespace = targetNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetIntegrationAccountSchemaResult build() {
            final var o = new GetIntegrationAccountSchemaResult();
            o.changedTime = changedTime;
            o.content = content;
            o.contentLink = contentLink;
            o.contentType = contentType;
            o.createdTime = createdTime;
            o.documentName = documentName;
            o.fileName = fileName;
            o.id = id;
            o.location = location;
            o.metadata = metadata;
            o.name = name;
            o.schemaType = schemaType;
            o.tags = tags;
            o.targetNamespace = targetNamespace;
            o.type = type;
            return o;
        }
    }
}
