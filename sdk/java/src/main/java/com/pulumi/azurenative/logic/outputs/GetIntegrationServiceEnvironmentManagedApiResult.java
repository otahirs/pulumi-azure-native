// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.azurenative.logic.outputs.ApiResourceBackendServiceResponse;
import com.pulumi.azurenative.logic.outputs.ApiResourceDefinitionsResponse;
import com.pulumi.azurenative.logic.outputs.ApiResourceGeneralInformationResponse;
import com.pulumi.azurenative.logic.outputs.ApiResourceMetadataResponse;
import com.pulumi.azurenative.logic.outputs.ApiResourcePoliciesResponse;
import com.pulumi.azurenative.logic.outputs.IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse;
import com.pulumi.azurenative.logic.outputs.ResourceReferenceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIntegrationServiceEnvironmentManagedApiResult {
    /**
     * @return The API definition.
     * 
     */
    private String apiDefinitionUrl;
    /**
     * @return The api definitions.
     * 
     */
    private ApiResourceDefinitionsResponse apiDefinitions;
    /**
     * @return The backend service.
     * 
     */
    private ApiResourceBackendServiceResponse backendService;
    /**
     * @return The capabilities.
     * 
     */
    private List<String> capabilities;
    /**
     * @return The category.
     * 
     */
    private String category;
    /**
     * @return The connection parameters.
     * 
     */
    private Map<String,Object> connectionParameters;
    /**
     * @return The integration service environment managed api deployment parameters.
     * 
     */
    private @Nullable IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse deploymentParameters;
    /**
     * @return The api general information.
     * 
     */
    private ApiResourceGeneralInformationResponse generalInformation;
    /**
     * @return The resource id.
     * 
     */
    private String id;
    /**
     * @return The integration service environment reference.
     * 
     */
    private @Nullable ResourceReferenceResponse integrationServiceEnvironment;
    /**
     * @return The resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return The metadata.
     * 
     */
    private ApiResourceMetadataResponse metadata;
    /**
     * @return Gets the resource name.
     * 
     */
    private String name;
    /**
     * @return The policies for the API.
     * 
     */
    private ApiResourcePoliciesResponse policies;
    /**
     * @return The provisioning state.
     * 
     */
    private String provisioningState;
    /**
     * @return The runtime urls.
     * 
     */
    private List<String> runtimeUrls;
    /**
     * @return The resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Gets the resource type.
     * 
     */
    private String type;

    private GetIntegrationServiceEnvironmentManagedApiResult() {}
    /**
     * @return The API definition.
     * 
     */
    public String apiDefinitionUrl() {
        return this.apiDefinitionUrl;
    }
    /**
     * @return The api definitions.
     * 
     */
    public ApiResourceDefinitionsResponse apiDefinitions() {
        return this.apiDefinitions;
    }
    /**
     * @return The backend service.
     * 
     */
    public ApiResourceBackendServiceResponse backendService() {
        return this.backendService;
    }
    /**
     * @return The capabilities.
     * 
     */
    public List<String> capabilities() {
        return this.capabilities;
    }
    /**
     * @return The category.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The connection parameters.
     * 
     */
    public Map<String,Object> connectionParameters() {
        return this.connectionParameters;
    }
    /**
     * @return The integration service environment managed api deployment parameters.
     * 
     */
    public Optional<IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse> deploymentParameters() {
        return Optional.ofNullable(this.deploymentParameters);
    }
    /**
     * @return The api general information.
     * 
     */
    public ApiResourceGeneralInformationResponse generalInformation() {
        return this.generalInformation;
    }
    /**
     * @return The resource id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The integration service environment reference.
     * 
     */
    public Optional<ResourceReferenceResponse> integrationServiceEnvironment() {
        return Optional.ofNullable(this.integrationServiceEnvironment);
    }
    /**
     * @return The resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The metadata.
     * 
     */
    public ApiResourceMetadataResponse metadata() {
        return this.metadata;
    }
    /**
     * @return Gets the resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The policies for the API.
     * 
     */
    public ApiResourcePoliciesResponse policies() {
        return this.policies;
    }
    /**
     * @return The provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The runtime urls.
     * 
     */
    public List<String> runtimeUrls() {
        return this.runtimeUrls;
    }
    /**
     * @return The resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Gets the resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIntegrationServiceEnvironmentManagedApiResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiDefinitionUrl;
        private ApiResourceDefinitionsResponse apiDefinitions;
        private ApiResourceBackendServiceResponse backendService;
        private List<String> capabilities;
        private String category;
        private Map<String,Object> connectionParameters;
        private @Nullable IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse deploymentParameters;
        private ApiResourceGeneralInformationResponse generalInformation;
        private String id;
        private @Nullable ResourceReferenceResponse integrationServiceEnvironment;
        private @Nullable String location;
        private ApiResourceMetadataResponse metadata;
        private String name;
        private ApiResourcePoliciesResponse policies;
        private String provisioningState;
        private List<String> runtimeUrls;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetIntegrationServiceEnvironmentManagedApiResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiDefinitionUrl = defaults.apiDefinitionUrl;
    	      this.apiDefinitions = defaults.apiDefinitions;
    	      this.backendService = defaults.backendService;
    	      this.capabilities = defaults.capabilities;
    	      this.category = defaults.category;
    	      this.connectionParameters = defaults.connectionParameters;
    	      this.deploymentParameters = defaults.deploymentParameters;
    	      this.generalInformation = defaults.generalInformation;
    	      this.id = defaults.id;
    	      this.integrationServiceEnvironment = defaults.integrationServiceEnvironment;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.policies = defaults.policies;
    	      this.provisioningState = defaults.provisioningState;
    	      this.runtimeUrls = defaults.runtimeUrls;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder apiDefinitionUrl(String apiDefinitionUrl) {
            this.apiDefinitionUrl = Objects.requireNonNull(apiDefinitionUrl);
            return this;
        }
        @CustomType.Setter
        public Builder apiDefinitions(ApiResourceDefinitionsResponse apiDefinitions) {
            this.apiDefinitions = Objects.requireNonNull(apiDefinitions);
            return this;
        }
        @CustomType.Setter
        public Builder backendService(ApiResourceBackendServiceResponse backendService) {
            this.backendService = Objects.requireNonNull(backendService);
            return this;
        }
        @CustomType.Setter
        public Builder capabilities(List<String> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder category(String category) {
            this.category = Objects.requireNonNull(category);
            return this;
        }
        @CustomType.Setter
        public Builder connectionParameters(Map<String,Object> connectionParameters) {
            this.connectionParameters = Objects.requireNonNull(connectionParameters);
            return this;
        }
        @CustomType.Setter
        public Builder deploymentParameters(@Nullable IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse deploymentParameters) {
            this.deploymentParameters = deploymentParameters;
            return this;
        }
        @CustomType.Setter
        public Builder generalInformation(ApiResourceGeneralInformationResponse generalInformation) {
            this.generalInformation = Objects.requireNonNull(generalInformation);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder integrationServiceEnvironment(@Nullable ResourceReferenceResponse integrationServiceEnvironment) {
            this.integrationServiceEnvironment = integrationServiceEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(ApiResourceMetadataResponse metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder policies(ApiResourcePoliciesResponse policies) {
            this.policies = Objects.requireNonNull(policies);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder runtimeUrls(List<String> runtimeUrls) {
            this.runtimeUrls = Objects.requireNonNull(runtimeUrls);
            return this;
        }
        public Builder runtimeUrls(String... runtimeUrls) {
            return runtimeUrls(List.of(runtimeUrls));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetIntegrationServiceEnvironmentManagedApiResult build() {
            final var o = new GetIntegrationServiceEnvironmentManagedApiResult();
            o.apiDefinitionUrl = apiDefinitionUrl;
            o.apiDefinitions = apiDefinitions;
            o.backendService = backendService;
            o.capabilities = capabilities;
            o.category = category;
            o.connectionParameters = connectionParameters;
            o.deploymentParameters = deploymentParameters;
            o.generalInformation = generalInformation;
            o.id = id;
            o.integrationServiceEnvironment = integrationServiceEnvironment;
            o.location = location;
            o.metadata = metadata;
            o.name = name;
            o.policies = policies;
            o.provisioningState = provisioningState;
            o.runtimeUrls = runtimeUrls;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
