// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.inputs.ImageReferenceArgs;
import com.pulumi.azurenative.workloads.inputs.OSProfileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Defines the virtual machine configuration.
 * 
 */
public final class VirtualMachineConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineConfigurationArgs Empty = new VirtualMachineConfigurationArgs();

    /**
     * The image reference.
     * 
     */
    @Import(name="imageReference", required=true)
    private Output<ImageReferenceArgs> imageReference;

    /**
     * @return The image reference.
     * 
     */
    public Output<ImageReferenceArgs> imageReference() {
        return this.imageReference;
    }

    /**
     * The OS profile.
     * 
     */
    @Import(name="osProfile", required=true)
    private Output<OSProfileArgs> osProfile;

    /**
     * @return The OS profile.
     * 
     */
    public Output<OSProfileArgs> osProfile() {
        return this.osProfile;
    }

    /**
     * The virtual machine size.
     * 
     */
    @Import(name="vmSize", required=true)
    private Output<String> vmSize;

    /**
     * @return The virtual machine size.
     * 
     */
    public Output<String> vmSize() {
        return this.vmSize;
    }

    private VirtualMachineConfigurationArgs() {}

    private VirtualMachineConfigurationArgs(VirtualMachineConfigurationArgs $) {
        this.imageReference = $.imageReference;
        this.osProfile = $.osProfile;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineConfigurationArgs $;

        public Builder() {
            $ = new VirtualMachineConfigurationArgs();
        }

        public Builder(VirtualMachineConfigurationArgs defaults) {
            $ = new VirtualMachineConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageReference The image reference.
         * 
         * @return builder
         * 
         */
        public Builder imageReference(Output<ImageReferenceArgs> imageReference) {
            $.imageReference = imageReference;
            return this;
        }

        /**
         * @param imageReference The image reference.
         * 
         * @return builder
         * 
         */
        public Builder imageReference(ImageReferenceArgs imageReference) {
            return imageReference(Output.of(imageReference));
        }

        /**
         * @param osProfile The OS profile.
         * 
         * @return builder
         * 
         */
        public Builder osProfile(Output<OSProfileArgs> osProfile) {
            $.osProfile = osProfile;
            return this;
        }

        /**
         * @param osProfile The OS profile.
         * 
         * @return builder
         * 
         */
        public Builder osProfile(OSProfileArgs osProfile) {
            return osProfile(Output.of(osProfile));
        }

        /**
         * @param vmSize The virtual machine size.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(Output<String> vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        /**
         * @param vmSize The virtual machine size.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(String vmSize) {
            return vmSize(Output.of(vmSize));
        }

        public VirtualMachineConfigurationArgs build() {
            $.imageReference = Objects.requireNonNull($.imageReference, "expected parameter 'imageReference' to be non-null");
            $.osProfile = Objects.requireNonNull($.osProfile, "expected parameter 'osProfile' to be non-null");
            $.vmSize = Objects.requireNonNull($.vmSize, "expected parameter 'vmSize' to be non-null");
            return $;
        }
    }

}
