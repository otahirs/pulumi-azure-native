// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.compute.VirtualMachineScaleSetArgs;
import com.pulumi.azurenative.compute.outputs.AdditionalCapabilitiesResponse;
import com.pulumi.azurenative.compute.outputs.AutomaticRepairsPolicyResponse;
import com.pulumi.azurenative.compute.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.compute.outputs.PlanResponse;
import com.pulumi.azurenative.compute.outputs.ScaleInPolicyResponse;
import com.pulumi.azurenative.compute.outputs.SkuResponse;
import com.pulumi.azurenative.compute.outputs.SubResourceResponse;
import com.pulumi.azurenative.compute.outputs.UpgradePolicyResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineScaleSetIdentityResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineScaleSetVMProfileResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Describes a Virtual Machine Scale Set.
 * API Version: 2021-03-01.
 * 
 * ## Example Usage
 * ### Create a custom-image scale set from an unmanaged generalized os image.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.of(&#34;osDisk&#34;, Map.ofEntries(
 *                     Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                     Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                     Map.entry(&#34;image&#34;, Map.of(&#34;uri&#34;, &#34;http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd&#34;)),
 *                     Map.entry(&#34;name&#34;, &#34;osDisk&#34;)
 *                 )))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a platform-image scale set with unmanaged os disks.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;name&#34;, &#34;osDisk&#34;),
 *                         Map.entry(&#34;vhdContainers&#34;,                         
 *                             &#34;http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer&#34;,
 *                             &#34;http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer&#34;,
 *                             &#34;http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer&#34;,
 *                             &#34;http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer&#34;,
 *                             &#34;http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer&#34;)
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set from a custom image.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}&#34;)),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set from a generalized shared image.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage&#34;)),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set from a specialized shared image.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage&#34;)),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with DiskEncryptionSet resource in os disk and data disk.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_DS1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;dataDisks&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;Empty&#34;),
 *                         Map.entry(&#34;diskSizeGB&#34;, 1023),
 *                         Map.entry(&#34;lun&#34;, 0),
 *                         Map.entry(&#34;managedDisk&#34;, Map.ofEntries(
 *                             Map.entry(&#34;diskEncryptionSet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}&#34;)),
 *                             Map.entry(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;)
 *                         ))
 *                     )),
 *                     Map.entry(&#34;imageReference&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}&#34;)),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.ofEntries(
 *                             Map.entry(&#34;diskEncryptionSet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}&#34;)),
 *                             Map.entry(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;)
 *                         ))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with Fpga Network Interfaces.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;enableIPForwarding&#34;, true),
 *                         Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                             Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                             Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                         )),
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;primary&#34;, true)
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;enableAcceleratedNetworking&#34;, false),
 *                         Map.entry(&#34;enableFpga&#34;, true),
 *                         Map.entry(&#34;enableIPForwarding&#34;, false),
 *                         Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                             Map.entry(&#34;name&#34;, &#34;{fpgaNic-Name}&#34;),
 *                             Map.entry(&#34;primary&#34;, true),
 *                             Map.entry(&#34;privateIPAddressVersion&#34;, &#34;IPv4&#34;),
 *                             Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}&#34;))
 *                         )),
 *                         Map.entry(&#34;name&#34;, &#34;{fpgaNic-Name}&#34;),
 *                         Map.entry(&#34;primary&#34;, false)
 *                     ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}&#34;)),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with Host Encryption using encryptionAtHost property.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .plan(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;windows2016&#34;),
 *                 Map.entry(&#34;product&#34;, &#34;windows-data-science-vm&#34;),
 *                 Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;)
 *             ))
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_DS1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;securityProfile&#34;, Map.of(&#34;encryptionAtHost&#34;, true)),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;windows-data-science-vm&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;windows2016&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadOnly&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with Uefi Settings of secureBoot and vTPM.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D2s_v3&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;securityProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;securityType&#34;, &#34;TrustedLaunch&#34;),
 *                     Map.entry(&#34;uefiSettings&#34;, Map.ofEntries(
 *                         Map.entry(&#34;secureBootEnabled&#34;, true),
 *                         Map.entry(&#34;vTpmEnabled&#34;, true)
 *                     ))
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;windowsserver-gen2preview-preview&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;windows10-tvm&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;18363.592.2001092016&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadOnly&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;StandardSSD_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with a marketplace image plan.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .plan(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;windows2016&#34;),
 *                 Map.entry(&#34;product&#34;, &#34;windows-data-science-vm&#34;),
 *                 Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;)
 *             ))
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;windows-data-science-vm&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;windows2016&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with an azure application gateway.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;applicationGatewayBackendAddressPools&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/{existing-application-gateway-name}/backendAddressPools/{existing-backend-address-pool-name}&#34;)),
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with an azure load balancer.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;loadBalancerBackendAddressPools&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/backendAddressPools/{existing-backend-address-pool-name}&#34;)),
 *                         Map.entry(&#34;loadBalancerInboundNatPools&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/inboundNatPools/{existing-nat-pool-name}&#34;)),
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;publicIPAddressConfiguration&#34;, Map.ofEntries(
 *                             Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                             Map.entry(&#34;publicIPAddressVersion&#34;, &#34;IPv4&#34;)
 *                         )),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with automatic repairs enabled
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .automaticRepairsPolicy(Map.ofEntries(
 *                 Map.entry(&#34;enabled&#34;, true),
 *                 Map.entry(&#34;gracePeriod&#34;, &#34;PT30M&#34;)
 *             ))
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with boot diagnostics.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;diagnosticsProfile&#34;, Map.of(&#34;bootDiagnostics&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enabled&#34;, true),
 *                     Map.entry(&#34;storageUri&#34;, &#34;http://{existing-storage-account-name}.blob.core.windows.net&#34;)
 *                 ))),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with empty data disks on each vm.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D2_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;dataDisks&#34;,                     
 *                         Map.ofEntries(
 *                             Map.entry(&#34;createOption&#34;, &#34;Empty&#34;),
 *                             Map.entry(&#34;diskSizeGB&#34;, 1023),
 *                             Map.entry(&#34;lun&#34;, 0)
 *                         ),
 *                         Map.ofEntries(
 *                             Map.entry(&#34;createOption&#34;, &#34;Empty&#34;),
 *                             Map.entry(&#34;diskSizeGB&#34;, 1023),
 *                             Map.entry(&#34;lun&#34;, 1)
 *                         )),
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;diskSizeGB&#34;, 512),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with ephemeral os disks using placement property.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .plan(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;windows2016&#34;),
 *                 Map.entry(&#34;product&#34;, &#34;windows-data-science-vm&#34;),
 *                 Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;)
 *             ))
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_DS1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;windows-data-science-vm&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;windows2016&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadOnly&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;diffDiskSettings&#34;, Map.ofEntries(
 *                             Map.entry(&#34;option&#34;, &#34;Local&#34;),
 *                             Map.entry(&#34;placement&#34;, &#34;ResourceDisk&#34;)
 *                         )),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with ephemeral os disks.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .plan(Map.ofEntries(
 *                 Map.entry(&#34;name&#34;, &#34;windows2016&#34;),
 *                 Map.entry(&#34;product&#34;, &#34;windows-data-science-vm&#34;),
 *                 Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;)
 *             ))
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_DS1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;windows-data-science-vm&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;microsoft-ads&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;windows2016&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadOnly&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;diffDiskSettings&#34;, Map.of(&#34;option&#34;, &#34;Local&#34;)),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with extension time budget.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;diagnosticsProfile&#34;, Map.of(&#34;bootDiagnostics&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enabled&#34;, true),
 *                     Map.entry(&#34;storageUri&#34;, &#34;http://{existing-storage-account-name}.blob.core.windows.net&#34;)
 *                 ))),
 *                 Map.entry(&#34;extensionProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;extensions&#34;, Map.ofEntries(
 *                         Map.entry(&#34;autoUpgradeMinorVersion&#34;, false),
 *                         Map.entry(&#34;name&#34;, &#34;{extension-name}&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;{extension-Publisher}&#34;),
 *                         Map.entry(&#34;settings&#34;, ),
 *                         Map.entry(&#34;type&#34;, &#34;{extension-Type}&#34;),
 *                         Map.entry(&#34;typeHandlerVersion&#34;, &#34;{handler-version}&#34;)
 *                     )),
 *                     Map.entry(&#34;extensionsTimeBudget&#34;, &#34;PT1H20M&#34;)
 *                 )),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with managed boot diagnostics.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;diagnosticsProfile&#34;, Map.of(&#34;bootDiagnostics&#34;, Map.of(&#34;enabled&#34;, true))),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with password authentication.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with premium storage.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Premium_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with ssh authentication.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;linuxConfiguration&#34;, Map.ofEntries(
 *                         Map.entry(&#34;disablePasswordAuthentication&#34;, true),
 *                         Map.entry(&#34;ssh&#34;, Map.of(&#34;publicKeys&#34;, Map.ofEntries(
 *                             Map.entry(&#34;keyData&#34;, &#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1&#34;),
 *                             Map.entry(&#34;path&#34;, &#34;/home/{your-username}/.ssh/authorized_keys&#34;)
 *                         )))
 *                     ))
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with terminate scheduled events enabled.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;scheduledEventsProfile&#34;, Map.of(&#34;terminateNotificationProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enable&#34;, true),
 *                     Map.entry(&#34;notBeforeTimeout&#34;, &#34;PT5M&#34;)
 *                 ))),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with userData.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;westus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 3),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Manual&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 )),
 *                 Map.entry(&#34;userData&#34;, &#34;RXhhbXBsZSBVc2VyRGF0YQ==&#34;)
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create a scale set with virtual machines in different zones.
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var virtualMachineScaleSet = new VirtualMachineScaleSet(&#34;virtualMachineScaleSet&#34;, VirtualMachineScaleSetArgs.builder()        
 *             .location(&#34;centralus&#34;)
 *             .overprovision(true)
 *             .resourceGroupName(&#34;myResourceGroup&#34;)
 *             .sku(Map.ofEntries(
 *                 Map.entry(&#34;capacity&#34;, 2),
 *                 Map.entry(&#34;name&#34;, &#34;Standard_A1_v2&#34;),
 *                 Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *             ))
 *             .upgradePolicy(Map.of(&#34;mode&#34;, &#34;Automatic&#34;))
 *             .virtualMachineProfile(Map.ofEntries(
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;networkInterfaceConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;enableIPForwarding&#34;, true),
 *                     Map.entry(&#34;ipConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                         Map.entry(&#34;subnet&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}&#34;))
 *                     )),
 *                     Map.entry(&#34;name&#34;, &#34;{vmss-name}&#34;),
 *                     Map.entry(&#34;primary&#34;, true)
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;adminPassword&#34;, &#34;{your-password}&#34;),
 *                     Map.entry(&#34;adminUsername&#34;, &#34;{your-username}&#34;),
 *                     Map.entry(&#34;computerNamePrefix&#34;, &#34;{vmss-name}&#34;)
 *                 )),
 *                 Map.entry(&#34;storageProfile&#34;, Map.ofEntries(
 *                     Map.entry(&#34;dataDisks&#34;,                     
 *                         Map.ofEntries(
 *                             Map.entry(&#34;createOption&#34;, &#34;Empty&#34;),
 *                             Map.entry(&#34;diskSizeGB&#34;, 1023),
 *                             Map.entry(&#34;lun&#34;, 0)
 *                         ),
 *                         Map.ofEntries(
 *                             Map.entry(&#34;createOption&#34;, &#34;Empty&#34;),
 *                             Map.entry(&#34;diskSizeGB&#34;, 1023),
 *                             Map.entry(&#34;lun&#34;, 1)
 *                         )),
 *                     Map.entry(&#34;imageReference&#34;, Map.ofEntries(
 *                         Map.entry(&#34;offer&#34;, &#34;WindowsServer&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;MicrosoftWindowsServer&#34;),
 *                         Map.entry(&#34;sku&#34;, &#34;2016-Datacenter&#34;),
 *                         Map.entry(&#34;version&#34;, &#34;latest&#34;)
 *                     )),
 *                     Map.entry(&#34;osDisk&#34;, Map.ofEntries(
 *                         Map.entry(&#34;caching&#34;, &#34;ReadWrite&#34;),
 *                         Map.entry(&#34;createOption&#34;, &#34;FromImage&#34;),
 *                         Map.entry(&#34;diskSizeGB&#34;, 512),
 *                         Map.entry(&#34;managedDisk&#34;, Map.of(&#34;storageAccountType&#34;, &#34;Standard_LRS&#34;))
 *                     ))
 *                 ))
 *             ))
 *             .vmScaleSetName(&#34;{vmss-name}&#34;)
 *             .zones(            
 *                 &#34;1&#34;,
 *                 &#34;3&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:compute:VirtualMachineScaleSet {vmss-name} /subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name} 
 * ```
 * 
 */
@ResourceType(type="azure-native:compute:VirtualMachineScaleSet")
public class VirtualMachineScaleSet extends com.pulumi.resources.CustomResource {
    /**
     * Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
     * 
     */
    @Export(name="additionalCapabilities", type=AdditionalCapabilitiesResponse.class, parameters={})
    private Output</* @Nullable */ AdditionalCapabilitiesResponse> additionalCapabilities;

    /**
     * @return Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
     * 
     */
    public Output<Optional<AdditionalCapabilitiesResponse>> additionalCapabilities() {
        return Codegen.optional(this.additionalCapabilities);
    }
    /**
     * Policy for automatic repairs.
     * 
     */
    @Export(name="automaticRepairsPolicy", type=AutomaticRepairsPolicyResponse.class, parameters={})
    private Output</* @Nullable */ AutomaticRepairsPolicyResponse> automaticRepairsPolicy;

    /**
     * @return Policy for automatic repairs.
     * 
     */
    public Output<Optional<AutomaticRepairsPolicyResponse>> automaticRepairsPolicy() {
        return Codegen.optional(this.automaticRepairsPolicy);
    }
    /**
     * When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
     * 
     */
    @Export(name="doNotRunExtensionsOnOverprovisionedVMs", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> doNotRunExtensionsOnOverprovisionedVMs;

    /**
     * @return When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
     * 
     */
    public Output<Optional<Boolean>> doNotRunExtensionsOnOverprovisionedVMs() {
        return Codegen.optional(this.doNotRunExtensionsOnOverprovisionedVMs);
    }
    /**
     * The extended location of the Virtual Machine Scale Set.
     * 
     */
    @Export(name="extendedLocation", type=ExtendedLocationResponse.class, parameters={})
    private Output</* @Nullable */ ExtendedLocationResponse> extendedLocation;

    /**
     * @return The extended location of the Virtual Machine Scale Set.
     * 
     */
    public Output<Optional<ExtendedLocationResponse>> extendedLocation() {
        return Codegen.optional(this.extendedLocation);
    }
    /**
     * Specifies information about the dedicated host group that the virtual machine scale set resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
     * 
     */
    @Export(name="hostGroup", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> hostGroup;

    /**
     * @return Specifies information about the dedicated host group that the virtual machine scale set resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
     * 
     */
    public Output<Optional<SubResourceResponse>> hostGroup() {
        return Codegen.optional(this.hostGroup);
    }
    /**
     * The identity of the virtual machine scale set, if configured.
     * 
     */
    @Export(name="identity", type=VirtualMachineScaleSetIdentityResponse.class, parameters={})
    private Output</* @Nullable */ VirtualMachineScaleSetIdentityResponse> identity;

    /**
     * @return The identity of the virtual machine scale set, if configured.
     * 
     */
    public Output<Optional<VirtualMachineScaleSetIdentityResponse>> identity() {
        return Codegen.optional(this.identity);
    }
    /**
     * Resource location
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Resource name
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the orchestration mode for the virtual machine scale set.
     * 
     */
    @Export(name="orchestrationMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> orchestrationMode;

    /**
     * @return Specifies the orchestration mode for the virtual machine scale set.
     * 
     */
    public Output<Optional<String>> orchestrationMode() {
        return Codegen.optional(this.orchestrationMode);
    }
    /**
     * Specifies whether the Virtual Machine Scale Set should be overprovisioned.
     * 
     */
    @Export(name="overprovision", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> overprovision;

    /**
     * @return Specifies whether the Virtual Machine Scale Set should be overprovisioned.
     * 
     */
    public Output<Optional<Boolean>> overprovision() {
        return Codegen.optional(this.overprovision);
    }
    /**
     * Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
     * 
     */
    @Export(name="plan", type=PlanResponse.class, parameters={})
    private Output</* @Nullable */ PlanResponse> plan;

    /**
     * @return Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
     * 
     */
    public Output<Optional<PlanResponse>> plan() {
        return Codegen.optional(this.plan);
    }
    /**
     * Fault Domain count for each placement group.
     * 
     */
    @Export(name="platformFaultDomainCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> platformFaultDomainCount;

    /**
     * @return Fault Domain count for each placement group.
     * 
     */
    public Output<Optional<Integer>> platformFaultDomainCount() {
        return Codegen.optional(this.platformFaultDomainCount);
    }
    /**
     * The provisioning state, which only appears in the response.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state, which only appears in the response.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
     * 
     */
    @Export(name="proximityPlacementGroup", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> proximityPlacementGroup;

    /**
     * @return Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
     * 
     */
    public Output<Optional<SubResourceResponse>> proximityPlacementGroup() {
        return Codegen.optional(this.proximityPlacementGroup);
    }
    /**
     * Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
     * 
     */
    @Export(name="scaleInPolicy", type=ScaleInPolicyResponse.class, parameters={})
    private Output</* @Nullable */ ScaleInPolicyResponse> scaleInPolicy;

    /**
     * @return Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
     * 
     */
    public Output<Optional<ScaleInPolicyResponse>> scaleInPolicy() {
        return Codegen.optional(this.scaleInPolicy);
    }
    /**
     * When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true.
     * 
     */
    @Export(name="singlePlacementGroup", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> singlePlacementGroup;

    /**
     * @return When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true.
     * 
     */
    public Output<Optional<Boolean>> singlePlacementGroup() {
        return Codegen.optional(this.singlePlacementGroup);
    }
    /**
     * The virtual machine scale set sku.
     * 
     */
    @Export(name="sku", type=SkuResponse.class, parameters={})
    private Output</* @Nullable */ SkuResponse> sku;

    /**
     * @return The virtual machine scale set sku.
     * 
     */
    public Output<Optional<SkuResponse>> sku() {
        return Codegen.optional(this.sku);
    }
    /**
     * Resource tags
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Resource type
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
     * 
     */
    @Export(name="uniqueId", type=String.class, parameters={})
    private Output<String> uniqueId;

    /**
     * @return Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
     * 
     */
    public Output<String> uniqueId() {
        return this.uniqueId;
    }
    /**
     * The upgrade policy.
     * 
     */
    @Export(name="upgradePolicy", type=UpgradePolicyResponse.class, parameters={})
    private Output</* @Nullable */ UpgradePolicyResponse> upgradePolicy;

    /**
     * @return The upgrade policy.
     * 
     */
    public Output<Optional<UpgradePolicyResponse>> upgradePolicy() {
        return Codegen.optional(this.upgradePolicy);
    }
    /**
     * The virtual machine profile.
     * 
     */
    @Export(name="virtualMachineProfile", type=VirtualMachineScaleSetVMProfileResponse.class, parameters={})
    private Output</* @Nullable */ VirtualMachineScaleSetVMProfileResponse> virtualMachineProfile;

    /**
     * @return The virtual machine profile.
     * 
     */
    public Output<Optional<VirtualMachineScaleSetVMProfileResponse>> virtualMachineProfile() {
        return Codegen.optional(this.virtualMachineProfile);
    }
    /**
     * Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
     * 
     */
    @Export(name="zoneBalance", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> zoneBalance;

    /**
     * @return Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
     * 
     */
    public Output<Optional<Boolean>> zoneBalance() {
        return Codegen.optional(this.zoneBalance);
    }
    /**
     * The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set
     * 
     */
    @Export(name="zones", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> zones;

    /**
     * @return The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set
     * 
     */
    public Output<Optional<List<String>>> zones() {
        return Codegen.optional(this.zones);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualMachineScaleSet(String name) {
        this(name, VirtualMachineScaleSetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualMachineScaleSet(String name, VirtualMachineScaleSetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualMachineScaleSet(String name, VirtualMachineScaleSetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:VirtualMachineScaleSet", name, args == null ? VirtualMachineScaleSetArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VirtualMachineScaleSet(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:VirtualMachineScaleSet", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:compute/v20150615:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20160330:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20160430preview:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20170330:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20171201:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20180401:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20180601:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20181001:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20190301:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20190701:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20191201:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20200601:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20201201:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210301:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210401:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210701:VirtualMachineScaleSet").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20211101:VirtualMachineScaleSet").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualMachineScaleSet get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualMachineScaleSet(name, id, options);
    }
}
