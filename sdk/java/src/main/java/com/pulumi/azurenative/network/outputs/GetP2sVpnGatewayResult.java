// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.P2SConnectionConfigurationResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.VpnClientConnectionHealthResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetP2sVpnGatewayResult {
    /**
     * @return List of all customer specified DNS servers IP addresses.
     * 
     */
    private @Nullable List<String> customDnsServers;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
     * 
     */
    private @Nullable Boolean isRoutingPreferenceInternet;
    /**
     * @return Resource location.
     * 
     */
    private String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return List of all p2s connection configurations of the gateway.
     * 
     */
    private @Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations;
    /**
     * @return The provisioning state of the P2S VPN gateway resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return The VirtualHub to which the gateway belongs.
     * 
     */
    private @Nullable SubResourceResponse virtualHub;
    /**
     * @return All P2S VPN clients&#39; connection health status.
     * 
     */
    private VpnClientConnectionHealthResponse vpnClientConnectionHealth;
    /**
     * @return The scale unit for this p2s vpn gateway.
     * 
     */
    private @Nullable Integer vpnGatewayScaleUnit;
    /**
     * @return The VpnServerConfiguration to which the p2sVpnGateway is attached to.
     * 
     */
    private @Nullable SubResourceResponse vpnServerConfiguration;

    private GetP2sVpnGatewayResult() {}
    /**
     * @return List of all customer specified DNS servers IP addresses.
     * 
     */
    public List<String> customDnsServers() {
        return this.customDnsServers == null ? List.of() : this.customDnsServers;
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
     * 
     */
    public Optional<Boolean> isRoutingPreferenceInternet() {
        return Optional.ofNullable(this.isRoutingPreferenceInternet);
    }
    /**
     * @return Resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of all p2s connection configurations of the gateway.
     * 
     */
    public List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations() {
        return this.p2SConnectionConfigurations == null ? List.of() : this.p2SConnectionConfigurations;
    }
    /**
     * @return The provisioning state of the P2S VPN gateway resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The VirtualHub to which the gateway belongs.
     * 
     */
    public Optional<SubResourceResponse> virtualHub() {
        return Optional.ofNullable(this.virtualHub);
    }
    /**
     * @return All P2S VPN clients&#39; connection health status.
     * 
     */
    public VpnClientConnectionHealthResponse vpnClientConnectionHealth() {
        return this.vpnClientConnectionHealth;
    }
    /**
     * @return The scale unit for this p2s vpn gateway.
     * 
     */
    public Optional<Integer> vpnGatewayScaleUnit() {
        return Optional.ofNullable(this.vpnGatewayScaleUnit);
    }
    /**
     * @return The VpnServerConfiguration to which the p2sVpnGateway is attached to.
     * 
     */
    public Optional<SubResourceResponse> vpnServerConfiguration() {
        return Optional.ofNullable(this.vpnServerConfiguration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetP2sVpnGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> customDnsServers;
        private String etag;
        private @Nullable String id;
        private @Nullable Boolean isRoutingPreferenceInternet;
        private String location;
        private String name;
        private @Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable SubResourceResponse virtualHub;
        private VpnClientConnectionHealthResponse vpnClientConnectionHealth;
        private @Nullable Integer vpnGatewayScaleUnit;
        private @Nullable SubResourceResponse vpnServerConfiguration;
        public Builder() {}
        public Builder(GetP2sVpnGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDnsServers = defaults.customDnsServers;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.isRoutingPreferenceInternet = defaults.isRoutingPreferenceInternet;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.p2SConnectionConfigurations = defaults.p2SConnectionConfigurations;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualHub = defaults.virtualHub;
    	      this.vpnClientConnectionHealth = defaults.vpnClientConnectionHealth;
    	      this.vpnGatewayScaleUnit = defaults.vpnGatewayScaleUnit;
    	      this.vpnServerConfiguration = defaults.vpnServerConfiguration;
        }

        @CustomType.Setter
        public Builder customDnsServers(@Nullable List<String> customDnsServers) {
            this.customDnsServers = customDnsServers;
            return this;
        }
        public Builder customDnsServers(String... customDnsServers) {
            return customDnsServers(List.of(customDnsServers));
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isRoutingPreferenceInternet(@Nullable Boolean isRoutingPreferenceInternet) {
            this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder p2SConnectionConfigurations(@Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations) {
            this.p2SConnectionConfigurations = p2SConnectionConfigurations;
            return this;
        }
        public Builder p2SConnectionConfigurations(P2SConnectionConfigurationResponse... p2SConnectionConfigurations) {
            return p2SConnectionConfigurations(List.of(p2SConnectionConfigurations));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualHub(@Nullable SubResourceResponse virtualHub) {
            this.virtualHub = virtualHub;
            return this;
        }
        @CustomType.Setter
        public Builder vpnClientConnectionHealth(VpnClientConnectionHealthResponse vpnClientConnectionHealth) {
            this.vpnClientConnectionHealth = Objects.requireNonNull(vpnClientConnectionHealth);
            return this;
        }
        @CustomType.Setter
        public Builder vpnGatewayScaleUnit(@Nullable Integer vpnGatewayScaleUnit) {
            this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
            return this;
        }
        @CustomType.Setter
        public Builder vpnServerConfiguration(@Nullable SubResourceResponse vpnServerConfiguration) {
            this.vpnServerConfiguration = vpnServerConfiguration;
            return this;
        }
        public GetP2sVpnGatewayResult build() {
            final var o = new GetP2sVpnGatewayResult();
            o.customDnsServers = customDnsServers;
            o.etag = etag;
            o.id = id;
            o.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
            o.location = location;
            o.name = name;
            o.p2SConnectionConfigurations = p2SConnectionConfigurations;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.virtualHub = virtualHub;
            o.vpnClientConnectionHealth = vpnClientConnectionHealth;
            o.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
            o.vpnServerConfiguration = vpnServerConfiguration;
            return o;
        }
    }
}
