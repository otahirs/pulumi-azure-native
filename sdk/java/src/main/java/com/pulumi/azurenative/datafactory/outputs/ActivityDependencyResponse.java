// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ActivityDependencyResponse {
    /**
     * @return Activity name.
     * 
     */
    private String activity;
    /**
     * @return Match-Condition for the dependency.
     * 
     */
    private List<String> dependencyConditions;

    private ActivityDependencyResponse() {}
    /**
     * @return Activity name.
     * 
     */
    public String activity() {
        return this.activity;
    }
    /**
     * @return Match-Condition for the dependency.
     * 
     */
    public List<String> dependencyConditions() {
        return this.dependencyConditions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ActivityDependencyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activity;
        private List<String> dependencyConditions;
        public Builder() {}
        public Builder(ActivityDependencyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activity = defaults.activity;
    	      this.dependencyConditions = defaults.dependencyConditions;
        }

        @CustomType.Setter
        public Builder activity(String activity) {
            this.activity = Objects.requireNonNull(activity);
            return this;
        }
        @CustomType.Setter
        public Builder dependencyConditions(List<String> dependencyConditions) {
            this.dependencyConditions = Objects.requireNonNull(dependencyConditions);
            return this;
        }
        public Builder dependencyConditions(String... dependencyConditions) {
            return dependencyConditions(List.of(dependencyConditions));
        }
        public ActivityDependencyResponse build() {
            final var o = new ActivityDependencyResponse();
            o.activity = activity;
            o.dependencyConditions = dependencyConditions;
            return o;
        }
    }
}
