// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.desktopvirtualization.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetApplicationResult {
    /**
     * @return Resource Type of Application.
     * 
     */
    private @Nullable String applicationType;
    /**
     * @return Command Line Arguments for Application.
     * 
     */
    private @Nullable String commandLineArguments;
    /**
     * @return Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     * 
     */
    private String commandLineSetting;
    /**
     * @return Description of Application.
     * 
     */
    private @Nullable String description;
    /**
     * @return Specifies a path for the executable file for the application.
     * 
     */
    private @Nullable String filePath;
    /**
     * @return Friendly name of Application.
     * 
     */
    private @Nullable String friendlyName;
    /**
     * @return the icon a 64 bit string as a byte array.
     * 
     */
    private String iconContent;
    /**
     * @return Hash of the icon.
     * 
     */
    private String iconHash;
    /**
     * @return Index of the icon.
     * 
     */
    private @Nullable Integer iconIndex;
    /**
     * @return Path to icon.
     * 
     */
    private @Nullable String iconPath;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return Specifies the package application Id for MSIX applications
     * 
     */
    private @Nullable String msixPackageApplicationId;
    /**
     * @return Specifies the package family name for MSIX applications
     * 
     */
    private @Nullable String msixPackageFamilyName;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return ObjectId of Application. (internal use)
     * 
     */
    private String objectId;
    /**
     * @return Specifies whether to show the RemoteApp program in the RD Web Access server.
     * 
     */
    private @Nullable Boolean showInPortal;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetApplicationResult() {}
    /**
     * @return Resource Type of Application.
     * 
     */
    public Optional<String> applicationType() {
        return Optional.ofNullable(this.applicationType);
    }
    /**
     * @return Command Line Arguments for Application.
     * 
     */
    public Optional<String> commandLineArguments() {
        return Optional.ofNullable(this.commandLineArguments);
    }
    /**
     * @return Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all.
     * 
     */
    public String commandLineSetting() {
        return this.commandLineSetting;
    }
    /**
     * @return Description of Application.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Specifies a path for the executable file for the application.
     * 
     */
    public Optional<String> filePath() {
        return Optional.ofNullable(this.filePath);
    }
    /**
     * @return Friendly name of Application.
     * 
     */
    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }
    /**
     * @return the icon a 64 bit string as a byte array.
     * 
     */
    public String iconContent() {
        return this.iconContent;
    }
    /**
     * @return Hash of the icon.
     * 
     */
    public String iconHash() {
        return this.iconHash;
    }
    /**
     * @return Index of the icon.
     * 
     */
    public Optional<Integer> iconIndex() {
        return Optional.ofNullable(this.iconIndex);
    }
    /**
     * @return Path to icon.
     * 
     */
    public Optional<String> iconPath() {
        return Optional.ofNullable(this.iconPath);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies the package application Id for MSIX applications
     * 
     */
    public Optional<String> msixPackageApplicationId() {
        return Optional.ofNullable(this.msixPackageApplicationId);
    }
    /**
     * @return Specifies the package family name for MSIX applications
     * 
     */
    public Optional<String> msixPackageFamilyName() {
        return Optional.ofNullable(this.msixPackageFamilyName);
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return ObjectId of Application. (internal use)
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return Specifies whether to show the RemoteApp program in the RD Web Access server.
     * 
     */
    public Optional<Boolean> showInPortal() {
        return Optional.ofNullable(this.showInPortal);
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationType;
        private @Nullable String commandLineArguments;
        private String commandLineSetting;
        private @Nullable String description;
        private @Nullable String filePath;
        private @Nullable String friendlyName;
        private String iconContent;
        private String iconHash;
        private @Nullable Integer iconIndex;
        private @Nullable String iconPath;
        private String id;
        private @Nullable String msixPackageApplicationId;
        private @Nullable String msixPackageFamilyName;
        private String name;
        private String objectId;
        private @Nullable Boolean showInPortal;
        private String type;
        public Builder() {}
        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationType = defaults.applicationType;
    	      this.commandLineArguments = defaults.commandLineArguments;
    	      this.commandLineSetting = defaults.commandLineSetting;
    	      this.description = defaults.description;
    	      this.filePath = defaults.filePath;
    	      this.friendlyName = defaults.friendlyName;
    	      this.iconContent = defaults.iconContent;
    	      this.iconHash = defaults.iconHash;
    	      this.iconIndex = defaults.iconIndex;
    	      this.iconPath = defaults.iconPath;
    	      this.id = defaults.id;
    	      this.msixPackageApplicationId = defaults.msixPackageApplicationId;
    	      this.msixPackageFamilyName = defaults.msixPackageFamilyName;
    	      this.name = defaults.name;
    	      this.objectId = defaults.objectId;
    	      this.showInPortal = defaults.showInPortal;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder applicationType(@Nullable String applicationType) {
            this.applicationType = applicationType;
            return this;
        }
        @CustomType.Setter
        public Builder commandLineArguments(@Nullable String commandLineArguments) {
            this.commandLineArguments = commandLineArguments;
            return this;
        }
        @CustomType.Setter
        public Builder commandLineSetting(String commandLineSetting) {
            this.commandLineSetting = Objects.requireNonNull(commandLineSetting);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder filePath(@Nullable String filePath) {
            this.filePath = filePath;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        @CustomType.Setter
        public Builder iconContent(String iconContent) {
            this.iconContent = Objects.requireNonNull(iconContent);
            return this;
        }
        @CustomType.Setter
        public Builder iconHash(String iconHash) {
            this.iconHash = Objects.requireNonNull(iconHash);
            return this;
        }
        @CustomType.Setter
        public Builder iconIndex(@Nullable Integer iconIndex) {
            this.iconIndex = iconIndex;
            return this;
        }
        @CustomType.Setter
        public Builder iconPath(@Nullable String iconPath) {
            this.iconPath = iconPath;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder msixPackageApplicationId(@Nullable String msixPackageApplicationId) {
            this.msixPackageApplicationId = msixPackageApplicationId;
            return this;
        }
        @CustomType.Setter
        public Builder msixPackageFamilyName(@Nullable String msixPackageFamilyName) {
            this.msixPackageFamilyName = msixPackageFamilyName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        @CustomType.Setter
        public Builder showInPortal(@Nullable Boolean showInPortal) {
            this.showInPortal = showInPortal;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetApplicationResult build() {
            final var o = new GetApplicationResult();
            o.applicationType = applicationType;
            o.commandLineArguments = commandLineArguments;
            o.commandLineSetting = commandLineSetting;
            o.description = description;
            o.filePath = filePath;
            o.friendlyName = friendlyName;
            o.iconContent = iconContent;
            o.iconHash = iconHash;
            o.iconIndex = iconIndex;
            o.iconPath = iconPath;
            o.id = id;
            o.msixPackageApplicationId = msixPackageApplicationId;
            o.msixPackageFamilyName = msixPackageFamilyName;
            o.name = name;
            o.objectId = objectId;
            o.showInPortal = showInPortal;
            o.type = type;
            return o;
        }
    }
}
