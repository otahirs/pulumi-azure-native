// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.TriggerPipelineReferenceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BlobEventsTriggerResponse {
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return The blob path must begin with the pattern provided for trigger to fire. For example, &#39;/records/blobs/december/&#39; will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
     * 
     */
    private @Nullable String blobPathBeginsWith;
    /**
     * @return The blob path must end with the pattern provided for trigger to fire. For example, &#39;december/boxes.csv&#39; will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
     * 
     */
    private @Nullable String blobPathEndsWith;
    /**
     * @return Trigger description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The type of events that cause this trigger to fire.
     * 
     */
    private List<String> events;
    /**
     * @return If set to true, blobs with zero bytes will be ignored.
     * 
     */
    private @Nullable Boolean ignoreEmptyBlobs;
    /**
     * @return Pipelines that need to be started.
     * 
     */
    private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    private String runtimeState;
    /**
     * @return The ARM resource ID of the Storage Account.
     * 
     */
    private String scope;
    /**
     * @return Trigger type.
     * Expected value is &#39;BlobEventsTrigger&#39;.
     * 
     */
    private String type;

    private BlobEventsTriggerResponse() {}
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return The blob path must begin with the pattern provided for trigger to fire. For example, &#39;/records/blobs/december/&#39; will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
     * 
     */
    public Optional<String> blobPathBeginsWith() {
        return Optional.ofNullable(this.blobPathBeginsWith);
    }
    /**
     * @return The blob path must end with the pattern provided for trigger to fire. For example, &#39;december/boxes.csv&#39; will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
     * 
     */
    public Optional<String> blobPathEndsWith() {
        return Optional.ofNullable(this.blobPathEndsWith);
    }
    /**
     * @return Trigger description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The type of events that cause this trigger to fire.
     * 
     */
    public List<String> events() {
        return this.events;
    }
    /**
     * @return If set to true, blobs with zero bytes will be ignored.
     * 
     */
    public Optional<Boolean> ignoreEmptyBlobs() {
        return Optional.ofNullable(this.ignoreEmptyBlobs);
    }
    /**
     * @return Pipelines that need to be started.
     * 
     */
    public List<TriggerPipelineReferenceResponse> pipelines() {
        return this.pipelines == null ? List.of() : this.pipelines;
    }
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    public String runtimeState() {
        return this.runtimeState;
    }
    /**
     * @return The ARM resource ID of the Storage Account.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return Trigger type.
     * Expected value is &#39;BlobEventsTrigger&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BlobEventsTriggerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable String blobPathBeginsWith;
        private @Nullable String blobPathEndsWith;
        private @Nullable String description;
        private List<String> events;
        private @Nullable Boolean ignoreEmptyBlobs;
        private @Nullable List<TriggerPipelineReferenceResponse> pipelines;
        private String runtimeState;
        private String scope;
        private String type;
        public Builder() {}
        public Builder(BlobEventsTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.blobPathBeginsWith = defaults.blobPathBeginsWith;
    	      this.blobPathEndsWith = defaults.blobPathEndsWith;
    	      this.description = defaults.description;
    	      this.events = defaults.events;
    	      this.ignoreEmptyBlobs = defaults.ignoreEmptyBlobs;
    	      this.pipelines = defaults.pipelines;
    	      this.runtimeState = defaults.runtimeState;
    	      this.scope = defaults.scope;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder blobPathBeginsWith(@Nullable String blobPathBeginsWith) {
            this.blobPathBeginsWith = blobPathBeginsWith;
            return this;
        }
        @CustomType.Setter
        public Builder blobPathEndsWith(@Nullable String blobPathEndsWith) {
            this.blobPathEndsWith = blobPathEndsWith;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder events(List<String> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder ignoreEmptyBlobs(@Nullable Boolean ignoreEmptyBlobs) {
            this.ignoreEmptyBlobs = ignoreEmptyBlobs;
            return this;
        }
        @CustomType.Setter
        public Builder pipelines(@Nullable List<TriggerPipelineReferenceResponse> pipelines) {
            this.pipelines = pipelines;
            return this;
        }
        public Builder pipelines(TriggerPipelineReferenceResponse... pipelines) {
            return pipelines(List.of(pipelines));
        }
        @CustomType.Setter
        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public BlobEventsTriggerResponse build() {
            final var o = new BlobEventsTriggerResponse();
            o.annotations = annotations;
            o.blobPathBeginsWith = blobPathBeginsWith;
            o.blobPathEndsWith = blobPathEndsWith;
            o.description = description;
            o.events = events;
            o.ignoreEmptyBlobs = ignoreEmptyBlobs;
            o.pipelines = pipelines;
            o.runtimeState = runtimeState;
            o.scope = scope;
            o.type = type;
            return o;
        }
    }
}
