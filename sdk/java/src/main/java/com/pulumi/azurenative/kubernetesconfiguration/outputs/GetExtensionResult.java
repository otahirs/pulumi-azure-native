// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration.outputs;

import com.pulumi.azurenative.kubernetesconfiguration.outputs.ConfigurationIdentityResponse;
import com.pulumi.azurenative.kubernetesconfiguration.outputs.ErrorDefinitionResponse;
import com.pulumi.azurenative.kubernetesconfiguration.outputs.ExtensionStatusResponse;
import com.pulumi.azurenative.kubernetesconfiguration.outputs.ScopeResponse;
import com.pulumi.azurenative.kubernetesconfiguration.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExtensionResult {
    /**
     * @return Flag to note if this instance participates in auto upgrade of minor version, or not.
     * 
     */
    private @Nullable Boolean autoUpgradeMinorVersion;
    /**
     * @return Configuration settings that are sensitive, as name-value pairs for configuring this instance of the extension.
     * 
     */
    private @Nullable Map<String,String> configurationProtectedSettings;
    /**
     * @return Configuration settings, as name-value pairs for configuring this instance of the extension.
     * 
     */
    private @Nullable Map<String,String> configurationSettings;
    /**
     * @return DateLiteral (per ISO8601) noting the time the resource was created by the client (user).
     * 
     */
    private String creationTime;
    /**
     * @return Error information from the Agent - e.g. errors during installation.
     * 
     */
    private ErrorDefinitionResponse errorInfo;
    /**
     * @return Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     * 
     */
    private @Nullable String extensionType;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    /**
     * @return The identity of the configuration.
     * 
     */
    private @Nullable ConfigurationIdentityResponse identity;
    /**
     * @return Status of installation of this instance of the extension.
     * 
     */
    private String installState;
    /**
     * @return DateLiteral (per ISO8601) noting the time the resource was modified by the client (user).
     * 
     */
    private String lastModifiedTime;
    /**
     * @return DateLiteral (per ISO8601) noting the time of last status from the agent.
     * 
     */
    private String lastStatusTime;
    /**
     * @return Resource name
     * 
     */
    private String name;
    /**
     * @return ReleaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is &#39;true&#39;.
     * 
     */
    private @Nullable String releaseTrain;
    /**
     * @return Scope at which the extension instance is installed.
     * 
     */
    private @Nullable ScopeResponse scope;
    /**
     * @return Status from this instance of the extension.
     * 
     */
    private @Nullable List<ExtensionStatusResponse> statuses;
    /**
     * @return Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
     * 
     */
    private @Nullable SystemDataResponse systemData;
    /**
     * @return Resource type
     * 
     */
    private String type;
    /**
     * @return Version of the extension for this extension instance, if it is &#39;pinned&#39; to a specific version. autoUpgradeMinorVersion must be &#39;false&#39;.
     * 
     */
    private @Nullable String version;

    private GetExtensionResult() {}
    /**
     * @return Flag to note if this instance participates in auto upgrade of minor version, or not.
     * 
     */
    public Optional<Boolean> autoUpgradeMinorVersion() {
        return Optional.ofNullable(this.autoUpgradeMinorVersion);
    }
    /**
     * @return Configuration settings that are sensitive, as name-value pairs for configuring this instance of the extension.
     * 
     */
    public Map<String,String> configurationProtectedSettings() {
        return this.configurationProtectedSettings == null ? Map.of() : this.configurationProtectedSettings;
    }
    /**
     * @return Configuration settings, as name-value pairs for configuring this instance of the extension.
     * 
     */
    public Map<String,String> configurationSettings() {
        return this.configurationSettings == null ? Map.of() : this.configurationSettings;
    }
    /**
     * @return DateLiteral (per ISO8601) noting the time the resource was created by the client (user).
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return Error information from the Agent - e.g. errors during installation.
     * 
     */
    public ErrorDefinitionResponse errorInfo() {
        return this.errorInfo;
    }
    /**
     * @return Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     * 
     */
    public Optional<String> extensionType() {
        return Optional.ofNullable(this.extensionType);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The identity of the configuration.
     * 
     */
    public Optional<ConfigurationIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Status of installation of this instance of the extension.
     * 
     */
    public String installState() {
        return this.installState;
    }
    /**
     * @return DateLiteral (per ISO8601) noting the time the resource was modified by the client (user).
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return DateLiteral (per ISO8601) noting the time of last status from the agent.
     * 
     */
    public String lastStatusTime() {
        return this.lastStatusTime;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return ReleaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is &#39;true&#39;.
     * 
     */
    public Optional<String> releaseTrain() {
        return Optional.ofNullable(this.releaseTrain);
    }
    /**
     * @return Scope at which the extension instance is installed.
     * 
     */
    public Optional<ScopeResponse> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Status from this instance of the extension.
     * 
     */
    public List<ExtensionStatusResponse> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }
    /**
     * @return Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
     * 
     */
    public Optional<SystemDataResponse> systemData() {
        return Optional.ofNullable(this.systemData);
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Version of the extension for this extension instance, if it is &#39;pinned&#39; to a specific version. autoUpgradeMinorVersion must be &#39;false&#39;.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExtensionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean autoUpgradeMinorVersion;
        private @Nullable Map<String,String> configurationProtectedSettings;
        private @Nullable Map<String,String> configurationSettings;
        private String creationTime;
        private ErrorDefinitionResponse errorInfo;
        private @Nullable String extensionType;
        private String id;
        private @Nullable ConfigurationIdentityResponse identity;
        private String installState;
        private String lastModifiedTime;
        private String lastStatusTime;
        private String name;
        private @Nullable String releaseTrain;
        private @Nullable ScopeResponse scope;
        private @Nullable List<ExtensionStatusResponse> statuses;
        private @Nullable SystemDataResponse systemData;
        private String type;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetExtensionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUpgradeMinorVersion = defaults.autoUpgradeMinorVersion;
    	      this.configurationProtectedSettings = defaults.configurationProtectedSettings;
    	      this.configurationSettings = defaults.configurationSettings;
    	      this.creationTime = defaults.creationTime;
    	      this.errorInfo = defaults.errorInfo;
    	      this.extensionType = defaults.extensionType;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.installState = defaults.installState;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.lastStatusTime = defaults.lastStatusTime;
    	      this.name = defaults.name;
    	      this.releaseTrain = defaults.releaseTrain;
    	      this.scope = defaults.scope;
    	      this.statuses = defaults.statuses;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder autoUpgradeMinorVersion(@Nullable Boolean autoUpgradeMinorVersion) {
            this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            return this;
        }
        @CustomType.Setter
        public Builder configurationProtectedSettings(@Nullable Map<String,String> configurationProtectedSettings) {
            this.configurationProtectedSettings = configurationProtectedSettings;
            return this;
        }
        @CustomType.Setter
        public Builder configurationSettings(@Nullable Map<String,String> configurationSettings) {
            this.configurationSettings = configurationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder errorInfo(ErrorDefinitionResponse errorInfo) {
            this.errorInfo = Objects.requireNonNull(errorInfo);
            return this;
        }
        @CustomType.Setter
        public Builder extensionType(@Nullable String extensionType) {
            this.extensionType = extensionType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable ConfigurationIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder installState(String installState) {
            this.installState = Objects.requireNonNull(installState);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastStatusTime(String lastStatusTime) {
            this.lastStatusTime = Objects.requireNonNull(lastStatusTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder releaseTrain(@Nullable String releaseTrain) {
            this.releaseTrain = releaseTrain;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable ScopeResponse scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(@Nullable List<ExtensionStatusResponse> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(ExtensionStatusResponse... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder systemData(@Nullable SystemDataResponse systemData) {
            this.systemData = systemData;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GetExtensionResult build() {
            final var o = new GetExtensionResult();
            o.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            o.configurationProtectedSettings = configurationProtectedSettings;
            o.configurationSettings = configurationSettings;
            o.creationTime = creationTime;
            o.errorInfo = errorInfo;
            o.extensionType = extensionType;
            o.id = id;
            o.identity = identity;
            o.installState = installState;
            o.lastModifiedTime = lastModifiedTime;
            o.lastStatusTime = lastStatusTime;
            o.name = name;
            o.releaseTrain = releaseTrain;
            o.scope = scope;
            o.statuses = statuses;
            o.systemData = systemData;
            o.type = type;
            o.version = version;
            return o;
        }
    }
}
