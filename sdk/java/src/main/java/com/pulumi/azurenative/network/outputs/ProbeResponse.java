// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ProbeResponse {
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     * 
     */
    private @Nullable Integer intervalInSeconds;
    /**
     * @return The load balancer rules that use this probe.
     * 
     */
    private List<SubResourceResponse> loadBalancingRules;
    /**
     * @return The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
     * 
     */
    private @Nullable String name;
    /**
     * @return The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     * 
     */
    private @Nullable Integer numberOfProbes;
    /**
     * @return The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     * 
     */
    private Integer port;
    /**
     * @return The protocol of the end point. If &#39;Tcp&#39; is specified, a received ACK is required for the probe to be successful. If &#39;Http&#39; or &#39;Https&#39; is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     * 
     */
    private String protocol;
    /**
     * @return The provisioning state of the probe resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     * 
     */
    private @Nullable String requestPath;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private ProbeResponse() {}
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
     * 
     */
    public Optional<Integer> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }
    /**
     * @return The load balancer rules that use this probe.
     * 
     */
    public List<SubResourceResponse> loadBalancingRules() {
        return this.loadBalancingRules;
    }
    /**
     * @return The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
     * 
     */
    public Optional<Integer> numberOfProbes() {
        return Optional.ofNullable(this.numberOfProbes);
    }
    /**
     * @return The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol of the end point. If &#39;Tcp&#39; is specified, a received ACK is required for the probe to be successful. If &#39;Http&#39; or &#39;Https&#39; is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The provisioning state of the probe resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
     * 
     */
    public Optional<String> requestPath() {
        return Optional.ofNullable(this.requestPath);
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String etag;
        private @Nullable String id;
        private @Nullable Integer intervalInSeconds;
        private List<SubResourceResponse> loadBalancingRules;
        private @Nullable String name;
        private @Nullable Integer numberOfProbes;
        private Integer port;
        private String protocol;
        private String provisioningState;
        private @Nullable String requestPath;
        private String type;
        public Builder() {}
        public Builder(ProbeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.loadBalancingRules = defaults.loadBalancingRules;
    	      this.name = defaults.name;
    	      this.numberOfProbes = defaults.numberOfProbes;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.requestPath = defaults.requestPath;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder intervalInSeconds(@Nullable Integer intervalInSeconds) {
            this.intervalInSeconds = intervalInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancingRules(List<SubResourceResponse> loadBalancingRules) {
            this.loadBalancingRules = Objects.requireNonNull(loadBalancingRules);
            return this;
        }
        public Builder loadBalancingRules(SubResourceResponse... loadBalancingRules) {
            return loadBalancingRules(List.of(loadBalancingRules));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfProbes(@Nullable Integer numberOfProbes) {
            this.numberOfProbes = numberOfProbes;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder requestPath(@Nullable String requestPath) {
            this.requestPath = requestPath;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ProbeResponse build() {
            final var o = new ProbeResponse();
            o.etag = etag;
            o.id = id;
            o.intervalInSeconds = intervalInSeconds;
            o.loadBalancingRules = loadBalancingRules;
            o.name = name;
            o.numberOfProbes = numberOfProbes;
            o.port = port;
            o.protocol = protocol;
            o.provisioningState = provisioningState;
            o.requestPath = requestPath;
            o.type = type;
            return o;
        }
    }
}
