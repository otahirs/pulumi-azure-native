// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.domainregistration.outputs;

import com.pulumi.azurenative.domainregistration.outputs.HostNameResponse;
import com.pulumi.azurenative.domainregistration.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainResult {
    private @Nullable String authCode;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean autoRenew;
    /**
     * @return Domain creation timestamp.
     * 
     */
    private String createdTime;
    /**
     * @return Current DNS type
     * 
     */
    private @Nullable String dnsType;
    /**
     * @return Azure DNS Zone to use
     * 
     */
    private @Nullable String dnsZoneId;
    /**
     * @return Reasons why domain is not renewable.
     * 
     */
    private List<String> domainNotRenewableReasons;
    /**
     * @return Domain expiration timestamp.
     * 
     */
    private String expirationTime;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return Kind of resource.
     * 
     */
    private @Nullable String kind;
    /**
     * @return Timestamp when the domain was renewed last time.
     * 
     */
    private String lastRenewedTime;
    /**
     * @return Resource Location.
     * 
     */
    private String location;
    /**
     * @return All hostnames derived from the domain and assigned to Azure resources.
     * 
     */
    private List<HostNameResponse> managedHostNames;
    /**
     * @return Resource Name.
     * 
     */
    private String name;
    /**
     * @return Name servers.
     * 
     */
    private List<String> nameServers;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean privacy;
    /**
     * @return Domain provisioning state.
     * 
     */
    private String provisioningState;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps; otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if domain registration status is active and
     *  it is hosted on name servers Azure has programmatic access to.
     * 
     */
    private Boolean readyForDnsRecordManagement;
    /**
     * @return Domain registration status.
     * 
     */
    private String registrationStatus;
    /**
     * @return The system metadata relating to this resource.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Target DNS type (would be used for migration)
     * 
     */
    private @Nullable String targetDnsType;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetDomainResult() {}
    public Optional<String> authCode() {
        return Optional.ofNullable(this.authCode);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }
    /**
     * @return Domain creation timestamp.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Current DNS type
     * 
     */
    public Optional<String> dnsType() {
        return Optional.ofNullable(this.dnsType);
    }
    /**
     * @return Azure DNS Zone to use
     * 
     */
    public Optional<String> dnsZoneId() {
        return Optional.ofNullable(this.dnsZoneId);
    }
    /**
     * @return Reasons why domain is not renewable.
     * 
     */
    public List<String> domainNotRenewableReasons() {
        return this.domainNotRenewableReasons;
    }
    /**
     * @return Domain expiration timestamp.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return Timestamp when the domain was renewed last time.
     * 
     */
    public String lastRenewedTime() {
        return this.lastRenewedTime;
    }
    /**
     * @return Resource Location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return All hostnames derived from the domain and assigned to Azure resources.
     * 
     */
    public List<HostNameResponse> managedHostNames() {
        return this.managedHostNames;
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Name servers.
     * 
     */
    public List<String> nameServers() {
        return this.nameServers;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> privacy() {
        return Optional.ofNullable(this.privacy);
    }
    /**
     * @return Domain provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps; otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if domain registration status is active and
     *  it is hosted on name servers Azure has programmatic access to.
     * 
     */
    public Boolean readyForDnsRecordManagement() {
        return this.readyForDnsRecordManagement;
    }
    /**
     * @return Domain registration status.
     * 
     */
    public String registrationStatus() {
        return this.registrationStatus;
    }
    /**
     * @return The system metadata relating to this resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Target DNS type (would be used for migration)
     * 
     */
    public Optional<String> targetDnsType() {
        return Optional.ofNullable(this.targetDnsType);
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authCode;
        private @Nullable Boolean autoRenew;
        private String createdTime;
        private @Nullable String dnsType;
        private @Nullable String dnsZoneId;
        private List<String> domainNotRenewableReasons;
        private String expirationTime;
        private String id;
        private @Nullable String kind;
        private String lastRenewedTime;
        private String location;
        private List<HostNameResponse> managedHostNames;
        private String name;
        private List<String> nameServers;
        private @Nullable Boolean privacy;
        private String provisioningState;
        private Boolean readyForDnsRecordManagement;
        private String registrationStatus;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private @Nullable String targetDnsType;
        private String type;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authCode = defaults.authCode;
    	      this.autoRenew = defaults.autoRenew;
    	      this.createdTime = defaults.createdTime;
    	      this.dnsType = defaults.dnsType;
    	      this.dnsZoneId = defaults.dnsZoneId;
    	      this.domainNotRenewableReasons = defaults.domainNotRenewableReasons;
    	      this.expirationTime = defaults.expirationTime;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.lastRenewedTime = defaults.lastRenewedTime;
    	      this.location = defaults.location;
    	      this.managedHostNames = defaults.managedHostNames;
    	      this.name = defaults.name;
    	      this.nameServers = defaults.nameServers;
    	      this.privacy = defaults.privacy;
    	      this.provisioningState = defaults.provisioningState;
    	      this.readyForDnsRecordManagement = defaults.readyForDnsRecordManagement;
    	      this.registrationStatus = defaults.registrationStatus;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.targetDnsType = defaults.targetDnsType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder authCode(@Nullable String authCode) {
            this.authCode = authCode;
            return this;
        }
        @CustomType.Setter
        public Builder autoRenew(@Nullable Boolean autoRenew) {
            this.autoRenew = autoRenew;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        @CustomType.Setter
        public Builder dnsType(@Nullable String dnsType) {
            this.dnsType = dnsType;
            return this;
        }
        @CustomType.Setter
        public Builder dnsZoneId(@Nullable String dnsZoneId) {
            this.dnsZoneId = dnsZoneId;
            return this;
        }
        @CustomType.Setter
        public Builder domainNotRenewableReasons(List<String> domainNotRenewableReasons) {
            this.domainNotRenewableReasons = Objects.requireNonNull(domainNotRenewableReasons);
            return this;
        }
        public Builder domainNotRenewableReasons(String... domainNotRenewableReasons) {
            return domainNotRenewableReasons(List.of(domainNotRenewableReasons));
        }
        @CustomType.Setter
        public Builder expirationTime(String expirationTime) {
            this.expirationTime = Objects.requireNonNull(expirationTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder lastRenewedTime(String lastRenewedTime) {
            this.lastRenewedTime = Objects.requireNonNull(lastRenewedTime);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder managedHostNames(List<HostNameResponse> managedHostNames) {
            this.managedHostNames = Objects.requireNonNull(managedHostNames);
            return this;
        }
        public Builder managedHostNames(HostNameResponse... managedHostNames) {
            return managedHostNames(List.of(managedHostNames));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameServers(List<String> nameServers) {
            this.nameServers = Objects.requireNonNull(nameServers);
            return this;
        }
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }
        @CustomType.Setter
        public Builder privacy(@Nullable Boolean privacy) {
            this.privacy = privacy;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder readyForDnsRecordManagement(Boolean readyForDnsRecordManagement) {
            this.readyForDnsRecordManagement = Objects.requireNonNull(readyForDnsRecordManagement);
            return this;
        }
        @CustomType.Setter
        public Builder registrationStatus(String registrationStatus) {
            this.registrationStatus = Objects.requireNonNull(registrationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetDnsType(@Nullable String targetDnsType) {
            this.targetDnsType = targetDnsType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDomainResult build() {
            final var o = new GetDomainResult();
            o.authCode = authCode;
            o.autoRenew = autoRenew;
            o.createdTime = createdTime;
            o.dnsType = dnsType;
            o.dnsZoneId = dnsZoneId;
            o.domainNotRenewableReasons = domainNotRenewableReasons;
            o.expirationTime = expirationTime;
            o.id = id;
            o.kind = kind;
            o.lastRenewedTime = lastRenewedTime;
            o.location = location;
            o.managedHostNames = managedHostNames;
            o.name = name;
            o.nameServers = nameServers;
            o.privacy = privacy;
            o.provisioningState = provisioningState;
            o.readyForDnsRecordManagement = readyForDnsRecordManagement;
            o.registrationStatus = registrationStatus;
            o.systemData = systemData;
            o.tags = tags;
            o.targetDnsType = targetDnsType;
            o.type = type;
            return o;
        }
    }
}
