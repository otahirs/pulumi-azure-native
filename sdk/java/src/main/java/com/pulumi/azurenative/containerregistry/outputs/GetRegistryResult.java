// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.outputs;

import com.pulumi.azurenative.containerregistry.outputs.NetworkRuleSetResponse;
import com.pulumi.azurenative.containerregistry.outputs.PoliciesResponse;
import com.pulumi.azurenative.containerregistry.outputs.SkuResponse;
import com.pulumi.azurenative.containerregistry.outputs.StatusResponse;
import com.pulumi.azurenative.containerregistry.outputs.StorageAccountPropertiesResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegistryResult {
    /**
     * @return The value that indicates whether the admin user is enabled.
     * 
     */
    private @Nullable Boolean adminUserEnabled;
    /**
     * @return The creation date of the container registry in ISO8601 format.
     * 
     */
    private String creationDate;
    /**
     * @return The resource ID.
     * 
     */
    private String id;
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    private String location;
    /**
     * @return The URL that can be used to log into the container registry.
     * 
     */
    private String loginServer;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The network rule set for a container registry.
     * 
     */
    private @Nullable NetworkRuleSetResponse networkRuleSet;
    /**
     * @return The policies for a container registry.
     * 
     */
    private @Nullable PoliciesResponse policies;
    /**
     * @return The provisioning state of the container registry at the time the operation was called.
     * 
     */
    private String provisioningState;
    /**
     * @return The SKU of the container registry.
     * 
     */
    private SkuResponse sku;
    /**
     * @return The status of the container registry at the time the operation was called.
     * 
     */
    private StatusResponse status;
    /**
     * @return The properties of the storage account for the container registry. Only applicable to Classic SKU.
     * 
     */
    private @Nullable StorageAccountPropertiesResponse storageAccount;
    /**
     * @return The tags of the resource.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;

    private GetRegistryResult() {}
    /**
     * @return The value that indicates whether the admin user is enabled.
     * 
     */
    public Optional<Boolean> adminUserEnabled() {
        return Optional.ofNullable(this.adminUserEnabled);
    }
    /**
     * @return The creation date of the container registry in ISO8601 format.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The URL that can be used to log into the container registry.
     * 
     */
    public String loginServer() {
        return this.loginServer;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network rule set for a container registry.
     * 
     */
    public Optional<NetworkRuleSetResponse> networkRuleSet() {
        return Optional.ofNullable(this.networkRuleSet);
    }
    /**
     * @return The policies for a container registry.
     * 
     */
    public Optional<PoliciesResponse> policies() {
        return Optional.ofNullable(this.policies);
    }
    /**
     * @return The provisioning state of the container registry at the time the operation was called.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The SKU of the container registry.
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return The status of the container registry at the time the operation was called.
     * 
     */
    public StatusResponse status() {
        return this.status;
    }
    /**
     * @return The properties of the storage account for the container registry. Only applicable to Classic SKU.
     * 
     */
    public Optional<StorageAccountPropertiesResponse> storageAccount() {
        return Optional.ofNullable(this.storageAccount);
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean adminUserEnabled;
        private String creationDate;
        private String id;
        private String location;
        private String loginServer;
        private String name;
        private @Nullable NetworkRuleSetResponse networkRuleSet;
        private @Nullable PoliciesResponse policies;
        private String provisioningState;
        private SkuResponse sku;
        private StatusResponse status;
        private @Nullable StorageAccountPropertiesResponse storageAccount;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUserEnabled = defaults.adminUserEnabled;
    	      this.creationDate = defaults.creationDate;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.loginServer = defaults.loginServer;
    	      this.name = defaults.name;
    	      this.networkRuleSet = defaults.networkRuleSet;
    	      this.policies = defaults.policies;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sku = defaults.sku;
    	      this.status = defaults.status;
    	      this.storageAccount = defaults.storageAccount;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder adminUserEnabled(@Nullable Boolean adminUserEnabled) {
            this.adminUserEnabled = adminUserEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder loginServer(String loginServer) {
            this.loginServer = Objects.requireNonNull(loginServer);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkRuleSet(@Nullable NetworkRuleSetResponse networkRuleSet) {
            this.networkRuleSet = networkRuleSet;
            return this;
        }
        @CustomType.Setter
        public Builder policies(@Nullable PoliciesResponse policies) {
            this.policies = policies;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder status(StatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccount(@Nullable StorageAccountPropertiesResponse storageAccount) {
            this.storageAccount = storageAccount;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetRegistryResult build() {
            final var o = new GetRegistryResult();
            o.adminUserEnabled = adminUserEnabled;
            o.creationDate = creationDate;
            o.id = id;
            o.location = location;
            o.loginServer = loginServer;
            o.name = name;
            o.networkRuleSet = networkRuleSet;
            o.policies = policies;
            o.provisioningState = provisioningState;
            o.sku = sku;
            o.status = status;
            o.storageAccount = storageAccount;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
