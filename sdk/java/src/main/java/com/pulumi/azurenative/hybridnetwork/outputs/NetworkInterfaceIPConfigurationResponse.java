// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworkInterfaceIPConfigurationResponse {
    /**
     * @return The list of DNS servers IP addresses.
     * 
     */
    private @Nullable List<String> dnsServers;
    /**
     * @return The value of the gateway.
     * 
     */
    private @Nullable String gateway;
    /**
     * @return The value of the IP address.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return IP address allocation method.
     * 
     */
    private @Nullable String ipAllocationMethod;
    /**
     * @return IP address version.
     * 
     */
    private @Nullable String ipVersion;
    /**
     * @return The value of the subnet.
     * 
     */
    private @Nullable String subnet;

    private NetworkInterfaceIPConfigurationResponse() {}
    /**
     * @return The list of DNS servers IP addresses.
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers == null ? List.of() : this.dnsServers;
    }
    /**
     * @return The value of the gateway.
     * 
     */
    public Optional<String> gateway() {
        return Optional.ofNullable(this.gateway);
    }
    /**
     * @return The value of the IP address.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return IP address allocation method.
     * 
     */
    public Optional<String> ipAllocationMethod() {
        return Optional.ofNullable(this.ipAllocationMethod);
    }
    /**
     * @return IP address version.
     * 
     */
    public Optional<String> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }
    /**
     * @return The value of the subnet.
     * 
     */
    public Optional<String> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceIPConfigurationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> dnsServers;
        private @Nullable String gateway;
        private @Nullable String ipAddress;
        private @Nullable String ipAllocationMethod;
        private @Nullable String ipVersion;
        private @Nullable String subnet;
        public Builder() {}
        public Builder(NetworkInterfaceIPConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServers = defaults.dnsServers;
    	      this.gateway = defaults.gateway;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipAllocationMethod = defaults.ipAllocationMethod;
    	      this.ipVersion = defaults.ipVersion;
    	      this.subnet = defaults.subnet;
        }

        @CustomType.Setter
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder gateway(@Nullable String gateway) {
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationMethod(@Nullable String ipAllocationMethod) {
            this.ipAllocationMethod = ipAllocationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder ipVersion(@Nullable String ipVersion) {
            this.ipVersion = ipVersion;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(@Nullable String subnet) {
            this.subnet = subnet;
            return this;
        }
        public NetworkInterfaceIPConfigurationResponse build() {
            final var o = new NetworkInterfaceIPConfigurationResponse();
            o.dnsServers = dnsServers;
            o.gateway = gateway;
            o.ipAddress = ipAddress;
            o.ipAllocationMethod = ipAllocationMethod;
            o.ipVersion = ipVersion;
            o.subnet = subnet;
            return o;
        }
    }
}
