// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.outputs;

import com.pulumi.azurenative.peering.outputs.PeeringServicePrefixEventResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPrefixResult {
    /**
     * @return The error message for validation state
     * 
     */
    private String errorMessage;
    /**
     * @return The list of events for peering service prefix
     * 
     */
    private List<PeeringServicePrefixEventResponse> events;
    /**
     * @return The ID of the resource.
     * 
     */
    private String id;
    /**
     * @return The prefix learned type
     * 
     */
    private String learnedType;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The peering service prefix key
     * 
     */
    private @Nullable String peeringServicePrefixKey;
    /**
     * @return The prefix from which your traffic originates.
     * 
     */
    private @Nullable String prefix;
    /**
     * @return The prefix validation state
     * 
     */
    private String prefixValidationState;
    /**
     * @return The provisioning state of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;

    private GetPrefixResult() {}
    /**
     * @return The error message for validation state
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The list of events for peering service prefix
     * 
     */
    public List<PeeringServicePrefixEventResponse> events() {
        return this.events;
    }
    /**
     * @return The ID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The prefix learned type
     * 
     */
    public String learnedType() {
        return this.learnedType;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The peering service prefix key
     * 
     */
    public Optional<String> peeringServicePrefixKey() {
        return Optional.ofNullable(this.peeringServicePrefixKey);
    }
    /**
     * @return The prefix from which your traffic originates.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return The prefix validation state
     * 
     */
    public String prefixValidationState() {
        return this.prefixValidationState;
    }
    /**
     * @return The provisioning state of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrefixResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String errorMessage;
        private List<PeeringServicePrefixEventResponse> events;
        private String id;
        private String learnedType;
        private String name;
        private @Nullable String peeringServicePrefixKey;
        private @Nullable String prefix;
        private String prefixValidationState;
        private String provisioningState;
        private String type;
        public Builder() {}
        public Builder(GetPrefixResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errorMessage = defaults.errorMessage;
    	      this.events = defaults.events;
    	      this.id = defaults.id;
    	      this.learnedType = defaults.learnedType;
    	      this.name = defaults.name;
    	      this.peeringServicePrefixKey = defaults.peeringServicePrefixKey;
    	      this.prefix = defaults.prefix;
    	      this.prefixValidationState = defaults.prefixValidationState;
    	      this.provisioningState = defaults.provisioningState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        @CustomType.Setter
        public Builder events(List<PeeringServicePrefixEventResponse> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(PeeringServicePrefixEventResponse... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder learnedType(String learnedType) {
            this.learnedType = Objects.requireNonNull(learnedType);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peeringServicePrefixKey(@Nullable String peeringServicePrefixKey) {
            this.peeringServicePrefixKey = peeringServicePrefixKey;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder prefixValidationState(String prefixValidationState) {
            this.prefixValidationState = Objects.requireNonNull(prefixValidationState);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetPrefixResult build() {
            final var o = new GetPrefixResult();
            o.errorMessage = errorMessage;
            o.events = events;
            o.id = id;
            o.learnedType = learnedType;
            o.name = name;
            o.peeringServicePrefixKey = peeringServicePrefixKey;
            o.prefix = prefix;
            o.prefixValidationState = prefixValidationState;
            o.provisioningState = provisioningState;
            o.type = type;
            return o;
        }
    }
}
