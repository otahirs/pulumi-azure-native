// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.outputs;

import com.pulumi.azurenative.synapse.outputs.ManagedIntegrationRuntimeErrorResponse;
import com.pulumi.azurenative.synapse.outputs.ManagedIntegrationRuntimeNodeResponse;
import com.pulumi.azurenative.synapse.outputs.ManagedIntegrationRuntimeOperationResultResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ManagedIntegrationRuntimeStatusResponse {
    /**
     * @return The time at which the integration runtime was created, in ISO8601 format.
     * 
     */
    private String createTime;
    /**
     * @return The workspace name which the integration runtime belong to.
     * 
     */
    private String dataFactoryName;
    /**
     * @return The last operation result that occurred on this integration runtime.
     * 
     */
    private ManagedIntegrationRuntimeOperationResultResponse lastOperation;
    /**
     * @return The list of nodes for managed integration runtime.
     * 
     */
    private List<ManagedIntegrationRuntimeNodeResponse> nodes;
    /**
     * @return The errors that occurred on this integration runtime.
     * 
     */
    private List<ManagedIntegrationRuntimeErrorResponse> otherErrors;
    /**
     * @return The state of integration runtime.
     * 
     */
    private String state;
    /**
     * @return The type of integration runtime.
     * Expected value is &#39;Managed&#39;.
     * 
     */
    private String type;

    private ManagedIntegrationRuntimeStatusResponse() {}
    /**
     * @return The time at which the integration runtime was created, in ISO8601 format.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The workspace name which the integration runtime belong to.
     * 
     */
    public String dataFactoryName() {
        return this.dataFactoryName;
    }
    /**
     * @return The last operation result that occurred on this integration runtime.
     * 
     */
    public ManagedIntegrationRuntimeOperationResultResponse lastOperation() {
        return this.lastOperation;
    }
    /**
     * @return The list of nodes for managed integration runtime.
     * 
     */
    public List<ManagedIntegrationRuntimeNodeResponse> nodes() {
        return this.nodes;
    }
    /**
     * @return The errors that occurred on this integration runtime.
     * 
     */
    public List<ManagedIntegrationRuntimeErrorResponse> otherErrors() {
        return this.otherErrors;
    }
    /**
     * @return The state of integration runtime.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The type of integration runtime.
     * Expected value is &#39;Managed&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedIntegrationRuntimeStatusResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String dataFactoryName;
        private ManagedIntegrationRuntimeOperationResultResponse lastOperation;
        private List<ManagedIntegrationRuntimeNodeResponse> nodes;
        private List<ManagedIntegrationRuntimeErrorResponse> otherErrors;
        private String state;
        private String type;
        public Builder() {}
        public Builder(ManagedIntegrationRuntimeStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.dataFactoryName = defaults.dataFactoryName;
    	      this.lastOperation = defaults.lastOperation;
    	      this.nodes = defaults.nodes;
    	      this.otherErrors = defaults.otherErrors;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder dataFactoryName(String dataFactoryName) {
            this.dataFactoryName = Objects.requireNonNull(dataFactoryName);
            return this;
        }
        @CustomType.Setter
        public Builder lastOperation(ManagedIntegrationRuntimeOperationResultResponse lastOperation) {
            this.lastOperation = Objects.requireNonNull(lastOperation);
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<ManagedIntegrationRuntimeNodeResponse> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }
        public Builder nodes(ManagedIntegrationRuntimeNodeResponse... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder otherErrors(List<ManagedIntegrationRuntimeErrorResponse> otherErrors) {
            this.otherErrors = Objects.requireNonNull(otherErrors);
            return this;
        }
        public Builder otherErrors(ManagedIntegrationRuntimeErrorResponse... otherErrors) {
            return otherErrors(List.of(otherErrors));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ManagedIntegrationRuntimeStatusResponse build() {
            final var o = new ManagedIntegrationRuntimeStatusResponse();
            o.createTime = createTime;
            o.dataFactoryName = dataFactoryName;
            o.lastOperation = lastOperation;
            o.nodes = nodes;
            o.otherErrors = otherErrors;
            o.state = state;
            o.type = type;
            return o;
        }
    }
}
