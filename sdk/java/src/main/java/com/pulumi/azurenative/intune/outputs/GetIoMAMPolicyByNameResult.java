// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.intune.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIoMAMPolicyByNameResult {
    private @Nullable String accessRecheckOfflineTimeout;
    private @Nullable String accessRecheckOnlineTimeout;
    private @Nullable String appSharingFromLevel;
    private @Nullable String appSharingToLevel;
    private @Nullable String authentication;
    private @Nullable String clipboardSharingLevel;
    private @Nullable String dataBackup;
    private @Nullable String description;
    private @Nullable String deviceCompliance;
    private @Nullable String fileEncryptionLevel;
    private @Nullable String fileSharingSaveAs;
    private String friendlyName;
    private String groupStatus;
    /**
     * @return Resource Id
     * 
     */
    private String id;
    private String lastModifiedTime;
    /**
     * @return Resource Location
     * 
     */
    private @Nullable String location;
    private @Nullable String managedBrowser;
    /**
     * @return Resource name
     * 
     */
    private String name;
    private Integer numOfApps;
    private @Nullable String offlineWipeTimeout;
    private @Nullable String pin;
    private @Nullable Integer pinNumRetry;
    /**
     * @return Resource Tags
     * 
     */
    private @Nullable Map<String,String> tags;
    private @Nullable String touchId;
    /**
     * @return Resource type
     * 
     */
    private String type;

    private GetIoMAMPolicyByNameResult() {}
    public Optional<String> accessRecheckOfflineTimeout() {
        return Optional.ofNullable(this.accessRecheckOfflineTimeout);
    }
    public Optional<String> accessRecheckOnlineTimeout() {
        return Optional.ofNullable(this.accessRecheckOnlineTimeout);
    }
    public Optional<String> appSharingFromLevel() {
        return Optional.ofNullable(this.appSharingFromLevel);
    }
    public Optional<String> appSharingToLevel() {
        return Optional.ofNullable(this.appSharingToLevel);
    }
    public Optional<String> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    public Optional<String> clipboardSharingLevel() {
        return Optional.ofNullable(this.clipboardSharingLevel);
    }
    public Optional<String> dataBackup() {
        return Optional.ofNullable(this.dataBackup);
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<String> deviceCompliance() {
        return Optional.ofNullable(this.deviceCompliance);
    }
    public Optional<String> fileEncryptionLevel() {
        return Optional.ofNullable(this.fileEncryptionLevel);
    }
    public Optional<String> fileSharingSaveAs() {
        return Optional.ofNullable(this.fileSharingSaveAs);
    }
    public String friendlyName() {
        return this.friendlyName;
    }
    public String groupStatus() {
        return this.groupStatus;
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return Resource Location
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public Optional<String> managedBrowser() {
        return Optional.ofNullable(this.managedBrowser);
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    public Integer numOfApps() {
        return this.numOfApps;
    }
    public Optional<String> offlineWipeTimeout() {
        return Optional.ofNullable(this.offlineWipeTimeout);
    }
    public Optional<String> pin() {
        return Optional.ofNullable(this.pin);
    }
    public Optional<Integer> pinNumRetry() {
        return Optional.ofNullable(this.pinNumRetry);
    }
    /**
     * @return Resource Tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public Optional<String> touchId() {
        return Optional.ofNullable(this.touchId);
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIoMAMPolicyByNameResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessRecheckOfflineTimeout;
        private @Nullable String accessRecheckOnlineTimeout;
        private @Nullable String appSharingFromLevel;
        private @Nullable String appSharingToLevel;
        private @Nullable String authentication;
        private @Nullable String clipboardSharingLevel;
        private @Nullable String dataBackup;
        private @Nullable String description;
        private @Nullable String deviceCompliance;
        private @Nullable String fileEncryptionLevel;
        private @Nullable String fileSharingSaveAs;
        private String friendlyName;
        private String groupStatus;
        private String id;
        private String lastModifiedTime;
        private @Nullable String location;
        private @Nullable String managedBrowser;
        private String name;
        private Integer numOfApps;
        private @Nullable String offlineWipeTimeout;
        private @Nullable String pin;
        private @Nullable Integer pinNumRetry;
        private @Nullable Map<String,String> tags;
        private @Nullable String touchId;
        private String type;
        public Builder() {}
        public Builder(GetIoMAMPolicyByNameResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessRecheckOfflineTimeout = defaults.accessRecheckOfflineTimeout;
    	      this.accessRecheckOnlineTimeout = defaults.accessRecheckOnlineTimeout;
    	      this.appSharingFromLevel = defaults.appSharingFromLevel;
    	      this.appSharingToLevel = defaults.appSharingToLevel;
    	      this.authentication = defaults.authentication;
    	      this.clipboardSharingLevel = defaults.clipboardSharingLevel;
    	      this.dataBackup = defaults.dataBackup;
    	      this.description = defaults.description;
    	      this.deviceCompliance = defaults.deviceCompliance;
    	      this.fileEncryptionLevel = defaults.fileEncryptionLevel;
    	      this.fileSharingSaveAs = defaults.fileSharingSaveAs;
    	      this.friendlyName = defaults.friendlyName;
    	      this.groupStatus = defaults.groupStatus;
    	      this.id = defaults.id;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.location = defaults.location;
    	      this.managedBrowser = defaults.managedBrowser;
    	      this.name = defaults.name;
    	      this.numOfApps = defaults.numOfApps;
    	      this.offlineWipeTimeout = defaults.offlineWipeTimeout;
    	      this.pin = defaults.pin;
    	      this.pinNumRetry = defaults.pinNumRetry;
    	      this.tags = defaults.tags;
    	      this.touchId = defaults.touchId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accessRecheckOfflineTimeout(@Nullable String accessRecheckOfflineTimeout) {
            this.accessRecheckOfflineTimeout = accessRecheckOfflineTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder accessRecheckOnlineTimeout(@Nullable String accessRecheckOnlineTimeout) {
            this.accessRecheckOnlineTimeout = accessRecheckOnlineTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder appSharingFromLevel(@Nullable String appSharingFromLevel) {
            this.appSharingFromLevel = appSharingFromLevel;
            return this;
        }
        @CustomType.Setter
        public Builder appSharingToLevel(@Nullable String appSharingToLevel) {
            this.appSharingToLevel = appSharingToLevel;
            return this;
        }
        @CustomType.Setter
        public Builder authentication(@Nullable String authentication) {
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder clipboardSharingLevel(@Nullable String clipboardSharingLevel) {
            this.clipboardSharingLevel = clipboardSharingLevel;
            return this;
        }
        @CustomType.Setter
        public Builder dataBackup(@Nullable String dataBackup) {
            this.dataBackup = dataBackup;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceCompliance(@Nullable String deviceCompliance) {
            this.deviceCompliance = deviceCompliance;
            return this;
        }
        @CustomType.Setter
        public Builder fileEncryptionLevel(@Nullable String fileEncryptionLevel) {
            this.fileEncryptionLevel = fileEncryptionLevel;
            return this;
        }
        @CustomType.Setter
        public Builder fileSharingSaveAs(@Nullable String fileSharingSaveAs) {
            this.fileSharingSaveAs = fileSharingSaveAs;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyName(String friendlyName) {
            this.friendlyName = Objects.requireNonNull(friendlyName);
            return this;
        }
        @CustomType.Setter
        public Builder groupStatus(String groupStatus) {
            this.groupStatus = Objects.requireNonNull(groupStatus);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managedBrowser(@Nullable String managedBrowser) {
            this.managedBrowser = managedBrowser;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numOfApps(Integer numOfApps) {
            this.numOfApps = Objects.requireNonNull(numOfApps);
            return this;
        }
        @CustomType.Setter
        public Builder offlineWipeTimeout(@Nullable String offlineWipeTimeout) {
            this.offlineWipeTimeout = offlineWipeTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder pin(@Nullable String pin) {
            this.pin = pin;
            return this;
        }
        @CustomType.Setter
        public Builder pinNumRetry(@Nullable Integer pinNumRetry) {
            this.pinNumRetry = pinNumRetry;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder touchId(@Nullable String touchId) {
            this.touchId = touchId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetIoMAMPolicyByNameResult build() {
            final var o = new GetIoMAMPolicyByNameResult();
            o.accessRecheckOfflineTimeout = accessRecheckOfflineTimeout;
            o.accessRecheckOnlineTimeout = accessRecheckOnlineTimeout;
            o.appSharingFromLevel = appSharingFromLevel;
            o.appSharingToLevel = appSharingToLevel;
            o.authentication = authentication;
            o.clipboardSharingLevel = clipboardSharingLevel;
            o.dataBackup = dataBackup;
            o.description = description;
            o.deviceCompliance = deviceCompliance;
            o.fileEncryptionLevel = fileEncryptionLevel;
            o.fileSharingSaveAs = fileSharingSaveAs;
            o.friendlyName = friendlyName;
            o.groupStatus = groupStatus;
            o.id = id;
            o.lastModifiedTime = lastModifiedTime;
            o.location = location;
            o.managedBrowser = managedBrowser;
            o.name = name;
            o.numOfApps = numOfApps;
            o.offlineWipeTimeout = offlineWipeTimeout;
            o.pin = pin;
            o.pinNumRetry = pinNumRetry;
            o.tags = tags;
            o.touchId = touchId;
            o.type = type;
            return o;
        }
    }
}
