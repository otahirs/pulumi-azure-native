// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.outputs;

import com.pulumi.azurenative.batch.outputs.DeleteCertificateErrorResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCertificateResult {
    /**
     * @return This is only returned when the certificate provisioningState is &#39;Failed&#39;.
     * 
     */
    private DeleteCertificateErrorResponse deleteCertificateError;
    /**
     * @return The ETag of the resource, used for concurrency statements.
     * 
     */
    private String etag;
    /**
     * @return The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
     * 
     */
    private @Nullable String format;
    /**
     * @return The ID of the resource.
     * 
     */
    private String id;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The previous provisioned state of the resource
     * 
     */
    private String previousProvisioningState;
    private String previousProvisioningStateTransitionTime;
    private String provisioningState;
    private String provisioningStateTransitionTime;
    /**
     * @return The public key of the certificate.
     * 
     */
    private String publicData;
    /**
     * @return This must match the thumbprint from the name.
     * 
     */
    private @Nullable String thumbprint;
    /**
     * @return This must match the first portion of the certificate name. Currently required to be &#39;SHA1&#39;.
     * 
     */
    private @Nullable String thumbprintAlgorithm;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;

    private GetCertificateResult() {}
    /**
     * @return This is only returned when the certificate provisioningState is &#39;Failed&#39;.
     * 
     */
    public DeleteCertificateErrorResponse deleteCertificateError() {
        return this.deleteCertificateError;
    }
    /**
     * @return The ETag of the resource, used for concurrency statements.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The ID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The previous provisioned state of the resource
     * 
     */
    public String previousProvisioningState() {
        return this.previousProvisioningState;
    }
    public String previousProvisioningStateTransitionTime() {
        return this.previousProvisioningStateTransitionTime;
    }
    public String provisioningState() {
        return this.provisioningState;
    }
    public String provisioningStateTransitionTime() {
        return this.provisioningStateTransitionTime;
    }
    /**
     * @return The public key of the certificate.
     * 
     */
    public String publicData() {
        return this.publicData;
    }
    /**
     * @return This must match the thumbprint from the name.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }
    /**
     * @return This must match the first portion of the certificate name. Currently required to be &#39;SHA1&#39;.
     * 
     */
    public Optional<String> thumbprintAlgorithm() {
        return Optional.ofNullable(this.thumbprintAlgorithm);
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private DeleteCertificateErrorResponse deleteCertificateError;
        private String etag;
        private @Nullable String format;
        private String id;
        private String name;
        private String previousProvisioningState;
        private String previousProvisioningStateTransitionTime;
        private String provisioningState;
        private String provisioningStateTransitionTime;
        private String publicData;
        private @Nullable String thumbprint;
        private @Nullable String thumbprintAlgorithm;
        private String type;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteCertificateError = defaults.deleteCertificateError;
    	      this.etag = defaults.etag;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.previousProvisioningState = defaults.previousProvisioningState;
    	      this.previousProvisioningStateTransitionTime = defaults.previousProvisioningStateTransitionTime;
    	      this.provisioningState = defaults.provisioningState;
    	      this.provisioningStateTransitionTime = defaults.provisioningStateTransitionTime;
    	      this.publicData = defaults.publicData;
    	      this.thumbprint = defaults.thumbprint;
    	      this.thumbprintAlgorithm = defaults.thumbprintAlgorithm;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder deleteCertificateError(DeleteCertificateErrorResponse deleteCertificateError) {
            this.deleteCertificateError = Objects.requireNonNull(deleteCertificateError);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder previousProvisioningState(String previousProvisioningState) {
            this.previousProvisioningState = Objects.requireNonNull(previousProvisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder previousProvisioningStateTransitionTime(String previousProvisioningStateTransitionTime) {
            this.previousProvisioningStateTransitionTime = Objects.requireNonNull(previousProvisioningStateTransitionTime);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningStateTransitionTime(String provisioningStateTransitionTime) {
            this.provisioningStateTransitionTime = Objects.requireNonNull(provisioningStateTransitionTime);
            return this;
        }
        @CustomType.Setter
        public Builder publicData(String publicData) {
            this.publicData = Objects.requireNonNull(publicData);
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(@Nullable String thumbprint) {
            this.thumbprint = thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprintAlgorithm(@Nullable String thumbprintAlgorithm) {
            this.thumbprintAlgorithm = thumbprintAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetCertificateResult build() {
            final var o = new GetCertificateResult();
            o.deleteCertificateError = deleteCertificateError;
            o.etag = etag;
            o.format = format;
            o.id = id;
            o.name = name;
            o.previousProvisioningState = previousProvisioningState;
            o.previousProvisioningStateTransitionTime = previousProvisioningStateTransitionTime;
            o.provisioningState = provisioningState;
            o.provisioningStateTransitionTime = provisioningStateTransitionTime;
            o.publicData = publicData;
            o.thumbprint = thumbprint;
            o.thumbprintAlgorithm = thumbprintAlgorithm;
            o.type = type;
            return o;
        }
    }
}
