// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelEnvironmentDefinitionResponseResponsePython {
    private @Nullable String baseCondaEnvironment;
    /**
     * @return A JObject containing Conda dependencies.
     * 
     */
    private @Nullable Object condaDependencies;
    /**
     * @return The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.
     * 
     */
    private @Nullable String interpreterPath;
    /**
     * @return True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
     * 
     */
    private @Nullable Boolean userManagedDependencies;

    private ModelEnvironmentDefinitionResponseResponsePython() {}
    public Optional<String> baseCondaEnvironment() {
        return Optional.ofNullable(this.baseCondaEnvironment);
    }
    /**
     * @return A JObject containing Conda dependencies.
     * 
     */
    public Optional<Object> condaDependencies() {
        return Optional.ofNullable(this.condaDependencies);
    }
    /**
     * @return The python interpreter path to use if an environment build is not required. The path specified gets used to call the user script.
     * 
     */
    public Optional<String> interpreterPath() {
        return Optional.ofNullable(this.interpreterPath);
    }
    /**
     * @return True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
     * 
     */
    public Optional<Boolean> userManagedDependencies() {
        return Optional.ofNullable(this.userManagedDependencies);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelEnvironmentDefinitionResponseResponsePython defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String baseCondaEnvironment;
        private @Nullable Object condaDependencies;
        private @Nullable String interpreterPath;
        private @Nullable Boolean userManagedDependencies;
        public Builder() {}
        public Builder(ModelEnvironmentDefinitionResponseResponsePython defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseCondaEnvironment = defaults.baseCondaEnvironment;
    	      this.condaDependencies = defaults.condaDependencies;
    	      this.interpreterPath = defaults.interpreterPath;
    	      this.userManagedDependencies = defaults.userManagedDependencies;
        }

        @CustomType.Setter
        public Builder baseCondaEnvironment(@Nullable String baseCondaEnvironment) {
            this.baseCondaEnvironment = baseCondaEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder condaDependencies(@Nullable Object condaDependencies) {
            this.condaDependencies = condaDependencies;
            return this;
        }
        @CustomType.Setter
        public Builder interpreterPath(@Nullable String interpreterPath) {
            this.interpreterPath = interpreterPath;
            return this;
        }
        @CustomType.Setter
        public Builder userManagedDependencies(@Nullable Boolean userManagedDependencies) {
            this.userManagedDependencies = userManagedDependencies;
            return this;
        }
        public ModelEnvironmentDefinitionResponseResponsePython build() {
            final var o = new ModelEnvironmentDefinitionResponseResponsePython();
            o.baseCondaEnvironment = baseCondaEnvironment;
            o.condaDependencies = condaDependencies;
            o.interpreterPath = interpreterPath;
            o.userManagedDependencies = userManagedDependencies;
            return o;
        }
    }
}
