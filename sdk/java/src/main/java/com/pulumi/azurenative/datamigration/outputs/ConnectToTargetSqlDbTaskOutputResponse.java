// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class ConnectToTargetSqlDbTaskOutputResponse {
    /**
     * @return Source databases as a map from database name to database id
     * 
     */
    private Map<String,String> databases;
    /**
     * @return Result identifier
     * 
     */
    private String id;
    /**
     * @return Target server brand version
     * 
     */
    private String targetServerBrandVersion;
    /**
     * @return Version of the target server
     * 
     */
    private String targetServerVersion;

    private ConnectToTargetSqlDbTaskOutputResponse() {}
    /**
     * @return Source databases as a map from database name to database id
     * 
     */
    public Map<String,String> databases() {
        return this.databases;
    }
    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Target server brand version
     * 
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }
    /**
     * @return Version of the target server
     * 
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectToTargetSqlDbTaskOutputResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> databases;
        private String id;
        private String targetServerBrandVersion;
        private String targetServerVersion;
        public Builder() {}
        public Builder(ConnectToTargetSqlDbTaskOutputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databases = defaults.databases;
    	      this.id = defaults.id;
    	      this.targetServerBrandVersion = defaults.targetServerBrandVersion;
    	      this.targetServerVersion = defaults.targetServerVersion;
        }

        @CustomType.Setter
        public Builder databases(Map<String,String> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder targetServerBrandVersion(String targetServerBrandVersion) {
            this.targetServerBrandVersion = Objects.requireNonNull(targetServerBrandVersion);
            return this;
        }
        @CustomType.Setter
        public Builder targetServerVersion(String targetServerVersion) {
            this.targetServerVersion = Objects.requireNonNull(targetServerVersion);
            return this;
        }
        public ConnectToTargetSqlDbTaskOutputResponse build() {
            final var o = new ConnectToTargetSqlDbTaskOutputResponse();
            o.databases = databases;
            o.id = id;
            o.targetServerBrandVersion = targetServerBrandVersion;
            o.targetServerVersion = targetServerVersion;
            return o;
        }
    }
}
