// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.outputs;

import com.pulumi.azurenative.keyvault.outputs.AccessPolicyEntryResponse;
import com.pulumi.azurenative.keyvault.outputs.NetworkRuleSetResponse;
import com.pulumi.azurenative.keyvault.outputs.PrivateEndpointConnectionItemResponse;
import com.pulumi.azurenative.keyvault.outputs.SkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VaultPropertiesResponse {
    /**
     * @return An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&#39;s tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
     * 
     */
    private @Nullable List<AccessPolicyEntryResponse> accessPolicies;
    /**
     * @return Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
     * 
     */
    private @Nullable Boolean enablePurgeProtection;
    /**
     * @return Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.
     * 
     */
    private @Nullable Boolean enableRbacAuthorization;
    /**
     * @return Property to specify whether the &#39;soft delete&#39; functionality is enabled for this key vault. If it&#39;s not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
     * 
     */
    private @Nullable Boolean enableSoftDelete;
    /**
     * @return Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
     * 
     */
    private @Nullable Boolean enabledForDeployment;
    /**
     * @return Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     * 
     */
    private @Nullable Boolean enabledForDiskEncryption;
    /**
     * @return Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
     * 
     */
    private @Nullable Boolean enabledForTemplateDeployment;
    /**
     * @return The resource id of HSM Pool.
     * 
     */
    private String hsmPoolResourceId;
    /**
     * @return Rules governing the accessibility of the key vault from specific network locations.
     * 
     */
    private @Nullable NetworkRuleSetResponse networkAcls;
    /**
     * @return List of private endpoint connections associated with the key vault.
     * 
     */
    private List<PrivateEndpointConnectionItemResponse> privateEndpointConnections;
    /**
     * @return Provisioning state of the vault.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return SKU details
     * 
     */
    private SkuResponse sku;
    /**
     * @return softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     * 
     */
    private @Nullable Integer softDeleteRetentionInDays;
    /**
     * @return The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    private String tenantId;
    /**
     * @return The URI of the vault for performing operations on keys and secrets. This property is readonly
     * 
     */
    private @Nullable String vaultUri;

    private VaultPropertiesResponse() {}
    /**
     * @return An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&#39;s tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
     * 
     */
    public List<AccessPolicyEntryResponse> accessPolicies() {
        return this.accessPolicies == null ? List.of() : this.accessPolicies;
    }
    /**
     * @return Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
     * 
     */
    public Optional<Boolean> enablePurgeProtection() {
        return Optional.ofNullable(this.enablePurgeProtection);
    }
    /**
     * @return Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.
     * 
     */
    public Optional<Boolean> enableRbacAuthorization() {
        return Optional.ofNullable(this.enableRbacAuthorization);
    }
    /**
     * @return Property to specify whether the &#39;soft delete&#39; functionality is enabled for this key vault. If it&#39;s not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
     * 
     */
    public Optional<Boolean> enableSoftDelete() {
        return Optional.ofNullable(this.enableSoftDelete);
    }
    /**
     * @return Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
     * 
     */
    public Optional<Boolean> enabledForDeployment() {
        return Optional.ofNullable(this.enabledForDeployment);
    }
    /**
     * @return Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
     * 
     */
    public Optional<Boolean> enabledForDiskEncryption() {
        return Optional.ofNullable(this.enabledForDiskEncryption);
    }
    /**
     * @return Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
     * 
     */
    public Optional<Boolean> enabledForTemplateDeployment() {
        return Optional.ofNullable(this.enabledForTemplateDeployment);
    }
    /**
     * @return The resource id of HSM Pool.
     * 
     */
    public String hsmPoolResourceId() {
        return this.hsmPoolResourceId;
    }
    /**
     * @return Rules governing the accessibility of the key vault from specific network locations.
     * 
     */
    public Optional<NetworkRuleSetResponse> networkAcls() {
        return Optional.ofNullable(this.networkAcls);
    }
    /**
     * @return List of private endpoint connections associated with the key vault.
     * 
     */
    public List<PrivateEndpointConnectionItemResponse> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * @return Provisioning state of the vault.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return SKU details
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     * 
     */
    public Optional<Integer> softDeleteRetentionInDays() {
        return Optional.ofNullable(this.softDeleteRetentionInDays);
    }
    /**
     * @return The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The URI of the vault for performing operations on keys and secrets. This property is readonly
     * 
     */
    public Optional<String> vaultUri() {
        return Optional.ofNullable(this.vaultUri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VaultPropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AccessPolicyEntryResponse> accessPolicies;
        private @Nullable Boolean enablePurgeProtection;
        private @Nullable Boolean enableRbacAuthorization;
        private @Nullable Boolean enableSoftDelete;
        private @Nullable Boolean enabledForDeployment;
        private @Nullable Boolean enabledForDiskEncryption;
        private @Nullable Boolean enabledForTemplateDeployment;
        private String hsmPoolResourceId;
        private @Nullable NetworkRuleSetResponse networkAcls;
        private List<PrivateEndpointConnectionItemResponse> privateEndpointConnections;
        private @Nullable String provisioningState;
        private SkuResponse sku;
        private @Nullable Integer softDeleteRetentionInDays;
        private String tenantId;
        private @Nullable String vaultUri;
        public Builder() {}
        public Builder(VaultPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicies = defaults.accessPolicies;
    	      this.enablePurgeProtection = defaults.enablePurgeProtection;
    	      this.enableRbacAuthorization = defaults.enableRbacAuthorization;
    	      this.enableSoftDelete = defaults.enableSoftDelete;
    	      this.enabledForDeployment = defaults.enabledForDeployment;
    	      this.enabledForDiskEncryption = defaults.enabledForDiskEncryption;
    	      this.enabledForTemplateDeployment = defaults.enabledForTemplateDeployment;
    	      this.hsmPoolResourceId = defaults.hsmPoolResourceId;
    	      this.networkAcls = defaults.networkAcls;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.sku = defaults.sku;
    	      this.softDeleteRetentionInDays = defaults.softDeleteRetentionInDays;
    	      this.tenantId = defaults.tenantId;
    	      this.vaultUri = defaults.vaultUri;
        }

        @CustomType.Setter
        public Builder accessPolicies(@Nullable List<AccessPolicyEntryResponse> accessPolicies) {
            this.accessPolicies = accessPolicies;
            return this;
        }
        public Builder accessPolicies(AccessPolicyEntryResponse... accessPolicies) {
            return accessPolicies(List.of(accessPolicies));
        }
        @CustomType.Setter
        public Builder enablePurgeProtection(@Nullable Boolean enablePurgeProtection) {
            this.enablePurgeProtection = enablePurgeProtection;
            return this;
        }
        @CustomType.Setter
        public Builder enableRbacAuthorization(@Nullable Boolean enableRbacAuthorization) {
            this.enableRbacAuthorization = enableRbacAuthorization;
            return this;
        }
        @CustomType.Setter
        public Builder enableSoftDelete(@Nullable Boolean enableSoftDelete) {
            this.enableSoftDelete = enableSoftDelete;
            return this;
        }
        @CustomType.Setter
        public Builder enabledForDeployment(@Nullable Boolean enabledForDeployment) {
            this.enabledForDeployment = enabledForDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder enabledForDiskEncryption(@Nullable Boolean enabledForDiskEncryption) {
            this.enabledForDiskEncryption = enabledForDiskEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder enabledForTemplateDeployment(@Nullable Boolean enabledForTemplateDeployment) {
            this.enabledForTemplateDeployment = enabledForTemplateDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder hsmPoolResourceId(String hsmPoolResourceId) {
            this.hsmPoolResourceId = Objects.requireNonNull(hsmPoolResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder networkAcls(@Nullable NetworkRuleSetResponse networkAcls) {
            this.networkAcls = networkAcls;
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointConnections(List<PrivateEndpointConnectionItemResponse> privateEndpointConnections) {
            this.privateEndpointConnections = Objects.requireNonNull(privateEndpointConnections);
            return this;
        }
        public Builder privateEndpointConnections(PrivateEndpointConnectionItemResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder softDeleteRetentionInDays(@Nullable Integer softDeleteRetentionInDays) {
            this.softDeleteRetentionInDays = softDeleteRetentionInDays;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        @CustomType.Setter
        public Builder vaultUri(@Nullable String vaultUri) {
            this.vaultUri = vaultUri;
            return this;
        }
        public VaultPropertiesResponse build() {
            final var o = new VaultPropertiesResponse();
            o.accessPolicies = accessPolicies;
            o.enablePurgeProtection = enablePurgeProtection;
            o.enableRbacAuthorization = enableRbacAuthorization;
            o.enableSoftDelete = enableSoftDelete;
            o.enabledForDeployment = enabledForDeployment;
            o.enabledForDiskEncryption = enabledForDiskEncryption;
            o.enabledForTemplateDeployment = enabledForTemplateDeployment;
            o.hsmPoolResourceId = hsmPoolResourceId;
            o.networkAcls = networkAcls;
            o.privateEndpointConnections = privateEndpointConnections;
            o.provisioningState = provisioningState;
            o.sku = sku;
            o.softDeleteRetentionInDays = softDeleteRetentionInDays;
            o.tenantId = tenantId;
            o.vaultUri = vaultUri;
            return o;
        }
    }
}
