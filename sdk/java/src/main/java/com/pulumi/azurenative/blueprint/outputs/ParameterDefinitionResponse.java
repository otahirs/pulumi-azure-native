// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.blueprint.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ParameterDefinitionResponse {
    /**
     * @return Array of allowed values for this parameter.
     * 
     */
    private @Nullable List<Object> allowedValues;
    /**
     * @return Default Value for this parameter.
     * 
     */
    private @Nullable Object defaultValue;
    /**
     * @return Description of this parameter/resourceGroup.
     * 
     */
    private @Nullable String description;
    /**
     * @return DisplayName of this parameter/resourceGroup.
     * 
     */
    private @Nullable String displayName;
    /**
     * @return StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
     * 
     */
    private @Nullable String strongType;
    /**
     * @return Allowed data types for Resource Manager template parameters.
     * 
     */
    private String type;

    private ParameterDefinitionResponse() {}
    /**
     * @return Array of allowed values for this parameter.
     * 
     */
    public List<Object> allowedValues() {
        return this.allowedValues == null ? List.of() : this.allowedValues;
    }
    /**
     * @return Default Value for this parameter.
     * 
     */
    public Optional<Object> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * @return Description of this parameter/resourceGroup.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return DisplayName of this parameter/resourceGroup.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }
    /**
     * @return StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
     * 
     */
    public Optional<String> strongType() {
        return Optional.ofNullable(this.strongType);
    }
    /**
     * @return Allowed data types for Resource Manager template parameters.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ParameterDefinitionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> allowedValues;
        private @Nullable Object defaultValue;
        private @Nullable String description;
        private @Nullable String displayName;
        private @Nullable String strongType;
        private String type;
        public Builder() {}
        public Builder(ParameterDefinitionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.defaultValue = defaults.defaultValue;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.strongType = defaults.strongType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder allowedValues(@Nullable List<Object> allowedValues) {
            this.allowedValues = allowedValues;
            return this;
        }
        public Builder allowedValues(Object... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }
        @CustomType.Setter
        public Builder defaultValue(@Nullable Object defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(@Nullable String displayName) {
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder strongType(@Nullable String strongType) {
            this.strongType = strongType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ParameterDefinitionResponse build() {
            final var o = new ParameterDefinitionResponse();
            o.allowedValues = allowedValues;
            o.defaultValue = defaultValue;
            o.description = description;
            o.displayName = displayName;
            o.strongType = strongType;
            o.type = type;
            return o;
        }
    }
}
