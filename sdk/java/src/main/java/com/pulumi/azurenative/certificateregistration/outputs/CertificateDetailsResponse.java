// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.certificateregistration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class CertificateDetailsResponse {
    /**
     * @return Certificate Issuer.
     * 
     */
    private String issuer;
    /**
     * @return Date Certificate is valid to.
     * 
     */
    private String notAfter;
    /**
     * @return Date Certificate is valid from.
     * 
     */
    private String notBefore;
    /**
     * @return Raw certificate data.
     * 
     */
    private String rawData;
    /**
     * @return Certificate Serial Number.
     * 
     */
    private String serialNumber;
    /**
     * @return Certificate Signature algorithm.
     * 
     */
    private String signatureAlgorithm;
    /**
     * @return Certificate Subject.
     * 
     */
    private String subject;
    /**
     * @return Certificate Thumbprint.
     * 
     */
    private String thumbprint;
    /**
     * @return Certificate Version.
     * 
     */
    private Integer version;

    private CertificateDetailsResponse() {}
    /**
     * @return Certificate Issuer.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Date Certificate is valid to.
     * 
     */
    public String notAfter() {
        return this.notAfter;
    }
    /**
     * @return Date Certificate is valid from.
     * 
     */
    public String notBefore() {
        return this.notBefore;
    }
    /**
     * @return Raw certificate data.
     * 
     */
    public String rawData() {
        return this.rawData;
    }
    /**
     * @return Certificate Serial Number.
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return Certificate Signature algorithm.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return Certificate Subject.
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return Certificate Thumbprint.
     * 
     */
    public String thumbprint() {
        return this.thumbprint;
    }
    /**
     * @return Certificate Version.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateDetailsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String issuer;
        private String notAfter;
        private String notBefore;
        private String rawData;
        private String serialNumber;
        private String signatureAlgorithm;
        private String subject;
        private String thumbprint;
        private Integer version;
        public Builder() {}
        public Builder(CertificateDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.issuer = defaults.issuer;
    	      this.notAfter = defaults.notAfter;
    	      this.notBefore = defaults.notBefore;
    	      this.rawData = defaults.rawData;
    	      this.serialNumber = defaults.serialNumber;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.subject = defaults.subject;
    	      this.thumbprint = defaults.thumbprint;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder notAfter(String notAfter) {
            this.notAfter = Objects.requireNonNull(notAfter);
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(String notBefore) {
            this.notBefore = Objects.requireNonNull(notBefore);
            return this;
        }
        @CustomType.Setter
        public Builder rawData(String rawData) {
            this.rawData = Objects.requireNonNull(rawData);
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Objects.requireNonNull(serialNumber);
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(String thumbprint) {
            this.thumbprint = Objects.requireNonNull(thumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public CertificateDetailsResponse build() {
            final var o = new CertificateDetailsResponse();
            o.issuer = issuer;
            o.notAfter = notAfter;
            o.notBefore = notBefore;
            o.rawData = rawData;
            o.serialNumber = serialNumber;
            o.signatureAlgorithm = signatureAlgorithm;
            o.subject = subject;
            o.thumbprint = thumbprint;
            o.version = version;
            return o;
        }
    }
}
