// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RerunTumblingWindowTriggerResponse {
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    private @Nullable List<Object> annotations;
    /**
     * @return Trigger description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The parent trigger reference.
     * 
     */
    private Object parentTrigger;
    /**
     * @return The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
     * 
     */
    private String requestedEndTime;
    /**
     * @return The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
     * 
     */
    private String requestedStartTime;
    /**
     * @return The max number of parallel time windows (ready for execution) for which a rerun is triggered.
     * 
     */
    private Integer rerunConcurrency;
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    private String runtimeState;
    /**
     * @return Trigger type.
     * Expected value is &#39;RerunTumblingWindowTrigger&#39;.
     * 
     */
    private String type;

    private RerunTumblingWindowTriggerResponse() {}
    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return Trigger description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The parent trigger reference.
     * 
     */
    public Object parentTrigger() {
        return this.parentTrigger;
    }
    /**
     * @return The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
     * 
     */
    public String requestedEndTime() {
        return this.requestedEndTime;
    }
    /**
     * @return The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
     * 
     */
    public String requestedStartTime() {
        return this.requestedStartTime;
    }
    /**
     * @return The max number of parallel time windows (ready for execution) for which a rerun is triggered.
     * 
     */
    public Integer rerunConcurrency() {
        return this.rerunConcurrency;
    }
    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    public String runtimeState() {
        return this.runtimeState;
    }
    /**
     * @return Trigger type.
     * Expected value is &#39;RerunTumblingWindowTrigger&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RerunTumblingWindowTriggerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Object> annotations;
        private @Nullable String description;
        private Object parentTrigger;
        private String requestedEndTime;
        private String requestedStartTime;
        private Integer rerunConcurrency;
        private String runtimeState;
        private String type;
        public Builder() {}
        public Builder(RerunTumblingWindowTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.parentTrigger = defaults.parentTrigger;
    	      this.requestedEndTime = defaults.requestedEndTime;
    	      this.requestedStartTime = defaults.requestedStartTime;
    	      this.rerunConcurrency = defaults.rerunConcurrency;
    	      this.runtimeState = defaults.runtimeState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder parentTrigger(Object parentTrigger) {
            this.parentTrigger = Objects.requireNonNull(parentTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder requestedEndTime(String requestedEndTime) {
            this.requestedEndTime = Objects.requireNonNull(requestedEndTime);
            return this;
        }
        @CustomType.Setter
        public Builder requestedStartTime(String requestedStartTime) {
            this.requestedStartTime = Objects.requireNonNull(requestedStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder rerunConcurrency(Integer rerunConcurrency) {
            this.rerunConcurrency = Objects.requireNonNull(rerunConcurrency);
            return this;
        }
        @CustomType.Setter
        public Builder runtimeState(String runtimeState) {
            this.runtimeState = Objects.requireNonNull(runtimeState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public RerunTumblingWindowTriggerResponse build() {
            final var o = new RerunTumblingWindowTriggerResponse();
            o.annotations = annotations;
            o.description = description;
            o.parentTrigger = parentTrigger;
            o.requestedEndTime = requestedEndTime;
            o.requestedStartTime = requestedStartTime;
            o.rerunConcurrency = rerunConcurrency;
            o.runtimeState = runtimeState;
            o.type = type;
            return o;
        }
    }
}
