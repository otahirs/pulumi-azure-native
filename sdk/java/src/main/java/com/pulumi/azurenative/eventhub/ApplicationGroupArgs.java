// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventhub;

import com.pulumi.azurenative.eventhub.inputs.ThrottlingPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGroupArgs Empty = new ApplicationGroupArgs();

    /**
     * The Application Group name
     * 
     */
    @Import(name="applicationGroupName")
    private @Nullable Output<String> applicationGroupName;

    /**
     * @return The Application Group name
     * 
     */
    public Optional<Output<String>> applicationGroupName() {
        return Optional.ofNullable(this.applicationGroupName);
    }

    /**
     * The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
     * 
     */
    @Import(name="clientAppGroupIdentifier", required=true)
    private Output<String> clientAppGroupIdentifier;

    /**
     * @return The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
     * 
     */
    public Output<String> clientAppGroupIdentifier() {
        return this.clientAppGroupIdentifier;
    }

    /**
     * Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * The Namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    /**
     * @return The Namespace name
     * 
     */
    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<ThrottlingPolicyArgs>> policies;

    /**
     * @return List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
     * 
     */
    public Optional<Output<List<ThrottlingPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Name of the resource group within the azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group within the azure subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ApplicationGroupArgs() {}

    private ApplicationGroupArgs(ApplicationGroupArgs $) {
        this.applicationGroupName = $.applicationGroupName;
        this.clientAppGroupIdentifier = $.clientAppGroupIdentifier;
        this.isEnabled = $.isEnabled;
        this.namespaceName = $.namespaceName;
        this.policies = $.policies;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGroupArgs $;

        public Builder() {
            $ = new ApplicationGroupArgs();
        }

        public Builder(ApplicationGroupArgs defaults) {
            $ = new ApplicationGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationGroupName The Application Group name
         * 
         * @return builder
         * 
         */
        public Builder applicationGroupName(@Nullable Output<String> applicationGroupName) {
            $.applicationGroupName = applicationGroupName;
            return this;
        }

        /**
         * @param applicationGroupName The Application Group name
         * 
         * @return builder
         * 
         */
        public Builder applicationGroupName(String applicationGroupName) {
            return applicationGroupName(Output.of(applicationGroupName));
        }

        /**
         * @param clientAppGroupIdentifier The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
         * 
         * @return builder
         * 
         */
        public Builder clientAppGroupIdentifier(Output<String> clientAppGroupIdentifier) {
            $.clientAppGroupIdentifier = clientAppGroupIdentifier;
            return this;
        }

        /**
         * @param clientAppGroupIdentifier The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
         * 
         * @return builder
         * 
         */
        public Builder clientAppGroupIdentifier(String clientAppGroupIdentifier) {
            return clientAppGroupIdentifier(Output.of(clientAppGroupIdentifier));
        }

        /**
         * @param isEnabled Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param namespaceName The Namespace name
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The Namespace name
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param policies List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<ThrottlingPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<ThrottlingPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
         * 
         * @return builder
         * 
         */
        public Builder policies(ThrottlingPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param resourceGroupName Name of the resource group within the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group within the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ApplicationGroupArgs build() {
            $.clientAppGroupIdentifier = Objects.requireNonNull($.clientAppGroupIdentifier, "expected parameter 'clientAppGroupIdentifier' to be non-null");
            $.namespaceName = Objects.requireNonNull($.namespaceName, "expected parameter 'namespaceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
