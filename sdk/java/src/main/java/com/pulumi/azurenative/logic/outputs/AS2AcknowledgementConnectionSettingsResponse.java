// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class AS2AcknowledgementConnectionSettingsResponse {
    /**
     * @return Indicates whether to ignore mismatch in certificate name.
     * 
     */
    private Boolean ignoreCertificateNameMismatch;
    /**
     * @return Indicates whether to keep the connection alive.
     * 
     */
    private Boolean keepHttpConnectionAlive;
    /**
     * @return Indicates whether to support HTTP status code &#39;CONTINUE&#39;.
     * 
     */
    private Boolean supportHttpStatusCodeContinue;
    /**
     * @return Indicates whether to unfold the HTTP headers.
     * 
     */
    private Boolean unfoldHttpHeaders;

    private AS2AcknowledgementConnectionSettingsResponse() {}
    /**
     * @return Indicates whether to ignore mismatch in certificate name.
     * 
     */
    public Boolean ignoreCertificateNameMismatch() {
        return this.ignoreCertificateNameMismatch;
    }
    /**
     * @return Indicates whether to keep the connection alive.
     * 
     */
    public Boolean keepHttpConnectionAlive() {
        return this.keepHttpConnectionAlive;
    }
    /**
     * @return Indicates whether to support HTTP status code &#39;CONTINUE&#39;.
     * 
     */
    public Boolean supportHttpStatusCodeContinue() {
        return this.supportHttpStatusCodeContinue;
    }
    /**
     * @return Indicates whether to unfold the HTTP headers.
     * 
     */
    public Boolean unfoldHttpHeaders() {
        return this.unfoldHttpHeaders;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2AcknowledgementConnectionSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean ignoreCertificateNameMismatch;
        private Boolean keepHttpConnectionAlive;
        private Boolean supportHttpStatusCodeContinue;
        private Boolean unfoldHttpHeaders;
        public Builder() {}
        public Builder(AS2AcknowledgementConnectionSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreCertificateNameMismatch = defaults.ignoreCertificateNameMismatch;
    	      this.keepHttpConnectionAlive = defaults.keepHttpConnectionAlive;
    	      this.supportHttpStatusCodeContinue = defaults.supportHttpStatusCodeContinue;
    	      this.unfoldHttpHeaders = defaults.unfoldHttpHeaders;
        }

        @CustomType.Setter
        public Builder ignoreCertificateNameMismatch(Boolean ignoreCertificateNameMismatch) {
            this.ignoreCertificateNameMismatch = Objects.requireNonNull(ignoreCertificateNameMismatch);
            return this;
        }
        @CustomType.Setter
        public Builder keepHttpConnectionAlive(Boolean keepHttpConnectionAlive) {
            this.keepHttpConnectionAlive = Objects.requireNonNull(keepHttpConnectionAlive);
            return this;
        }
        @CustomType.Setter
        public Builder supportHttpStatusCodeContinue(Boolean supportHttpStatusCodeContinue) {
            this.supportHttpStatusCodeContinue = Objects.requireNonNull(supportHttpStatusCodeContinue);
            return this;
        }
        @CustomType.Setter
        public Builder unfoldHttpHeaders(Boolean unfoldHttpHeaders) {
            this.unfoldHttpHeaders = Objects.requireNonNull(unfoldHttpHeaders);
            return this;
        }
        public AS2AcknowledgementConnectionSettingsResponse build() {
            final var o = new AS2AcknowledgementConnectionSettingsResponse();
            o.ignoreCertificateNameMismatch = ignoreCertificateNameMismatch;
            o.keepHttpConnectionAlive = keepHttpConnectionAlive;
            o.supportHttpStatusCodeContinue = supportHttpStatusCodeContinue;
            o.unfoldHttpHeaders = unfoldHttpHeaders;
            return o;
        }
    }
}
