// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.compute.CloudServiceArgs;
import com.pulumi.azurenative.compute.outputs.CloudServicePropertiesResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Describes the cloud service.
 * API Version: 2021-03-01.
 * 
 * ## Example Usage
 * ### Create New Cloud Service with Multiple Roles
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cloudService = new CloudService(&#34;cloudService&#34;, CloudServiceArgs.builder()        
 *             .cloudServiceName(&#34;{cs-name}&#34;)
 *             .location(&#34;westus&#34;)
 *             .properties(Map.ofEntries(
 *                 Map.entry(&#34;configuration&#34;, &#34;{ServiceConfiguration}&#34;),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;loadBalancerConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;contosolb&#34;),
 *                     Map.entry(&#34;properties&#34;, Map.of(&#34;frontendIPConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;contosofe&#34;),
 *                         Map.entry(&#34;properties&#34;, Map.of(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip&#34;)))
 *                     )))
 *                 ))),
 *                 Map.entry(&#34;packageUrl&#34;, &#34;{PackageUrl}&#34;),
 *                 Map.entry(&#34;roleProfile&#34;, Map.of(&#34;roles&#34;,                 
 *                     Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;ContosoFrontend&#34;),
 *                         Map.entry(&#34;sku&#34;, Map.ofEntries(
 *                             Map.entry(&#34;capacity&#34;, 1),
 *                             Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                             Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *                         ))
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;ContosoBackend&#34;),
 *                         Map.entry(&#34;sku&#34;, Map.ofEntries(
 *                             Map.entry(&#34;capacity&#34;, 1),
 *                             Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                             Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *                         ))
 *                     ))),
 *                 Map.entry(&#34;upgradeMode&#34;, &#34;Auto&#34;)
 *             ))
 *             .resourceGroupName(&#34;ConstosoRG&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create New Cloud Service with Single Role
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cloudService = new CloudService(&#34;cloudService&#34;, CloudServiceArgs.builder()        
 *             .cloudServiceName(&#34;{cs-name}&#34;)
 *             .location(&#34;westus&#34;)
 *             .properties(Map.ofEntries(
 *                 Map.entry(&#34;configuration&#34;, &#34;{ServiceConfiguration}&#34;),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;loadBalancerConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;myLoadBalancer&#34;),
 *                     Map.entry(&#34;properties&#34;, Map.of(&#34;frontendIPConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;myfe&#34;),
 *                         Map.entry(&#34;properties&#34;, Map.of(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP&#34;)))
 *                     )))
 *                 ))),
 *                 Map.entry(&#34;packageUrl&#34;, &#34;{PackageUrl}&#34;),
 *                 Map.entry(&#34;roleProfile&#34;, Map.of(&#34;roles&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;ContosoFrontend&#34;),
 *                     Map.entry(&#34;sku&#34;, Map.ofEntries(
 *                         Map.entry(&#34;capacity&#34;, 1),
 *                         Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                         Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *                     ))
 *                 ))),
 *                 Map.entry(&#34;upgradeMode&#34;, &#34;Auto&#34;)
 *             ))
 *             .resourceGroupName(&#34;ConstosoRG&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create New Cloud Service with Single Role and Certificate from Key Vault
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cloudService = new CloudService(&#34;cloudService&#34;, CloudServiceArgs.builder()        
 *             .cloudServiceName(&#34;{cs-name}&#34;)
 *             .location(&#34;westus&#34;)
 *             .properties(Map.ofEntries(
 *                 Map.entry(&#34;configuration&#34;, &#34;{ServiceConfiguration}&#34;),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;loadBalancerConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;contosolb&#34;),
 *                     Map.entry(&#34;properties&#34;, Map.of(&#34;frontendIPConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;contosofe&#34;),
 *                         Map.entry(&#34;properties&#34;, Map.of(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip&#34;)))
 *                     )))
 *                 ))),
 *                 Map.entry(&#34;osProfile&#34;, Map.of(&#34;secrets&#34;, Map.ofEntries(
 *                     Map.entry(&#34;sourceVault&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}&#34;)),
 *                     Map.entry(&#34;vaultCertificates&#34;, Map.of(&#34;certificateUrl&#34;, &#34;https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}&#34;))
 *                 ))),
 *                 Map.entry(&#34;packageUrl&#34;, &#34;{PackageUrl}&#34;),
 *                 Map.entry(&#34;roleProfile&#34;, Map.of(&#34;roles&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;ContosoFrontend&#34;),
 *                     Map.entry(&#34;sku&#34;, Map.ofEntries(
 *                         Map.entry(&#34;capacity&#34;, 1),
 *                         Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                         Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *                     ))
 *                 ))),
 *                 Map.entry(&#34;upgradeMode&#34;, &#34;Auto&#34;)
 *             ))
 *             .resourceGroupName(&#34;ConstosoRG&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create New Cloud Service with Single Role and RDP Extension
 * 
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var cloudService = new CloudService(&#34;cloudService&#34;, CloudServiceArgs.builder()        
 *             .cloudServiceName(&#34;{cs-name}&#34;)
 *             .location(&#34;westus&#34;)
 *             .properties(Map.ofEntries(
 *                 Map.entry(&#34;configuration&#34;, &#34;{ServiceConfiguration}&#34;),
 *                 Map.entry(&#34;extensionProfile&#34;, Map.of(&#34;extensions&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;RDPExtension&#34;),
 *                     Map.entry(&#34;properties&#34;, Map.ofEntries(
 *                         Map.entry(&#34;autoUpgradeMinorVersion&#34;, false),
 *                         Map.entry(&#34;protectedSettings&#34;, &#34;&lt;PrivateConfig&gt;&lt;Password&gt;{password}&lt;/Password&gt;&lt;/PrivateConfig&gt;&#34;),
 *                         Map.entry(&#34;publisher&#34;, &#34;Microsoft.Windows.Azure.Extensions&#34;),
 *                         Map.entry(&#34;settings&#34;, &#34;&lt;PublicConfig&gt;&lt;UserName&gt;UserAzure&lt;/UserName&gt;&lt;Expiration&gt;10/22/2021 15:05:45&lt;/Expiration&gt;&lt;/PublicConfig&gt;&#34;),
 *                         Map.entry(&#34;type&#34;, &#34;RDP&#34;),
 *                         Map.entry(&#34;typeHandlerVersion&#34;, &#34;1.2.1&#34;)
 *                     ))
 *                 ))),
 *                 Map.entry(&#34;networkProfile&#34;, Map.of(&#34;loadBalancerConfigurations&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;contosolb&#34;),
 *                     Map.entry(&#34;properties&#34;, Map.of(&#34;frontendIPConfigurations&#34;, Map.ofEntries(
 *                         Map.entry(&#34;name&#34;, &#34;contosofe&#34;),
 *                         Map.entry(&#34;properties&#34;, Map.of(&#34;publicIPAddress&#34;, Map.of(&#34;id&#34;, &#34;/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip&#34;)))
 *                     )))
 *                 ))),
 *                 Map.entry(&#34;packageUrl&#34;, &#34;{PackageUrl}&#34;),
 *                 Map.entry(&#34;roleProfile&#34;, Map.of(&#34;roles&#34;, Map.ofEntries(
 *                     Map.entry(&#34;name&#34;, &#34;ContosoFrontend&#34;),
 *                     Map.entry(&#34;sku&#34;, Map.ofEntries(
 *                         Map.entry(&#34;capacity&#34;, 1),
 *                         Map.entry(&#34;name&#34;, &#34;Standard_D1_v2&#34;),
 *                         Map.entry(&#34;tier&#34;, &#34;Standard&#34;)
 *                     ))
 *                 ))),
 *                 Map.entry(&#34;upgradeMode&#34;, &#34;Auto&#34;)
 *             ))
 *             .resourceGroupName(&#34;ConstosoRG&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:compute:CloudService {cs-name} /subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name} 
 * ```
 * 
 */
@ResourceType(type="azure-native:compute:CloudService")
public class CloudService extends com.pulumi.resources.CustomResource {
    /**
     * Resource location.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Resource name.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Cloud service properties
     * 
     */
    @Export(name="properties", type=CloudServicePropertiesResponse.class, parameters={})
    private Output<CloudServicePropertiesResponse> properties;

    /**
     * @return Cloud service properties
     * 
     */
    public Output<CloudServicePropertiesResponse> properties() {
        return this.properties;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Resource type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Resource type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CloudService(String name) {
        this(name, CloudServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CloudService(String name, CloudServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CloudService(String name, CloudServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:CloudService", name, args == null ? CloudServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CloudService(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:compute:CloudService", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:compute/v20201001preview:CloudService").build()),
                Output.of(Alias.builder().type("azure-native:compute/v20210301:CloudService").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CloudService get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CloudService(name, id, options);
    }
}
