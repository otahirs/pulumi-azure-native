// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.BackendAddressPoolResponse;
import com.pulumi.azurenative.network.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.network.outputs.FrontendIPConfigurationResponse;
import com.pulumi.azurenative.network.outputs.InboundNatPoolResponse;
import com.pulumi.azurenative.network.outputs.InboundNatRuleResponse;
import com.pulumi.azurenative.network.outputs.LoadBalancerSkuResponse;
import com.pulumi.azurenative.network.outputs.LoadBalancingRuleResponse;
import com.pulumi.azurenative.network.outputs.OutboundRuleResponse;
import com.pulumi.azurenative.network.outputs.ProbeResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLoadBalancerResult {
    /**
     * @return Collection of backend address pools used by a load balancer.
     * 
     */
    private @Nullable List<BackendAddressPoolResponse> backendAddressPools;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return The extended location of the load balancer.
     * 
     */
    private @Nullable ExtendedLocationResponse extendedLocation;
    /**
     * @return Object representing the frontend IPs to be used for the load balancer.
     * 
     */
    private @Nullable List<FrontendIPConfigurationResponse> frontendIPConfigurations;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
     * 
     */
    private @Nullable List<InboundNatPoolResponse> inboundNatPools;
    /**
     * @return Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
     * 
     */
    private @Nullable List<InboundNatRuleResponse> inboundNatRules;
    /**
     * @return Object collection representing the load balancing rules Gets the provisioning.
     * 
     */
    private @Nullable List<LoadBalancingRuleResponse> loadBalancingRules;
    /**
     * @return Resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The outbound rules.
     * 
     */
    private @Nullable List<OutboundRuleResponse> outboundRules;
    /**
     * @return Collection of probe objects used in the load balancer.
     * 
     */
    private @Nullable List<ProbeResponse> probes;
    /**
     * @return The provisioning state of the load balancer resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The resource GUID property of the load balancer resource.
     * 
     */
    private String resourceGuid;
    /**
     * @return The load balancer SKU.
     * 
     */
    private @Nullable LoadBalancerSkuResponse sku;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetLoadBalancerResult() {}
    /**
     * @return Collection of backend address pools used by a load balancer.
     * 
     */
    public List<BackendAddressPoolResponse> backendAddressPools() {
        return this.backendAddressPools == null ? List.of() : this.backendAddressPools;
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The extended location of the load balancer.
     * 
     */
    public Optional<ExtendedLocationResponse> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }
    /**
     * @return Object representing the frontend IPs to be used for the load balancer.
     * 
     */
    public List<FrontendIPConfigurationResponse> frontendIPConfigurations() {
        return this.frontendIPConfigurations == null ? List.of() : this.frontendIPConfigurations;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
     * 
     */
    public List<InboundNatPoolResponse> inboundNatPools() {
        return this.inboundNatPools == null ? List.of() : this.inboundNatPools;
    }
    /**
     * @return Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
     * 
     */
    public List<InboundNatRuleResponse> inboundNatRules() {
        return this.inboundNatRules == null ? List.of() : this.inboundNatRules;
    }
    /**
     * @return Object collection representing the load balancing rules Gets the provisioning.
     * 
     */
    public List<LoadBalancingRuleResponse> loadBalancingRules() {
        return this.loadBalancingRules == null ? List.of() : this.loadBalancingRules;
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The outbound rules.
     * 
     */
    public List<OutboundRuleResponse> outboundRules() {
        return this.outboundRules == null ? List.of() : this.outboundRules;
    }
    /**
     * @return Collection of probe objects used in the load balancer.
     * 
     */
    public List<ProbeResponse> probes() {
        return this.probes == null ? List.of() : this.probes;
    }
    /**
     * @return The provisioning state of the load balancer resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The resource GUID property of the load balancer resource.
     * 
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * @return The load balancer SKU.
     * 
     */
    public Optional<LoadBalancerSkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<BackendAddressPoolResponse> backendAddressPools;
        private String etag;
        private @Nullable ExtendedLocationResponse extendedLocation;
        private @Nullable List<FrontendIPConfigurationResponse> frontendIPConfigurations;
        private @Nullable String id;
        private @Nullable List<InboundNatPoolResponse> inboundNatPools;
        private @Nullable List<InboundNatRuleResponse> inboundNatRules;
        private @Nullable List<LoadBalancingRuleResponse> loadBalancingRules;
        private @Nullable String location;
        private String name;
        private @Nullable List<OutboundRuleResponse> outboundRules;
        private @Nullable List<ProbeResponse> probes;
        private String provisioningState;
        private String resourceGuid;
        private @Nullable LoadBalancerSkuResponse sku;
        private @Nullable Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetLoadBalancerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPools = defaults.backendAddressPools;
    	      this.etag = defaults.etag;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.frontendIPConfigurations = defaults.frontendIPConfigurations;
    	      this.id = defaults.id;
    	      this.inboundNatPools = defaults.inboundNatPools;
    	      this.inboundNatRules = defaults.inboundNatRules;
    	      this.loadBalancingRules = defaults.loadBalancingRules;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.outboundRules = defaults.outboundRules;
    	      this.probes = defaults.probes;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder backendAddressPools(@Nullable List<BackendAddressPoolResponse> backendAddressPools) {
            this.backendAddressPools = backendAddressPools;
            return this;
        }
        public Builder backendAddressPools(BackendAddressPoolResponse... backendAddressPools) {
            return backendAddressPools(List.of(backendAddressPools));
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder extendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        @CustomType.Setter
        public Builder frontendIPConfigurations(@Nullable List<FrontendIPConfigurationResponse> frontendIPConfigurations) {
            this.frontendIPConfigurations = frontendIPConfigurations;
            return this;
        }
        public Builder frontendIPConfigurations(FrontendIPConfigurationResponse... frontendIPConfigurations) {
            return frontendIPConfigurations(List.of(frontendIPConfigurations));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inboundNatPools(@Nullable List<InboundNatPoolResponse> inboundNatPools) {
            this.inboundNatPools = inboundNatPools;
            return this;
        }
        public Builder inboundNatPools(InboundNatPoolResponse... inboundNatPools) {
            return inboundNatPools(List.of(inboundNatPools));
        }
        @CustomType.Setter
        public Builder inboundNatRules(@Nullable List<InboundNatRuleResponse> inboundNatRules) {
            this.inboundNatRules = inboundNatRules;
            return this;
        }
        public Builder inboundNatRules(InboundNatRuleResponse... inboundNatRules) {
            return inboundNatRules(List.of(inboundNatRules));
        }
        @CustomType.Setter
        public Builder loadBalancingRules(@Nullable List<LoadBalancingRuleResponse> loadBalancingRules) {
            this.loadBalancingRules = loadBalancingRules;
            return this;
        }
        public Builder loadBalancingRules(LoadBalancingRuleResponse... loadBalancingRules) {
            return loadBalancingRules(List.of(loadBalancingRules));
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outboundRules(@Nullable List<OutboundRuleResponse> outboundRules) {
            this.outboundRules = outboundRules;
            return this;
        }
        public Builder outboundRules(OutboundRuleResponse... outboundRules) {
            return outboundRules(List.of(outboundRules));
        }
        @CustomType.Setter
        public Builder probes(@Nullable List<ProbeResponse> probes) {
            this.probes = probes;
            return this;
        }
        public Builder probes(ProbeResponse... probes) {
            return probes(List.of(probes));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable LoadBalancerSkuResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetLoadBalancerResult build() {
            final var o = new GetLoadBalancerResult();
            o.backendAddressPools = backendAddressPools;
            o.etag = etag;
            o.extendedLocation = extendedLocation;
            o.frontendIPConfigurations = frontendIPConfigurations;
            o.id = id;
            o.inboundNatPools = inboundNatPools;
            o.inboundNatRules = inboundNatRules;
            o.loadBalancingRules = loadBalancingRules;
            o.location = location;
            o.name = name;
            o.outboundRules = outboundRules;
            o.probes = probes;
            o.provisioningState = provisioningState;
            o.resourceGuid = resourceGuid;
            o.sku = sku;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
