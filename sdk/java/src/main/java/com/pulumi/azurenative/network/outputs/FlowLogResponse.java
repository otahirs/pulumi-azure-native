// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.FlowLogFormatParametersResponse;
import com.pulumi.azurenative.network.outputs.RetentionPolicyParametersResponse;
import com.pulumi.azurenative.network.outputs.TrafficAnalyticsPropertiesResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlowLogResponse {
    /**
     * @return Flag to enable/disable flow logging.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Parameters that define the configuration of traffic analytics.
     * 
     */
    private @Nullable TrafficAnalyticsPropertiesResponse flowAnalyticsConfiguration;
    /**
     * @return Parameters that define the flow log format.
     * 
     */
    private @Nullable FlowLogFormatParametersResponse format;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The provisioning state of the flow log.
     * 
     */
    private String provisioningState;
    /**
     * @return Parameters that define the retention policy for flow log.
     * 
     */
    private @Nullable RetentionPolicyParametersResponse retentionPolicy;
    /**
     * @return ID of the storage account which is used to store the flow log.
     * 
     */
    private String storageId;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Guid of network security group to which flow log will be applied.
     * 
     */
    private String targetResourceGuid;
    /**
     * @return ID of network security group to which flow log will be applied.
     * 
     */
    private String targetResourceId;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private FlowLogResponse() {}
    /**
     * @return Flag to enable/disable flow logging.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Parameters that define the configuration of traffic analytics.
     * 
     */
    public Optional<TrafficAnalyticsPropertiesResponse> flowAnalyticsConfiguration() {
        return Optional.ofNullable(this.flowAnalyticsConfiguration);
    }
    /**
     * @return Parameters that define the flow log format.
     * 
     */
    public Optional<FlowLogFormatParametersResponse> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning state of the flow log.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Parameters that define the retention policy for flow log.
     * 
     */
    public Optional<RetentionPolicyParametersResponse> retentionPolicy() {
        return Optional.ofNullable(this.retentionPolicy);
    }
    /**
     * @return ID of the storage account which is used to store the flow log.
     * 
     */
    public String storageId() {
        return this.storageId;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Guid of network security group to which flow log will be applied.
     * 
     */
    public String targetResourceGuid() {
        return this.targetResourceGuid;
    }
    /**
     * @return ID of network security group to which flow log will be applied.
     * 
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowLogResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private String etag;
        private @Nullable TrafficAnalyticsPropertiesResponse flowAnalyticsConfiguration;
        private @Nullable FlowLogFormatParametersResponse format;
        private @Nullable String id;
        private @Nullable String location;
        private String name;
        private String provisioningState;
        private @Nullable RetentionPolicyParametersResponse retentionPolicy;
        private String storageId;
        private @Nullable Map<String,String> tags;
        private String targetResourceGuid;
        private String targetResourceId;
        private String type;
        public Builder() {}
        public Builder(FlowLogResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.etag = defaults.etag;
    	      this.flowAnalyticsConfiguration = defaults.flowAnalyticsConfiguration;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.storageId = defaults.storageId;
    	      this.tags = defaults.tags;
    	      this.targetResourceGuid = defaults.targetResourceGuid;
    	      this.targetResourceId = defaults.targetResourceId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder flowAnalyticsConfiguration(@Nullable TrafficAnalyticsPropertiesResponse flowAnalyticsConfiguration) {
            this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable FlowLogFormatParametersResponse format) {
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder retentionPolicy(@Nullable RetentionPolicyParametersResponse retentionPolicy) {
            this.retentionPolicy = retentionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder storageId(String storageId) {
            this.storageId = Objects.requireNonNull(storageId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceGuid(String targetResourceGuid) {
            this.targetResourceGuid = Objects.requireNonNull(targetResourceGuid);
            return this;
        }
        @CustomType.Setter
        public Builder targetResourceId(String targetResourceId) {
            this.targetResourceId = Objects.requireNonNull(targetResourceId);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public FlowLogResponse build() {
            final var o = new FlowLogResponse();
            o.enabled = enabled;
            o.etag = etag;
            o.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
            o.format = format;
            o.id = id;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.retentionPolicy = retentionPolicy;
            o.storageId = storageId;
            o.tags = tags;
            o.targetResourceGuid = targetResourceGuid;
            o.targetResourceId = targetResourceId;
            o.type = type;
            return o;
        }
    }
}
