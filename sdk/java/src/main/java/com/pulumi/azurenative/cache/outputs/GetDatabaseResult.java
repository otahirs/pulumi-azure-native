// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.outputs;

import com.pulumi.azurenative.cache.outputs.ModuleResponse;
import com.pulumi.azurenative.cache.outputs.PersistenceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     * 
     */
    private @Nullable String clientProtocol;
    /**
     * @return Clustering policy - default is OSSCluster. Specified at create time.
     * 
     */
    private @Nullable String clusteringPolicy;
    /**
     * @return Redis eviction policy - default is VolatileLRU
     * 
     */
    private @Nullable String evictionPolicy;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return Optional set of redis modules to enable in this database - modules can only be added at creation time.
     * 
     */
    private @Nullable List<ModuleResponse> modules;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return Persistence settings
     * 
     */
    private @Nullable PersistenceResponse persistence;
    /**
     * @return TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Current provisioning status of the database
     * 
     */
    private String provisioningState;
    /**
     * @return Current resource status of the database
     * 
     */
    private String resourceState;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetDatabaseResult() {}
    /**
     * @return Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     * 
     */
    public Optional<String> clientProtocol() {
        return Optional.ofNullable(this.clientProtocol);
    }
    /**
     * @return Clustering policy - default is OSSCluster. Specified at create time.
     * 
     */
    public Optional<String> clusteringPolicy() {
        return Optional.ofNullable(this.clusteringPolicy);
    }
    /**
     * @return Redis eviction policy - default is VolatileLRU
     * 
     */
    public Optional<String> evictionPolicy() {
        return Optional.ofNullable(this.evictionPolicy);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Optional set of redis modules to enable in this database - modules can only be added at creation time.
     * 
     */
    public List<ModuleResponse> modules() {
        return this.modules == null ? List.of() : this.modules;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Persistence settings
     * 
     */
    public Optional<PersistenceResponse> persistence() {
        return Optional.ofNullable(this.persistence);
    }
    /**
     * @return TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Current provisioning status of the database
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Current resource status of the database
     * 
     */
    public String resourceState() {
        return this.resourceState;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientProtocol;
        private @Nullable String clusteringPolicy;
        private @Nullable String evictionPolicy;
        private String id;
        private @Nullable List<ModuleResponse> modules;
        private String name;
        private @Nullable PersistenceResponse persistence;
        private @Nullable Integer port;
        private String provisioningState;
        private String resourceState;
        private String type;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientProtocol = defaults.clientProtocol;
    	      this.clusteringPolicy = defaults.clusteringPolicy;
    	      this.evictionPolicy = defaults.evictionPolicy;
    	      this.id = defaults.id;
    	      this.modules = defaults.modules;
    	      this.name = defaults.name;
    	      this.persistence = defaults.persistence;
    	      this.port = defaults.port;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceState = defaults.resourceState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder clientProtocol(@Nullable String clientProtocol) {
            this.clientProtocol = clientProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder clusteringPolicy(@Nullable String clusteringPolicy) {
            this.clusteringPolicy = clusteringPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder evictionPolicy(@Nullable String evictionPolicy) {
            this.evictionPolicy = evictionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder modules(@Nullable List<ModuleResponse> modules) {
            this.modules = modules;
            return this;
        }
        public Builder modules(ModuleResponse... modules) {
            return modules(List.of(modules));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder persistence(@Nullable PersistenceResponse persistence) {
            this.persistence = persistence;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceState(String resourceState) {
            this.resourceState = Objects.requireNonNull(resourceState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDatabaseResult build() {
            final var o = new GetDatabaseResult();
            o.clientProtocol = clientProtocol;
            o.clusteringPolicy = clusteringPolicy;
            o.evictionPolicy = evictionPolicy;
            o.id = id;
            o.modules = modules;
            o.name = name;
            o.persistence = persistence;
            o.port = port;
            o.provisioningState = provisioningState;
            o.resourceState = resourceState;
            o.type = type;
            return o;
        }
    }
}
