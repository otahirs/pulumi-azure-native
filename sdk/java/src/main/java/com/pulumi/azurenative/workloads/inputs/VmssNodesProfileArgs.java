// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.inputs.DiskInfoArgs;
import com.pulumi.azurenative.workloads.inputs.OsImageProfileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VMSS profile
 * 
 */
public final class VmssNodesProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmssNodesProfileArgs Empty = new VmssNodesProfileArgs();

    /**
     * Maximum number of nodes for autoscale
     * 
     */
    @Import(name="autoScaleMaxCount")
    private @Nullable Output<Integer> autoScaleMaxCount;

    /**
     * @return Maximum number of nodes for autoscale
     * 
     */
    public Optional<Output<Integer>> autoScaleMaxCount() {
        return Optional.ofNullable(this.autoScaleMaxCount);
    }

    /**
     * Minimum number of nodes for autoscale
     * 
     */
    @Import(name="autoScaleMinCount")
    private @Nullable Output<Integer> autoScaleMinCount;

    /**
     * @return Minimum number of nodes for autoscale
     * 
     */
    public Optional<Output<Integer>> autoScaleMinCount() {
        return Optional.ofNullable(this.autoScaleMinCount);
    }

    /**
     * Data disks details. This property is not in use right now
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<DiskInfoArgs>> dataDisks;

    /**
     * @return Data disks details. This property is not in use right now
     * 
     */
    public Optional<Output<List<DiskInfoArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * VM or VMSS name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return VM or VMSS name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * VM SKU for node(s)
     * 
     */
    @Import(name="nodeSku", required=true)
    private Output<String> nodeSku;

    /**
     * @return VM SKU for node(s)
     * 
     */
    public Output<String> nodeSku() {
        return this.nodeSku;
    }

    /**
     * OS disk details
     * 
     */
    @Import(name="osDisk", required=true)
    private Output<DiskInfoArgs> osDisk;

    /**
     * @return OS disk details
     * 
     */
    public Output<DiskInfoArgs> osDisk() {
        return this.osDisk;
    }

    /**
     * OS image used for creating the nodes
     * 
     */
    @Import(name="osImage", required=true)
    private Output<OsImageProfileArgs> osImage;

    /**
     * @return OS image used for creating the nodes
     * 
     */
    public Output<OsImageProfileArgs> osImage() {
        return this.osImage;
    }

    private VmssNodesProfileArgs() {}

    private VmssNodesProfileArgs(VmssNodesProfileArgs $) {
        this.autoScaleMaxCount = $.autoScaleMaxCount;
        this.autoScaleMinCount = $.autoScaleMinCount;
        this.dataDisks = $.dataDisks;
        this.name = $.name;
        this.nodeSku = $.nodeSku;
        this.osDisk = $.osDisk;
        this.osImage = $.osImage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmssNodesProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmssNodesProfileArgs $;

        public Builder() {
            $ = new VmssNodesProfileArgs();
        }

        public Builder(VmssNodesProfileArgs defaults) {
            $ = new VmssNodesProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoScaleMaxCount Maximum number of nodes for autoscale
         * 
         * @return builder
         * 
         */
        public Builder autoScaleMaxCount(@Nullable Output<Integer> autoScaleMaxCount) {
            $.autoScaleMaxCount = autoScaleMaxCount;
            return this;
        }

        /**
         * @param autoScaleMaxCount Maximum number of nodes for autoscale
         * 
         * @return builder
         * 
         */
        public Builder autoScaleMaxCount(Integer autoScaleMaxCount) {
            return autoScaleMaxCount(Output.of(autoScaleMaxCount));
        }

        /**
         * @param autoScaleMinCount Minimum number of nodes for autoscale
         * 
         * @return builder
         * 
         */
        public Builder autoScaleMinCount(@Nullable Output<Integer> autoScaleMinCount) {
            $.autoScaleMinCount = autoScaleMinCount;
            return this;
        }

        /**
         * @param autoScaleMinCount Minimum number of nodes for autoscale
         * 
         * @return builder
         * 
         */
        public Builder autoScaleMinCount(Integer autoScaleMinCount) {
            return autoScaleMinCount(Output.of(autoScaleMinCount));
        }

        /**
         * @param dataDisks Data disks details. This property is not in use right now
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<DiskInfoArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks Data disks details. This property is not in use right now
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<DiskInfoArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks Data disks details. This property is not in use right now
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(DiskInfoArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param name VM or VMSS name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name VM or VMSS name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeSku VM SKU for node(s)
         * 
         * @return builder
         * 
         */
        public Builder nodeSku(Output<String> nodeSku) {
            $.nodeSku = nodeSku;
            return this;
        }

        /**
         * @param nodeSku VM SKU for node(s)
         * 
         * @return builder
         * 
         */
        public Builder nodeSku(String nodeSku) {
            return nodeSku(Output.of(nodeSku));
        }

        /**
         * @param osDisk OS disk details
         * 
         * @return builder
         * 
         */
        public Builder osDisk(Output<DiskInfoArgs> osDisk) {
            $.osDisk = osDisk;
            return this;
        }

        /**
         * @param osDisk OS disk details
         * 
         * @return builder
         * 
         */
        public Builder osDisk(DiskInfoArgs osDisk) {
            return osDisk(Output.of(osDisk));
        }

        /**
         * @param osImage OS image used for creating the nodes
         * 
         * @return builder
         * 
         */
        public Builder osImage(Output<OsImageProfileArgs> osImage) {
            $.osImage = osImage;
            return this;
        }

        /**
         * @param osImage OS image used for creating the nodes
         * 
         * @return builder
         * 
         */
        public Builder osImage(OsImageProfileArgs osImage) {
            return osImage(Output.of(osImage));
        }

        public VmssNodesProfileArgs build() {
            $.nodeSku = Objects.requireNonNull($.nodeSku, "expected parameter 'nodeSku' to be non-null");
            $.osDisk = Objects.requireNonNull($.osDisk, "expected parameter 'osDisk' to be non-null");
            $.osImage = Objects.requireNonNull($.osImage, "expected parameter 'osImage' to be non-null");
            return $;
        }
    }

}
