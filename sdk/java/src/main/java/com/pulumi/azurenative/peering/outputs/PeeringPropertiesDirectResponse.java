// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.outputs;

import com.pulumi.azurenative.peering.outputs.DirectConnectionResponse;
import com.pulumi.azurenative.peering.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PeeringPropertiesDirectResponse {
    /**
     * @return The set of connections that constitute a direct peering.
     * 
     */
    private @Nullable List<DirectConnectionResponse> connections;
    /**
     * @return The type of direct peering.
     * 
     */
    private @Nullable String directPeeringType;
    /**
     * @return The reference of the peer ASN.
     * 
     */
    private @Nullable SubResourceResponse peerAsn;
    /**
     * @return The flag that indicates whether or not the peering is used for peering service.
     * 
     */
    private Boolean useForPeeringService;

    private PeeringPropertiesDirectResponse() {}
    /**
     * @return The set of connections that constitute a direct peering.
     * 
     */
    public List<DirectConnectionResponse> connections() {
        return this.connections == null ? List.of() : this.connections;
    }
    /**
     * @return The type of direct peering.
     * 
     */
    public Optional<String> directPeeringType() {
        return Optional.ofNullable(this.directPeeringType);
    }
    /**
     * @return The reference of the peer ASN.
     * 
     */
    public Optional<SubResourceResponse> peerAsn() {
        return Optional.ofNullable(this.peerAsn);
    }
    /**
     * @return The flag that indicates whether or not the peering is used for peering service.
     * 
     */
    public Boolean useForPeeringService() {
        return this.useForPeeringService;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PeeringPropertiesDirectResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DirectConnectionResponse> connections;
        private @Nullable String directPeeringType;
        private @Nullable SubResourceResponse peerAsn;
        private Boolean useForPeeringService;
        public Builder() {}
        public Builder(PeeringPropertiesDirectResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connections = defaults.connections;
    	      this.directPeeringType = defaults.directPeeringType;
    	      this.peerAsn = defaults.peerAsn;
    	      this.useForPeeringService = defaults.useForPeeringService;
        }

        @CustomType.Setter
        public Builder connections(@Nullable List<DirectConnectionResponse> connections) {
            this.connections = connections;
            return this;
        }
        public Builder connections(DirectConnectionResponse... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder directPeeringType(@Nullable String directPeeringType) {
            this.directPeeringType = directPeeringType;
            return this;
        }
        @CustomType.Setter
        public Builder peerAsn(@Nullable SubResourceResponse peerAsn) {
            this.peerAsn = peerAsn;
            return this;
        }
        @CustomType.Setter
        public Builder useForPeeringService(Boolean useForPeeringService) {
            this.useForPeeringService = Objects.requireNonNull(useForPeeringService);
            return this;
        }
        public PeeringPropertiesDirectResponse build() {
            final var o = new PeeringPropertiesDirectResponse();
            o.connections = connections;
            o.directPeeringType = directPeeringType;
            o.peerAsn = peerAsn;
            o.useForPeeringService = useForPeeringService;
            return o;
        }
    }
}
