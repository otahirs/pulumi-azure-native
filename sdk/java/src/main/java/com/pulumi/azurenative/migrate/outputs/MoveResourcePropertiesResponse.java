// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.outputs;

import com.pulumi.azurenative.migrate.outputs.AvailabilitySetResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.DiskEncryptionSetResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.KeyVaultResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.LoadBalancerResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.MoveResourceDependencyOverrideResponse;
import com.pulumi.azurenative.migrate.outputs.MoveResourceDependencyResponse;
import com.pulumi.azurenative.migrate.outputs.MoveResourcePropertiesResponseErrors;
import com.pulumi.azurenative.migrate.outputs.MoveResourcePropertiesResponseMoveStatus;
import com.pulumi.azurenative.migrate.outputs.NetworkInterfaceResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.NetworkSecurityGroupResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.PublicIPAddressResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.ResourceGroupResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.SqlDatabaseResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.SqlElasticPoolResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.SqlServerResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.VirtualMachineResourceSettingsResponse;
import com.pulumi.azurenative.migrate.outputs.VirtualNetworkResourceSettingsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MoveResourcePropertiesResponse {
    /**
     * @return Gets or sets the move resource dependencies.
     * 
     */
    private List<MoveResourceDependencyResponse> dependsOn;
    /**
     * @return Gets or sets the move resource dependencies overrides.
     * 
     */
    private @Nullable List<MoveResourceDependencyOverrideResponse> dependsOnOverrides;
    /**
     * @return Defines the move resource errors.
     * 
     */
    private MoveResourcePropertiesResponseErrors errors;
    /**
     * @return Gets or sets the existing target ARM Id of the resource.
     * 
     */
    private @Nullable String existingTargetId;
    /**
     * @return Gets a value indicating whether the resolve action is required over the move collection.
     * 
     */
    private Boolean isResolveRequired;
    /**
     * @return Defines the move resource status.
     * 
     */
    private MoveResourcePropertiesResponseMoveStatus moveStatus;
    /**
     * @return Defines the provisioning states.
     * 
     */
    private String provisioningState;
    /**
     * @return Gets or sets the resource settings.
     * 
     */
    private @Nullable Object resourceSettings;
    /**
     * @return Gets or sets the Source ARM Id of the resource.
     * 
     */
    private String sourceId;
    /**
     * @return Gets or sets the source resource settings.
     * 
     */
    private Object sourceResourceSettings;
    /**
     * @return Gets or sets the Target ARM Id of the resource.
     * 
     */
    private String targetId;

    private MoveResourcePropertiesResponse() {}
    /**
     * @return Gets or sets the move resource dependencies.
     * 
     */
    public List<MoveResourceDependencyResponse> dependsOn() {
        return this.dependsOn;
    }
    /**
     * @return Gets or sets the move resource dependencies overrides.
     * 
     */
    public List<MoveResourceDependencyOverrideResponse> dependsOnOverrides() {
        return this.dependsOnOverrides == null ? List.of() : this.dependsOnOverrides;
    }
    /**
     * @return Defines the move resource errors.
     * 
     */
    public MoveResourcePropertiesResponseErrors errors() {
        return this.errors;
    }
    /**
     * @return Gets or sets the existing target ARM Id of the resource.
     * 
     */
    public Optional<String> existingTargetId() {
        return Optional.ofNullable(this.existingTargetId);
    }
    /**
     * @return Gets a value indicating whether the resolve action is required over the move collection.
     * 
     */
    public Boolean isResolveRequired() {
        return this.isResolveRequired;
    }
    /**
     * @return Defines the move resource status.
     * 
     */
    public MoveResourcePropertiesResponseMoveStatus moveStatus() {
        return this.moveStatus;
    }
    /**
     * @return Defines the provisioning states.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Gets or sets the resource settings.
     * 
     */
    public Optional<Object> resourceSettings() {
        return Optional.ofNullable(this.resourceSettings);
    }
    /**
     * @return Gets or sets the Source ARM Id of the resource.
     * 
     */
    public String sourceId() {
        return this.sourceId;
    }
    /**
     * @return Gets or sets the source resource settings.
     * 
     */
    public Object sourceResourceSettings() {
        return this.sourceResourceSettings;
    }
    /**
     * @return Gets or sets the Target ARM Id of the resource.
     * 
     */
    public String targetId() {
        return this.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MoveResourcePropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<MoveResourceDependencyResponse> dependsOn;
        private @Nullable List<MoveResourceDependencyOverrideResponse> dependsOnOverrides;
        private MoveResourcePropertiesResponseErrors errors;
        private @Nullable String existingTargetId;
        private Boolean isResolveRequired;
        private MoveResourcePropertiesResponseMoveStatus moveStatus;
        private String provisioningState;
        private @Nullable Object resourceSettings;
        private String sourceId;
        private Object sourceResourceSettings;
        private String targetId;
        public Builder() {}
        public Builder(MoveResourcePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dependsOn = defaults.dependsOn;
    	      this.dependsOnOverrides = defaults.dependsOnOverrides;
    	      this.errors = defaults.errors;
    	      this.existingTargetId = defaults.existingTargetId;
    	      this.isResolveRequired = defaults.isResolveRequired;
    	      this.moveStatus = defaults.moveStatus;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceSettings = defaults.resourceSettings;
    	      this.sourceId = defaults.sourceId;
    	      this.sourceResourceSettings = defaults.sourceResourceSettings;
    	      this.targetId = defaults.targetId;
        }

        @CustomType.Setter
        public Builder dependsOn(List<MoveResourceDependencyResponse> dependsOn) {
            this.dependsOn = Objects.requireNonNull(dependsOn);
            return this;
        }
        public Builder dependsOn(MoveResourceDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        @CustomType.Setter
        public Builder dependsOnOverrides(@Nullable List<MoveResourceDependencyOverrideResponse> dependsOnOverrides) {
            this.dependsOnOverrides = dependsOnOverrides;
            return this;
        }
        public Builder dependsOnOverrides(MoveResourceDependencyOverrideResponse... dependsOnOverrides) {
            return dependsOnOverrides(List.of(dependsOnOverrides));
        }
        @CustomType.Setter
        public Builder errors(MoveResourcePropertiesResponseErrors errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        @CustomType.Setter
        public Builder existingTargetId(@Nullable String existingTargetId) {
            this.existingTargetId = existingTargetId;
            return this;
        }
        @CustomType.Setter
        public Builder isResolveRequired(Boolean isResolveRequired) {
            this.isResolveRequired = Objects.requireNonNull(isResolveRequired);
            return this;
        }
        @CustomType.Setter
        public Builder moveStatus(MoveResourcePropertiesResponseMoveStatus moveStatus) {
            this.moveStatus = Objects.requireNonNull(moveStatus);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceSettings(@Nullable Object resourceSettings) {
            this.resourceSettings = resourceSettings;
            return this;
        }
        @CustomType.Setter
        public Builder sourceId(String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceResourceSettings(Object sourceResourceSettings) {
            this.sourceResourceSettings = Objects.requireNonNull(sourceResourceSettings);
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        public MoveResourcePropertiesResponse build() {
            final var o = new MoveResourcePropertiesResponse();
            o.dependsOn = dependsOn;
            o.dependsOnOverrides = dependsOnOverrides;
            o.errors = errors;
            o.existingTargetId = existingTargetId;
            o.isResolveRequired = isResolveRequired;
            o.moveStatus = moveStatus;
            o.provisioningState = provisioningState;
            o.resourceSettings = resourceSettings;
            o.sourceId = sourceId;
            o.sourceResourceSettings = sourceResourceSettings;
            o.targetId = targetId;
            return o;
        }
    }
}
