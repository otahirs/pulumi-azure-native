// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.outputs;

import com.pulumi.azurenative.compute.outputs.DiffDiskSettingsResponse;
import com.pulumi.azurenative.compute.outputs.VirtualHardDiskResponse;
import com.pulumi.azurenative.compute.outputs.VirtualMachineScaleSetManagedDiskParametersResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VirtualMachineScaleSetOSDiskResponse {
    /**
     * @return Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    private @Nullable String caching;
    /**
     * @return Specifies how the virtual machines in the scale set should be created.&lt;br&gt;&lt;br&gt; The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    private String createOption;
    /**
     * @return Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
     * 
     */
    private @Nullable DiffDiskSettingsResponse diffDiskSettings;
    /**
     * @return Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    private @Nullable Integer diskSizeGB;
    /**
     * @return Specifies information about the unmanaged user image to base the scale set on.
     * 
     */
    private @Nullable VirtualHardDiskResponse image;
    /**
     * @return The managed disk parameters.
     * 
     */
    private @Nullable VirtualMachineScaleSetManagedDiskParametersResponse managedDisk;
    /**
     * @return The disk name.
     * 
     */
    private @Nullable String name;
    /**
     * @return This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
     * 
     */
    private @Nullable String osType;
    /**
     * @return Specifies the container urls that are used to store operating system disks for the scale set.
     * 
     */
    private @Nullable List<String> vhdContainers;
    /**
     * @return Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    private @Nullable Boolean writeAcceleratorEnabled;

    private VirtualMachineScaleSetOSDiskResponse() {}
    /**
     * @return Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    /**
     * @return Specifies how the virtual machines in the scale set should be created.&lt;br&gt;&lt;br&gt; The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    public String createOption() {
        return this.createOption;
    }
    /**
     * @return Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
     * 
     */
    public Optional<DiffDiskSettingsResponse> diffDiskSettings() {
        return Optional.ofNullable(this.diffDiskSettings);
    }
    /**
     * @return Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    public Optional<Integer> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }
    /**
     * @return Specifies information about the unmanaged user image to base the scale set on.
     * 
     */
    public Optional<VirtualHardDiskResponse> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return The managed disk parameters.
     * 
     */
    public Optional<VirtualMachineScaleSetManagedDiskParametersResponse> managedDisk() {
        return Optional.ofNullable(this.managedDisk);
    }
    /**
     * @return The disk name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }
    /**
     * @return Specifies the container urls that are used to store operating system disks for the scale set.
     * 
     */
    public List<String> vhdContainers() {
        return this.vhdContainers == null ? List.of() : this.vhdContainers;
    }
    /**
     * @return Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    public Optional<Boolean> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineScaleSetOSDiskResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caching;
        private String createOption;
        private @Nullable DiffDiskSettingsResponse diffDiskSettings;
        private @Nullable Integer diskSizeGB;
        private @Nullable VirtualHardDiskResponse image;
        private @Nullable VirtualMachineScaleSetManagedDiskParametersResponse managedDisk;
        private @Nullable String name;
        private @Nullable String osType;
        private @Nullable List<String> vhdContainers;
        private @Nullable Boolean writeAcceleratorEnabled;
        public Builder() {}
        public Builder(VirtualMachineScaleSetOSDiskResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.diffDiskSettings = defaults.diffDiskSettings;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.image = defaults.image;
    	      this.managedDisk = defaults.managedDisk;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.vhdContainers = defaults.vhdContainers;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        @CustomType.Setter
        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        @CustomType.Setter
        public Builder createOption(String createOption) {
            this.createOption = Objects.requireNonNull(createOption);
            return this;
        }
        @CustomType.Setter
        public Builder diffDiskSettings(@Nullable DiffDiskSettingsResponse diffDiskSettings) {
            this.diffDiskSettings = diffDiskSettings;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable VirtualHardDiskResponse image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder managedDisk(@Nullable VirtualMachineScaleSetManagedDiskParametersResponse managedDisk) {
            this.managedDisk = managedDisk;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder vhdContainers(@Nullable List<String> vhdContainers) {
            this.vhdContainers = vhdContainers;
            return this;
        }
        public Builder vhdContainers(String... vhdContainers) {
            return vhdContainers(List.of(vhdContainers));
        }
        @CustomType.Setter
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }
        public VirtualMachineScaleSetOSDiskResponse build() {
            final var o = new VirtualMachineScaleSetOSDiskResponse();
            o.caching = caching;
            o.createOption = createOption;
            o.diffDiskSettings = diffDiskSettings;
            o.diskSizeGB = diskSizeGB;
            o.image = image;
            o.managedDisk = managedDisk;
            o.name = name;
            o.osType = osType;
            o.vhdContainers = vhdContainers;
            o.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return o;
        }
    }
}
