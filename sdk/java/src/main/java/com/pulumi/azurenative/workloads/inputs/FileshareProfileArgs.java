// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.enums.FileShareStorageType;
import com.pulumi.azurenative.workloads.enums.FileShareType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * File share profile
 * 
 */
public final class FileshareProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileshareProfileArgs Empty = new FileshareProfileArgs();

    /**
     * File share size in GB
     * 
     */
    @Import(name="shareSizeInGB")
    private @Nullable Output<Double> shareSizeInGB;

    /**
     * @return File share size in GB
     * 
     */
    public Optional<Output<Double>> shareSizeInGB() {
        return Optional.ofNullable(this.shareSizeInGB);
    }

    /**
     * Share type
     * 
     */
    @Import(name="shareType", required=true)
    private Output<Either<String,FileShareType>> shareType;

    /**
     * @return Share type
     * 
     */
    public Output<Either<String,FileShareType>> shareType() {
        return this.shareType;
    }

    /**
     * File share backing storage type
     * 
     */
    @Import(name="storageType", required=true)
    private Output<Either<String,FileShareStorageType>> storageType;

    /**
     * @return File share backing storage type
     * 
     */
    public Output<Either<String,FileShareStorageType>> storageType() {
        return this.storageType;
    }

    private FileshareProfileArgs() {}

    private FileshareProfileArgs(FileshareProfileArgs $) {
        this.shareSizeInGB = $.shareSizeInGB;
        this.shareType = $.shareType;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileshareProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileshareProfileArgs $;

        public Builder() {
            $ = new FileshareProfileArgs();
        }

        public Builder(FileshareProfileArgs defaults) {
            $ = new FileshareProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param shareSizeInGB File share size in GB
         * 
         * @return builder
         * 
         */
        public Builder shareSizeInGB(@Nullable Output<Double> shareSizeInGB) {
            $.shareSizeInGB = shareSizeInGB;
            return this;
        }

        /**
         * @param shareSizeInGB File share size in GB
         * 
         * @return builder
         * 
         */
        public Builder shareSizeInGB(Double shareSizeInGB) {
            return shareSizeInGB(Output.of(shareSizeInGB));
        }

        /**
         * @param shareType Share type
         * 
         * @return builder
         * 
         */
        public Builder shareType(Output<Either<String,FileShareType>> shareType) {
            $.shareType = shareType;
            return this;
        }

        /**
         * @param shareType Share type
         * 
         * @return builder
         * 
         */
        public Builder shareType(Either<String,FileShareType> shareType) {
            return shareType(Output.of(shareType));
        }

        /**
         * @param shareType Share type
         * 
         * @return builder
         * 
         */
        public Builder shareType(String shareType) {
            return shareType(Either.ofLeft(shareType));
        }

        /**
         * @param shareType Share type
         * 
         * @return builder
         * 
         */
        public Builder shareType(FileShareType shareType) {
            return shareType(Either.ofRight(shareType));
        }

        /**
         * @param storageType File share backing storage type
         * 
         * @return builder
         * 
         */
        public Builder storageType(Output<Either<String,FileShareStorageType>> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType File share backing storage type
         * 
         * @return builder
         * 
         */
        public Builder storageType(Either<String,FileShareStorageType> storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param storageType File share backing storage type
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Either.ofLeft(storageType));
        }

        /**
         * @param storageType File share backing storage type
         * 
         * @return builder
         * 
         */
        public Builder storageType(FileShareStorageType storageType) {
            return storageType(Either.ofRight(storageType));
        }

        public FileshareProfileArgs build() {
            $.shareType = Objects.requireNonNull($.shareType, "expected parameter 'shareType' to be non-null");
            $.storageType = Objects.requireNonNull($.storageType, "expected parameter 'storageType' to be non-null");
            return $;
        }
    }

}
