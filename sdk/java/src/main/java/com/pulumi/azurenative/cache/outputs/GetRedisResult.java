// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.outputs;

import com.pulumi.azurenative.cache.outputs.PrivateEndpointConnectionResponse;
import com.pulumi.azurenative.cache.outputs.RedisAccessKeysResponse;
import com.pulumi.azurenative.cache.outputs.RedisCommonPropertiesResponseRedisConfiguration;
import com.pulumi.azurenative.cache.outputs.RedisInstanceDetailsResponse;
import com.pulumi.azurenative.cache.outputs.RedisLinkedServerResponse;
import com.pulumi.azurenative.cache.outputs.SkuResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRedisResult {
    /**
     * @return The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
     * 
     */
    private RedisAccessKeysResponse accessKeys;
    /**
     * @return Specifies whether the non-ssl Redis server port (6379) is enabled.
     * 
     */
    private @Nullable Boolean enableNonSslPort;
    /**
     * @return Redis host name.
     * 
     */
    private String hostName;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return List of the Redis instances associated with the cache
     * 
     */
    private List<RedisInstanceDetailsResponse> instances;
    /**
     * @return List of the linked servers associated with the cache
     * 
     */
    private List<RedisLinkedServerResponse> linkedServers;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;)
     * 
     */
    private @Nullable String minimumTlsVersion;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Redis non-SSL port.
     * 
     */
    private Integer port;
    /**
     * @return List of private endpoint connection associated with the specified redis cache
     * 
     */
    private List<PrivateEndpointConnectionResponse> privateEndpointConnections;
    /**
     * @return Redis instance provisioning status.
     * 
     */
    private String provisioningState;
    /**
     * @return Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;. If &#39;Disabled&#39;, private endpoints are the exclusive access method. Default value is &#39;Enabled&#39;
     * 
     */
    private @Nullable String publicNetworkAccess;
    /**
     * @return All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
     * 
     */
    private @Nullable RedisCommonPropertiesResponseRedisConfiguration redisConfiguration;
    /**
     * @return Redis version.
     * 
     */
    private String redisVersion;
    /**
     * @return The number of replicas to be created per master.
     * 
     */
    private @Nullable Integer replicasPerMaster;
    /**
     * @return The number of shards to be created on a Premium Cluster Cache.
     * 
     */
    private @Nullable Integer shardCount;
    /**
     * @return The SKU of the Redis cache to deploy.
     * 
     */
    private SkuResponse sku;
    /**
     * @return Redis SSL port.
     * 
     */
    private Integer sslPort;
    /**
     * @return Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
     * 
     */
    private @Nullable String staticIP;
    /**
     * @return The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     * 
     */
    private @Nullable String subnetId;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return A dictionary of tenant settings
     * 
     */
    private @Nullable Map<String,String> tenantSettings;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return A list of availability zones denoting where the resource needs to come from.
     * 
     */
    private @Nullable List<String> zones;

    private GetRedisResult() {}
    /**
     * @return The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
     * 
     */
    public RedisAccessKeysResponse accessKeys() {
        return this.accessKeys;
    }
    /**
     * @return Specifies whether the non-ssl Redis server port (6379) is enabled.
     * 
     */
    public Optional<Boolean> enableNonSslPort() {
        return Optional.ofNullable(this.enableNonSslPort);
    }
    /**
     * @return Redis host name.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of the Redis instances associated with the cache
     * 
     */
    public List<RedisInstanceDetailsResponse> instances() {
        return this.instances;
    }
    /**
     * @return List of the linked servers associated with the cache
     * 
     */
    public List<RedisLinkedServerResponse> linkedServers() {
        return this.linkedServers;
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;)
     * 
     */
    public Optional<String> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Redis non-SSL port.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return List of private endpoint connection associated with the specified redis cache
     * 
     */
    public List<PrivateEndpointConnectionResponse> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * @return Redis instance provisioning status.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;. If &#39;Disabled&#39;, private endpoints are the exclusive access method. Default value is &#39;Enabled&#39;
     * 
     */
    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }
    /**
     * @return All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
     * 
     */
    public Optional<RedisCommonPropertiesResponseRedisConfiguration> redisConfiguration() {
        return Optional.ofNullable(this.redisConfiguration);
    }
    /**
     * @return Redis version.
     * 
     */
    public String redisVersion() {
        return this.redisVersion;
    }
    /**
     * @return The number of replicas to be created per master.
     * 
     */
    public Optional<Integer> replicasPerMaster() {
        return Optional.ofNullable(this.replicasPerMaster);
    }
    /**
     * @return The number of shards to be created on a Premium Cluster Cache.
     * 
     */
    public Optional<Integer> shardCount() {
        return Optional.ofNullable(this.shardCount);
    }
    /**
     * @return The SKU of the Redis cache to deploy.
     * 
     */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * @return Redis SSL port.
     * 
     */
    public Integer sslPort() {
        return this.sslPort;
    }
    /**
     * @return Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
     * 
     */
    public Optional<String> staticIP() {
        return Optional.ofNullable(this.staticIP);
    }
    /**
     * @return The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return A dictionary of tenant settings
     * 
     */
    public Map<String,String> tenantSettings() {
        return this.tenantSettings == null ? Map.of() : this.tenantSettings;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A list of availability zones denoting where the resource needs to come from.
     * 
     */
    public List<String> zones() {
        return this.zones == null ? List.of() : this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRedisResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private RedisAccessKeysResponse accessKeys;
        private @Nullable Boolean enableNonSslPort;
        private String hostName;
        private String id;
        private List<RedisInstanceDetailsResponse> instances;
        private List<RedisLinkedServerResponse> linkedServers;
        private String location;
        private @Nullable String minimumTlsVersion;
        private String name;
        private Integer port;
        private List<PrivateEndpointConnectionResponse> privateEndpointConnections;
        private String provisioningState;
        private @Nullable String publicNetworkAccess;
        private @Nullable RedisCommonPropertiesResponseRedisConfiguration redisConfiguration;
        private String redisVersion;
        private @Nullable Integer replicasPerMaster;
        private @Nullable Integer shardCount;
        private SkuResponse sku;
        private Integer sslPort;
        private @Nullable String staticIP;
        private @Nullable String subnetId;
        private @Nullable Map<String,String> tags;
        private @Nullable Map<String,String> tenantSettings;
        private String type;
        private @Nullable List<String> zones;
        public Builder() {}
        public Builder(GetRedisResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeys = defaults.accessKeys;
    	      this.enableNonSslPort = defaults.enableNonSslPort;
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.instances = defaults.instances;
    	      this.linkedServers = defaults.linkedServers;
    	      this.location = defaults.location;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.redisConfiguration = defaults.redisConfiguration;
    	      this.redisVersion = defaults.redisVersion;
    	      this.replicasPerMaster = defaults.replicasPerMaster;
    	      this.shardCount = defaults.shardCount;
    	      this.sku = defaults.sku;
    	      this.sslPort = defaults.sslPort;
    	      this.staticIP = defaults.staticIP;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.tenantSettings = defaults.tenantSettings;
    	      this.type = defaults.type;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder accessKeys(RedisAccessKeysResponse accessKeys) {
            this.accessKeys = Objects.requireNonNull(accessKeys);
            return this;
        }
        @CustomType.Setter
        public Builder enableNonSslPort(@Nullable Boolean enableNonSslPort) {
            this.enableNonSslPort = enableNonSslPort;
            return this;
        }
        @CustomType.Setter
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instances(List<RedisInstanceDetailsResponse> instances) {
            this.instances = Objects.requireNonNull(instances);
            return this;
        }
        public Builder instances(RedisInstanceDetailsResponse... instances) {
            return instances(List.of(instances));
        }
        @CustomType.Setter
        public Builder linkedServers(List<RedisLinkedServerResponse> linkedServers) {
            this.linkedServers = Objects.requireNonNull(linkedServers);
            return this;
        }
        public Builder linkedServers(RedisLinkedServerResponse... linkedServers) {
            return linkedServers(List.of(linkedServers));
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder minimumTlsVersion(@Nullable String minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointConnections(List<PrivateEndpointConnectionResponse> privateEndpointConnections) {
            this.privateEndpointConnections = Objects.requireNonNull(privateEndpointConnections);
            return this;
        }
        public Builder privateEndpointConnections(PrivateEndpointConnectionResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder redisConfiguration(@Nullable RedisCommonPropertiesResponseRedisConfiguration redisConfiguration) {
            this.redisConfiguration = redisConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder redisVersion(String redisVersion) {
            this.redisVersion = Objects.requireNonNull(redisVersion);
            return this;
        }
        @CustomType.Setter
        public Builder replicasPerMaster(@Nullable Integer replicasPerMaster) {
            this.replicasPerMaster = replicasPerMaster;
            return this;
        }
        @CustomType.Setter
        public Builder shardCount(@Nullable Integer shardCount) {
            this.shardCount = shardCount;
            return this;
        }
        @CustomType.Setter
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        @CustomType.Setter
        public Builder sslPort(Integer sslPort) {
            this.sslPort = Objects.requireNonNull(sslPort);
            return this;
        }
        @CustomType.Setter
        public Builder staticIP(@Nullable String staticIP) {
            this.staticIP = staticIP;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tenantSettings(@Nullable Map<String,String> tenantSettings) {
            this.tenantSettings = tenantSettings;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder zones(@Nullable List<String> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }
        public GetRedisResult build() {
            final var o = new GetRedisResult();
            o.accessKeys = accessKeys;
            o.enableNonSslPort = enableNonSslPort;
            o.hostName = hostName;
            o.id = id;
            o.instances = instances;
            o.linkedServers = linkedServers;
            o.location = location;
            o.minimumTlsVersion = minimumTlsVersion;
            o.name = name;
            o.port = port;
            o.privateEndpointConnections = privateEndpointConnections;
            o.provisioningState = provisioningState;
            o.publicNetworkAccess = publicNetworkAccess;
            o.redisConfiguration = redisConfiguration;
            o.redisVersion = redisVersion;
            o.replicasPerMaster = replicasPerMaster;
            o.shardCount = shardCount;
            o.sku = sku;
            o.sslPort = sslPort;
            o.staticIP = staticIP;
            o.subnetId = subnetId;
            o.tags = tags;
            o.tenantSettings = tenantSettings;
            o.type = type;
            o.zones = zones;
            return o;
        }
    }
}
