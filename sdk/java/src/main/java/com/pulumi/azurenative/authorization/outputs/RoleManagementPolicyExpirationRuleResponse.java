// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.outputs;

import com.pulumi.azurenative.authorization.outputs.RoleManagementPolicyRuleTargetResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RoleManagementPolicyExpirationRuleResponse {
    /**
     * @return The id of the rule.
     * 
     */
    private @Nullable String id;
    /**
     * @return The value indicating whether expiration is required.
     * 
     */
    private @Nullable Boolean isExpirationRequired;
    /**
     * @return The maximum duration of expiration in timespan.
     * 
     */
    private @Nullable String maximumDuration;
    /**
     * @return The type of rule
     * Expected value is &#39;RoleManagementPolicyExpirationRule&#39;.
     * 
     */
    private String ruleType;
    /**
     * @return The target of the current rule.
     * 
     */
    private @Nullable RoleManagementPolicyRuleTargetResponse target;

    private RoleManagementPolicyExpirationRuleResponse() {}
    /**
     * @return The id of the rule.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The value indicating whether expiration is required.
     * 
     */
    public Optional<Boolean> isExpirationRequired() {
        return Optional.ofNullable(this.isExpirationRequired);
    }
    /**
     * @return The maximum duration of expiration in timespan.
     * 
     */
    public Optional<String> maximumDuration() {
        return Optional.ofNullable(this.maximumDuration);
    }
    /**
     * @return The type of rule
     * Expected value is &#39;RoleManagementPolicyExpirationRule&#39;.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }
    /**
     * @return The target of the current rule.
     * 
     */
    public Optional<RoleManagementPolicyRuleTargetResponse> target() {
        return Optional.ofNullable(this.target);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoleManagementPolicyExpirationRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable Boolean isExpirationRequired;
        private @Nullable String maximumDuration;
        private String ruleType;
        private @Nullable RoleManagementPolicyRuleTargetResponse target;
        public Builder() {}
        public Builder(RoleManagementPolicyExpirationRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.isExpirationRequired = defaults.isExpirationRequired;
    	      this.maximumDuration = defaults.maximumDuration;
    	      this.ruleType = defaults.ruleType;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isExpirationRequired(@Nullable Boolean isExpirationRequired) {
            this.isExpirationRequired = isExpirationRequired;
            return this;
        }
        @CustomType.Setter
        public Builder maximumDuration(@Nullable String maximumDuration) {
            this.maximumDuration = maximumDuration;
            return this;
        }
        @CustomType.Setter
        public Builder ruleType(String ruleType) {
            this.ruleType = Objects.requireNonNull(ruleType);
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable RoleManagementPolicyRuleTargetResponse target) {
            this.target = target;
            return this;
        }
        public RoleManagementPolicyExpirationRuleResponse build() {
            final var o = new RoleManagementPolicyExpirationRuleResponse();
            o.id = id;
            o.isExpirationRequired = isExpirationRequired;
            o.maximumDuration = maximumDuration;
            o.ruleType = ruleType;
            o.target = target;
            return o;
        }
    }
}
