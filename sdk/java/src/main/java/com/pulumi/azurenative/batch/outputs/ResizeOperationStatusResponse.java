// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.outputs;

import com.pulumi.azurenative.batch.outputs.ResizeErrorResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ResizeOperationStatusResponse {
    /**
     * @return This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
     * 
     */
    private @Nullable List<ResizeErrorResponse> errors;
    /**
     * @return The default value is requeue.
     * 
     */
    private @Nullable String nodeDeallocationOption;
    /**
     * @return The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     * 
     */
    private @Nullable String resizeTimeout;
    private @Nullable String startTime;
    private @Nullable Integer targetDedicatedNodes;
    private @Nullable Integer targetLowPriorityNodes;

    private ResizeOperationStatusResponse() {}
    /**
     * @return This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
     * 
     */
    public List<ResizeErrorResponse> errors() {
        return this.errors == null ? List.of() : this.errors;
    }
    /**
     * @return The default value is requeue.
     * 
     */
    public Optional<String> nodeDeallocationOption() {
        return Optional.ofNullable(this.nodeDeallocationOption);
    }
    /**
     * @return The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     * 
     */
    public Optional<String> resizeTimeout() {
        return Optional.ofNullable(this.resizeTimeout);
    }
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    public Optional<Integer> targetDedicatedNodes() {
        return Optional.ofNullable(this.targetDedicatedNodes);
    }
    public Optional<Integer> targetLowPriorityNodes() {
        return Optional.ofNullable(this.targetLowPriorityNodes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResizeOperationStatusResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ResizeErrorResponse> errors;
        private @Nullable String nodeDeallocationOption;
        private @Nullable String resizeTimeout;
        private @Nullable String startTime;
        private @Nullable Integer targetDedicatedNodes;
        private @Nullable Integer targetLowPriorityNodes;
        public Builder() {}
        public Builder(ResizeOperationStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errors = defaults.errors;
    	      this.nodeDeallocationOption = defaults.nodeDeallocationOption;
    	      this.resizeTimeout = defaults.resizeTimeout;
    	      this.startTime = defaults.startTime;
    	      this.targetDedicatedNodes = defaults.targetDedicatedNodes;
    	      this.targetLowPriorityNodes = defaults.targetLowPriorityNodes;
        }

        @CustomType.Setter
        public Builder errors(@Nullable List<ResizeErrorResponse> errors) {
            this.errors = errors;
            return this;
        }
        public Builder errors(ResizeErrorResponse... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder nodeDeallocationOption(@Nullable String nodeDeallocationOption) {
            this.nodeDeallocationOption = nodeDeallocationOption;
            return this;
        }
        @CustomType.Setter
        public Builder resizeTimeout(@Nullable String resizeTimeout) {
            this.resizeTimeout = resizeTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder targetDedicatedNodes(@Nullable Integer targetDedicatedNodes) {
            this.targetDedicatedNodes = targetDedicatedNodes;
            return this;
        }
        @CustomType.Setter
        public Builder targetLowPriorityNodes(@Nullable Integer targetLowPriorityNodes) {
            this.targetLowPriorityNodes = targetLowPriorityNodes;
            return this;
        }
        public ResizeOperationStatusResponse build() {
            final var o = new ResizeOperationStatusResponse();
            o.errors = errors;
            o.nodeDeallocationOption = nodeDeallocationOption;
            o.resizeTimeout = resizeTimeout;
            o.startTime = startTime;
            o.targetDedicatedNodes = targetDedicatedNodes;
            o.targetLowPriorityNodes = targetLowPriorityNodes;
            return o;
        }
    }
}
