// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datalakeanalytics.outputs;

import com.pulumi.azurenative.datalakeanalytics.outputs.ComputePolicyResponse;
import com.pulumi.azurenative.datalakeanalytics.outputs.DataLakeStoreAccountInformationResponse;
import com.pulumi.azurenative.datalakeanalytics.outputs.FirewallRuleResponse;
import com.pulumi.azurenative.datalakeanalytics.outputs.HiveMetastoreResponse;
import com.pulumi.azurenative.datalakeanalytics.outputs.StorageAccountInformationResponse;
import com.pulumi.azurenative.datalakeanalytics.outputs.VirtualNetworkRuleResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccountResult {
    /**
     * @return The unique identifier associated with this Data Lake Analytics account.
     * 
     */
    private String accountId;
    /**
     * @return The list of compute policies associated with this account.
     * 
     */
    private List<ComputePolicyResponse> computePolicies;
    /**
     * @return The account creation time.
     * 
     */
    private String creationTime;
    /**
     * @return The commitment tier in use for the current month.
     * 
     */
    private String currentTier;
    /**
     * @return The list of Data Lake Store accounts associated with this account.
     * 
     */
    private List<DataLakeStoreAccountInformationResponse> dataLakeStoreAccounts;
    /**
     * @return The current state of the DebugDataAccessLevel for this account.
     * 
     */
    private String debugDataAccessLevel;
    /**
     * @return The default Data Lake Store account associated with this account.
     * 
     */
    private String defaultDataLakeStoreAccount;
    /**
     * @return The full CName endpoint for this account.
     * 
     */
    private String endpoint;
    /**
     * @return The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
     * 
     */
    private @Nullable String firewallAllowAzureIps;
    /**
     * @return The list of firewall rules associated with this account.
     * 
     */
    private List<FirewallRuleResponse> firewallRules;
    /**
     * @return The current state of the IP address firewall for this account.
     * 
     */
    private @Nullable String firewallState;
    /**
     * @return The list of hiveMetastores associated with this account.
     * 
     */
    private List<HiveMetastoreResponse> hiveMetastores;
    /**
     * @return The resource identifier.
     * 
     */
    private String id;
    /**
     * @return The account last modified time.
     * 
     */
    private String lastModifiedTime;
    /**
     * @return The resource location.
     * 
     */
    private String location;
    /**
     * @return The maximum supported active jobs under the account at the same time.
     * 
     */
    private Integer maxActiveJobCountPerUser;
    /**
     * @return The maximum supported degree of parallelism for this account.
     * 
     */
    private @Nullable Integer maxDegreeOfParallelism;
    /**
     * @return The maximum supported degree of parallelism per job for this account.
     * 
     */
    private @Nullable Integer maxDegreeOfParallelismPerJob;
    /**
     * @return The maximum supported jobs running under the account at the same time.
     * 
     */
    private @Nullable Integer maxJobCount;
    /**
     * @return The maximum supported active jobs under the account at the same time.
     * 
     */
    private Integer maxJobRunningTimeInMin;
    /**
     * @return The maximum supported jobs queued under the account at the same time.
     * 
     */
    private Integer maxQueuedJobCountPerUser;
    /**
     * @return The minimum supported priority per job for this account.
     * 
     */
    private Integer minPriorityPerJob;
    /**
     * @return The resource name.
     * 
     */
    private String name;
    /**
     * @return The commitment tier for the next month.
     * 
     */
    private @Nullable String newTier;
    /**
     * @return The provisioning status of the Data Lake Analytics account.
     * 
     */
    private String provisioningState;
    /**
     * @return The list of Data Lake Store accounts associated with this account.
     * 
     */
    private @Nullable List<DataLakeStoreAccountInformationResponse> publicDataLakeStoreAccounts;
    /**
     * @return The number of days that job metadata is retained.
     * 
     */
    private @Nullable Integer queryStoreRetention;
    /**
     * @return The state of the Data Lake Analytics account.
     * 
     */
    private String state;
    /**
     * @return The list of Azure Blob Storage accounts associated with this account.
     * 
     */
    private List<StorageAccountInformationResponse> storageAccounts;
    /**
     * @return The system defined maximum supported degree of parallelism for this account, which restricts the maximum value of parallelism the user can set for the account.
     * 
     */
    private Integer systemMaxDegreeOfParallelism;
    /**
     * @return The system defined maximum supported jobs running under the account at the same time, which restricts the maximum number of running jobs the user can set for the account.
     * 
     */
    private Integer systemMaxJobCount;
    /**
     * @return The resource tags.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The resource type.
     * 
     */
    private String type;
    /**
     * @return The list of virtualNetwork rules associated with this account.
     * 
     */
    private List<VirtualNetworkRuleResponse> virtualNetworkRules;

    private GetAccountResult() {}
    /**
     * @return The unique identifier associated with this Data Lake Analytics account.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The list of compute policies associated with this account.
     * 
     */
    public List<ComputePolicyResponse> computePolicies() {
        return this.computePolicies;
    }
    /**
     * @return The account creation time.
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return The commitment tier in use for the current month.
     * 
     */
    public String currentTier() {
        return this.currentTier;
    }
    /**
     * @return The list of Data Lake Store accounts associated with this account.
     * 
     */
    public List<DataLakeStoreAccountInformationResponse> dataLakeStoreAccounts() {
        return this.dataLakeStoreAccounts;
    }
    /**
     * @return The current state of the DebugDataAccessLevel for this account.
     * 
     */
    public String debugDataAccessLevel() {
        return this.debugDataAccessLevel;
    }
    /**
     * @return The default Data Lake Store account associated with this account.
     * 
     */
    public String defaultDataLakeStoreAccount() {
        return this.defaultDataLakeStoreAccount;
    }
    /**
     * @return The full CName endpoint for this account.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
     * 
     */
    public Optional<String> firewallAllowAzureIps() {
        return Optional.ofNullable(this.firewallAllowAzureIps);
    }
    /**
     * @return The list of firewall rules associated with this account.
     * 
     */
    public List<FirewallRuleResponse> firewallRules() {
        return this.firewallRules;
    }
    /**
     * @return The current state of the IP address firewall for this account.
     * 
     */
    public Optional<String> firewallState() {
        return Optional.ofNullable(this.firewallState);
    }
    /**
     * @return The list of hiveMetastores associated with this account.
     * 
     */
    public List<HiveMetastoreResponse> hiveMetastores() {
        return this.hiveMetastores;
    }
    /**
     * @return The resource identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The account last modified time.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return The resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The maximum supported active jobs under the account at the same time.
     * 
     */
    public Integer maxActiveJobCountPerUser() {
        return this.maxActiveJobCountPerUser;
    }
    /**
     * @return The maximum supported degree of parallelism for this account.
     * 
     */
    public Optional<Integer> maxDegreeOfParallelism() {
        return Optional.ofNullable(this.maxDegreeOfParallelism);
    }
    /**
     * @return The maximum supported degree of parallelism per job for this account.
     * 
     */
    public Optional<Integer> maxDegreeOfParallelismPerJob() {
        return Optional.ofNullable(this.maxDegreeOfParallelismPerJob);
    }
    /**
     * @return The maximum supported jobs running under the account at the same time.
     * 
     */
    public Optional<Integer> maxJobCount() {
        return Optional.ofNullable(this.maxJobCount);
    }
    /**
     * @return The maximum supported active jobs under the account at the same time.
     * 
     */
    public Integer maxJobRunningTimeInMin() {
        return this.maxJobRunningTimeInMin;
    }
    /**
     * @return The maximum supported jobs queued under the account at the same time.
     * 
     */
    public Integer maxQueuedJobCountPerUser() {
        return this.maxQueuedJobCountPerUser;
    }
    /**
     * @return The minimum supported priority per job for this account.
     * 
     */
    public Integer minPriorityPerJob() {
        return this.minPriorityPerJob;
    }
    /**
     * @return The resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The commitment tier for the next month.
     * 
     */
    public Optional<String> newTier() {
        return Optional.ofNullable(this.newTier);
    }
    /**
     * @return The provisioning status of the Data Lake Analytics account.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The list of Data Lake Store accounts associated with this account.
     * 
     */
    public List<DataLakeStoreAccountInformationResponse> publicDataLakeStoreAccounts() {
        return this.publicDataLakeStoreAccounts == null ? List.of() : this.publicDataLakeStoreAccounts;
    }
    /**
     * @return The number of days that job metadata is retained.
     * 
     */
    public Optional<Integer> queryStoreRetention() {
        return Optional.ofNullable(this.queryStoreRetention);
    }
    /**
     * @return The state of the Data Lake Analytics account.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The list of Azure Blob Storage accounts associated with this account.
     * 
     */
    public List<StorageAccountInformationResponse> storageAccounts() {
        return this.storageAccounts;
    }
    /**
     * @return The system defined maximum supported degree of parallelism for this account, which restricts the maximum value of parallelism the user can set for the account.
     * 
     */
    public Integer systemMaxDegreeOfParallelism() {
        return this.systemMaxDegreeOfParallelism;
    }
    /**
     * @return The system defined maximum supported jobs running under the account at the same time, which restricts the maximum number of running jobs the user can set for the account.
     * 
     */
    public Integer systemMaxJobCount() {
        return this.systemMaxJobCount;
    }
    /**
     * @return The resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The list of virtualNetwork rules associated with this account.
     * 
     */
    public List<VirtualNetworkRuleResponse> virtualNetworkRules() {
        return this.virtualNetworkRules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<ComputePolicyResponse> computePolicies;
        private String creationTime;
        private String currentTier;
        private List<DataLakeStoreAccountInformationResponse> dataLakeStoreAccounts;
        private String debugDataAccessLevel;
        private String defaultDataLakeStoreAccount;
        private String endpoint;
        private @Nullable String firewallAllowAzureIps;
        private List<FirewallRuleResponse> firewallRules;
        private @Nullable String firewallState;
        private List<HiveMetastoreResponse> hiveMetastores;
        private String id;
        private String lastModifiedTime;
        private String location;
        private Integer maxActiveJobCountPerUser;
        private @Nullable Integer maxDegreeOfParallelism;
        private @Nullable Integer maxDegreeOfParallelismPerJob;
        private @Nullable Integer maxJobCount;
        private Integer maxJobRunningTimeInMin;
        private Integer maxQueuedJobCountPerUser;
        private Integer minPriorityPerJob;
        private String name;
        private @Nullable String newTier;
        private String provisioningState;
        private @Nullable List<DataLakeStoreAccountInformationResponse> publicDataLakeStoreAccounts;
        private @Nullable Integer queryStoreRetention;
        private String state;
        private List<StorageAccountInformationResponse> storageAccounts;
        private Integer systemMaxDegreeOfParallelism;
        private Integer systemMaxJobCount;
        private Map<String,String> tags;
        private String type;
        private List<VirtualNetworkRuleResponse> virtualNetworkRules;
        public Builder() {}
        public Builder(GetAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.computePolicies = defaults.computePolicies;
    	      this.creationTime = defaults.creationTime;
    	      this.currentTier = defaults.currentTier;
    	      this.dataLakeStoreAccounts = defaults.dataLakeStoreAccounts;
    	      this.debugDataAccessLevel = defaults.debugDataAccessLevel;
    	      this.defaultDataLakeStoreAccount = defaults.defaultDataLakeStoreAccount;
    	      this.endpoint = defaults.endpoint;
    	      this.firewallAllowAzureIps = defaults.firewallAllowAzureIps;
    	      this.firewallRules = defaults.firewallRules;
    	      this.firewallState = defaults.firewallState;
    	      this.hiveMetastores = defaults.hiveMetastores;
    	      this.id = defaults.id;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.location = defaults.location;
    	      this.maxActiveJobCountPerUser = defaults.maxActiveJobCountPerUser;
    	      this.maxDegreeOfParallelism = defaults.maxDegreeOfParallelism;
    	      this.maxDegreeOfParallelismPerJob = defaults.maxDegreeOfParallelismPerJob;
    	      this.maxJobCount = defaults.maxJobCount;
    	      this.maxJobRunningTimeInMin = defaults.maxJobRunningTimeInMin;
    	      this.maxQueuedJobCountPerUser = defaults.maxQueuedJobCountPerUser;
    	      this.minPriorityPerJob = defaults.minPriorityPerJob;
    	      this.name = defaults.name;
    	      this.newTier = defaults.newTier;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicDataLakeStoreAccounts = defaults.publicDataLakeStoreAccounts;
    	      this.queryStoreRetention = defaults.queryStoreRetention;
    	      this.state = defaults.state;
    	      this.storageAccounts = defaults.storageAccounts;
    	      this.systemMaxDegreeOfParallelism = defaults.systemMaxDegreeOfParallelism;
    	      this.systemMaxJobCount = defaults.systemMaxJobCount;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualNetworkRules = defaults.virtualNetworkRules;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder computePolicies(List<ComputePolicyResponse> computePolicies) {
            this.computePolicies = Objects.requireNonNull(computePolicies);
            return this;
        }
        public Builder computePolicies(ComputePolicyResponse... computePolicies) {
            return computePolicies(List.of(computePolicies));
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            this.creationTime = Objects.requireNonNull(creationTime);
            return this;
        }
        @CustomType.Setter
        public Builder currentTier(String currentTier) {
            this.currentTier = Objects.requireNonNull(currentTier);
            return this;
        }
        @CustomType.Setter
        public Builder dataLakeStoreAccounts(List<DataLakeStoreAccountInformationResponse> dataLakeStoreAccounts) {
            this.dataLakeStoreAccounts = Objects.requireNonNull(dataLakeStoreAccounts);
            return this;
        }
        public Builder dataLakeStoreAccounts(DataLakeStoreAccountInformationResponse... dataLakeStoreAccounts) {
            return dataLakeStoreAccounts(List.of(dataLakeStoreAccounts));
        }
        @CustomType.Setter
        public Builder debugDataAccessLevel(String debugDataAccessLevel) {
            this.debugDataAccessLevel = Objects.requireNonNull(debugDataAccessLevel);
            return this;
        }
        @CustomType.Setter
        public Builder defaultDataLakeStoreAccount(String defaultDataLakeStoreAccount) {
            this.defaultDataLakeStoreAccount = Objects.requireNonNull(defaultDataLakeStoreAccount);
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder firewallAllowAzureIps(@Nullable String firewallAllowAzureIps) {
            this.firewallAllowAzureIps = firewallAllowAzureIps;
            return this;
        }
        @CustomType.Setter
        public Builder firewallRules(List<FirewallRuleResponse> firewallRules) {
            this.firewallRules = Objects.requireNonNull(firewallRules);
            return this;
        }
        public Builder firewallRules(FirewallRuleResponse... firewallRules) {
            return firewallRules(List.of(firewallRules));
        }
        @CustomType.Setter
        public Builder firewallState(@Nullable String firewallState) {
            this.firewallState = firewallState;
            return this;
        }
        @CustomType.Setter
        public Builder hiveMetastores(List<HiveMetastoreResponse> hiveMetastores) {
            this.hiveMetastores = Objects.requireNonNull(hiveMetastores);
            return this;
        }
        public Builder hiveMetastores(HiveMetastoreResponse... hiveMetastores) {
            return hiveMetastores(List.of(hiveMetastores));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maxActiveJobCountPerUser(Integer maxActiveJobCountPerUser) {
            this.maxActiveJobCountPerUser = Objects.requireNonNull(maxActiveJobCountPerUser);
            return this;
        }
        @CustomType.Setter
        public Builder maxDegreeOfParallelism(@Nullable Integer maxDegreeOfParallelism) {
            this.maxDegreeOfParallelism = maxDegreeOfParallelism;
            return this;
        }
        @CustomType.Setter
        public Builder maxDegreeOfParallelismPerJob(@Nullable Integer maxDegreeOfParallelismPerJob) {
            this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
            return this;
        }
        @CustomType.Setter
        public Builder maxJobCount(@Nullable Integer maxJobCount) {
            this.maxJobCount = maxJobCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxJobRunningTimeInMin(Integer maxJobRunningTimeInMin) {
            this.maxJobRunningTimeInMin = Objects.requireNonNull(maxJobRunningTimeInMin);
            return this;
        }
        @CustomType.Setter
        public Builder maxQueuedJobCountPerUser(Integer maxQueuedJobCountPerUser) {
            this.maxQueuedJobCountPerUser = Objects.requireNonNull(maxQueuedJobCountPerUser);
            return this;
        }
        @CustomType.Setter
        public Builder minPriorityPerJob(Integer minPriorityPerJob) {
            this.minPriorityPerJob = Objects.requireNonNull(minPriorityPerJob);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder newTier(@Nullable String newTier) {
            this.newTier = newTier;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder publicDataLakeStoreAccounts(@Nullable List<DataLakeStoreAccountInformationResponse> publicDataLakeStoreAccounts) {
            this.publicDataLakeStoreAccounts = publicDataLakeStoreAccounts;
            return this;
        }
        public Builder publicDataLakeStoreAccounts(DataLakeStoreAccountInformationResponse... publicDataLakeStoreAccounts) {
            return publicDataLakeStoreAccounts(List.of(publicDataLakeStoreAccounts));
        }
        @CustomType.Setter
        public Builder queryStoreRetention(@Nullable Integer queryStoreRetention) {
            this.queryStoreRetention = queryStoreRetention;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccounts(List<StorageAccountInformationResponse> storageAccounts) {
            this.storageAccounts = Objects.requireNonNull(storageAccounts);
            return this;
        }
        public Builder storageAccounts(StorageAccountInformationResponse... storageAccounts) {
            return storageAccounts(List.of(storageAccounts));
        }
        @CustomType.Setter
        public Builder systemMaxDegreeOfParallelism(Integer systemMaxDegreeOfParallelism) {
            this.systemMaxDegreeOfParallelism = Objects.requireNonNull(systemMaxDegreeOfParallelism);
            return this;
        }
        @CustomType.Setter
        public Builder systemMaxJobCount(Integer systemMaxJobCount) {
            this.systemMaxJobCount = Objects.requireNonNull(systemMaxJobCount);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkRules(List<VirtualNetworkRuleResponse> virtualNetworkRules) {
            this.virtualNetworkRules = Objects.requireNonNull(virtualNetworkRules);
            return this;
        }
        public Builder virtualNetworkRules(VirtualNetworkRuleResponse... virtualNetworkRules) {
            return virtualNetworkRules(List.of(virtualNetworkRules));
        }
        public GetAccountResult build() {
            final var o = new GetAccountResult();
            o.accountId = accountId;
            o.computePolicies = computePolicies;
            o.creationTime = creationTime;
            o.currentTier = currentTier;
            o.dataLakeStoreAccounts = dataLakeStoreAccounts;
            o.debugDataAccessLevel = debugDataAccessLevel;
            o.defaultDataLakeStoreAccount = defaultDataLakeStoreAccount;
            o.endpoint = endpoint;
            o.firewallAllowAzureIps = firewallAllowAzureIps;
            o.firewallRules = firewallRules;
            o.firewallState = firewallState;
            o.hiveMetastores = hiveMetastores;
            o.id = id;
            o.lastModifiedTime = lastModifiedTime;
            o.location = location;
            o.maxActiveJobCountPerUser = maxActiveJobCountPerUser;
            o.maxDegreeOfParallelism = maxDegreeOfParallelism;
            o.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
            o.maxJobCount = maxJobCount;
            o.maxJobRunningTimeInMin = maxJobRunningTimeInMin;
            o.maxQueuedJobCountPerUser = maxQueuedJobCountPerUser;
            o.minPriorityPerJob = minPriorityPerJob;
            o.name = name;
            o.newTier = newTier;
            o.provisioningState = provisioningState;
            o.publicDataLakeStoreAccounts = publicDataLakeStoreAccounts;
            o.queryStoreRetention = queryStoreRetention;
            o.state = state;
            o.storageAccounts = storageAccounts;
            o.systemMaxDegreeOfParallelism = systemMaxDegreeOfParallelism;
            o.systemMaxJobCount = systemMaxJobCount;
            o.tags = tags;
            o.type = type;
            o.virtualNetworkRules = virtualNetworkRules;
            return o;
        }
    }
}
