// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads;

import com.pulumi.azurenative.workloads.enums.SAPEnvironmentType;
import com.pulumi.azurenative.workloads.enums.SAPProductType;
import com.pulumi.azurenative.workloads.inputs.DeploymentConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.DeploymentWithOSConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.DiscoveryConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.ManagedRGConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.UserAssignedServiceIdentityArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SAPVirtualInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SAPVirtualInstanceArgs Empty = new SAPVirtualInstanceArgs();

    /**
     * Defines if an existing SAP system is being registered or a new SAP system is being created
     * 
     */
    @Import(name="configuration", required=true)
    private Output<Object> configuration;

    /**
     * @return Defines if an existing SAP system is being registered or a new SAP system is being created
     * 
     */
    public Output<Object> configuration() {
        return this.configuration;
    }

    /**
     * Defines the environment type - Production/Non Production.
     * 
     */
    @Import(name="environment", required=true)
    private Output<Either<String,SAPEnvironmentType>> environment;

    /**
     * @return Defines the environment type - Production/Non Production.
     * 
     */
    public Output<Either<String,SAPEnvironmentType>> environment() {
        return this.environment;
    }

    /**
     * Managed service identity (user assigned identities)
     * 
     */
    @Import(name="identity")
    private @Nullable Output<UserAssignedServiceIdentityArgs> identity;

    /**
     * @return Managed service identity (user assigned identities)
     * 
     */
    public Optional<Output<UserAssignedServiceIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Managed resource group configuration
     * 
     */
    @Import(name="managedResourceGroupConfiguration")
    private @Nullable Output<ManagedRGConfigurationArgs> managedResourceGroupConfiguration;

    /**
     * @return Managed resource group configuration
     * 
     */
    public Optional<Output<ManagedRGConfigurationArgs>> managedResourceGroupConfiguration() {
        return Optional.ofNullable(this.managedResourceGroupConfiguration);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Defines the SAP Product type.
     * 
     */
    @Import(name="sapProduct", required=true)
    private Output<Either<String,SAPProductType>> sapProduct;

    /**
     * @return Defines the SAP Product type.
     * 
     */
    public Output<Either<String,SAPProductType>> sapProduct() {
        return this.sapProduct;
    }

    /**
     * The name of the Virtual Instances for SAP.
     * 
     */
    @Import(name="sapVirtualInstanceName")
    private @Nullable Output<String> sapVirtualInstanceName;

    /**
     * @return The name of the Virtual Instances for SAP.
     * 
     */
    public Optional<Output<String>> sapVirtualInstanceName() {
        return Optional.ofNullable(this.sapVirtualInstanceName);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SAPVirtualInstanceArgs() {}

    private SAPVirtualInstanceArgs(SAPVirtualInstanceArgs $) {
        this.configuration = $.configuration;
        this.environment = $.environment;
        this.identity = $.identity;
        this.location = $.location;
        this.managedResourceGroupConfiguration = $.managedResourceGroupConfiguration;
        this.resourceGroupName = $.resourceGroupName;
        this.sapProduct = $.sapProduct;
        this.sapVirtualInstanceName = $.sapVirtualInstanceName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SAPVirtualInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SAPVirtualInstanceArgs $;

        public Builder() {
            $ = new SAPVirtualInstanceArgs();
        }

        public Builder(SAPVirtualInstanceArgs defaults) {
            $ = new SAPVirtualInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration Defines if an existing SAP system is being registered or a new SAP system is being created
         * 
         * @return builder
         * 
         */
        public Builder configuration(Output<Object> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Defines if an existing SAP system is being registered or a new SAP system is being created
         * 
         * @return builder
         * 
         */
        public Builder configuration(Object configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<Either<String,SAPEnvironmentType>> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(Either<String,SAPEnvironmentType> environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Either.ofLeft(environment));
        }

        /**
         * @param environment Defines the environment type - Production/Non Production.
         * 
         * @return builder
         * 
         */
        public Builder environment(SAPEnvironmentType environment) {
            return environment(Either.ofRight(environment));
        }

        /**
         * @param identity Managed service identity (user assigned identities)
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<UserAssignedServiceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Managed service identity (user assigned identities)
         * 
         * @return builder
         * 
         */
        public Builder identity(UserAssignedServiceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedResourceGroupConfiguration Managed resource group configuration
         * 
         * @return builder
         * 
         */
        public Builder managedResourceGroupConfiguration(@Nullable Output<ManagedRGConfigurationArgs> managedResourceGroupConfiguration) {
            $.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
            return this;
        }

        /**
         * @param managedResourceGroupConfiguration Managed resource group configuration
         * 
         * @return builder
         * 
         */
        public Builder managedResourceGroupConfiguration(ManagedRGConfigurationArgs managedResourceGroupConfiguration) {
            return managedResourceGroupConfiguration(Output.of(managedResourceGroupConfiguration));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(Output<Either<String,SAPProductType>> sapProduct) {
            $.sapProduct = sapProduct;
            return this;
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(Either<String,SAPProductType> sapProduct) {
            return sapProduct(Output.of(sapProduct));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(String sapProduct) {
            return sapProduct(Either.ofLeft(sapProduct));
        }

        /**
         * @param sapProduct Defines the SAP Product type.
         * 
         * @return builder
         * 
         */
        public Builder sapProduct(SAPProductType sapProduct) {
            return sapProduct(Either.ofRight(sapProduct));
        }

        /**
         * @param sapVirtualInstanceName The name of the Virtual Instances for SAP.
         * 
         * @return builder
         * 
         */
        public Builder sapVirtualInstanceName(@Nullable Output<String> sapVirtualInstanceName) {
            $.sapVirtualInstanceName = sapVirtualInstanceName;
            return this;
        }

        /**
         * @param sapVirtualInstanceName The name of the Virtual Instances for SAP.
         * 
         * @return builder
         * 
         */
        public Builder sapVirtualInstanceName(String sapVirtualInstanceName) {
            return sapVirtualInstanceName(Output.of(sapVirtualInstanceName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SAPVirtualInstanceArgs build() {
            $.configuration = Objects.requireNonNull($.configuration, "expected parameter 'configuration' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sapProduct = Objects.requireNonNull($.sapProduct, "expected parameter 'sapProduct' to be non-null");
            return $;
        }
    }

}
