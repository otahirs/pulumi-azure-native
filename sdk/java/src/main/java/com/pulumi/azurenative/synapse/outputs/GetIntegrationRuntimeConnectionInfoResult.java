// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIntegrationRuntimeConnectionInfoResult {
    /**
     * @return The on-premises integration runtime host URL.
     * 
     */
    private String hostServiceUri;
    /**
     * @return The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation.
     * 
     */
    private String identityCertThumbprint;
    /**
     * @return Whether the identity certificate is expired.
     * 
     */
    private Boolean isIdentityCertExprired;
    /**
     * @return The public key for encrypting a credential when transferring the credential to the integration runtime.
     * 
     */
    private String publicKey;
    /**
     * @return The token generated in service. Callers use this token to authenticate to integration runtime.
     * 
     */
    private String serviceToken;
    /**
     * @return The integration runtime version.
     * 
     */
    private String version;

    private GetIntegrationRuntimeConnectionInfoResult() {}
    /**
     * @return The on-premises integration runtime host URL.
     * 
     */
    public String hostServiceUri() {
        return this.hostServiceUri;
    }
    /**
     * @return The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation.
     * 
     */
    public String identityCertThumbprint() {
        return this.identityCertThumbprint;
    }
    /**
     * @return Whether the identity certificate is expired.
     * 
     */
    public Boolean isIdentityCertExprired() {
        return this.isIdentityCertExprired;
    }
    /**
     * @return The public key for encrypting a credential when transferring the credential to the integration runtime.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The token generated in service. Callers use this token to authenticate to integration runtime.
     * 
     */
    public String serviceToken() {
        return this.serviceToken;
    }
    /**
     * @return The integration runtime version.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIntegrationRuntimeConnectionInfoResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostServiceUri;
        private String identityCertThumbprint;
        private Boolean isIdentityCertExprired;
        private String publicKey;
        private String serviceToken;
        private String version;
        public Builder() {}
        public Builder(GetIntegrationRuntimeConnectionInfoResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostServiceUri = defaults.hostServiceUri;
    	      this.identityCertThumbprint = defaults.identityCertThumbprint;
    	      this.isIdentityCertExprired = defaults.isIdentityCertExprired;
    	      this.publicKey = defaults.publicKey;
    	      this.serviceToken = defaults.serviceToken;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder hostServiceUri(String hostServiceUri) {
            this.hostServiceUri = Objects.requireNonNull(hostServiceUri);
            return this;
        }
        @CustomType.Setter
        public Builder identityCertThumbprint(String identityCertThumbprint) {
            this.identityCertThumbprint = Objects.requireNonNull(identityCertThumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder isIdentityCertExprired(Boolean isIdentityCertExprired) {
            this.isIdentityCertExprired = Objects.requireNonNull(isIdentityCertExprired);
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }
        @CustomType.Setter
        public Builder serviceToken(String serviceToken) {
            this.serviceToken = Objects.requireNonNull(serviceToken);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetIntegrationRuntimeConnectionInfoResult build() {
            final var o = new GetIntegrationRuntimeConnectionInfoResult();
            o.hostServiceUri = hostServiceUri;
            o.identityCertThumbprint = identityCertThumbprint;
            o.isIdentityCertExprired = isIdentityCertExprired;
            o.publicKey = publicKey;
            o.serviceToken = serviceToken;
            o.version = version;
            return o;
        }
    }
}
