// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.networkfunction.inputs;

import com.pulumi.azurenative.networkfunction.enums.IngestionType;
import com.pulumi.azurenative.networkfunction.inputs.IngestionSourcesPropertiesFormatArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Ingestion Policy properties.
 * 
 */
public final class IngestionPolicyPropertiesFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngestionPolicyPropertiesFormatArgs Empty = new IngestionPolicyPropertiesFormatArgs();

    /**
     * Ingestion Sources.
     * 
     */
    @Import(name="ingestionSources")
    private @Nullable Output<List<IngestionSourcesPropertiesFormatArgs>> ingestionSources;

    /**
     * @return Ingestion Sources.
     * 
     */
    public Optional<Output<List<IngestionSourcesPropertiesFormatArgs>>> ingestionSources() {
        return Optional.ofNullable(this.ingestionSources);
    }

    /**
     * The ingestion type.
     * 
     */
    @Import(name="ingestionType")
    private @Nullable Output<Either<String,IngestionType>> ingestionType;

    /**
     * @return The ingestion type.
     * 
     */
    public Optional<Output<Either<String,IngestionType>>> ingestionType() {
        return Optional.ofNullable(this.ingestionType);
    }

    private IngestionPolicyPropertiesFormatArgs() {}

    private IngestionPolicyPropertiesFormatArgs(IngestionPolicyPropertiesFormatArgs $) {
        this.ingestionSources = $.ingestionSources;
        this.ingestionType = $.ingestionType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestionPolicyPropertiesFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestionPolicyPropertiesFormatArgs $;

        public Builder() {
            $ = new IngestionPolicyPropertiesFormatArgs();
        }

        public Builder(IngestionPolicyPropertiesFormatArgs defaults) {
            $ = new IngestionPolicyPropertiesFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ingestionSources Ingestion Sources.
         * 
         * @return builder
         * 
         */
        public Builder ingestionSources(@Nullable Output<List<IngestionSourcesPropertiesFormatArgs>> ingestionSources) {
            $.ingestionSources = ingestionSources;
            return this;
        }

        /**
         * @param ingestionSources Ingestion Sources.
         * 
         * @return builder
         * 
         */
        public Builder ingestionSources(List<IngestionSourcesPropertiesFormatArgs> ingestionSources) {
            return ingestionSources(Output.of(ingestionSources));
        }

        /**
         * @param ingestionSources Ingestion Sources.
         * 
         * @return builder
         * 
         */
        public Builder ingestionSources(IngestionSourcesPropertiesFormatArgs... ingestionSources) {
            return ingestionSources(List.of(ingestionSources));
        }

        /**
         * @param ingestionType The ingestion type.
         * 
         * @return builder
         * 
         */
        public Builder ingestionType(@Nullable Output<Either<String,IngestionType>> ingestionType) {
            $.ingestionType = ingestionType;
            return this;
        }

        /**
         * @param ingestionType The ingestion type.
         * 
         * @return builder
         * 
         */
        public Builder ingestionType(Either<String,IngestionType> ingestionType) {
            return ingestionType(Output.of(ingestionType));
        }

        /**
         * @param ingestionType The ingestion type.
         * 
         * @return builder
         * 
         */
        public Builder ingestionType(String ingestionType) {
            return ingestionType(Either.ofLeft(ingestionType));
        }

        /**
         * @param ingestionType The ingestion type.
         * 
         * @return builder
         * 
         */
        public Builder ingestionType(IngestionType ingestionType) {
            return ingestionType(Either.ofRight(ingestionType));
        }

        public IngestionPolicyPropertiesFormatArgs build() {
            return $;
        }
    }

}
