// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AS2MdnSettingsResponse {
    /**
     * @return The disposition notification to header value.
     * 
     */
    private @Nullable String dispositionNotificationTo;
    /**
     * @return The MDN text.
     * 
     */
    private @Nullable String mdnText;
    /**
     * @return The signing or hashing algorithm.
     * 
     */
    private String micHashingAlgorithm;
    /**
     * @return The value indicating whether to send or request a MDN.
     * 
     */
    private Boolean needMDN;
    /**
     * @return The receipt delivery URL.
     * 
     */
    private @Nullable String receiptDeliveryUrl;
    /**
     * @return The value indicating whether to send inbound MDN to message box.
     * 
     */
    private Boolean sendInboundMDNToMessageBox;
    /**
     * @return The value indicating whether to send the asynchronous MDN.
     * 
     */
    private Boolean sendMDNAsynchronously;
    /**
     * @return The value indicating whether the MDN needs to be signed or not.
     * 
     */
    private Boolean signMDN;
    /**
     * @return The value indicating whether to sign the outbound MDN if optional.
     * 
     */
    private Boolean signOutboundMDNIfOptional;

    private AS2MdnSettingsResponse() {}
    /**
     * @return The disposition notification to header value.
     * 
     */
    public Optional<String> dispositionNotificationTo() {
        return Optional.ofNullable(this.dispositionNotificationTo);
    }
    /**
     * @return The MDN text.
     * 
     */
    public Optional<String> mdnText() {
        return Optional.ofNullable(this.mdnText);
    }
    /**
     * @return The signing or hashing algorithm.
     * 
     */
    public String micHashingAlgorithm() {
        return this.micHashingAlgorithm;
    }
    /**
     * @return The value indicating whether to send or request a MDN.
     * 
     */
    public Boolean needMDN() {
        return this.needMDN;
    }
    /**
     * @return The receipt delivery URL.
     * 
     */
    public Optional<String> receiptDeliveryUrl() {
        return Optional.ofNullable(this.receiptDeliveryUrl);
    }
    /**
     * @return The value indicating whether to send inbound MDN to message box.
     * 
     */
    public Boolean sendInboundMDNToMessageBox() {
        return this.sendInboundMDNToMessageBox;
    }
    /**
     * @return The value indicating whether to send the asynchronous MDN.
     * 
     */
    public Boolean sendMDNAsynchronously() {
        return this.sendMDNAsynchronously;
    }
    /**
     * @return The value indicating whether the MDN needs to be signed or not.
     * 
     */
    public Boolean signMDN() {
        return this.signMDN;
    }
    /**
     * @return The value indicating whether to sign the outbound MDN if optional.
     * 
     */
    public Boolean signOutboundMDNIfOptional() {
        return this.signOutboundMDNIfOptional;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2MdnSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dispositionNotificationTo;
        private @Nullable String mdnText;
        private String micHashingAlgorithm;
        private Boolean needMDN;
        private @Nullable String receiptDeliveryUrl;
        private Boolean sendInboundMDNToMessageBox;
        private Boolean sendMDNAsynchronously;
        private Boolean signMDN;
        private Boolean signOutboundMDNIfOptional;
        public Builder() {}
        public Builder(AS2MdnSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dispositionNotificationTo = defaults.dispositionNotificationTo;
    	      this.mdnText = defaults.mdnText;
    	      this.micHashingAlgorithm = defaults.micHashingAlgorithm;
    	      this.needMDN = defaults.needMDN;
    	      this.receiptDeliveryUrl = defaults.receiptDeliveryUrl;
    	      this.sendInboundMDNToMessageBox = defaults.sendInboundMDNToMessageBox;
    	      this.sendMDNAsynchronously = defaults.sendMDNAsynchronously;
    	      this.signMDN = defaults.signMDN;
    	      this.signOutboundMDNIfOptional = defaults.signOutboundMDNIfOptional;
        }

        @CustomType.Setter
        public Builder dispositionNotificationTo(@Nullable String dispositionNotificationTo) {
            this.dispositionNotificationTo = dispositionNotificationTo;
            return this;
        }
        @CustomType.Setter
        public Builder mdnText(@Nullable String mdnText) {
            this.mdnText = mdnText;
            return this;
        }
        @CustomType.Setter
        public Builder micHashingAlgorithm(String micHashingAlgorithm) {
            this.micHashingAlgorithm = Objects.requireNonNull(micHashingAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder needMDN(Boolean needMDN) {
            this.needMDN = Objects.requireNonNull(needMDN);
            return this;
        }
        @CustomType.Setter
        public Builder receiptDeliveryUrl(@Nullable String receiptDeliveryUrl) {
            this.receiptDeliveryUrl = receiptDeliveryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder sendInboundMDNToMessageBox(Boolean sendInboundMDNToMessageBox) {
            this.sendInboundMDNToMessageBox = Objects.requireNonNull(sendInboundMDNToMessageBox);
            return this;
        }
        @CustomType.Setter
        public Builder sendMDNAsynchronously(Boolean sendMDNAsynchronously) {
            this.sendMDNAsynchronously = Objects.requireNonNull(sendMDNAsynchronously);
            return this;
        }
        @CustomType.Setter
        public Builder signMDN(Boolean signMDN) {
            this.signMDN = Objects.requireNonNull(signMDN);
            return this;
        }
        @CustomType.Setter
        public Builder signOutboundMDNIfOptional(Boolean signOutboundMDNIfOptional) {
            this.signOutboundMDNIfOptional = Objects.requireNonNull(signOutboundMDNIfOptional);
            return this;
        }
        public AS2MdnSettingsResponse build() {
            final var o = new AS2MdnSettingsResponse();
            o.dispositionNotificationTo = dispositionNotificationTo;
            o.mdnText = mdnText;
            o.micHashingAlgorithm = micHashingAlgorithm;
            o.needMDN = needMDN;
            o.receiptDeliveryUrl = receiptDeliveryUrl;
            o.sendInboundMDNToMessageBox = sendInboundMDNToMessageBox;
            o.sendMDNAsynchronously = sendMDNAsynchronously;
            o.signMDN = signMDN;
            o.signOutboundMDNIfOptional = signOutboundMDNIfOptional;
            return o;
        }
    }
}
