// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory;

import com.pulumi.azurenative.datafactory.inputs.GlobalParameterSpecificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalParameterArgs Empty = new GlobalParameterArgs();

    /**
     * The factory name.
     * 
     */
    @Import(name="factoryName", required=true)
    private Output<String> factoryName;

    /**
     * @return The factory name.
     * 
     */
    public Output<String> factoryName() {
        return this.factoryName;
    }

    /**
     * The global parameter name.
     * 
     */
    @Import(name="globalParameterName")
    private @Nullable Output<String> globalParameterName;

    /**
     * @return The global parameter name.
     * 
     */
    public Optional<Output<String>> globalParameterName() {
        return Optional.ofNullable(this.globalParameterName);
    }

    /**
     * Properties of the global parameter.
     * 
     */
    @Import(name="properties", required=true)
    private Output<Map<String,GlobalParameterSpecificationArgs>> properties;

    /**
     * @return Properties of the global parameter.
     * 
     */
    public Output<Map<String,GlobalParameterSpecificationArgs>> properties() {
        return this.properties;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private GlobalParameterArgs() {}

    private GlobalParameterArgs(GlobalParameterArgs $) {
        this.factoryName = $.factoryName;
        this.globalParameterName = $.globalParameterName;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalParameterArgs $;

        public Builder() {
            $ = new GlobalParameterArgs();
        }

        public Builder(GlobalParameterArgs defaults) {
            $ = new GlobalParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param factoryName The factory name.
         * 
         * @return builder
         * 
         */
        public Builder factoryName(Output<String> factoryName) {
            $.factoryName = factoryName;
            return this;
        }

        /**
         * @param factoryName The factory name.
         * 
         * @return builder
         * 
         */
        public Builder factoryName(String factoryName) {
            return factoryName(Output.of(factoryName));
        }

        /**
         * @param globalParameterName The global parameter name.
         * 
         * @return builder
         * 
         */
        public Builder globalParameterName(@Nullable Output<String> globalParameterName) {
            $.globalParameterName = globalParameterName;
            return this;
        }

        /**
         * @param globalParameterName The global parameter name.
         * 
         * @return builder
         * 
         */
        public Builder globalParameterName(String globalParameterName) {
            return globalParameterName(Output.of(globalParameterName));
        }

        /**
         * @param properties Properties of the global parameter.
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<Map<String,GlobalParameterSpecificationArgs>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Properties of the global parameter.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,GlobalParameterSpecificationArgs> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public GlobalParameterArgs build() {
            $.factoryName = Objects.requireNonNull($.factoryName, "expected parameter 'factoryName' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
