// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.outputs;

import com.pulumi.azurenative.batch.outputs.AutoStoragePropertiesResponse;
import com.pulumi.azurenative.batch.outputs.BatchAccountIdentityResponse;
import com.pulumi.azurenative.batch.outputs.EncryptionPropertiesResponse;
import com.pulumi.azurenative.batch.outputs.KeyVaultReferenceResponse;
import com.pulumi.azurenative.batch.outputs.PrivateEndpointConnectionResponse;
import com.pulumi.azurenative.batch.outputs.VirtualMachineFamilyCoreQuotaResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBatchAccountResult {
    /**
     * @return The account endpoint used to interact with the Batch service.
     * 
     */
    private String accountEndpoint;
    private Integer activeJobAndJobScheduleQuota;
    /**
     * @return Contains information about the auto-storage account associated with a Batch account.
     * 
     */
    private AutoStoragePropertiesResponse autoStorage;
    /**
     * @return For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * 
     */
    private Integer dedicatedCoreQuota;
    /**
     * @return A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * 
     */
    private List<VirtualMachineFamilyCoreQuotaResponse> dedicatedCoreQuotaPerVMFamily;
    /**
     * @return Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
     * 
     */
    private Boolean dedicatedCoreQuotaPerVMFamilyEnforced;
    /**
     * @return Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
     * 
     */
    private EncryptionPropertiesResponse encryption;
    /**
     * @return The ID of the resource.
     * 
     */
    private String id;
    /**
     * @return The identity of the Batch account.
     * 
     */
    private @Nullable BatchAccountIdentityResponse identity;
    /**
     * @return Identifies the Azure key vault associated with a Batch account.
     * 
     */
    private KeyVaultReferenceResponse keyVaultReference;
    /**
     * @return The location of the resource.
     * 
     */
    private String location;
    /**
     * @return For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * 
     */
    private Integer lowPriorityCoreQuota;
    /**
     * @return The name of the resource.
     * 
     */
    private String name;
    /**
     * @return The allocation mode for creating pools in the Batch account.
     * 
     */
    private String poolAllocationMode;
    private Integer poolQuota;
    /**
     * @return List of private endpoint connections associated with the Batch account
     * 
     */
    private List<PrivateEndpointConnectionResponse> privateEndpointConnections;
    /**
     * @return The provisioned state of the resource
     * 
     */
    private String provisioningState;
    /**
     * @return If not specified, the default value is &#39;enabled&#39;.
     * 
     */
    private String publicNetworkAccess;
    /**
     * @return The tags of the resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return The type of the resource.
     * 
     */
    private String type;

    private GetBatchAccountResult() {}
    /**
     * @return The account endpoint used to interact with the Batch service.
     * 
     */
    public String accountEndpoint() {
        return this.accountEndpoint;
    }
    public Integer activeJobAndJobScheduleQuota() {
        return this.activeJobAndJobScheduleQuota;
    }
    /**
     * @return Contains information about the auto-storage account associated with a Batch account.
     * 
     */
    public AutoStoragePropertiesResponse autoStorage() {
        return this.autoStorage;
    }
    /**
     * @return For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * 
     */
    public Integer dedicatedCoreQuota() {
        return this.dedicatedCoreQuota;
    }
    /**
     * @return A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * 
     */
    public List<VirtualMachineFamilyCoreQuotaResponse> dedicatedCoreQuotaPerVMFamily() {
        return this.dedicatedCoreQuotaPerVMFamily;
    }
    /**
     * @return Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
     * 
     */
    public Boolean dedicatedCoreQuotaPerVMFamilyEnforced() {
        return this.dedicatedCoreQuotaPerVMFamilyEnforced;
    }
    /**
     * @return Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
     * 
     */
    public EncryptionPropertiesResponse encryption() {
        return this.encryption;
    }
    /**
     * @return The ID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The identity of the Batch account.
     * 
     */
    public Optional<BatchAccountIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Identifies the Azure key vault associated with a Batch account.
     * 
     */
    public KeyVaultReferenceResponse keyVaultReference() {
        return this.keyVaultReference;
    }
    /**
     * @return The location of the resource.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * 
     */
    public Integer lowPriorityCoreQuota() {
        return this.lowPriorityCoreQuota;
    }
    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The allocation mode for creating pools in the Batch account.
     * 
     */
    public String poolAllocationMode() {
        return this.poolAllocationMode;
    }
    public Integer poolQuota() {
        return this.poolQuota;
    }
    /**
     * @return List of private endpoint connections associated with the Batch account
     * 
     */
    public List<PrivateEndpointConnectionResponse> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * @return The provisioned state of the resource
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return If not specified, the default value is &#39;enabled&#39;.
     * 
     */
    public String publicNetworkAccess() {
        return this.publicNetworkAccess;
    }
    /**
     * @return The tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBatchAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountEndpoint;
        private Integer activeJobAndJobScheduleQuota;
        private AutoStoragePropertiesResponse autoStorage;
        private Integer dedicatedCoreQuota;
        private List<VirtualMachineFamilyCoreQuotaResponse> dedicatedCoreQuotaPerVMFamily;
        private Boolean dedicatedCoreQuotaPerVMFamilyEnforced;
        private EncryptionPropertiesResponse encryption;
        private String id;
        private @Nullable BatchAccountIdentityResponse identity;
        private KeyVaultReferenceResponse keyVaultReference;
        private String location;
        private Integer lowPriorityCoreQuota;
        private String name;
        private String poolAllocationMode;
        private Integer poolQuota;
        private List<PrivateEndpointConnectionResponse> privateEndpointConnections;
        private String provisioningState;
        private String publicNetworkAccess;
        private Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetBatchAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEndpoint = defaults.accountEndpoint;
    	      this.activeJobAndJobScheduleQuota = defaults.activeJobAndJobScheduleQuota;
    	      this.autoStorage = defaults.autoStorage;
    	      this.dedicatedCoreQuota = defaults.dedicatedCoreQuota;
    	      this.dedicatedCoreQuotaPerVMFamily = defaults.dedicatedCoreQuotaPerVMFamily;
    	      this.dedicatedCoreQuotaPerVMFamilyEnforced = defaults.dedicatedCoreQuotaPerVMFamilyEnforced;
    	      this.encryption = defaults.encryption;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.keyVaultReference = defaults.keyVaultReference;
    	      this.location = defaults.location;
    	      this.lowPriorityCoreQuota = defaults.lowPriorityCoreQuota;
    	      this.name = defaults.name;
    	      this.poolAllocationMode = defaults.poolAllocationMode;
    	      this.poolQuota = defaults.poolQuota;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accountEndpoint(String accountEndpoint) {
            this.accountEndpoint = Objects.requireNonNull(accountEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder activeJobAndJobScheduleQuota(Integer activeJobAndJobScheduleQuota) {
            this.activeJobAndJobScheduleQuota = Objects.requireNonNull(activeJobAndJobScheduleQuota);
            return this;
        }
        @CustomType.Setter
        public Builder autoStorage(AutoStoragePropertiesResponse autoStorage) {
            this.autoStorage = Objects.requireNonNull(autoStorage);
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedCoreQuota(Integer dedicatedCoreQuota) {
            this.dedicatedCoreQuota = Objects.requireNonNull(dedicatedCoreQuota);
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedCoreQuotaPerVMFamily(List<VirtualMachineFamilyCoreQuotaResponse> dedicatedCoreQuotaPerVMFamily) {
            this.dedicatedCoreQuotaPerVMFamily = Objects.requireNonNull(dedicatedCoreQuotaPerVMFamily);
            return this;
        }
        public Builder dedicatedCoreQuotaPerVMFamily(VirtualMachineFamilyCoreQuotaResponse... dedicatedCoreQuotaPerVMFamily) {
            return dedicatedCoreQuotaPerVMFamily(List.of(dedicatedCoreQuotaPerVMFamily));
        }
        @CustomType.Setter
        public Builder dedicatedCoreQuotaPerVMFamilyEnforced(Boolean dedicatedCoreQuotaPerVMFamilyEnforced) {
            this.dedicatedCoreQuotaPerVMFamilyEnforced = Objects.requireNonNull(dedicatedCoreQuotaPerVMFamilyEnforced);
            return this;
        }
        @CustomType.Setter
        public Builder encryption(EncryptionPropertiesResponse encryption) {
            this.encryption = Objects.requireNonNull(encryption);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable BatchAccountIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultReference(KeyVaultReferenceResponse keyVaultReference) {
            this.keyVaultReference = Objects.requireNonNull(keyVaultReference);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder lowPriorityCoreQuota(Integer lowPriorityCoreQuota) {
            this.lowPriorityCoreQuota = Objects.requireNonNull(lowPriorityCoreQuota);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder poolAllocationMode(String poolAllocationMode) {
            this.poolAllocationMode = Objects.requireNonNull(poolAllocationMode);
            return this;
        }
        @CustomType.Setter
        public Builder poolQuota(Integer poolQuota) {
            this.poolQuota = Objects.requireNonNull(poolQuota);
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointConnections(List<PrivateEndpointConnectionResponse> privateEndpointConnections) {
            this.privateEndpointConnections = Objects.requireNonNull(privateEndpointConnections);
            return this;
        }
        public Builder privateEndpointConnections(PrivateEndpointConnectionResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(String publicNetworkAccess) {
            this.publicNetworkAccess = Objects.requireNonNull(publicNetworkAccess);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetBatchAccountResult build() {
            final var o = new GetBatchAccountResult();
            o.accountEndpoint = accountEndpoint;
            o.activeJobAndJobScheduleQuota = activeJobAndJobScheduleQuota;
            o.autoStorage = autoStorage;
            o.dedicatedCoreQuota = dedicatedCoreQuota;
            o.dedicatedCoreQuotaPerVMFamily = dedicatedCoreQuotaPerVMFamily;
            o.dedicatedCoreQuotaPerVMFamilyEnforced = dedicatedCoreQuotaPerVMFamilyEnforced;
            o.encryption = encryption;
            o.id = id;
            o.identity = identity;
            o.keyVaultReference = keyVaultReference;
            o.location = location;
            o.lowPriorityCoreQuota = lowPriorityCoreQuota;
            o.name = name;
            o.poolAllocationMode = poolAllocationMode;
            o.poolQuota = poolQuota;
            o.privateEndpointConnections = privateEndpointConnections;
            o.provisioningState = provisioningState;
            o.publicNetworkAccess = publicNetworkAccess;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
