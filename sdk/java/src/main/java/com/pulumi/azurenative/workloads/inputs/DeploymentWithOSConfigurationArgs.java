// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.inputs;

import com.pulumi.azurenative.workloads.inputs.OsSapConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.SAPInstallWithoutOSConfigSoftwareConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.ServiceInitiatedSoftwareConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.SingleServerConfigurationArgs;
import com.pulumi.azurenative.workloads.inputs.ThreeTierConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Deployment along with OS Configuration.
 * 
 */
public final class DeploymentWithOSConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentWithOSConfigurationArgs Empty = new DeploymentWithOSConfigurationArgs();

    /**
     * The geo-location where the SAP system is to be created.
     * 
     */
    @Import(name="appLocation")
    private @Nullable Output<String> appLocation;

    /**
     * @return The geo-location where the SAP system is to be created.
     * 
     */
    public Optional<Output<String>> appLocation() {
        return Optional.ofNullable(this.appLocation);
    }

    /**
     * The configuration Type.
     * Expected value is &#39;DeploymentWithOSConfig&#39;.
     * 
     */
    @Import(name="configurationType", required=true)
    private Output<String> configurationType;

    /**
     * @return The configuration Type.
     * Expected value is &#39;DeploymentWithOSConfig&#39;.
     * 
     */
    public Output<String> configurationType() {
        return this.configurationType;
    }

    /**
     * The infrastructure configuration.
     * 
     */
    @Import(name="infrastructureConfiguration")
    private @Nullable Output<Either<SingleServerConfigurationArgs,ThreeTierConfigurationArgs>> infrastructureConfiguration;

    /**
     * @return The infrastructure configuration.
     * 
     */
    public Optional<Output<Either<SingleServerConfigurationArgs,ThreeTierConfigurationArgs>>> infrastructureConfiguration() {
        return Optional.ofNullable(this.infrastructureConfiguration);
    }

    /**
     * The OS and SAP configuration.
     * 
     */
    @Import(name="osSapConfiguration")
    private @Nullable Output<OsSapConfigurationArgs> osSapConfiguration;

    /**
     * @return The OS and SAP configuration.
     * 
     */
    public Optional<Output<OsSapConfigurationArgs>> osSapConfiguration() {
        return Optional.ofNullable(this.osSapConfiguration);
    }

    /**
     * The software configuration.
     * 
     */
    @Import(name="softwareConfiguration")
    private @Nullable Output<Either<SAPInstallWithoutOSConfigSoftwareConfigurationArgs,ServiceInitiatedSoftwareConfigurationArgs>> softwareConfiguration;

    /**
     * @return The software configuration.
     * 
     */
    public Optional<Output<Either<SAPInstallWithoutOSConfigSoftwareConfigurationArgs,ServiceInitiatedSoftwareConfigurationArgs>>> softwareConfiguration() {
        return Optional.ofNullable(this.softwareConfiguration);
    }

    private DeploymentWithOSConfigurationArgs() {}

    private DeploymentWithOSConfigurationArgs(DeploymentWithOSConfigurationArgs $) {
        this.appLocation = $.appLocation;
        this.configurationType = $.configurationType;
        this.infrastructureConfiguration = $.infrastructureConfiguration;
        this.osSapConfiguration = $.osSapConfiguration;
        this.softwareConfiguration = $.softwareConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentWithOSConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentWithOSConfigurationArgs $;

        public Builder() {
            $ = new DeploymentWithOSConfigurationArgs();
        }

        public Builder(DeploymentWithOSConfigurationArgs defaults) {
            $ = new DeploymentWithOSConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appLocation The geo-location where the SAP system is to be created.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(@Nullable Output<String> appLocation) {
            $.appLocation = appLocation;
            return this;
        }

        /**
         * @param appLocation The geo-location where the SAP system is to be created.
         * 
         * @return builder
         * 
         */
        public Builder appLocation(String appLocation) {
            return appLocation(Output.of(appLocation));
        }

        /**
         * @param configurationType The configuration Type.
         * Expected value is &#39;DeploymentWithOSConfig&#39;.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(Output<String> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        /**
         * @param configurationType The configuration Type.
         * Expected value is &#39;DeploymentWithOSConfig&#39;.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(String configurationType) {
            return configurationType(Output.of(configurationType));
        }

        /**
         * @param infrastructureConfiguration The infrastructure configuration.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureConfiguration(@Nullable Output<Either<SingleServerConfigurationArgs,ThreeTierConfigurationArgs>> infrastructureConfiguration) {
            $.infrastructureConfiguration = infrastructureConfiguration;
            return this;
        }

        /**
         * @param infrastructureConfiguration The infrastructure configuration.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureConfiguration(Either<SingleServerConfigurationArgs,ThreeTierConfigurationArgs> infrastructureConfiguration) {
            return infrastructureConfiguration(Output.of(infrastructureConfiguration));
        }

        /**
         * @param infrastructureConfiguration The infrastructure configuration.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureConfiguration(SingleServerConfigurationArgs infrastructureConfiguration) {
            return infrastructureConfiguration(Either.ofLeft(infrastructureConfiguration));
        }

        /**
         * @param infrastructureConfiguration The infrastructure configuration.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureConfiguration(ThreeTierConfigurationArgs infrastructureConfiguration) {
            return infrastructureConfiguration(Either.ofRight(infrastructureConfiguration));
        }

        /**
         * @param osSapConfiguration The OS and SAP configuration.
         * 
         * @return builder
         * 
         */
        public Builder osSapConfiguration(@Nullable Output<OsSapConfigurationArgs> osSapConfiguration) {
            $.osSapConfiguration = osSapConfiguration;
            return this;
        }

        /**
         * @param osSapConfiguration The OS and SAP configuration.
         * 
         * @return builder
         * 
         */
        public Builder osSapConfiguration(OsSapConfigurationArgs osSapConfiguration) {
            return osSapConfiguration(Output.of(osSapConfiguration));
        }

        /**
         * @param softwareConfiguration The software configuration.
         * 
         * @return builder
         * 
         */
        public Builder softwareConfiguration(@Nullable Output<Either<SAPInstallWithoutOSConfigSoftwareConfigurationArgs,ServiceInitiatedSoftwareConfigurationArgs>> softwareConfiguration) {
            $.softwareConfiguration = softwareConfiguration;
            return this;
        }

        /**
         * @param softwareConfiguration The software configuration.
         * 
         * @return builder
         * 
         */
        public Builder softwareConfiguration(Either<SAPInstallWithoutOSConfigSoftwareConfigurationArgs,ServiceInitiatedSoftwareConfigurationArgs> softwareConfiguration) {
            return softwareConfiguration(Output.of(softwareConfiguration));
        }

        /**
         * @param softwareConfiguration The software configuration.
         * 
         * @return builder
         * 
         */
        public Builder softwareConfiguration(SAPInstallWithoutOSConfigSoftwareConfigurationArgs softwareConfiguration) {
            return softwareConfiguration(Either.ofLeft(softwareConfiguration));
        }

        /**
         * @param softwareConfiguration The software configuration.
         * 
         * @return builder
         * 
         */
        public Builder softwareConfiguration(ServiceInitiatedSoftwareConfigurationArgs softwareConfiguration) {
            return softwareConfiguration(Either.ofRight(softwareConfiguration));
        }

        public DeploymentWithOSConfigurationArgs build() {
            $.configurationType = Codegen.stringProp("configurationType").output().arg($.configurationType).require();
            return $;
        }
    }

}
