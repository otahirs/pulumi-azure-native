// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AksNetworkingConfigurationResponse {
    /**
     * @return An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     * 
     */
    private @Nullable String dnsServiceIP;
    /**
     * @return A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     */
    private @Nullable String dockerBridgeCidr;
    /**
     * @return A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     * 
     */
    private @Nullable String serviceCidr;
    /**
     * @return Virtual network subnet resource ID the compute nodes belong to
     * 
     */
    private @Nullable String subnetId;

    private AksNetworkingConfigurationResponse() {}
    /**
     * @return An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     * 
     */
    public Optional<String> dnsServiceIP() {
        return Optional.ofNullable(this.dnsServiceIP);
    }
    /**
     * @return A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     */
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    /**
     * @return A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     * 
     */
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }
    /**
     * @return Virtual network subnet resource ID the compute nodes belong to
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AksNetworkingConfigurationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dnsServiceIP;
        private @Nullable String dockerBridgeCidr;
        private @Nullable String serviceCidr;
        private @Nullable String subnetId;
        public Builder() {}
        public Builder(AksNetworkingConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIP = defaults.dnsServiceIP;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder dnsServiceIP(@Nullable String dnsServiceIP) {
            this.dnsServiceIP = dnsServiceIP;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public AksNetworkingConfigurationResponse build() {
            final var o = new AksNetworkingConfigurationResponse();
            o.dnsServiceIP = dnsServiceIP;
            o.dockerBridgeCidr = dockerBridgeCidr;
            o.serviceCidr = serviceCidr;
            o.subnetId = subnetId;
            return o;
        }
    }
}
