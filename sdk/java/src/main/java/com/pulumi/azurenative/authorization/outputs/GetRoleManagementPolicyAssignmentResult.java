// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.outputs;

import com.pulumi.azurenative.authorization.outputs.PolicyAssignmentPropertiesResponse;
import com.pulumi.azurenative.authorization.outputs.RoleManagementPolicyApprovalRuleResponse;
import com.pulumi.azurenative.authorization.outputs.RoleManagementPolicyAuthenticationContextRuleResponse;
import com.pulumi.azurenative.authorization.outputs.RoleManagementPolicyEnablementRuleResponse;
import com.pulumi.azurenative.authorization.outputs.RoleManagementPolicyExpirationRuleResponse;
import com.pulumi.azurenative.authorization.outputs.RoleManagementPolicyNotificationRuleResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRoleManagementPolicyAssignmentResult {
    /**
     * @return The readonly computed rule applied to the policy.
     * 
     */
    private List<Object> effectiveRules;
    /**
     * @return The role management policy Id.
     * 
     */
    private String id;
    /**
     * @return The role management policy name.
     * 
     */
    private String name;
    /**
     * @return Additional properties of scope, role definition and policy
     * 
     */
    private PolicyAssignmentPropertiesResponse policyAssignmentProperties;
    /**
     * @return The policy id role management policy assignment.
     * 
     */
    private @Nullable String policyId;
    /**
     * @return The role definition of management policy assignment.
     * 
     */
    private @Nullable String roleDefinitionId;
    /**
     * @return The role management policy scope.
     * 
     */
    private @Nullable String scope;
    /**
     * @return The role management policy type.
     * 
     */
    private String type;

    private GetRoleManagementPolicyAssignmentResult() {}
    /**
     * @return The readonly computed rule applied to the policy.
     * 
     */
    public List<Object> effectiveRules() {
        return this.effectiveRules;
    }
    /**
     * @return The role management policy Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The role management policy name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Additional properties of scope, role definition and policy
     * 
     */
    public PolicyAssignmentPropertiesResponse policyAssignmentProperties() {
        return this.policyAssignmentProperties;
    }
    /**
     * @return The policy id role management policy assignment.
     * 
     */
    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }
    /**
     * @return The role definition of management policy assignment.
     * 
     */
    public Optional<String> roleDefinitionId() {
        return Optional.ofNullable(this.roleDefinitionId);
    }
    /**
     * @return The role management policy scope.
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return The role management policy type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleManagementPolicyAssignmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<Object> effectiveRules;
        private String id;
        private String name;
        private PolicyAssignmentPropertiesResponse policyAssignmentProperties;
        private @Nullable String policyId;
        private @Nullable String roleDefinitionId;
        private @Nullable String scope;
        private String type;
        public Builder() {}
        public Builder(GetRoleManagementPolicyAssignmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.effectiveRules = defaults.effectiveRules;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.policyAssignmentProperties = defaults.policyAssignmentProperties;
    	      this.policyId = defaults.policyId;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
    	      this.scope = defaults.scope;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder effectiveRules(List<Object> effectiveRules) {
            this.effectiveRules = Objects.requireNonNull(effectiveRules);
            return this;
        }
        public Builder effectiveRules(Object... effectiveRules) {
            return effectiveRules(List.of(effectiveRules));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder policyAssignmentProperties(PolicyAssignmentPropertiesResponse policyAssignmentProperties) {
            this.policyAssignmentProperties = Objects.requireNonNull(policyAssignmentProperties);
            return this;
        }
        @CustomType.Setter
        public Builder policyId(@Nullable String policyId) {
            this.policyId = policyId;
            return this;
        }
        @CustomType.Setter
        public Builder roleDefinitionId(@Nullable String roleDefinitionId) {
            this.roleDefinitionId = roleDefinitionId;
            return this;
        }
        @CustomType.Setter
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetRoleManagementPolicyAssignmentResult build() {
            final var o = new GetRoleManagementPolicyAssignmentResult();
            o.effectiveRules = effectiveRules;
            o.id = id;
            o.name = name;
            o.policyAssignmentProperties = policyAssignmentProperties;
            o.policyId = policyId;
            o.roleDefinitionId = roleDefinitionId;
            o.scope = scope;
            o.type = type;
            return o;
        }
    }
}
