// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.azurenative.machinelearningservices.outputs.DatasetResponseSqlDataPath;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetResponseDataPath {
    /**
     * @return Additional Properties.
     * 
     */
    private @Nullable Map<String,Object> additionalProperties;
    /**
     * @return Azure path for Azure Blob or File
     * 
     */
    private String azureFilePath;
    /**
     * @return Data store Name
     * 
     */
    private String datastoreName;
    /**
     * @return HTTP URL.
     * 
     */
    private String httpUrl;
    /**
     * @return Specify the partition format of path. Defaults to None.
     * 
     */
    private String partitionFormat;
    /**
     * @return Whether or not to ignore unmatched path.
     * 
     */
    private Boolean partitionFormatIgnoreError;
    /**
     * @return List of files expanded from a file GLOB specified
     * 
     */
    private List<String> paths;
    /**
     * @return Relative path in the data store
     * 
     */
    private String relativePath;
    /**
     * @return Sql Query/Table/Stored Procedure details.
     * 
     */
    private @Nullable DatasetResponseSqlDataPath sqlDataPath;

    private DatasetResponseDataPath() {}
    /**
     * @return Additional Properties.
     * 
     */
    public Map<String,Object> additionalProperties() {
        return this.additionalProperties == null ? Map.of() : this.additionalProperties;
    }
    /**
     * @return Azure path for Azure Blob or File
     * 
     */
    public String azureFilePath() {
        return this.azureFilePath;
    }
    /**
     * @return Data store Name
     * 
     */
    public String datastoreName() {
        return this.datastoreName;
    }
    /**
     * @return HTTP URL.
     * 
     */
    public String httpUrl() {
        return this.httpUrl;
    }
    /**
     * @return Specify the partition format of path. Defaults to None.
     * 
     */
    public String partitionFormat() {
        return this.partitionFormat;
    }
    /**
     * @return Whether or not to ignore unmatched path.
     * 
     */
    public Boolean partitionFormatIgnoreError() {
        return this.partitionFormatIgnoreError;
    }
    /**
     * @return List of files expanded from a file GLOB specified
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return Relative path in the data store
     * 
     */
    public String relativePath() {
        return this.relativePath;
    }
    /**
     * @return Sql Query/Table/Stored Procedure details.
     * 
     */
    public Optional<DatasetResponseSqlDataPath> sqlDataPath() {
        return Optional.ofNullable(this.sqlDataPath);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetResponseDataPath defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,Object> additionalProperties;
        private String azureFilePath;
        private String datastoreName;
        private String httpUrl;
        private String partitionFormat;
        private Boolean partitionFormatIgnoreError;
        private List<String> paths;
        private String relativePath;
        private @Nullable DatasetResponseSqlDataPath sqlDataPath;
        public Builder() {}
        public Builder(DatasetResponseDataPath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalProperties = defaults.additionalProperties;
    	      this.azureFilePath = defaults.azureFilePath;
    	      this.datastoreName = defaults.datastoreName;
    	      this.httpUrl = defaults.httpUrl;
    	      this.partitionFormat = defaults.partitionFormat;
    	      this.partitionFormatIgnoreError = defaults.partitionFormatIgnoreError;
    	      this.paths = defaults.paths;
    	      this.relativePath = defaults.relativePath;
    	      this.sqlDataPath = defaults.sqlDataPath;
        }

        @CustomType.Setter
        public Builder additionalProperties(@Nullable Map<String,Object> additionalProperties) {
            this.additionalProperties = additionalProperties;
            return this;
        }
        @CustomType.Setter
        public Builder azureFilePath(String azureFilePath) {
            this.azureFilePath = Objects.requireNonNull(azureFilePath);
            return this;
        }
        @CustomType.Setter
        public Builder datastoreName(String datastoreName) {
            this.datastoreName = Objects.requireNonNull(datastoreName);
            return this;
        }
        @CustomType.Setter
        public Builder httpUrl(String httpUrl) {
            this.httpUrl = Objects.requireNonNull(httpUrl);
            return this;
        }
        @CustomType.Setter
        public Builder partitionFormat(String partitionFormat) {
            this.partitionFormat = Objects.requireNonNull(partitionFormat);
            return this;
        }
        @CustomType.Setter
        public Builder partitionFormatIgnoreError(Boolean partitionFormatIgnoreError) {
            this.partitionFormatIgnoreError = Objects.requireNonNull(partitionFormatIgnoreError);
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            this.paths = Objects.requireNonNull(paths);
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder relativePath(String relativePath) {
            this.relativePath = Objects.requireNonNull(relativePath);
            return this;
        }
        @CustomType.Setter
        public Builder sqlDataPath(@Nullable DatasetResponseSqlDataPath sqlDataPath) {
            this.sqlDataPath = sqlDataPath;
            return this;
        }
        public DatasetResponseDataPath build() {
            final var o = new DatasetResponseDataPath();
            o.additionalProperties = additionalProperties;
            o.azureFilePath = azureFilePath;
            o.datastoreName = datastoreName;
            o.httpUrl = httpUrl;
            o.partitionFormat = partitionFormat;
            o.partitionFormatIgnoreError = partitionFormatIgnoreError;
            o.paths = paths;
            o.relativePath = relativePath;
            o.sqlDataPath = sqlDataPath;
            return o;
        }
    }
}
