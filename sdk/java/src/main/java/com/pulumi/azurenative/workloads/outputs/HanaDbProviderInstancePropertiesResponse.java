// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HanaDbProviderInstancePropertiesResponse {
    /**
     * @return Gets or sets the hana database name.
     * 
     */
    private @Nullable String dbName;
    /**
     * @return Gets or sets the database password.
     * 
     */
    private @Nullable String dbPassword;
    /**
     * @return Gets or sets the key vault URI to secret with the database password.
     * 
     */
    private @Nullable String dbPasswordUri;
    /**
     * @return Gets or sets the blob URI to SSL certificate for the DB.
     * 
     */
    private @Nullable String dbSslCertificateUri;
    /**
     * @return Gets or sets the database user name.
     * 
     */
    private @Nullable String dbUsername;
    /**
     * @return Gets or sets the target virtual machine size.
     * 
     */
    private @Nullable String hostname;
    /**
     * @return Gets or sets the database instance number.
     * 
     */
    private @Nullable String instanceNumber;
    /**
     * @return The provider type. For example, the value can be SapHana.
     * Expected value is &#39;SapHana&#39;.
     * 
     */
    private String providerType;
    /**
     * @return Gets or sets the database sql port.
     * 
     */
    private @Nullable String sqlPort;
    /**
     * @return Gets or sets the hostname(s) in the SSL certificate.
     * 
     */
    private @Nullable String sslHostNameInCertificate;

    private HanaDbProviderInstancePropertiesResponse() {}
    /**
     * @return Gets or sets the hana database name.
     * 
     */
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    /**
     * @return Gets or sets the database password.
     * 
     */
    public Optional<String> dbPassword() {
        return Optional.ofNullable(this.dbPassword);
    }
    /**
     * @return Gets or sets the key vault URI to secret with the database password.
     * 
     */
    public Optional<String> dbPasswordUri() {
        return Optional.ofNullable(this.dbPasswordUri);
    }
    /**
     * @return Gets or sets the blob URI to SSL certificate for the DB.
     * 
     */
    public Optional<String> dbSslCertificateUri() {
        return Optional.ofNullable(this.dbSslCertificateUri);
    }
    /**
     * @return Gets or sets the database user name.
     * 
     */
    public Optional<String> dbUsername() {
        return Optional.ofNullable(this.dbUsername);
    }
    /**
     * @return Gets or sets the target virtual machine size.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return Gets or sets the database instance number.
     * 
     */
    public Optional<String> instanceNumber() {
        return Optional.ofNullable(this.instanceNumber);
    }
    /**
     * @return The provider type. For example, the value can be SapHana.
     * Expected value is &#39;SapHana&#39;.
     * 
     */
    public String providerType() {
        return this.providerType;
    }
    /**
     * @return Gets or sets the database sql port.
     * 
     */
    public Optional<String> sqlPort() {
        return Optional.ofNullable(this.sqlPort);
    }
    /**
     * @return Gets or sets the hostname(s) in the SSL certificate.
     * 
     */
    public Optional<String> sslHostNameInCertificate() {
        return Optional.ofNullable(this.sslHostNameInCertificate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HanaDbProviderInstancePropertiesResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dbName;
        private @Nullable String dbPassword;
        private @Nullable String dbPasswordUri;
        private @Nullable String dbSslCertificateUri;
        private @Nullable String dbUsername;
        private @Nullable String hostname;
        private @Nullable String instanceNumber;
        private String providerType;
        private @Nullable String sqlPort;
        private @Nullable String sslHostNameInCertificate;
        public Builder() {}
        public Builder(HanaDbProviderInstancePropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbName = defaults.dbName;
    	      this.dbPassword = defaults.dbPassword;
    	      this.dbPasswordUri = defaults.dbPasswordUri;
    	      this.dbSslCertificateUri = defaults.dbSslCertificateUri;
    	      this.dbUsername = defaults.dbUsername;
    	      this.hostname = defaults.hostname;
    	      this.instanceNumber = defaults.instanceNumber;
    	      this.providerType = defaults.providerType;
    	      this.sqlPort = defaults.sqlPort;
    	      this.sslHostNameInCertificate = defaults.sslHostNameInCertificate;
        }

        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder dbPassword(@Nullable String dbPassword) {
            this.dbPassword = dbPassword;
            return this;
        }
        @CustomType.Setter
        public Builder dbPasswordUri(@Nullable String dbPasswordUri) {
            this.dbPasswordUri = dbPasswordUri;
            return this;
        }
        @CustomType.Setter
        public Builder dbSslCertificateUri(@Nullable String dbSslCertificateUri) {
            this.dbSslCertificateUri = dbSslCertificateUri;
            return this;
        }
        @CustomType.Setter
        public Builder dbUsername(@Nullable String dbUsername) {
            this.dbUsername = dbUsername;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder instanceNumber(@Nullable String instanceNumber) {
            this.instanceNumber = instanceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder providerType(String providerType) {
            this.providerType = Objects.requireNonNull(providerType);
            return this;
        }
        @CustomType.Setter
        public Builder sqlPort(@Nullable String sqlPort) {
            this.sqlPort = sqlPort;
            return this;
        }
        @CustomType.Setter
        public Builder sslHostNameInCertificate(@Nullable String sslHostNameInCertificate) {
            this.sslHostNameInCertificate = sslHostNameInCertificate;
            return this;
        }
        public HanaDbProviderInstancePropertiesResponse build() {
            final var o = new HanaDbProviderInstancePropertiesResponse();
            o.dbName = dbName;
            o.dbPassword = dbPassword;
            o.dbPasswordUri = dbPasswordUri;
            o.dbSslCertificateUri = dbSslCertificateUri;
            o.dbUsername = dbUsername;
            o.hostname = hostname;
            o.instanceNumber = instanceNumber;
            o.providerType = providerType;
            o.sqlPort = sqlPort;
            o.sslHostNameInCertificate = sslHostNameInCertificate;
            return o;
        }
    }
}
