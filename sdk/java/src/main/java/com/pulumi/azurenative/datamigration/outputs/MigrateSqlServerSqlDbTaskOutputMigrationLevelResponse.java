// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.DatabaseSummaryResultResponse;
import com.pulumi.azurenative.datamigration.outputs.MigrationReportResultResponse;
import com.pulumi.azurenative.datamigration.outputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse {
    /**
     * @return Summary of database results in the migration
     * 
     */
    private Map<String,DatabaseSummaryResultResponse> databaseSummary;
    /**
     * @return Selected databases as a map from database name to database id
     * 
     */
    private Map<String,String> databases;
    /**
     * @return Duration of task execution in seconds.
     * 
     */
    private Double durationInSeconds;
    /**
     * @return Migration end time
     * 
     */
    private String endedOn;
    /**
     * @return Migration exceptions and warnings.
     * 
     */
    private List<ReportableExceptionResponse> exceptionsAndWarnings;
    /**
     * @return Result identifier
     * 
     */
    private String id;
    /**
     * @return Migration progress message
     * 
     */
    private String message;
    /**
     * @return Migration Report Result, provides unique url for downloading your migration report.
     * 
     */
    private MigrationReportResultResponse migrationReport;
    /**
     * @return Result type
     * Expected value is &#39;MigrationLevelOutput&#39;.
     * 
     */
    private String resultType;
    /**
     * @return Source server brand version
     * 
     */
    private String sourceServerBrandVersion;
    /**
     * @return Source server version
     * 
     */
    private String sourceServerVersion;
    /**
     * @return Migration start time
     * 
     */
    private String startedOn;
    /**
     * @return Current status of migration
     * 
     */
    private String status;
    /**
     * @return Migration status message
     * 
     */
    private String statusMessage;
    /**
     * @return Target server brand version
     * 
     */
    private String targetServerBrandVersion;
    /**
     * @return Target server version
     * 
     */
    private String targetServerVersion;

    private MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse() {}
    /**
     * @return Summary of database results in the migration
     * 
     */
    public Map<String,DatabaseSummaryResultResponse> databaseSummary() {
        return this.databaseSummary;
    }
    /**
     * @return Selected databases as a map from database name to database id
     * 
     */
    public Map<String,String> databases() {
        return this.databases;
    }
    /**
     * @return Duration of task execution in seconds.
     * 
     */
    public Double durationInSeconds() {
        return this.durationInSeconds;
    }
    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }
    /**
     * @return Migration exceptions and warnings.
     * 
     */
    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }
    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Migration progress message
     * 
     */
    public String message() {
        return this.message;
    }
    /**
     * @return Migration Report Result, provides unique url for downloading your migration report.
     * 
     */
    public MigrationReportResultResponse migrationReport() {
        return this.migrationReport;
    }
    /**
     * @return Result type
     * Expected value is &#39;MigrationLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }
    /**
     * @return Source server brand version
     * 
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }
    /**
     * @return Source server version
     * 
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }
    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }
    /**
     * @return Current status of migration
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Migration status message
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return Target server brand version
     * 
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }
    /**
     * @return Target server version
     * 
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,DatabaseSummaryResultResponse> databaseSummary;
        private Map<String,String> databases;
        private Double durationInSeconds;
        private String endedOn;
        private List<ReportableExceptionResponse> exceptionsAndWarnings;
        private String id;
        private String message;
        private MigrationReportResultResponse migrationReport;
        private String resultType;
        private String sourceServerBrandVersion;
        private String sourceServerVersion;
        private String startedOn;
        private String status;
        private String statusMessage;
        private String targetServerBrandVersion;
        private String targetServerVersion;
        public Builder() {}
        public Builder(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseSummary = defaults.databaseSummary;
    	      this.databases = defaults.databases;
    	      this.durationInSeconds = defaults.durationInSeconds;
    	      this.endedOn = defaults.endedOn;
    	      this.exceptionsAndWarnings = defaults.exceptionsAndWarnings;
    	      this.id = defaults.id;
    	      this.message = defaults.message;
    	      this.migrationReport = defaults.migrationReport;
    	      this.resultType = defaults.resultType;
    	      this.sourceServerBrandVersion = defaults.sourceServerBrandVersion;
    	      this.sourceServerVersion = defaults.sourceServerVersion;
    	      this.startedOn = defaults.startedOn;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.targetServerBrandVersion = defaults.targetServerBrandVersion;
    	      this.targetServerVersion = defaults.targetServerVersion;
        }

        @CustomType.Setter
        public Builder databaseSummary(Map<String,DatabaseSummaryResultResponse> databaseSummary) {
            this.databaseSummary = Objects.requireNonNull(databaseSummary);
            return this;
        }
        @CustomType.Setter
        public Builder databases(Map<String,String> databases) {
            this.databases = Objects.requireNonNull(databases);
            return this;
        }
        @CustomType.Setter
        public Builder durationInSeconds(Double durationInSeconds) {
            this.durationInSeconds = Objects.requireNonNull(durationInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder endedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }
        @CustomType.Setter
        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            this.exceptionsAndWarnings = Objects.requireNonNull(exceptionsAndWarnings);
            return this;
        }
        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }
        @CustomType.Setter
        public Builder migrationReport(MigrationReportResultResponse migrationReport) {
            this.migrationReport = Objects.requireNonNull(migrationReport);
            return this;
        }
        @CustomType.Setter
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        @CustomType.Setter
        public Builder sourceServerBrandVersion(String sourceServerBrandVersion) {
            this.sourceServerBrandVersion = Objects.requireNonNull(sourceServerBrandVersion);
            return this;
        }
        @CustomType.Setter
        public Builder sourceServerVersion(String sourceServerVersion) {
            this.sourceServerVersion = Objects.requireNonNull(sourceServerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder startedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        @CustomType.Setter
        public Builder targetServerBrandVersion(String targetServerBrandVersion) {
            this.targetServerBrandVersion = Objects.requireNonNull(targetServerBrandVersion);
            return this;
        }
        @CustomType.Setter
        public Builder targetServerVersion(String targetServerVersion) {
            this.targetServerVersion = Objects.requireNonNull(targetServerVersion);
            return this;
        }
        public MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse build() {
            final var o = new MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse();
            o.databaseSummary = databaseSummary;
            o.databases = databases;
            o.durationInSeconds = durationInSeconds;
            o.endedOn = endedOn;
            o.exceptionsAndWarnings = exceptionsAndWarnings;
            o.id = id;
            o.message = message;
            o.migrationReport = migrationReport;
            o.resultType = resultType;
            o.sourceServerBrandVersion = sourceServerBrandVersion;
            o.sourceServerVersion = sourceServerVersion;
            o.startedOn = startedOn;
            o.status = status;
            o.statusMessage = statusMessage;
            o.targetServerBrandVersion = targetServerBrandVersion;
            o.targetServerVersion = targetServerVersion;
            return o;
        }
    }
}
