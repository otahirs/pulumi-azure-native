// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.HlsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLiveOutputResult {
    /**
     * @return ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     * 
     */
    private String archiveWindowLength;
    /**
     * @return The asset that the live output will write to.
     * 
     */
    private String assetName;
    /**
     * @return The creation time the live output.
     * 
     */
    private String created;
    /**
     * @return The description of the live output.
     * 
     */
    private @Nullable String description;
    /**
     * @return HTTP Live Streaming (HLS) packing setting for the live output.
     * 
     */
    private @Nullable HlsResponse hls;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The time the live output was last modified.
     * 
     */
    private String lastModified;
    /**
     * @return The manifest file name. If not provided, the service will generate one automatically.
     * 
     */
    private @Nullable String manifestName;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return The initial timestamp that the live output will start at, any content before this value will not be archived.
     * 
     */
    private @Nullable Double outputSnapTime;
    /**
     * @return The provisioning state of the live output.
     * 
     */
    private String provisioningState;
    /**
     * @return The resource state of the live output.
     * 
     */
    private String resourceState;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;

    private GetLiveOutputResult() {}
    /**
     * @return ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     * 
     */
    public String archiveWindowLength() {
        return this.archiveWindowLength;
    }
    /**
     * @return The asset that the live output will write to.
     * 
     */
    public String assetName() {
        return this.assetName;
    }
    /**
     * @return The creation time the live output.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The description of the live output.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return HTTP Live Streaming (HLS) packing setting for the live output.
     * 
     */
    public Optional<HlsResponse> hls() {
        return Optional.ofNullable(this.hls);
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The time the live output was last modified.
     * 
     */
    public String lastModified() {
        return this.lastModified;
    }
    /**
     * @return The manifest file name. If not provided, the service will generate one automatically.
     * 
     */
    public Optional<String> manifestName() {
        return Optional.ofNullable(this.manifestName);
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The initial timestamp that the live output will start at, any content before this value will not be archived.
     * 
     */
    public Optional<Double> outputSnapTime() {
        return Optional.ofNullable(this.outputSnapTime);
    }
    /**
     * @return The provisioning state of the live output.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The resource state of the live output.
     * 
     */
    public String resourceState() {
        return this.resourceState;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLiveOutputResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String archiveWindowLength;
        private String assetName;
        private String created;
        private @Nullable String description;
        private @Nullable HlsResponse hls;
        private String id;
        private String lastModified;
        private @Nullable String manifestName;
        private String name;
        private @Nullable Double outputSnapTime;
        private String provisioningState;
        private String resourceState;
        private String type;
        public Builder() {}
        public Builder(GetLiveOutputResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveWindowLength = defaults.archiveWindowLength;
    	      this.assetName = defaults.assetName;
    	      this.created = defaults.created;
    	      this.description = defaults.description;
    	      this.hls = defaults.hls;
    	      this.id = defaults.id;
    	      this.lastModified = defaults.lastModified;
    	      this.manifestName = defaults.manifestName;
    	      this.name = defaults.name;
    	      this.outputSnapTime = defaults.outputSnapTime;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceState = defaults.resourceState;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder archiveWindowLength(String archiveWindowLength) {
            this.archiveWindowLength = Objects.requireNonNull(archiveWindowLength);
            return this;
        }
        @CustomType.Setter
        public Builder assetName(String assetName) {
            this.assetName = Objects.requireNonNull(assetName);
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder hls(@Nullable HlsResponse hls) {
            this.hls = hls;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            this.lastModified = Objects.requireNonNull(lastModified);
            return this;
        }
        @CustomType.Setter
        public Builder manifestName(@Nullable String manifestName) {
            this.manifestName = manifestName;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outputSnapTime(@Nullable Double outputSnapTime) {
            this.outputSnapTime = outputSnapTime;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceState(String resourceState) {
            this.resourceState = Objects.requireNonNull(resourceState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetLiveOutputResult build() {
            final var o = new GetLiveOutputResult();
            o.archiveWindowLength = archiveWindowLength;
            o.assetName = assetName;
            o.created = created;
            o.description = description;
            o.hls = hls;
            o.id = id;
            o.lastModified = lastModified;
            o.manifestName = manifestName;
            o.name = name;
            o.outputSnapTime = outputSnapTime;
            o.provisioningState = provisioningState;
            o.resourceState = resourceState;
            o.type = type;
            return o;
        }
    }
}
