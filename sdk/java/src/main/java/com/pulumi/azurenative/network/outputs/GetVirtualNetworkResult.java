// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.AddressSpaceResponse;
import com.pulumi.azurenative.network.outputs.DhcpOptionsResponse;
import com.pulumi.azurenative.network.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.SubnetResponse;
import com.pulumi.azurenative.network.outputs.VirtualNetworkBgpCommunitiesResponse;
import com.pulumi.azurenative.network.outputs.VirtualNetworkPeeringResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualNetworkResult {
    /**
     * @return The AddressSpace that contains an array of IP address ranges that can be used by subnets.
     * 
     */
    private @Nullable AddressSpaceResponse addressSpace;
    /**
     * @return Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
     * 
     */
    private @Nullable VirtualNetworkBgpCommunitiesResponse bgpCommunities;
    /**
     * @return The DDoS protection plan associated with the virtual network.
     * 
     */
    private @Nullable SubResourceResponse ddosProtectionPlan;
    /**
     * @return The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
     * 
     */
    private @Nullable DhcpOptionsResponse dhcpOptions;
    /**
     * @return Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
     * 
     */
    private @Nullable Boolean enableDdosProtection;
    /**
     * @return Indicates if VM protection is enabled for all the subnets in the virtual network.
     * 
     */
    private @Nullable Boolean enableVmProtection;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return The extended location of the virtual network.
     * 
     */
    private @Nullable ExtendedLocationResponse extendedLocation;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Array of IpAllocation which reference this VNET.
     * 
     */
    private @Nullable List<SubResourceResponse> ipAllocations;
    /**
     * @return Resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The provisioning state of the virtual network resource.
     * 
     */
    private String provisioningState;
    /**
     * @return The resourceGuid property of the Virtual Network resource.
     * 
     */
    private String resourceGuid;
    /**
     * @return A list of subnets in a Virtual Network.
     * 
     */
    private @Nullable List<SubnetResponse> subnets;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return A list of peerings in a Virtual Network.
     * 
     */
    private @Nullable List<VirtualNetworkPeeringResponse> virtualNetworkPeerings;

    private GetVirtualNetworkResult() {}
    /**
     * @return The AddressSpace that contains an array of IP address ranges that can be used by subnets.
     * 
     */
    public Optional<AddressSpaceResponse> addressSpace() {
        return Optional.ofNullable(this.addressSpace);
    }
    /**
     * @return Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
     * 
     */
    public Optional<VirtualNetworkBgpCommunitiesResponse> bgpCommunities() {
        return Optional.ofNullable(this.bgpCommunities);
    }
    /**
     * @return The DDoS protection plan associated with the virtual network.
     * 
     */
    public Optional<SubResourceResponse> ddosProtectionPlan() {
        return Optional.ofNullable(this.ddosProtectionPlan);
    }
    /**
     * @return The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
     * 
     */
    public Optional<DhcpOptionsResponse> dhcpOptions() {
        return Optional.ofNullable(this.dhcpOptions);
    }
    /**
     * @return Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
     * 
     */
    public Optional<Boolean> enableDdosProtection() {
        return Optional.ofNullable(this.enableDdosProtection);
    }
    /**
     * @return Indicates if VM protection is enabled for all the subnets in the virtual network.
     * 
     */
    public Optional<Boolean> enableVmProtection() {
        return Optional.ofNullable(this.enableVmProtection);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The extended location of the virtual network.
     * 
     */
    public Optional<ExtendedLocationResponse> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Array of IpAllocation which reference this VNET.
     * 
     */
    public List<SubResourceResponse> ipAllocations() {
        return this.ipAllocations == null ? List.of() : this.ipAllocations;
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The provisioning state of the virtual network resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The resourceGuid property of the Virtual Network resource.
     * 
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * @return A list of subnets in a Virtual Network.
     * 
     */
    public List<SubnetResponse> subnets() {
        return this.subnets == null ? List.of() : this.subnets;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A list of peerings in a Virtual Network.
     * 
     */
    public List<VirtualNetworkPeeringResponse> virtualNetworkPeerings() {
        return this.virtualNetworkPeerings == null ? List.of() : this.virtualNetworkPeerings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AddressSpaceResponse addressSpace;
        private @Nullable VirtualNetworkBgpCommunitiesResponse bgpCommunities;
        private @Nullable SubResourceResponse ddosProtectionPlan;
        private @Nullable DhcpOptionsResponse dhcpOptions;
        private @Nullable Boolean enableDdosProtection;
        private @Nullable Boolean enableVmProtection;
        private String etag;
        private @Nullable ExtendedLocationResponse extendedLocation;
        private @Nullable String id;
        private @Nullable List<SubResourceResponse> ipAllocations;
        private @Nullable String location;
        private String name;
        private String provisioningState;
        private String resourceGuid;
        private @Nullable List<SubnetResponse> subnets;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<VirtualNetworkPeeringResponse> virtualNetworkPeerings;
        public Builder() {}
        public Builder(GetVirtualNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressSpace = defaults.addressSpace;
    	      this.bgpCommunities = defaults.bgpCommunities;
    	      this.ddosProtectionPlan = defaults.ddosProtectionPlan;
    	      this.dhcpOptions = defaults.dhcpOptions;
    	      this.enableDdosProtection = defaults.enableDdosProtection;
    	      this.enableVmProtection = defaults.enableVmProtection;
    	      this.etag = defaults.etag;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.id = defaults.id;
    	      this.ipAllocations = defaults.ipAllocations;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualNetworkPeerings = defaults.virtualNetworkPeerings;
        }

        @CustomType.Setter
        public Builder addressSpace(@Nullable AddressSpaceResponse addressSpace) {
            this.addressSpace = addressSpace;
            return this;
        }
        @CustomType.Setter
        public Builder bgpCommunities(@Nullable VirtualNetworkBgpCommunitiesResponse bgpCommunities) {
            this.bgpCommunities = bgpCommunities;
            return this;
        }
        @CustomType.Setter
        public Builder ddosProtectionPlan(@Nullable SubResourceResponse ddosProtectionPlan) {
            this.ddosProtectionPlan = ddosProtectionPlan;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpOptions(@Nullable DhcpOptionsResponse dhcpOptions) {
            this.dhcpOptions = dhcpOptions;
            return this;
        }
        @CustomType.Setter
        public Builder enableDdosProtection(@Nullable Boolean enableDdosProtection) {
            this.enableDdosProtection = enableDdosProtection;
            return this;
        }
        @CustomType.Setter
        public Builder enableVmProtection(@Nullable Boolean enableVmProtection) {
            this.enableVmProtection = enableVmProtection;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder extendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocations(@Nullable List<SubResourceResponse> ipAllocations) {
            this.ipAllocations = ipAllocations;
            return this;
        }
        public Builder ipAllocations(SubResourceResponse... ipAllocations) {
            return ipAllocations(List.of(ipAllocations));
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        @CustomType.Setter
        public Builder subnets(@Nullable List<SubnetResponse> subnets) {
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(SubnetResponse... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkPeerings(@Nullable List<VirtualNetworkPeeringResponse> virtualNetworkPeerings) {
            this.virtualNetworkPeerings = virtualNetworkPeerings;
            return this;
        }
        public Builder virtualNetworkPeerings(VirtualNetworkPeeringResponse... virtualNetworkPeerings) {
            return virtualNetworkPeerings(List.of(virtualNetworkPeerings));
        }
        public GetVirtualNetworkResult build() {
            final var o = new GetVirtualNetworkResult();
            o.addressSpace = addressSpace;
            o.bgpCommunities = bgpCommunities;
            o.ddosProtectionPlan = ddosProtectionPlan;
            o.dhcpOptions = dhcpOptions;
            o.enableDdosProtection = enableDdosProtection;
            o.enableVmProtection = enableVmProtection;
            o.etag = etag;
            o.extendedLocation = extendedLocation;
            o.id = id;
            o.ipAllocations = ipAllocations;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.resourceGuid = resourceGuid;
            o.subnets = subnets;
            o.tags = tags;
            o.type = type;
            o.virtualNetworkPeerings = virtualNetworkPeerings;
            return o;
        }
    }
}
