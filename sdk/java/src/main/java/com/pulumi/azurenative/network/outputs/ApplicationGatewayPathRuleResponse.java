// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationGatewayPathRuleResponse {
    /**
     * @return Backend address pool resource of URL path map path rule.
     * 
     */
    private @Nullable SubResourceResponse backendAddressPool;
    /**
     * @return Backend http settings resource of URL path map path rule.
     * 
     */
    private @Nullable SubResourceResponse backendHttpSettings;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return Reference to the FirewallPolicy resource.
     * 
     */
    private @Nullable SubResourceResponse firewallPolicy;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Name of the path rule that is unique within an Application Gateway.
     * 
     */
    private @Nullable String name;
    /**
     * @return Path rules of URL path map.
     * 
     */
    private @Nullable List<String> paths;
    /**
     * @return The provisioning state of the path rule resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Redirect configuration resource of URL path map path rule.
     * 
     */
    private @Nullable SubResourceResponse redirectConfiguration;
    /**
     * @return Rewrite rule set resource of URL path map path rule.
     * 
     */
    private @Nullable SubResourceResponse rewriteRuleSet;
    /**
     * @return Type of the resource.
     * 
     */
    private String type;

    private ApplicationGatewayPathRuleResponse() {}
    /**
     * @return Backend address pool resource of URL path map path rule.
     * 
     */
    public Optional<SubResourceResponse> backendAddressPool() {
        return Optional.ofNullable(this.backendAddressPool);
    }
    /**
     * @return Backend http settings resource of URL path map path rule.
     * 
     */
    public Optional<SubResourceResponse> backendHttpSettings() {
        return Optional.ofNullable(this.backendHttpSettings);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Reference to the FirewallPolicy resource.
     * 
     */
    public Optional<SubResourceResponse> firewallPolicy() {
        return Optional.ofNullable(this.firewallPolicy);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of the path rule that is unique within an Application Gateway.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Path rules of URL path map.
     * 
     */
    public List<String> paths() {
        return this.paths == null ? List.of() : this.paths;
    }
    /**
     * @return The provisioning state of the path rule resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Redirect configuration resource of URL path map path rule.
     * 
     */
    public Optional<SubResourceResponse> redirectConfiguration() {
        return Optional.ofNullable(this.redirectConfiguration);
    }
    /**
     * @return Rewrite rule set resource of URL path map path rule.
     * 
     */
    public Optional<SubResourceResponse> rewriteRuleSet() {
        return Optional.ofNullable(this.rewriteRuleSet);
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayPathRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SubResourceResponse backendAddressPool;
        private @Nullable SubResourceResponse backendHttpSettings;
        private String etag;
        private @Nullable SubResourceResponse firewallPolicy;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable List<String> paths;
        private String provisioningState;
        private @Nullable SubResourceResponse redirectConfiguration;
        private @Nullable SubResourceResponse rewriteRuleSet;
        private String type;
        public Builder() {}
        public Builder(ApplicationGatewayPathRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backendAddressPool = defaults.backendAddressPool;
    	      this.backendHttpSettings = defaults.backendHttpSettings;
    	      this.etag = defaults.etag;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.paths = defaults.paths;
    	      this.provisioningState = defaults.provisioningState;
    	      this.redirectConfiguration = defaults.redirectConfiguration;
    	      this.rewriteRuleSet = defaults.rewriteRuleSet;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder backendAddressPool(@Nullable SubResourceResponse backendAddressPool) {
            this.backendAddressPool = backendAddressPool;
            return this;
        }
        @CustomType.Setter
        public Builder backendHttpSettings(@Nullable SubResourceResponse backendHttpSettings) {
            this.backendHttpSettings = backendHttpSettings;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder firewallPolicy(@Nullable SubResourceResponse firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder paths(@Nullable List<String> paths) {
            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder redirectConfiguration(@Nullable SubResourceResponse redirectConfiguration) {
            this.redirectConfiguration = redirectConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleSet(@Nullable SubResourceResponse rewriteRuleSet) {
            this.rewriteRuleSet = rewriteRuleSet;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ApplicationGatewayPathRuleResponse build() {
            final var o = new ApplicationGatewayPathRuleResponse();
            o.backendAddressPool = backendAddressPool;
            o.backendHttpSettings = backendHttpSettings;
            o.etag = etag;
            o.firewallPolicy = firewallPolicy;
            o.id = id;
            o.name = name;
            o.paths = paths;
            o.provisioningState = provisioningState;
            o.redirectConfiguration = redirectConfiguration;
            o.rewriteRuleSet = rewriteRuleSet;
            o.type = type;
            return o;
        }
    }
}
