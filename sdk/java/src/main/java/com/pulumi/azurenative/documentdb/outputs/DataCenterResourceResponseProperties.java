// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.outputs;

import com.pulumi.azurenative.documentdb.outputs.SeedNodeResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataCenterResourceResponseProperties {
    /**
     * @return A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center. The fragment should be Base64 encoded, and only a subset of keys are allowed.
     * 
     */
    private @Nullable String base64EncodedCassandraYamlFragment;
    /**
     * @return The region this data center should be created in.
     * 
     */
    private @Nullable String dataCenterLocation;
    /**
     * @return Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must be in the same region specified in &#39;dataCenterLocation&#39; and must be able to route to the subnet specified in the cluster&#39;s &#39;delegatedManagementSubnetId&#39; property. This resource id will be of the form &#39;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;&#39;.
     * 
     */
    private @Nullable String delegatedSubnetId;
    /**
     * @return The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster.
     * 
     */
    private @Nullable Integer nodeCount;
    /**
     * @return The status of the resource at the time the operation was called.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property on the cluster, which aggregates the seed nodes from all data centers in the cluster.
     * 
     */
    private List<SeedNodeResponse> seedNodes;

    private DataCenterResourceResponseProperties() {}
    /**
     * @return A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center. The fragment should be Base64 encoded, and only a subset of keys are allowed.
     * 
     */
    public Optional<String> base64EncodedCassandraYamlFragment() {
        return Optional.ofNullable(this.base64EncodedCassandraYamlFragment);
    }
    /**
     * @return The region this data center should be created in.
     * 
     */
    public Optional<String> dataCenterLocation() {
        return Optional.ofNullable(this.dataCenterLocation);
    }
    /**
     * @return Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must be in the same region specified in &#39;dataCenterLocation&#39; and must be able to route to the subnet specified in the cluster&#39;s &#39;delegatedManagementSubnetId&#39; property. This resource id will be of the form &#39;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;&#39;.
     * 
     */
    public Optional<String> delegatedSubnetId() {
        return Optional.ofNullable(this.delegatedSubnetId);
    }
    /**
     * @return The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster.
     * 
     */
    public Optional<Integer> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }
    /**
     * @return The status of the resource at the time the operation was called.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property on the cluster, which aggregates the seed nodes from all data centers in the cluster.
     * 
     */
    public List<SeedNodeResponse> seedNodes() {
        return this.seedNodes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataCenterResourceResponseProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String base64EncodedCassandraYamlFragment;
        private @Nullable String dataCenterLocation;
        private @Nullable String delegatedSubnetId;
        private @Nullable Integer nodeCount;
        private @Nullable String provisioningState;
        private List<SeedNodeResponse> seedNodes;
        public Builder() {}
        public Builder(DataCenterResourceResponseProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64EncodedCassandraYamlFragment = defaults.base64EncodedCassandraYamlFragment;
    	      this.dataCenterLocation = defaults.dataCenterLocation;
    	      this.delegatedSubnetId = defaults.delegatedSubnetId;
    	      this.nodeCount = defaults.nodeCount;
    	      this.provisioningState = defaults.provisioningState;
    	      this.seedNodes = defaults.seedNodes;
        }

        @CustomType.Setter
        public Builder base64EncodedCassandraYamlFragment(@Nullable String base64EncodedCassandraYamlFragment) {
            this.base64EncodedCassandraYamlFragment = base64EncodedCassandraYamlFragment;
            return this;
        }
        @CustomType.Setter
        public Builder dataCenterLocation(@Nullable String dataCenterLocation) {
            this.dataCenterLocation = dataCenterLocation;
            return this;
        }
        @CustomType.Setter
        public Builder delegatedSubnetId(@Nullable String delegatedSubnetId) {
            this.delegatedSubnetId = delegatedSubnetId;
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(@Nullable Integer nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder seedNodes(List<SeedNodeResponse> seedNodes) {
            this.seedNodes = Objects.requireNonNull(seedNodes);
            return this;
        }
        public Builder seedNodes(SeedNodeResponse... seedNodes) {
            return seedNodes(List.of(seedNodes));
        }
        public DataCenterResourceResponseProperties build() {
            final var o = new DataCenterResourceResponseProperties();
            o.base64EncodedCassandraYamlFragment = base64EncodedCassandraYamlFragment;
            o.dataCenterLocation = dataCenterLocation;
            o.delegatedSubnetId = delegatedSubnetId;
            o.nodeCount = nodeCount;
            o.provisioningState = provisioningState;
            o.seedNodes = seedNodes;
            return o;
        }
    }
}
