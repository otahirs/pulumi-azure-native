// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.BlobShareResponse;
import com.pulumi.azurenative.datamigration.outputs.FileShareResponse;
import com.pulumi.azurenative.datamigration.outputs.MigrateSqlServerSqlMIDatabaseInputResponse;
import com.pulumi.azurenative.datamigration.outputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ValidateMigrationInputSqlServerSqlMITaskInputResponse {
    /**
     * @return SAS URI of Azure Storage Account Container to be used for storing backup files.
     * 
     */
    private BlobShareResponse backupBlobShare;
    /**
     * @return Backup file share information for all selected databases.
     * 
     */
    private @Nullable FileShareResponse backupFileShare;
    /**
     * @return Backup Mode to specify whether to use existing backup or create new backup.
     * 
     */
    private @Nullable String backupMode;
    /**
     * @return Databases to migrate
     * 
     */
    private List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases;
    /**
     * @return Logins to migrate
     * 
     */
    private @Nullable List<String> selectedLogins;
    /**
     * @return Information for connecting to source
     * 
     */
    private SqlConnectionInfoResponse sourceConnectionInfo;
    /**
     * @return Information for connecting to target
     * 
     */
    private SqlConnectionInfoResponse targetConnectionInfo;

    private ValidateMigrationInputSqlServerSqlMITaskInputResponse() {}
    /**
     * @return SAS URI of Azure Storage Account Container to be used for storing backup files.
     * 
     */
    public BlobShareResponse backupBlobShare() {
        return this.backupBlobShare;
    }
    /**
     * @return Backup file share information for all selected databases.
     * 
     */
    public Optional<FileShareResponse> backupFileShare() {
        return Optional.ofNullable(this.backupFileShare);
    }
    /**
     * @return Backup Mode to specify whether to use existing backup or create new backup.
     * 
     */
    public Optional<String> backupMode() {
        return Optional.ofNullable(this.backupMode);
    }
    /**
     * @return Databases to migrate
     * 
     */
    public List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases() {
        return this.selectedDatabases;
    }
    /**
     * @return Logins to migrate
     * 
     */
    public List<String> selectedLogins() {
        return this.selectedLogins == null ? List.of() : this.selectedLogins;
    }
    /**
     * @return Information for connecting to source
     * 
     */
    public SqlConnectionInfoResponse sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }
    /**
     * @return Information for connecting to target
     * 
     */
    public SqlConnectionInfoResponse targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ValidateMigrationInputSqlServerSqlMITaskInputResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private BlobShareResponse backupBlobShare;
        private @Nullable FileShareResponse backupFileShare;
        private @Nullable String backupMode;
        private List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases;
        private @Nullable List<String> selectedLogins;
        private SqlConnectionInfoResponse sourceConnectionInfo;
        private SqlConnectionInfoResponse targetConnectionInfo;
        public Builder() {}
        public Builder(ValidateMigrationInputSqlServerSqlMITaskInputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupBlobShare = defaults.backupBlobShare;
    	      this.backupFileShare = defaults.backupFileShare;
    	      this.backupMode = defaults.backupMode;
    	      this.selectedDatabases = defaults.selectedDatabases;
    	      this.selectedLogins = defaults.selectedLogins;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
        }

        @CustomType.Setter
        public Builder backupBlobShare(BlobShareResponse backupBlobShare) {
            this.backupBlobShare = Objects.requireNonNull(backupBlobShare);
            return this;
        }
        @CustomType.Setter
        public Builder backupFileShare(@Nullable FileShareResponse backupFileShare) {
            this.backupFileShare = backupFileShare;
            return this;
        }
        @CustomType.Setter
        public Builder backupMode(@Nullable String backupMode) {
            this.backupMode = backupMode;
            return this;
        }
        @CustomType.Setter
        public Builder selectedDatabases(List<MigrateSqlServerSqlMIDatabaseInputResponse> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }
        public Builder selectedDatabases(MigrateSqlServerSqlMIDatabaseInputResponse... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }
        @CustomType.Setter
        public Builder selectedLogins(@Nullable List<String> selectedLogins) {
            this.selectedLogins = selectedLogins;
            return this;
        }
        public Builder selectedLogins(String... selectedLogins) {
            return selectedLogins(List.of(selectedLogins));
        }
        @CustomType.Setter
        public Builder sourceConnectionInfo(SqlConnectionInfoResponse sourceConnectionInfo) {
            this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo);
            return this;
        }
        @CustomType.Setter
        public Builder targetConnectionInfo(SqlConnectionInfoResponse targetConnectionInfo) {
            this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo);
            return this;
        }
        public ValidateMigrationInputSqlServerSqlMITaskInputResponse build() {
            final var o = new ValidateMigrationInputSqlServerSqlMITaskInputResponse();
            o.backupBlobShare = backupBlobShare;
            o.backupFileShare = backupFileShare;
            o.backupMode = backupMode;
            o.selectedDatabases = selectedDatabases;
            o.selectedLogins = selectedLogins;
            o.sourceConnectionInfo = sourceConnectionInfo;
            o.targetConnectionInfo = targetConnectionInfo;
            return o;
        }
    }
}
