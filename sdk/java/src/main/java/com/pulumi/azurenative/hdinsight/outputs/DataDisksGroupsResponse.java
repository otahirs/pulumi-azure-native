// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataDisksGroupsResponse {
    /**
     * @return ReadOnly. The DiskSize in GB. Do not set this value.
     * 
     */
    private Integer diskSizeGB;
    /**
     * @return The number of disks per node.
     * 
     */
    private @Nullable Integer disksPerNode;
    /**
     * @return ReadOnly. The storage account type. Do not set this value.
     * 
     */
    private String storageAccountType;

    private DataDisksGroupsResponse() {}
    /**
     * @return ReadOnly. The DiskSize in GB. Do not set this value.
     * 
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }
    /**
     * @return The number of disks per node.
     * 
     */
    public Optional<Integer> disksPerNode() {
        return Optional.ofNullable(this.disksPerNode);
    }
    /**
     * @return ReadOnly. The storage account type. Do not set this value.
     * 
     */
    public String storageAccountType() {
        return this.storageAccountType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDisksGroupsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer diskSizeGB;
        private @Nullable Integer disksPerNode;
        private String storageAccountType;
        public Builder() {}
        public Builder(DataDisksGroupsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.disksPerNode = defaults.disksPerNode;
    	      this.storageAccountType = defaults.storageAccountType;
        }

        @CustomType.Setter
        public Builder diskSizeGB(Integer diskSizeGB) {
            this.diskSizeGB = Objects.requireNonNull(diskSizeGB);
            return this;
        }
        @CustomType.Setter
        public Builder disksPerNode(@Nullable Integer disksPerNode) {
            this.disksPerNode = disksPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountType(String storageAccountType) {
            this.storageAccountType = Objects.requireNonNull(storageAccountType);
            return this;
        }
        public DataDisksGroupsResponse build() {
            final var o = new DataDisksGroupsResponse();
            o.diskSizeGB = diskSizeGB;
            o.disksPerNode = disksPerNode;
            o.storageAccountType = storageAccountType;
            return o;
        }
    }
}
