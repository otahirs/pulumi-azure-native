// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.GitHubClientSecretResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FactoryGitHubConfigurationResponse {
    /**
     * @return Account name.
     * 
     */
    private String accountName;
    /**
     * @return GitHub bring your own app client id.
     * 
     */
    private @Nullable String clientId;
    /**
     * @return GitHub bring your own app client secret information.
     * 
     */
    private @Nullable GitHubClientSecretResponse clientSecret;
    /**
     * @return Collaboration branch.
     * 
     */
    private String collaborationBranch;
    /**
     * @return GitHub Enterprise host name. For example: `https://github.mydomain.com`
     * 
     */
    private @Nullable String hostName;
    /**
     * @return Last commit id.
     * 
     */
    private @Nullable String lastCommitId;
    /**
     * @return Repository name.
     * 
     */
    private String repositoryName;
    /**
     * @return Root folder.
     * 
     */
    private String rootFolder;
    /**
     * @return Type of repo configuration.
     * Expected value is &#39;FactoryGitHubConfiguration&#39;.
     * 
     */
    private String type;

    private FactoryGitHubConfigurationResponse() {}
    /**
     * @return Account name.
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return GitHub bring your own app client id.
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return GitHub bring your own app client secret information.
     * 
     */
    public Optional<GitHubClientSecretResponse> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return Collaboration branch.
     * 
     */
    public String collaborationBranch() {
        return this.collaborationBranch;
    }
    /**
     * @return GitHub Enterprise host name. For example: `https://github.mydomain.com`
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * @return Last commit id.
     * 
     */
    public Optional<String> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }
    /**
     * @return Repository name.
     * 
     */
    public String repositoryName() {
        return this.repositoryName;
    }
    /**
     * @return Root folder.
     * 
     */
    public String rootFolder() {
        return this.rootFolder;
    }
    /**
     * @return Type of repo configuration.
     * Expected value is &#39;FactoryGitHubConfiguration&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FactoryGitHubConfigurationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountName;
        private @Nullable String clientId;
        private @Nullable GitHubClientSecretResponse clientSecret;
        private String collaborationBranch;
        private @Nullable String hostName;
        private @Nullable String lastCommitId;
        private String repositoryName;
        private String rootFolder;
        private String type;
        public Builder() {}
        public Builder(FactoryGitHubConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.collaborationBranch = defaults.collaborationBranch;
    	      this.hostName = defaults.hostName;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.repositoryName = defaults.repositoryName;
    	      this.rootFolder = defaults.rootFolder;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable GitHubClientSecretResponse clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder collaborationBranch(String collaborationBranch) {
            this.collaborationBranch = Objects.requireNonNull(collaborationBranch);
            return this;
        }
        @CustomType.Setter
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(@Nullable String lastCommitId) {
            this.lastCommitId = lastCommitId;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            this.repositoryName = Objects.requireNonNull(repositoryName);
            return this;
        }
        @CustomType.Setter
        public Builder rootFolder(String rootFolder) {
            this.rootFolder = Objects.requireNonNull(rootFolder);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public FactoryGitHubConfigurationResponse build() {
            final var o = new FactoryGitHubConfigurationResponse();
            o.accountName = accountName;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.collaborationBranch = collaborationBranch;
            o.hostName = hostName;
            o.lastCommitId = lastCommitId;
            o.repositoryName = repositoryName;
            o.rootFolder = rootFolder;
            o.type = type;
            return o;
        }
    }
}
