// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AutoBackupSettingsResponse {
    /**
     * @return Backup schedule type.
     * 
     */
    private @Nullable String backupScheduleType;
    /**
     * @return Include or exclude system databases from auto backup.
     * 
     */
    private @Nullable Boolean backupSystemDbs;
    /**
     * @return Enable or disable autobackup on SQL virtual machine.
     * 
     */
    private @Nullable Boolean enable;
    /**
     * @return Enable or disable encryption for backup on SQL virtual machine.
     * 
     */
    private @Nullable Boolean enableEncryption;
    /**
     * @return Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
     * 
     */
    private @Nullable String fullBackupFrequency;
    /**
     * @return Start time of a given day during which full backups can take place. 0-23 hours.
     * 
     */
    private @Nullable Integer fullBackupStartTime;
    /**
     * @return Duration of the time window of a given day during which full backups can take place. 1-23 hours.
     * 
     */
    private @Nullable Integer fullBackupWindowHours;
    /**
     * @return Frequency of log backups. 5-60 minutes.
     * 
     */
    private @Nullable Integer logBackupFrequency;
    /**
     * @return Retention period of backup: 1-30 days.
     * 
     */
    private @Nullable Integer retentionPeriod;
    /**
     * @return Storage account url where backup will be taken to.
     * 
     */
    private @Nullable String storageAccountUrl;

    private AutoBackupSettingsResponse() {}
    /**
     * @return Backup schedule type.
     * 
     */
    public Optional<String> backupScheduleType() {
        return Optional.ofNullable(this.backupScheduleType);
    }
    /**
     * @return Include or exclude system databases from auto backup.
     * 
     */
    public Optional<Boolean> backupSystemDbs() {
        return Optional.ofNullable(this.backupSystemDbs);
    }
    /**
     * @return Enable or disable autobackup on SQL virtual machine.
     * 
     */
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }
    /**
     * @return Enable or disable encryption for backup on SQL virtual machine.
     * 
     */
    public Optional<Boolean> enableEncryption() {
        return Optional.ofNullable(this.enableEncryption);
    }
    /**
     * @return Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
     * 
     */
    public Optional<String> fullBackupFrequency() {
        return Optional.ofNullable(this.fullBackupFrequency);
    }
    /**
     * @return Start time of a given day during which full backups can take place. 0-23 hours.
     * 
     */
    public Optional<Integer> fullBackupStartTime() {
        return Optional.ofNullable(this.fullBackupStartTime);
    }
    /**
     * @return Duration of the time window of a given day during which full backups can take place. 1-23 hours.
     * 
     */
    public Optional<Integer> fullBackupWindowHours() {
        return Optional.ofNullable(this.fullBackupWindowHours);
    }
    /**
     * @return Frequency of log backups. 5-60 minutes.
     * 
     */
    public Optional<Integer> logBackupFrequency() {
        return Optional.ofNullable(this.logBackupFrequency);
    }
    /**
     * @return Retention period of backup: 1-30 days.
     * 
     */
    public Optional<Integer> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }
    /**
     * @return Storage account url where backup will be taken to.
     * 
     */
    public Optional<String> storageAccountUrl() {
        return Optional.ofNullable(this.storageAccountUrl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoBackupSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String backupScheduleType;
        private @Nullable Boolean backupSystemDbs;
        private @Nullable Boolean enable;
        private @Nullable Boolean enableEncryption;
        private @Nullable String fullBackupFrequency;
        private @Nullable Integer fullBackupStartTime;
        private @Nullable Integer fullBackupWindowHours;
        private @Nullable Integer logBackupFrequency;
        private @Nullable Integer retentionPeriod;
        private @Nullable String storageAccountUrl;
        public Builder() {}
        public Builder(AutoBackupSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupScheduleType = defaults.backupScheduleType;
    	      this.backupSystemDbs = defaults.backupSystemDbs;
    	      this.enable = defaults.enable;
    	      this.enableEncryption = defaults.enableEncryption;
    	      this.fullBackupFrequency = defaults.fullBackupFrequency;
    	      this.fullBackupStartTime = defaults.fullBackupStartTime;
    	      this.fullBackupWindowHours = defaults.fullBackupWindowHours;
    	      this.logBackupFrequency = defaults.logBackupFrequency;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.storageAccountUrl = defaults.storageAccountUrl;
        }

        @CustomType.Setter
        public Builder backupScheduleType(@Nullable String backupScheduleType) {
            this.backupScheduleType = backupScheduleType;
            return this;
        }
        @CustomType.Setter
        public Builder backupSystemDbs(@Nullable Boolean backupSystemDbs) {
            this.backupSystemDbs = backupSystemDbs;
            return this;
        }
        @CustomType.Setter
        public Builder enable(@Nullable Boolean enable) {
            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder enableEncryption(@Nullable Boolean enableEncryption) {
            this.enableEncryption = enableEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder fullBackupFrequency(@Nullable String fullBackupFrequency) {
            this.fullBackupFrequency = fullBackupFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder fullBackupStartTime(@Nullable Integer fullBackupStartTime) {
            this.fullBackupStartTime = fullBackupStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder fullBackupWindowHours(@Nullable Integer fullBackupWindowHours) {
            this.fullBackupWindowHours = fullBackupWindowHours;
            return this;
        }
        @CustomType.Setter
        public Builder logBackupFrequency(@Nullable Integer logBackupFrequency) {
            this.logBackupFrequency = logBackupFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriod(@Nullable Integer retentionPeriod) {
            this.retentionPeriod = retentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountUrl(@Nullable String storageAccountUrl) {
            this.storageAccountUrl = storageAccountUrl;
            return this;
        }
        public AutoBackupSettingsResponse build() {
            final var o = new AutoBackupSettingsResponse();
            o.backupScheduleType = backupScheduleType;
            o.backupSystemDbs = backupSystemDbs;
            o.enable = enable;
            o.enableEncryption = enableEncryption;
            o.fullBackupFrequency = fullBackupFrequency;
            o.fullBackupStartTime = fullBackupStartTime;
            o.fullBackupWindowHours = fullBackupWindowHours;
            o.logBackupFrequency = logBackupFrequency;
            o.retentionPeriod = retentionPeriod;
            o.storageAccountUrl = storageAccountUrl;
            return o;
        }
    }
}
