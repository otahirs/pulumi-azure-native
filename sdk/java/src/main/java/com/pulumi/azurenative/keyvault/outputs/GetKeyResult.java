// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.outputs;

import com.pulumi.azurenative.keyvault.outputs.KeyAttributesResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKeyResult {
    /**
     * @return The attributes of the key.
     * 
     */
    private @Nullable KeyAttributesResponse attributes;
    /**
     * @return The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     */
    private @Nullable String curveName;
    /**
     * @return Fully qualified identifier of the key vault resource.
     * 
     */
    private String id;
    private @Nullable List<String> keyOps;
    /**
     * @return The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * 
     */
    private @Nullable Integer keySize;
    /**
     * @return The URI to retrieve the current version of the key.
     * 
     */
    private String keyUri;
    /**
     * @return The URI to retrieve the specific version of the key.
     * 
     */
    private String keyUriWithVersion;
    /**
     * @return The type of the key. For valid values, see JsonWebKeyType.
     * 
     */
    private @Nullable String kty;
    /**
     * @return Azure location of the key vault resource.
     * 
     */
    private String location;
    /**
     * @return Name of the key vault resource.
     * 
     */
    private String name;
    /**
     * @return Tags assigned to the key vault resource.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Resource type of the key vault resource.
     * 
     */
    private String type;

    private GetKeyResult() {}
    /**
     * @return The attributes of the key.
     * 
     */
    public Optional<KeyAttributesResponse> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    /**
     * @return The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     */
    public Optional<String> curveName() {
        return Optional.ofNullable(this.curveName);
    }
    /**
     * @return Fully qualified identifier of the key vault resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> keyOps() {
        return this.keyOps == null ? List.of() : this.keyOps;
    }
    /**
     * @return The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * 
     */
    public Optional<Integer> keySize() {
        return Optional.ofNullable(this.keySize);
    }
    /**
     * @return The URI to retrieve the current version of the key.
     * 
     */
    public String keyUri() {
        return this.keyUri;
    }
    /**
     * @return The URI to retrieve the specific version of the key.
     * 
     */
    public String keyUriWithVersion() {
        return this.keyUriWithVersion;
    }
    /**
     * @return The type of the key. For valid values, see JsonWebKeyType.
     * 
     */
    public Optional<String> kty() {
        return Optional.ofNullable(this.kty);
    }
    /**
     * @return Azure location of the key vault resource.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Name of the key vault resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Tags assigned to the key vault resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Resource type of the key vault resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable KeyAttributesResponse attributes;
        private @Nullable String curveName;
        private String id;
        private @Nullable List<String> keyOps;
        private @Nullable Integer keySize;
        private String keyUri;
        private String keyUriWithVersion;
        private @Nullable String kty;
        private String location;
        private String name;
        private Map<String,String> tags;
        private String type;
        public Builder() {}
        public Builder(GetKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.curveName = defaults.curveName;
    	      this.id = defaults.id;
    	      this.keyOps = defaults.keyOps;
    	      this.keySize = defaults.keySize;
    	      this.keyUri = defaults.keyUri;
    	      this.keyUriWithVersion = defaults.keyUriWithVersion;
    	      this.kty = defaults.kty;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder attributes(@Nullable KeyAttributesResponse attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder curveName(@Nullable String curveName) {
            this.curveName = curveName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder keyOps(@Nullable List<String> keyOps) {
            this.keyOps = keyOps;
            return this;
        }
        public Builder keyOps(String... keyOps) {
            return keyOps(List.of(keyOps));
        }
        @CustomType.Setter
        public Builder keySize(@Nullable Integer keySize) {
            this.keySize = keySize;
            return this;
        }
        @CustomType.Setter
        public Builder keyUri(String keyUri) {
            this.keyUri = Objects.requireNonNull(keyUri);
            return this;
        }
        @CustomType.Setter
        public Builder keyUriWithVersion(String keyUriWithVersion) {
            this.keyUriWithVersion = Objects.requireNonNull(keyUriWithVersion);
            return this;
        }
        @CustomType.Setter
        public Builder kty(@Nullable String kty) {
            this.kty = kty;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetKeyResult build() {
            final var o = new GetKeyResult();
            o.attributes = attributes;
            o.curveName = curveName;
            o.id = id;
            o.keyOps = keyOps;
            o.keySize = keySize;
            o.keyUri = keyUri;
            o.keyUriWithVersion = keyUriWithVersion;
            o.kty = kty;
            o.location = location;
            o.name = name;
            o.tags = tags;
            o.type = type;
            return o;
        }
    }
}
