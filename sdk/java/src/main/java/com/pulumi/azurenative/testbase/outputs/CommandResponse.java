// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CommandResponse {
    /**
     * @return The action of the command.
     * 
     */
    private String action;
    /**
     * @return Specifies whether to run the command even if a previous command is failed.
     * 
     */
    private @Nullable Boolean alwaysRun;
    /**
     * @return Specifies whether to apply update before the command.
     * 
     */
    private @Nullable Boolean applyUpdateBefore;
    /**
     * @return The content of the command. The content depends on source type.
     * 
     */
    private String content;
    /**
     * @return The type of command content.
     * 
     */
    private String contentType;
    /**
     * @return Specifies the max run time of the command.
     * 
     */
    private @Nullable Integer maxRunTime;
    /**
     * @return The name of the command.
     * 
     */
    private String name;
    /**
     * @return Specifies whether to restart the VM after the command executed.
     * 
     */
    private @Nullable Boolean restartAfter;
    /**
     * @return Specifies whether to run the command in interactive mode.
     * 
     */
    private @Nullable Boolean runAsInteractive;
    /**
     * @return Specifies whether to run the command as administrator.
     * 
     */
    private @Nullable Boolean runElevated;

    private CommandResponse() {}
    /**
     * @return The action of the command.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Specifies whether to run the command even if a previous command is failed.
     * 
     */
    public Optional<Boolean> alwaysRun() {
        return Optional.ofNullable(this.alwaysRun);
    }
    /**
     * @return Specifies whether to apply update before the command.
     * 
     */
    public Optional<Boolean> applyUpdateBefore() {
        return Optional.ofNullable(this.applyUpdateBefore);
    }
    /**
     * @return The content of the command. The content depends on source type.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The type of command content.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return Specifies the max run time of the command.
     * 
     */
    public Optional<Integer> maxRunTime() {
        return Optional.ofNullable(this.maxRunTime);
    }
    /**
     * @return The name of the command.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies whether to restart the VM after the command executed.
     * 
     */
    public Optional<Boolean> restartAfter() {
        return Optional.ofNullable(this.restartAfter);
    }
    /**
     * @return Specifies whether to run the command in interactive mode.
     * 
     */
    public Optional<Boolean> runAsInteractive() {
        return Optional.ofNullable(this.runAsInteractive);
    }
    /**
     * @return Specifies whether to run the command as administrator.
     * 
     */
    public Optional<Boolean> runElevated() {
        return Optional.ofNullable(this.runElevated);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommandResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable Boolean alwaysRun;
        private @Nullable Boolean applyUpdateBefore;
        private String content;
        private String contentType;
        private @Nullable Integer maxRunTime;
        private String name;
        private @Nullable Boolean restartAfter;
        private @Nullable Boolean runAsInteractive;
        private @Nullable Boolean runElevated;
        public Builder() {}
        public Builder(CommandResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.alwaysRun = defaults.alwaysRun;
    	      this.applyUpdateBefore = defaults.applyUpdateBefore;
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.maxRunTime = defaults.maxRunTime;
    	      this.name = defaults.name;
    	      this.restartAfter = defaults.restartAfter;
    	      this.runAsInteractive = defaults.runAsInteractive;
    	      this.runElevated = defaults.runElevated;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder alwaysRun(@Nullable Boolean alwaysRun) {
            this.alwaysRun = alwaysRun;
            return this;
        }
        @CustomType.Setter
        public Builder applyUpdateBefore(@Nullable Boolean applyUpdateBefore) {
            this.applyUpdateBefore = applyUpdateBefore;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        @CustomType.Setter
        public Builder maxRunTime(@Nullable Integer maxRunTime) {
            this.maxRunTime = maxRunTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder restartAfter(@Nullable Boolean restartAfter) {
            this.restartAfter = restartAfter;
            return this;
        }
        @CustomType.Setter
        public Builder runAsInteractive(@Nullable Boolean runAsInteractive) {
            this.runAsInteractive = runAsInteractive;
            return this;
        }
        @CustomType.Setter
        public Builder runElevated(@Nullable Boolean runElevated) {
            this.runElevated = runElevated;
            return this;
        }
        public CommandResponse build() {
            final var o = new CommandResponse();
            o.action = action;
            o.alwaysRun = alwaysRun;
            o.applyUpdateBefore = applyUpdateBefore;
            o.content = content;
            o.contentType = contentType;
            o.maxRunTime = maxRunTime;
            o.name = name;
            o.restartAfter = restartAfter;
            o.runAsInteractive = runAsInteractive;
            o.runElevated = runElevated;
            return o;
        }
    }
}
