// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.outputs;

import com.pulumi.azurenative.containerinstance.outputs.ContainerGroupDiagnosticsResponse;
import com.pulumi.azurenative.containerinstance.outputs.ContainerGroupIdentityResponse;
import com.pulumi.azurenative.containerinstance.outputs.ContainerGroupNetworkProfileResponse;
import com.pulumi.azurenative.containerinstance.outputs.ContainerGroupResponseInstanceView;
import com.pulumi.azurenative.containerinstance.outputs.ContainerResponse;
import com.pulumi.azurenative.containerinstance.outputs.DnsConfigurationResponse;
import com.pulumi.azurenative.containerinstance.outputs.EncryptionPropertiesResponse;
import com.pulumi.azurenative.containerinstance.outputs.ImageRegistryCredentialResponse;
import com.pulumi.azurenative.containerinstance.outputs.InitContainerDefinitionResponse;
import com.pulumi.azurenative.containerinstance.outputs.IpAddressResponse;
import com.pulumi.azurenative.containerinstance.outputs.VolumeResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerGroupResult {
    /**
     * @return The containers within the container group.
     * 
     */
    private List<ContainerResponse> containers;
    /**
     * @return The diagnostic information for a container group.
     * 
     */
    private @Nullable ContainerGroupDiagnosticsResponse diagnostics;
    /**
     * @return The DNS config information for a container group.
     * 
     */
    private @Nullable DnsConfigurationResponse dnsConfig;
    /**
     * @return The encryption properties for a container group.
     * 
     */
    private @Nullable EncryptionPropertiesResponse encryptionProperties;
    /**
     * @return The resource id.
     * 
     */
    private String id;
    /**
     * @return The identity of the container group, if configured.
     * 
     */
    private @Nullable ContainerGroupIdentityResponse identity;
    /**
     * @return The image registry credentials by which the container group is created from.
     * 
     */
    private @Nullable List<ImageRegistryCredentialResponse> imageRegistryCredentials;
    /**
     * @return The init containers for a container group.
     * 
     */
    private @Nullable List<InitContainerDefinitionResponse> initContainers;
    /**
     * @return The instance view of the container group. Only valid in response.
     * 
     */
    private ContainerGroupResponseInstanceView instanceView;
    /**
     * @return The IP address type of the container group.
     * 
     */
    private @Nullable IpAddressResponse ipAddress;
    /**
     * @return The resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return The resource name.
     * 
     */
    private String name;
    /**
     * @return The network profile information for a container group.
     * 
     */
    private @Nullable ContainerGroupNetworkProfileResponse networkProfile;
    /**
     * @return The operating system type required by the containers in the container group.
     * 
     */
    private String osType;
    /**
     * @return The provisioning state of the container group. This only appears in the response.
     * 
     */
    private String provisioningState;
    /**
     * @return Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart
     * 
     */
    private @Nullable String restartPolicy;
    /**
     * @return The SKU for a container group.
     * 
     */
    private @Nullable String sku;
    /**
     * @return The resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The resource type.
     * 
     */
    private String type;
    /**
     * @return The list of volumes that can be mounted by containers in this container group.
     * 
     */
    private @Nullable List<VolumeResponse> volumes;

    private GetContainerGroupResult() {}
    /**
     * @return The containers within the container group.
     * 
     */
    public List<ContainerResponse> containers() {
        return this.containers;
    }
    /**
     * @return The diagnostic information for a container group.
     * 
     */
    public Optional<ContainerGroupDiagnosticsResponse> diagnostics() {
        return Optional.ofNullable(this.diagnostics);
    }
    /**
     * @return The DNS config information for a container group.
     * 
     */
    public Optional<DnsConfigurationResponse> dnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }
    /**
     * @return The encryption properties for a container group.
     * 
     */
    public Optional<EncryptionPropertiesResponse> encryptionProperties() {
        return Optional.ofNullable(this.encryptionProperties);
    }
    /**
     * @return The resource id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The identity of the container group, if configured.
     * 
     */
    public Optional<ContainerGroupIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return The image registry credentials by which the container group is created from.
     * 
     */
    public List<ImageRegistryCredentialResponse> imageRegistryCredentials() {
        return this.imageRegistryCredentials == null ? List.of() : this.imageRegistryCredentials;
    }
    /**
     * @return The init containers for a container group.
     * 
     */
    public List<InitContainerDefinitionResponse> initContainers() {
        return this.initContainers == null ? List.of() : this.initContainers;
    }
    /**
     * @return The instance view of the container group. Only valid in response.
     * 
     */
    public ContainerGroupResponseInstanceView instanceView() {
        return this.instanceView;
    }
    /**
     * @return The IP address type of the container group.
     * 
     */
    public Optional<IpAddressResponse> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return The resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network profile information for a container group.
     * 
     */
    public Optional<ContainerGroupNetworkProfileResponse> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }
    /**
     * @return The operating system type required by the containers in the container group.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return The provisioning state of the container group. This only appears in the response.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart
     * 
     */
    public Optional<String> restartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }
    /**
     * @return The SKU for a container group.
     * 
     */
    public Optional<String> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return The resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The list of volumes that can be mounted by containers in this container group.
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ContainerResponse> containers;
        private @Nullable ContainerGroupDiagnosticsResponse diagnostics;
        private @Nullable DnsConfigurationResponse dnsConfig;
        private @Nullable EncryptionPropertiesResponse encryptionProperties;
        private String id;
        private @Nullable ContainerGroupIdentityResponse identity;
        private @Nullable List<ImageRegistryCredentialResponse> imageRegistryCredentials;
        private @Nullable List<InitContainerDefinitionResponse> initContainers;
        private ContainerGroupResponseInstanceView instanceView;
        private @Nullable IpAddressResponse ipAddress;
        private @Nullable String location;
        private String name;
        private @Nullable ContainerGroupNetworkProfileResponse networkProfile;
        private String osType;
        private String provisioningState;
        private @Nullable String restartPolicy;
        private @Nullable String sku;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable List<VolumeResponse> volumes;
        public Builder() {}
        public Builder(GetContainerGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containers = defaults.containers;
    	      this.diagnostics = defaults.diagnostics;
    	      this.dnsConfig = defaults.dnsConfig;
    	      this.encryptionProperties = defaults.encryptionProperties;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.imageRegistryCredentials = defaults.imageRegistryCredentials;
    	      this.initContainers = defaults.initContainers;
    	      this.instanceView = defaults.instanceView;
    	      this.ipAddress = defaults.ipAddress;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkProfile = defaults.networkProfile;
    	      this.osType = defaults.osType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder containers(List<ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }
        public Builder containers(ContainerResponse... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder diagnostics(@Nullable ContainerGroupDiagnosticsResponse diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfig(@Nullable DnsConfigurationResponse dnsConfig) {
            this.dnsConfig = dnsConfig;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionProperties(@Nullable EncryptionPropertiesResponse encryptionProperties) {
            this.encryptionProperties = encryptionProperties;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable ContainerGroupIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder imageRegistryCredentials(@Nullable List<ImageRegistryCredentialResponse> imageRegistryCredentials) {
            this.imageRegistryCredentials = imageRegistryCredentials;
            return this;
        }
        public Builder imageRegistryCredentials(ImageRegistryCredentialResponse... imageRegistryCredentials) {
            return imageRegistryCredentials(List.of(imageRegistryCredentials));
        }
        @CustomType.Setter
        public Builder initContainers(@Nullable List<InitContainerDefinitionResponse> initContainers) {
            this.initContainers = initContainers;
            return this;
        }
        public Builder initContainers(InitContainerDefinitionResponse... initContainers) {
            return initContainers(List.of(initContainers));
        }
        @CustomType.Setter
        public Builder instanceView(ContainerGroupResponseInstanceView instanceView) {
            this.instanceView = Objects.requireNonNull(instanceView);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable IpAddressResponse ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkProfile(@Nullable ContainerGroupNetworkProfileResponse networkProfile) {
            this.networkProfile = networkProfile;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder restartPolicy(@Nullable String restartPolicy) {
            this.restartPolicy = restartPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable String sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder volumes(@Nullable List<VolumeResponse> volumes) {
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }
        public GetContainerGroupResult build() {
            final var o = new GetContainerGroupResult();
            o.containers = containers;
            o.diagnostics = diagnostics;
            o.dnsConfig = dnsConfig;
            o.encryptionProperties = encryptionProperties;
            o.id = id;
            o.identity = identity;
            o.imageRegistryCredentials = imageRegistryCredentials;
            o.initContainers = initContainers;
            o.instanceView = instanceView;
            o.ipAddress = ipAddress;
            o.location = location;
            o.name = name;
            o.networkProfile = networkProfile;
            o.osType = osType;
            o.provisioningState = provisioningState;
            o.restartPolicy = restartPolicy;
            o.sku = sku;
            o.tags = tags;
            o.type = type;
            o.volumes = volumes;
            return o;
        }
    }
}
