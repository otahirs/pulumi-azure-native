// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple.outputs;

import com.pulumi.azurenative.storsimple.outputs.TargetEligibilityResultResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FailoverTargetResponse {
    /**
     * @return The amount of free local storage available on the device in bytes.
     * 
     */
    private @Nullable Double availableLocalStorageInBytes;
    /**
     * @return The amount of free tiered storage available for the device in bytes.
     * 
     */
    private @Nullable Double availableTieredStorageInBytes;
    /**
     * @return The count of data containers on the device.
     * 
     */
    private @Nullable Integer dataContainersCount;
    /**
     * @return The path ID of the device.
     * 
     */
    private @Nullable String deviceId;
    /**
     * @return The geo location (applicable only for cloud appliances) of the device.
     * 
     */
    private @Nullable String deviceLocation;
    /**
     * @return The software version of the device.
     * 
     */
    private @Nullable String deviceSoftwareVersion;
    /**
     * @return The status of the device.
     * 
     */
    private @Nullable String deviceStatus;
    /**
     * @return The eligibility result of the device, as a failover target device.
     * 
     */
    private @Nullable TargetEligibilityResultResponse eligibilityResult;
    /**
     * @return The friendly name for the current version of software on the device.
     * 
     */
    private @Nullable String friendlyDeviceSoftwareVersion;
    /**
     * @return The model number of the device.
     * 
     */
    private @Nullable String modelDescription;
    /**
     * @return The count of volumes on the device.
     * 
     */
    private @Nullable Integer volumesCount;

    private FailoverTargetResponse() {}
    /**
     * @return The amount of free local storage available on the device in bytes.
     * 
     */
    public Optional<Double> availableLocalStorageInBytes() {
        return Optional.ofNullable(this.availableLocalStorageInBytes);
    }
    /**
     * @return The amount of free tiered storage available for the device in bytes.
     * 
     */
    public Optional<Double> availableTieredStorageInBytes() {
        return Optional.ofNullable(this.availableTieredStorageInBytes);
    }
    /**
     * @return The count of data containers on the device.
     * 
     */
    public Optional<Integer> dataContainersCount() {
        return Optional.ofNullable(this.dataContainersCount);
    }
    /**
     * @return The path ID of the device.
     * 
     */
    public Optional<String> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }
    /**
     * @return The geo location (applicable only for cloud appliances) of the device.
     * 
     */
    public Optional<String> deviceLocation() {
        return Optional.ofNullable(this.deviceLocation);
    }
    /**
     * @return The software version of the device.
     * 
     */
    public Optional<String> deviceSoftwareVersion() {
        return Optional.ofNullable(this.deviceSoftwareVersion);
    }
    /**
     * @return The status of the device.
     * 
     */
    public Optional<String> deviceStatus() {
        return Optional.ofNullable(this.deviceStatus);
    }
    /**
     * @return The eligibility result of the device, as a failover target device.
     * 
     */
    public Optional<TargetEligibilityResultResponse> eligibilityResult() {
        return Optional.ofNullable(this.eligibilityResult);
    }
    /**
     * @return The friendly name for the current version of software on the device.
     * 
     */
    public Optional<String> friendlyDeviceSoftwareVersion() {
        return Optional.ofNullable(this.friendlyDeviceSoftwareVersion);
    }
    /**
     * @return The model number of the device.
     * 
     */
    public Optional<String> modelDescription() {
        return Optional.ofNullable(this.modelDescription);
    }
    /**
     * @return The count of volumes on the device.
     * 
     */
    public Optional<Integer> volumesCount() {
        return Optional.ofNullable(this.volumesCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FailoverTargetResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double availableLocalStorageInBytes;
        private @Nullable Double availableTieredStorageInBytes;
        private @Nullable Integer dataContainersCount;
        private @Nullable String deviceId;
        private @Nullable String deviceLocation;
        private @Nullable String deviceSoftwareVersion;
        private @Nullable String deviceStatus;
        private @Nullable TargetEligibilityResultResponse eligibilityResult;
        private @Nullable String friendlyDeviceSoftwareVersion;
        private @Nullable String modelDescription;
        private @Nullable Integer volumesCount;
        public Builder() {}
        public Builder(FailoverTargetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableLocalStorageInBytes = defaults.availableLocalStorageInBytes;
    	      this.availableTieredStorageInBytes = defaults.availableTieredStorageInBytes;
    	      this.dataContainersCount = defaults.dataContainersCount;
    	      this.deviceId = defaults.deviceId;
    	      this.deviceLocation = defaults.deviceLocation;
    	      this.deviceSoftwareVersion = defaults.deviceSoftwareVersion;
    	      this.deviceStatus = defaults.deviceStatus;
    	      this.eligibilityResult = defaults.eligibilityResult;
    	      this.friendlyDeviceSoftwareVersion = defaults.friendlyDeviceSoftwareVersion;
    	      this.modelDescription = defaults.modelDescription;
    	      this.volumesCount = defaults.volumesCount;
        }

        @CustomType.Setter
        public Builder availableLocalStorageInBytes(@Nullable Double availableLocalStorageInBytes) {
            this.availableLocalStorageInBytes = availableLocalStorageInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder availableTieredStorageInBytes(@Nullable Double availableTieredStorageInBytes) {
            this.availableTieredStorageInBytes = availableTieredStorageInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder dataContainersCount(@Nullable Integer dataContainersCount) {
            this.dataContainersCount = dataContainersCount;
            return this;
        }
        @CustomType.Setter
        public Builder deviceId(@Nullable String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        @CustomType.Setter
        public Builder deviceLocation(@Nullable String deviceLocation) {
            this.deviceLocation = deviceLocation;
            return this;
        }
        @CustomType.Setter
        public Builder deviceSoftwareVersion(@Nullable String deviceSoftwareVersion) {
            this.deviceSoftwareVersion = deviceSoftwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder deviceStatus(@Nullable String deviceStatus) {
            this.deviceStatus = deviceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder eligibilityResult(@Nullable TargetEligibilityResultResponse eligibilityResult) {
            this.eligibilityResult = eligibilityResult;
            return this;
        }
        @CustomType.Setter
        public Builder friendlyDeviceSoftwareVersion(@Nullable String friendlyDeviceSoftwareVersion) {
            this.friendlyDeviceSoftwareVersion = friendlyDeviceSoftwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder modelDescription(@Nullable String modelDescription) {
            this.modelDescription = modelDescription;
            return this;
        }
        @CustomType.Setter
        public Builder volumesCount(@Nullable Integer volumesCount) {
            this.volumesCount = volumesCount;
            return this;
        }
        public FailoverTargetResponse build() {
            final var o = new FailoverTargetResponse();
            o.availableLocalStorageInBytes = availableLocalStorageInBytes;
            o.availableTieredStorageInBytes = availableTieredStorageInBytes;
            o.dataContainersCount = dataContainersCount;
            o.deviceId = deviceId;
            o.deviceLocation = deviceLocation;
            o.deviceSoftwareVersion = deviceSoftwareVersion;
            o.deviceStatus = deviceStatus;
            o.eligibilityResult = eligibilityResult;
            o.friendlyDeviceSoftwareVersion = friendlyDeviceSoftwareVersion;
            o.modelDescription = modelDescription;
            o.volumesCount = volumesCount;
            return o;
        }
    }
}
