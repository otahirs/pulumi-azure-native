// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesEngineMatchConditionResponse {
    /**
     * @return Describes if this is negate condition or not
     * 
     */
    private @Nullable Boolean negateCondition;
    /**
     * @return Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     * 
     */
    private List<String> rulesEngineMatchValue;
    /**
     * @return Match Variable
     * 
     */
    private String rulesEngineMatchVariable;
    /**
     * @return Describes operator to apply to the match condition.
     * 
     */
    private String rulesEngineOperator;
    /**
     * @return Name of selector in RequestHeader or RequestBody to be matched
     * 
     */
    private @Nullable String selector;
    /**
     * @return List of transforms
     * 
     */
    private @Nullable List<String> transforms;

    private RulesEngineMatchConditionResponse() {}
    /**
     * @return Describes if this is negate condition or not
     * 
     */
    public Optional<Boolean> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }
    /**
     * @return Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     * 
     */
    public List<String> rulesEngineMatchValue() {
        return this.rulesEngineMatchValue;
    }
    /**
     * @return Match Variable
     * 
     */
    public String rulesEngineMatchVariable() {
        return this.rulesEngineMatchVariable;
    }
    /**
     * @return Describes operator to apply to the match condition.
     * 
     */
    public String rulesEngineOperator() {
        return this.rulesEngineOperator;
    }
    /**
     * @return Name of selector in RequestHeader or RequestBody to be matched
     * 
     */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }
    /**
     * @return List of transforms
     * 
     */
    public List<String> transforms() {
        return this.transforms == null ? List.of() : this.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesEngineMatchConditionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean negateCondition;
        private List<String> rulesEngineMatchValue;
        private String rulesEngineMatchVariable;
        private String rulesEngineOperator;
        private @Nullable String selector;
        private @Nullable List<String> transforms;
        public Builder() {}
        public Builder(RulesEngineMatchConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.negateCondition = defaults.negateCondition;
    	      this.rulesEngineMatchValue = defaults.rulesEngineMatchValue;
    	      this.rulesEngineMatchVariable = defaults.rulesEngineMatchVariable;
    	      this.rulesEngineOperator = defaults.rulesEngineOperator;
    	      this.selector = defaults.selector;
    	      this.transforms = defaults.transforms;
        }

        @CustomType.Setter
        public Builder negateCondition(@Nullable Boolean negateCondition) {
            this.negateCondition = negateCondition;
            return this;
        }
        @CustomType.Setter
        public Builder rulesEngineMatchValue(List<String> rulesEngineMatchValue) {
            this.rulesEngineMatchValue = Objects.requireNonNull(rulesEngineMatchValue);
            return this;
        }
        public Builder rulesEngineMatchValue(String... rulesEngineMatchValue) {
            return rulesEngineMatchValue(List.of(rulesEngineMatchValue));
        }
        @CustomType.Setter
        public Builder rulesEngineMatchVariable(String rulesEngineMatchVariable) {
            this.rulesEngineMatchVariable = Objects.requireNonNull(rulesEngineMatchVariable);
            return this;
        }
        @CustomType.Setter
        public Builder rulesEngineOperator(String rulesEngineOperator) {
            this.rulesEngineOperator = Objects.requireNonNull(rulesEngineOperator);
            return this;
        }
        @CustomType.Setter
        public Builder selector(@Nullable String selector) {
            this.selector = selector;
            return this;
        }
        @CustomType.Setter
        public Builder transforms(@Nullable List<String> transforms) {
            this.transforms = transforms;
            return this;
        }
        public Builder transforms(String... transforms) {
            return transforms(List.of(transforms));
        }
        public RulesEngineMatchConditionResponse build() {
            final var o = new RulesEngineMatchConditionResponse();
            o.negateCondition = negateCondition;
            o.rulesEngineMatchValue = rulesEngineMatchValue;
            o.rulesEngineMatchVariable = rulesEngineMatchVariable;
            o.rulesEngineOperator = rulesEngineOperator;
            o.selector = selector;
            o.transforms = transforms;
            return o;
        }
    }
}
