// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessReviewScopeResponse {
    /**
     * @return The role assignment state eligible/active to review
     * 
     */
    private String assignmentState;
    /**
     * @return This is used to indicate the resource id(s) to exclude
     * 
     */
    private @Nullable String excludeResourceId;
    /**
     * @return This is used to indicate the role definition id(s) to exclude
     * 
     */
    private @Nullable String excludeRoleDefinitionId;
    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    private @Nullable Boolean expandNestedMemberships;
    /**
     * @return Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
     * 
     */
    private @Nullable String inactiveDuration;
    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    private @Nullable Boolean includeAccessBelowResource;
    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    private @Nullable Boolean includeInheritedAccess;
    /**
     * @return The identity type user/servicePrincipal to review
     * 
     */
    private String principalType;
    /**
     * @return ResourceId in which this review is getting created
     * 
     */
    private String resourceId;
    /**
     * @return This is used to indicate the role being reviewed
     * 
     */
    private String roleDefinitionId;

    private AccessReviewScopeResponse() {}
    /**
     * @return The role assignment state eligible/active to review
     * 
     */
    public String assignmentState() {
        return this.assignmentState;
    }
    /**
     * @return This is used to indicate the resource id(s) to exclude
     * 
     */
    public Optional<String> excludeResourceId() {
        return Optional.ofNullable(this.excludeResourceId);
    }
    /**
     * @return This is used to indicate the role definition id(s) to exclude
     * 
     */
    public Optional<String> excludeRoleDefinitionId() {
        return Optional.ofNullable(this.excludeRoleDefinitionId);
    }
    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    public Optional<Boolean> expandNestedMemberships() {
        return Optional.ofNullable(this.expandNestedMemberships);
    }
    /**
     * @return Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
     * 
     */
    public Optional<String> inactiveDuration() {
        return Optional.ofNullable(this.inactiveDuration);
    }
    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    public Optional<Boolean> includeAccessBelowResource() {
        return Optional.ofNullable(this.includeAccessBelowResource);
    }
    /**
     * @return Flag to indicate whether to expand nested memberships or not.
     * 
     */
    public Optional<Boolean> includeInheritedAccess() {
        return Optional.ofNullable(this.includeInheritedAccess);
    }
    /**
     * @return The identity type user/servicePrincipal to review
     * 
     */
    public String principalType() {
        return this.principalType;
    }
    /**
     * @return ResourceId in which this review is getting created
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return This is used to indicate the role being reviewed
     * 
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessReviewScopeResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assignmentState;
        private @Nullable String excludeResourceId;
        private @Nullable String excludeRoleDefinitionId;
        private @Nullable Boolean expandNestedMemberships;
        private @Nullable String inactiveDuration;
        private @Nullable Boolean includeAccessBelowResource;
        private @Nullable Boolean includeInheritedAccess;
        private String principalType;
        private String resourceId;
        private String roleDefinitionId;
        public Builder() {}
        public Builder(AccessReviewScopeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignmentState = defaults.assignmentState;
    	      this.excludeResourceId = defaults.excludeResourceId;
    	      this.excludeRoleDefinitionId = defaults.excludeRoleDefinitionId;
    	      this.expandNestedMemberships = defaults.expandNestedMemberships;
    	      this.inactiveDuration = defaults.inactiveDuration;
    	      this.includeAccessBelowResource = defaults.includeAccessBelowResource;
    	      this.includeInheritedAccess = defaults.includeInheritedAccess;
    	      this.principalType = defaults.principalType;
    	      this.resourceId = defaults.resourceId;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
        }

        @CustomType.Setter
        public Builder assignmentState(String assignmentState) {
            this.assignmentState = Objects.requireNonNull(assignmentState);
            return this;
        }
        @CustomType.Setter
        public Builder excludeResourceId(@Nullable String excludeResourceId) {
            this.excludeResourceId = excludeResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder excludeRoleDefinitionId(@Nullable String excludeRoleDefinitionId) {
            this.excludeRoleDefinitionId = excludeRoleDefinitionId;
            return this;
        }
        @CustomType.Setter
        public Builder expandNestedMemberships(@Nullable Boolean expandNestedMemberships) {
            this.expandNestedMemberships = expandNestedMemberships;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveDuration(@Nullable String inactiveDuration) {
            this.inactiveDuration = inactiveDuration;
            return this;
        }
        @CustomType.Setter
        public Builder includeAccessBelowResource(@Nullable Boolean includeAccessBelowResource) {
            this.includeAccessBelowResource = includeAccessBelowResource;
            return this;
        }
        @CustomType.Setter
        public Builder includeInheritedAccess(@Nullable Boolean includeInheritedAccess) {
            this.includeInheritedAccess = includeInheritedAccess;
            return this;
        }
        @CustomType.Setter
        public Builder principalType(String principalType) {
            this.principalType = Objects.requireNonNull(principalType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            this.resourceId = Objects.requireNonNull(resourceId);
            return this;
        }
        @CustomType.Setter
        public Builder roleDefinitionId(String roleDefinitionId) {
            this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId);
            return this;
        }
        public AccessReviewScopeResponse build() {
            final var o = new AccessReviewScopeResponse();
            o.assignmentState = assignmentState;
            o.excludeResourceId = excludeResourceId;
            o.excludeRoleDefinitionId = excludeRoleDefinitionId;
            o.expandNestedMemberships = expandNestedMemberships;
            o.inactiveDuration = inactiveDuration;
            o.includeAccessBelowResource = includeAccessBelowResource;
            o.includeInheritedAccess = includeInheritedAccess;
            o.principalType = principalType;
            o.resourceId = resourceId;
            o.roleDefinitionId = roleDefinitionId;
            return o;
        }
    }
}
