// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.workloads.outputs;

import com.pulumi.azurenative.workloads.outputs.SAPVirtualInstanceErrorResponse;
import com.pulumi.azurenative.workloads.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetSAPApplicationServerInstanceResult {
    /**
     * @return Defines the Application Instance errors.
     * 
     */
    private SAPVirtualInstanceErrorResponse errors;
    /**
     * @return The application server gateway Port.
     * 
     */
    private Double gatewayPort;
    /**
     * @return Defines the SAP Instance health.
     * 
     */
    private String health;
    /**
     * @return The application server SAP host name.
     * 
     */
    private String hostname;
    /**
     * @return The application server ICM HTTP Port.
     * 
     */
    private Double icmHttpPort;
    /**
     * @return The application server ICM HTTPS Port.
     * 
     */
    private Double icmHttpsPort;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private String id;
    /**
     * @return The application server instance id.
     * 
     */
    private String instanceNo;
    /**
     * @return The application server SAP IP Address.
     * 
     */
    private String ipAddress;
    /**
     * @return The application server SAP kernel patch.
     * 
     */
    private String kernelPatch;
    /**
     * @return The application server SAP kernel version.
     * 
     */
    private String kernelVersion;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private String location;
    /**
     * @return The name of the resource
     * 
     */
    private String name;
    /**
     * @return Defines the provisioning states.
     * 
     */
    private String provisioningState;
    /**
     * @return Defines the SAP Instance status.
     * 
     */
    private String status;
    /**
     * @return The application server subnet.
     * 
     */
    private String subnet;
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    private SystemDataResponse systemData;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private String type;
    /**
     * @return The virtual machine.
     * 
     */
    private String virtualMachineId;

    private GetSAPApplicationServerInstanceResult() {}
    /**
     * @return Defines the Application Instance errors.
     * 
     */
    public SAPVirtualInstanceErrorResponse errors() {
        return this.errors;
    }
    /**
     * @return The application server gateway Port.
     * 
     */
    public Double gatewayPort() {
        return this.gatewayPort;
    }
    /**
     * @return Defines the SAP Instance health.
     * 
     */
    public String health() {
        return this.health;
    }
    /**
     * @return The application server SAP host name.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The application server ICM HTTP Port.
     * 
     */
    public Double icmHttpPort() {
        return this.icmHttpPort;
    }
    /**
     * @return The application server ICM HTTPS Port.
     * 
     */
    public Double icmHttpsPort() {
        return this.icmHttpsPort;
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The application server instance id.
     * 
     */
    public String instanceNo() {
        return this.instanceNo;
    }
    /**
     * @return The application server SAP IP Address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The application server SAP kernel patch.
     * 
     */
    public String kernelPatch() {
        return this.kernelPatch;
    }
    /**
     * @return The application server SAP kernel version.
     * 
     */
    public String kernelVersion() {
        return this.kernelVersion;
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Defines the provisioning states.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Defines the SAP Instance status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The application server subnet.
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The virtual machine.
     * 
     */
    public String virtualMachineId() {
        return this.virtualMachineId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSAPApplicationServerInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private SAPVirtualInstanceErrorResponse errors;
        private Double gatewayPort;
        private String health;
        private String hostname;
        private Double icmHttpPort;
        private Double icmHttpsPort;
        private String id;
        private String instanceNo;
        private String ipAddress;
        private String kernelPatch;
        private String kernelVersion;
        private String location;
        private String name;
        private String provisioningState;
        private String status;
        private String subnet;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private String type;
        private String virtualMachineId;
        public Builder() {}
        public Builder(GetSAPApplicationServerInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.errors = defaults.errors;
    	      this.gatewayPort = defaults.gatewayPort;
    	      this.health = defaults.health;
    	      this.hostname = defaults.hostname;
    	      this.icmHttpPort = defaults.icmHttpPort;
    	      this.icmHttpsPort = defaults.icmHttpsPort;
    	      this.id = defaults.id;
    	      this.instanceNo = defaults.instanceNo;
    	      this.ipAddress = defaults.ipAddress;
    	      this.kernelPatch = defaults.kernelPatch;
    	      this.kernelVersion = defaults.kernelVersion;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.provisioningState = defaults.provisioningState;
    	      this.status = defaults.status;
    	      this.subnet = defaults.subnet;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualMachineId = defaults.virtualMachineId;
        }

        @CustomType.Setter
        public Builder errors(SAPVirtualInstanceErrorResponse errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayPort(Double gatewayPort) {
            this.gatewayPort = Objects.requireNonNull(gatewayPort);
            return this;
        }
        @CustomType.Setter
        public Builder health(String health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder icmHttpPort(Double icmHttpPort) {
            this.icmHttpPort = Objects.requireNonNull(icmHttpPort);
            return this;
        }
        @CustomType.Setter
        public Builder icmHttpsPort(Double icmHttpsPort) {
            this.icmHttpsPort = Objects.requireNonNull(icmHttpsPort);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder instanceNo(String instanceNo) {
            this.instanceNo = Objects.requireNonNull(instanceNo);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder kernelPatch(String kernelPatch) {
            this.kernelPatch = Objects.requireNonNull(kernelPatch);
            return this;
        }
        @CustomType.Setter
        public Builder kernelVersion(String kernelVersion) {
            this.kernelVersion = Objects.requireNonNull(kernelVersion);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        @CustomType.Setter
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualMachineId(String virtualMachineId) {
            this.virtualMachineId = Objects.requireNonNull(virtualMachineId);
            return this;
        }
        public GetSAPApplicationServerInstanceResult build() {
            final var o = new GetSAPApplicationServerInstanceResult();
            o.errors = errors;
            o.gatewayPort = gatewayPort;
            o.health = health;
            o.hostname = hostname;
            o.icmHttpPort = icmHttpPort;
            o.icmHttpsPort = icmHttpsPort;
            o.id = id;
            o.instanceNo = instanceNo;
            o.ipAddress = ipAddress;
            o.kernelPatch = kernelPatch;
            o.kernelVersion = kernelVersion;
            o.location = location;
            o.name = name;
            o.provisioningState = provisioningState;
            o.status = status;
            o.subnet = subnet;
            o.systemData = systemData;
            o.tags = tags;
            o.type = type;
            o.virtualMachineId = virtualMachineId;
            return o;
        }
    }
}
