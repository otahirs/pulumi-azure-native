// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualRouterResult {
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private String etag;
    /**
     * @return The Gateway on which VirtualRouter is hosted.
     * 
     */
    private @Nullable SubResourceResponse hostedGateway;
    /**
     * @return The Subnet on which VirtualRouter is hosted.
     * 
     */
    private @Nullable SubResourceResponse hostedSubnet;
    /**
     * @return Resource ID.
     * 
     */
    private @Nullable String id;
    /**
     * @return Resource location.
     * 
     */
    private @Nullable String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return List of references to VirtualRouterPeerings.
     * 
     */
    private List<SubResourceResponse> peerings;
    /**
     * @return The provisioning state of the resource.
     * 
     */
    private String provisioningState;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return VirtualRouter ASN.
     * 
     */
    private @Nullable Double virtualRouterAsn;
    /**
     * @return VirtualRouter IPs.
     * 
     */
    private @Nullable List<String> virtualRouterIps;

    private GetVirtualRouterResult() {}
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The Gateway on which VirtualRouter is hosted.
     * 
     */
    public Optional<SubResourceResponse> hostedGateway() {
        return Optional.ofNullable(this.hostedGateway);
    }
    /**
     * @return The Subnet on which VirtualRouter is hosted.
     * 
     */
    public Optional<SubResourceResponse> hostedSubnet() {
        return Optional.ofNullable(this.hostedSubnet);
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of references to VirtualRouterPeerings.
     * 
     */
    public List<SubResourceResponse> peerings() {
        return this.peerings;
    }
    /**
     * @return The provisioning state of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return VirtualRouter ASN.
     * 
     */
    public Optional<Double> virtualRouterAsn() {
        return Optional.ofNullable(this.virtualRouterAsn);
    }
    /**
     * @return VirtualRouter IPs.
     * 
     */
    public List<String> virtualRouterIps() {
        return this.virtualRouterIps == null ? List.of() : this.virtualRouterIps;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualRouterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String etag;
        private @Nullable SubResourceResponse hostedGateway;
        private @Nullable SubResourceResponse hostedSubnet;
        private @Nullable String id;
        private @Nullable String location;
        private String name;
        private List<SubResourceResponse> peerings;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable Double virtualRouterAsn;
        private @Nullable List<String> virtualRouterIps;
        public Builder() {}
        public Builder(GetVirtualRouterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etag = defaults.etag;
    	      this.hostedGateway = defaults.hostedGateway;
    	      this.hostedSubnet = defaults.hostedSubnet;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peerings = defaults.peerings;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualRouterAsn = defaults.virtualRouterAsn;
    	      this.virtualRouterIps = defaults.virtualRouterIps;
        }

        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder hostedGateway(@Nullable SubResourceResponse hostedGateway) {
            this.hostedGateway = hostedGateway;
            return this;
        }
        @CustomType.Setter
        public Builder hostedSubnet(@Nullable SubResourceResponse hostedSubnet) {
            this.hostedSubnet = hostedSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peerings(List<SubResourceResponse> peerings) {
            this.peerings = Objects.requireNonNull(peerings);
            return this;
        }
        public Builder peerings(SubResourceResponse... peerings) {
            return peerings(List.of(peerings));
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder virtualRouterAsn(@Nullable Double virtualRouterAsn) {
            this.virtualRouterAsn = virtualRouterAsn;
            return this;
        }
        @CustomType.Setter
        public Builder virtualRouterIps(@Nullable List<String> virtualRouterIps) {
            this.virtualRouterIps = virtualRouterIps;
            return this;
        }
        public Builder virtualRouterIps(String... virtualRouterIps) {
            return virtualRouterIps(List.of(virtualRouterIps));
        }
        public GetVirtualRouterResult build() {
            final var o = new GetVirtualRouterResult();
            o.etag = etag;
            o.hostedGateway = hostedGateway;
            o.hostedSubnet = hostedSubnet;
            o.id = id;
            o.location = location;
            o.name = name;
            o.peerings = peerings;
            o.provisioningState = provisioningState;
            o.tags = tags;
            o.type = type;
            o.virtualRouterAsn = virtualRouterAsn;
            o.virtualRouterIps = virtualRouterIps;
            return o;
        }
    }
}
