// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Managed cluster.
 *
 * ## Example Usage
 * ### Associate Managed Cluster with Capacity Reservation Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         capacityReservationGroupID: "/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/capacityReservationGroups/crg1",
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster using a managed cluster snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableFIPS: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     creationData: {
 *         sourceResourceId: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/managedclustersnapshots/snapshot1",
 *     },
 *     dnsPrefix: "dnsprefix1",
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster using an agent pool snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         creationData: {
 *             sourceResourceId: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1",
 *         },
 *         enableFIPS: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: false,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with AKS-managed NAT gateway as outbound type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: false,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerSku: "standard",
 *         natGatewayProfile: {
 *             managedOutboundIPProfile: {
 *                 count: 2,
 *             },
 *         },
 *         outboundType: "managedNATGateway",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with Azure KeyVault Secrets Provider Addon
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {
 *         azureKeyvaultSecretsProvider: {
 *             config: {
 *                 enableSecretRotation: "true",
 *                 rotationPollInterval: "2m",
 *             },
 *             enabled: true,
 *         },
 *     },
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with CustomCATrustCertificates populated and CustomCATrust enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableCustomCATrust: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     securityProfile: {
 *         customCATrustCertificates: ["ZHVtbXlFeGFtcGxlVGVzdFZhbHVlRm9yQ2VydGlmaWNhdGVUb0JlQWRkZWQ="],
 *     },
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with Dedicated Host Group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         hostGroupID: "/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: false,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with EncryptionAtHost enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableEncryptionAtHost: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with FIPS enabled OS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableFIPS: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: false,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with GPUMIG
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         gpuInstanceProfile: "MIG3g",
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_ND96asr_v4",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     httpProxyConfig: {
 *         httpProxy: "http://myproxy.server.com:8080",
 *         httpsProxy: "https://myproxy.server.com:8080",
 *         noProxy: [
 *             "localhost",
 *             "127.0.0.1",
 *         ],
 *         trustedCa: "Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U=",
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with HTTP proxy configured
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     httpProxyConfig: {
 *         httpProxy: "http://myproxy.server.com:8080",
 *         httpsProxy: "https://myproxy.server.com:8080",
 *         noProxy: [
 *             "localhost",
 *             "127.0.0.1",
 *         ],
 *         trustedCa: "Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U=",
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with Node Public IP Prefix
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         nodePublicIPPrefixID: "/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with OSSKU
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osSKU: "CBLMariner",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     httpProxyConfig: {
 *         httpProxy: "http://myproxy.server.com:8080",
 *         httpsProxy: "https://myproxy.server.com:8080",
 *         noProxy: [
 *             "localhost",
 *             "127.0.0.1",
 *         ],
 *         trustedCa: "Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U=",
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with PPG
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         proximityPlacementGroupID: "/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with PodIdentity enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     podIdentityProfile: {
 *         allowNetworkPluginKubenet: true,
 *         enabled: true,
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with RunCommand disabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableEncryptionAtHost: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     apiServerAccessProfile: {
 *         disableRunCommand: true,
 *     },
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with Security Profile configured
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     dnsPrefix: "dnsprefix1",
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     securityProfile: {
 *         defender: {
 *             logAnalyticsWorkspaceResourceId: "/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME",
 *             securityMonitoring: {
 *                 enabled: true,
 *             },
 *         },
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with UltraSSD enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         enableUltraSSD: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with Web App Routing Ingress Profile configured
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     dnsPrefix: "dnsprefix1",
 *     ingressProfile: {
 *         webAppRouting: {
 *             dnsZoneResourceId: "/subscriptions/SUB_ID/resourceGroups/RG_NAME/providers/Microsoft.Network/dnszones/DNS_ZONE_NAME",
 *             enabled: true,
 *         },
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 * });
 *
 * ```
 * ### Create Managed Cluster with user-assigned NAT gateway as outbound type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableNodePublicIP: false,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerSku: "standard",
 *         outboundType: "userAssignedNATGateway",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Private Cluster with Public FQDN specified
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableEncryptionAtHost: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     apiServerAccessProfile: {
 *         enablePrivateCluster: true,
 *         enablePrivateClusterPublicFQDN: true,
 *     },
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create Managed Private Cluster with fqdn subdomain specified
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         count: 3,
 *         enableEncryptionAtHost: true,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS2_v2",
 *     }],
 *     apiServerAccessProfile: {
 *         enablePrivateCluster: true,
 *         privateDNSZone: "/subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io",
 *     },
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     fqdnSubdomain: "domain1",
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create/Update AAD Managed Cluster with EnableAzureRBAC
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     aadProfile: {
 *         enableAzureRBAC: true,
 *         managed: true,
 *     },
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         availabilityZones: [
 *             "1",
 *             "2",
 *             "3",
 *         ],
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create/Update Managed Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         availabilityZones: [
 *             "1",
 *             "2",
 *             "3",
 *         ],
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         scaleDownMode: "Deallocate",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     autoScalerProfile: {
 *         balanceSimilarNodeGroups: "true",
 *         expander: "priority",
 *         maxNodeProvisionTime: "15m",
 *         newPodScaleUpDelay: "1m",
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *         skipNodesWithSystemPods: "false",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     identity: {
 *         type: azure_native.containerservice.v20230102preview.ResourceIdentityType.UserAssigned,
 *         userAssignedIdentities: {
 *             "/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
 *         },
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     upgradeSettings: {
 *         overrideSettings: {
 *             controlPlaneOverrides: ["IgnoreKubernetesDeprecations"],
 *             until: "2022-11-01T13:00:00Z",
 *         },
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create/Update Managed Cluster with EnableAHUB
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         availabilityZones: [
 *             "1",
 *             "2",
 *             "3",
 *         ],
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     identity: {
 *         type: azure_native.containerservice.v20230102preview.ResourceIdentityType.UserAssigned,
 *         userAssignedIdentities: {
 *             "/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
 *         },
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *         licenseType: "Windows_Server",
 *     },
 * });
 *
 * ```
 * ### Create/Update Managed Cluster with EnableNamespaceResources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         availabilityZones: [
 *             "1",
 *             "2",
 *             "3",
 *         ],
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enableNamespaceResources: true,
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 * ### Create/Update Managed Cluster with Windows gMSA enabled
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         availabilityZones: [
 *             "1",
 *             "2",
 *             "3",
 *         ],
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     autoScalerProfile: {
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     identity: {
 *         type: azure_native.containerservice.v20230102preview.ResourceIdentityType.UserAssigned,
 *         userAssignedIdentities: {
 *             "/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
 *         },
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *         gmsaProfile: {
 *             enabled: true,
 *         },
 *     },
 * });
 *
 * ```
 * ### Create/Update Managed Cluster with dual-stack networking
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const managedCluster = new azure_native.containerservice.v20230102preview.ManagedCluster("managedCluster", {
 *     addonProfiles: {},
 *     agentPoolProfiles: [{
 *         availabilityZones: [
 *             "1",
 *             "2",
 *             "3",
 *         ],
 *         count: 3,
 *         enableNodePublicIP: true,
 *         mode: "System",
 *         name: "nodepool1",
 *         osType: "Linux",
 *         scaleDownMode: "Deallocate",
 *         type: "VirtualMachineScaleSets",
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     autoScalerProfile: {
 *         balanceSimilarNodeGroups: "true",
 *         expander: "priority",
 *         maxNodeProvisionTime: "15m",
 *         newPodScaleUpDelay: "1m",
 *         scaleDownDelayAfterAdd: "15m",
 *         scanInterval: "20s",
 *         skipNodesWithSystemPods: "false",
 *     },
 *     diskEncryptionSetID: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
 *     dnsPrefix: "dnsprefix1",
 *     enablePodSecurityPolicy: true,
 *     enableRBAC: true,
 *     identity: {
 *         type: azure_native.containerservice.v20230102preview.ResourceIdentityType.UserAssigned,
 *         userAssignedIdentities: {
 *             "/subscriptions/subid1/resourceGroups/rgName1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
 *         },
 *     },
 *     kubernetesVersion: "",
 *     linuxProfile: {
 *         adminUsername: "azureuser",
 *         ssh: {
 *             publicKeys: [{
 *                 keyData: "keydata",
 *             }],
 *         },
 *     },
 *     location: "location1",
 *     networkProfile: {
 *         ipFamilies: [
 *             "IPv4",
 *             "IPv6",
 *         ],
 *         loadBalancerProfile: {
 *             managedOutboundIPs: {
 *                 count: 2,
 *             },
 *         },
 *         loadBalancerSku: "standard",
 *         outboundType: "loadBalancer",
 *     },
 *     resourceGroupName: "rg1",
 *     resourceName: "clustername1",
 *     servicePrincipalProfile: {
 *         clientId: "clientid",
 *         secret: "secret",
 *     },
 *     sku: {
 *         name: "Basic",
 *         tier: "Free",
 *     },
 *     tags: {
 *         archv2: "",
 *         tier: "production",
 *     },
 *     windowsProfile: {
 *         adminPassword: `replacePassword1234$`,
 *         adminUsername: "azureuser",
 *     },
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:containerservice/v20230102preview:ManagedCluster clustername1 /subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1 
 * ```
 */
export class ManagedCluster extends pulumi.CustomResource {
    /**
     * Get an existing ManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ManagedCluster {
        return new ManagedCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:containerservice/v20230102preview:ManagedCluster';

    /**
     * Returns true if the given object is an instance of ManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCluster.__pulumiType;
    }

    /**
     * The Azure Active Directory configuration.
     */
    public readonly aadProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterAADProfileResponse | undefined>;
    /**
     * The profile of managed cluster add-on.
     */
    public readonly addonProfiles!: pulumi.Output<{[key: string]: outputs.containerservice.v20230102preview.ManagedClusterAddonProfileResponse} | undefined>;
    /**
     * The agent pool properties.
     */
    public readonly agentPoolProfiles!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterAgentPoolProfileResponse[] | undefined>;
    /**
     * The access profile for managed cluster API server.
     */
    public readonly apiServerAccessProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterAPIServerAccessProfileResponse | undefined>;
    /**
     * Parameters to be applied to the cluster-autoscaler when enabled
     */
    public readonly autoScalerProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterPropertiesResponseAutoScalerProfile | undefined>;
    /**
     * The auto upgrade configuration.
     */
    public readonly autoUpgradeProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterAutoUpgradeProfileResponse | undefined>;
    /**
     * Prometheus addon profile for the container service cluster
     */
    public readonly azureMonitorProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterAzureMonitorProfileResponse | undefined>;
    /**
     * The Azure Portal requires certain Cross-Origin Resource Sharing (CORS) headers to be sent in some responses, which Kubernetes APIServer doesn't handle by default. This special FQDN supports CORS, allowing the Azure Portal to function properly.
     */
    public /*out*/ readonly azurePortalFQDN!: pulumi.Output<string>;
    /**
     * CreationData to be used to specify the source Snapshot ID if the cluster will be created/upgraded using a snapshot.
     */
    public readonly creationData!: pulumi.Output<outputs.containerservice.v20230102preview.CreationDataResponse | undefined>;
    /**
     * The version of Kubernetes the Managed Cluster is running.
     */
    public /*out*/ readonly currentKubernetesVersion!: pulumi.Output<string>;
    /**
     * If set to true, getting static credentials will be disabled for this cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
     */
    public readonly disableLocalAccounts!: pulumi.Output<boolean | undefined>;
    /**
     * This is of the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'
     */
    public readonly diskEncryptionSetID!: pulumi.Output<string | undefined>;
    /**
     * This cannot be updated once the Managed Cluster has been created.
     */
    public readonly dnsPrefix!: pulumi.Output<string | undefined>;
    /**
     * The default value is false. It can be enabled/disabled on creation and updating of the managed cluster. See [https://aka.ms/NamespaceARMResource](https://aka.ms/NamespaceARMResource) for more details on Namespace as a ARM Resource.
     */
    public readonly enableNamespaceResources!: pulumi.Output<boolean | undefined>;
    /**
     * (DEPRECATED) Whether to enable Kubernetes pod security policy (preview). PodSecurityPolicy was deprecated in Kubernetes v1.21, and removed from Kubernetes in v1.25. Learn more at https://aka.ms/k8s/psp and https://aka.ms/aks/psp.
     */
    public readonly enablePodSecurityPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable Kubernetes Role-Based Access Control.
     */
    public readonly enableRBAC!: pulumi.Output<boolean | undefined>;
    /**
     * The extended location of the Virtual Machine.
     */
    public readonly extendedLocation!: pulumi.Output<outputs.containerservice.v20230102preview.ExtendedLocationResponse | undefined>;
    /**
     * The FQDN of the master pool.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * This cannot be updated once the Managed Cluster has been created.
     */
    public readonly fqdnSubdomain!: pulumi.Output<string | undefined>;
    /**
     * The guardrails profile holds all the guardrails information for a given cluster
     */
    public readonly guardrailsProfile!: pulumi.Output<outputs.containerservice.v20230102preview.GuardrailsProfileResponse | undefined>;
    /**
     * Configurations for provisioning the cluster with HTTP proxy servers.
     */
    public readonly httpProxyConfig!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterHTTPProxyConfigResponse | undefined>;
    /**
     * The identity of the managed cluster, if configured.
     */
    public readonly identity!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterIdentityResponse | undefined>;
    /**
     * Identities associated with the cluster.
     */
    public readonly identityProfile!: pulumi.Output<{[key: string]: outputs.containerservice.v20230102preview.UserAssignedIdentityResponse} | undefined>;
    /**
     * Ingress profile for the managed cluster.
     */
    public readonly ingressProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterIngressProfileResponse | undefined>;
    /**
     * When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between 1.14.x -> 1.15.x or 1.15.x -> 1.16.x are allowed, however 1.14.x -> 1.16.x is not allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * The profile for Linux VMs in the Managed Cluster.
     */
    public readonly linuxProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ContainerServiceLinuxProfileResponse | undefined>;
    /**
     * The geo-location where the resource lives
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The max number of agent pools for the managed cluster.
     */
    public /*out*/ readonly maxAgentPools!: pulumi.Output<number>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The network configuration profile.
     */
    public readonly networkProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ContainerServiceNetworkProfileResponse | undefined>;
    /**
     * The name of the resource group containing agent pool nodes.
     */
    public readonly nodeResourceGroup!: pulumi.Output<string | undefined>;
    /**
     * The node resource group configuration profile.
     */
    public readonly nodeResourceGroupProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterNodeResourceGroupProfileResponse | undefined>;
    /**
     * The OIDC issuer profile of the Managed Cluster.
     */
    public readonly oidcIssuerProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterOIDCIssuerProfileResponse | undefined>;
    /**
     * See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity integration.
     */
    public readonly podIdentityProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterPodIdentityProfileResponse | undefined>;
    /**
     * The Power State of the cluster.
     */
    public /*out*/ readonly powerState!: pulumi.Output<outputs.containerservice.v20230102preview.PowerStateResponse>;
    /**
     * The FQDN of private cluster.
     */
    public /*out*/ readonly privateFQDN!: pulumi.Output<string>;
    /**
     * Private link resources associated with the cluster.
     */
    public readonly privateLinkResources!: pulumi.Output<outputs.containerservice.v20230102preview.PrivateLinkResourceResponse[] | undefined>;
    /**
     * The current provisioning state.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Allow or deny public network access for AKS
     */
    public readonly publicNetworkAccess!: pulumi.Output<string | undefined>;
    /**
     * Security profile for the managed cluster.
     */
    public readonly securityProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterSecurityProfileResponse | undefined>;
    /**
     * Information about a service principal identity for the cluster to use for manipulating Azure APIs.
     */
    public readonly servicePrincipalProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterServicePrincipalProfileResponse | undefined>;
    /**
     * The managed cluster SKU.
     */
    public readonly sku!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterSKUResponse | undefined>;
    /**
     * Storage profile for the managed cluster.
     */
    public readonly storageProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterStorageProfileResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.containerservice.v20230102preview.SystemDataResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Settings for upgrading a cluster.
     */
    public readonly upgradeSettings!: pulumi.Output<outputs.containerservice.v20230102preview.ClusterUpgradeSettingsResponse | undefined>;
    /**
     * The profile for Windows VMs in the Managed Cluster.
     */
    public readonly windowsProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterWindowsProfileResponse | undefined>;
    /**
     * Workload Auto-scaler profile for the managed cluster.
     */
    public readonly workloadAutoScalerProfile!: pulumi.Output<outputs.containerservice.v20230102preview.ManagedClusterWorkloadAutoScalerProfileResponse | undefined>;

    /**
     * Create a ManagedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["aadProfile"] = args ? args.aadProfile : undefined;
            resourceInputs["addonProfiles"] = args ? args.addonProfiles : undefined;
            resourceInputs["agentPoolProfiles"] = args ? args.agentPoolProfiles : undefined;
            resourceInputs["apiServerAccessProfile"] = args ? args.apiServerAccessProfile : undefined;
            resourceInputs["autoScalerProfile"] = args ? args.autoScalerProfile : undefined;
            resourceInputs["autoUpgradeProfile"] = args ? args.autoUpgradeProfile : undefined;
            resourceInputs["azureMonitorProfile"] = args ? args.azureMonitorProfile : undefined;
            resourceInputs["creationData"] = args ? args.creationData : undefined;
            resourceInputs["disableLocalAccounts"] = args ? args.disableLocalAccounts : undefined;
            resourceInputs["diskEncryptionSetID"] = args ? args.diskEncryptionSetID : undefined;
            resourceInputs["dnsPrefix"] = args ? args.dnsPrefix : undefined;
            resourceInputs["enableNamespaceResources"] = args ? args.enableNamespaceResources : undefined;
            resourceInputs["enablePodSecurityPolicy"] = args ? args.enablePodSecurityPolicy : undefined;
            resourceInputs["enableRBAC"] = args ? args.enableRBAC : undefined;
            resourceInputs["extendedLocation"] = args ? args.extendedLocation : undefined;
            resourceInputs["fqdnSubdomain"] = args ? args.fqdnSubdomain : undefined;
            resourceInputs["guardrailsProfile"] = args ? args.guardrailsProfile : undefined;
            resourceInputs["httpProxyConfig"] = args ? args.httpProxyConfig : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["identityProfile"] = args ? args.identityProfile : undefined;
            resourceInputs["ingressProfile"] = args ? args.ingressProfile : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["linuxProfile"] = args ? args.linuxProfile : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["networkProfile"] = args ? (args.networkProfile ? pulumi.output(args.networkProfile).apply(inputs.containerservice.v20230102preview.containerServiceNetworkProfileArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["nodeResourceGroup"] = args ? args.nodeResourceGroup : undefined;
            resourceInputs["nodeResourceGroupProfile"] = args ? args.nodeResourceGroupProfile : undefined;
            resourceInputs["oidcIssuerProfile"] = args ? args.oidcIssuerProfile : undefined;
            resourceInputs["podIdentityProfile"] = args ? args.podIdentityProfile : undefined;
            resourceInputs["privateLinkResources"] = args ? args.privateLinkResources : undefined;
            resourceInputs["publicNetworkAccess"] = args ? args.publicNetworkAccess : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["securityProfile"] = args ? (args.securityProfile ? pulumi.output(args.securityProfile).apply(inputs.containerservice.v20230102preview.managedClusterSecurityProfileArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["servicePrincipalProfile"] = args ? args.servicePrincipalProfile : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradeSettings"] = args ? args.upgradeSettings : undefined;
            resourceInputs["windowsProfile"] = args ? args.windowsProfile : undefined;
            resourceInputs["workloadAutoScalerProfile"] = args ? (args.workloadAutoScalerProfile ? pulumi.output(args.workloadAutoScalerProfile).apply(inputs.containerservice.v20230102preview.managedClusterWorkloadAutoScalerProfileArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["azurePortalFQDN"] = undefined /*out*/;
            resourceInputs["currentKubernetesVersion"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["maxAgentPools"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["privateFQDN"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["aadProfile"] = undefined /*out*/;
            resourceInputs["addonProfiles"] = undefined /*out*/;
            resourceInputs["agentPoolProfiles"] = undefined /*out*/;
            resourceInputs["apiServerAccessProfile"] = undefined /*out*/;
            resourceInputs["autoScalerProfile"] = undefined /*out*/;
            resourceInputs["autoUpgradeProfile"] = undefined /*out*/;
            resourceInputs["azureMonitorProfile"] = undefined /*out*/;
            resourceInputs["azurePortalFQDN"] = undefined /*out*/;
            resourceInputs["creationData"] = undefined /*out*/;
            resourceInputs["currentKubernetesVersion"] = undefined /*out*/;
            resourceInputs["disableLocalAccounts"] = undefined /*out*/;
            resourceInputs["diskEncryptionSetID"] = undefined /*out*/;
            resourceInputs["dnsPrefix"] = undefined /*out*/;
            resourceInputs["enableNamespaceResources"] = undefined /*out*/;
            resourceInputs["enablePodSecurityPolicy"] = undefined /*out*/;
            resourceInputs["enableRBAC"] = undefined /*out*/;
            resourceInputs["extendedLocation"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["fqdnSubdomain"] = undefined /*out*/;
            resourceInputs["guardrailsProfile"] = undefined /*out*/;
            resourceInputs["httpProxyConfig"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["identityProfile"] = undefined /*out*/;
            resourceInputs["ingressProfile"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["linuxProfile"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["maxAgentPools"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkProfile"] = undefined /*out*/;
            resourceInputs["nodeResourceGroup"] = undefined /*out*/;
            resourceInputs["nodeResourceGroupProfile"] = undefined /*out*/;
            resourceInputs["oidcIssuerProfile"] = undefined /*out*/;
            resourceInputs["podIdentityProfile"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["privateFQDN"] = undefined /*out*/;
            resourceInputs["privateLinkResources"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["publicNetworkAccess"] = undefined /*out*/;
            resourceInputs["securityProfile"] = undefined /*out*/;
            resourceInputs["servicePrincipalProfile"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["storageProfile"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["upgradeSettings"] = undefined /*out*/;
            resourceInputs["windowsProfile"] = undefined /*out*/;
            resourceInputs["workloadAutoScalerProfile"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:containerservice:ManagedCluster" }, { type: "azure-native:containerservice/v20170831:ManagedCluster" }, { type: "azure-native:containerservice/v20180331:ManagedCluster" }, { type: "azure-native:containerservice/v20180801preview:ManagedCluster" }, { type: "azure-native:containerservice/v20190201:ManagedCluster" }, { type: "azure-native:containerservice/v20190401:ManagedCluster" }, { type: "azure-native:containerservice/v20190601:ManagedCluster" }, { type: "azure-native:containerservice/v20190801:ManagedCluster" }, { type: "azure-native:containerservice/v20191001:ManagedCluster" }, { type: "azure-native:containerservice/v20191101:ManagedCluster" }, { type: "azure-native:containerservice/v20200101:ManagedCluster" }, { type: "azure-native:containerservice/v20200201:ManagedCluster" }, { type: "azure-native:containerservice/v20200301:ManagedCluster" }, { type: "azure-native:containerservice/v20200401:ManagedCluster" }, { type: "azure-native:containerservice/v20200601:ManagedCluster" }, { type: "azure-native:containerservice/v20200701:ManagedCluster" }, { type: "azure-native:containerservice/v20200901:ManagedCluster" }, { type: "azure-native:containerservice/v20201101:ManagedCluster" }, { type: "azure-native:containerservice/v20201201:ManagedCluster" }, { type: "azure-native:containerservice/v20210201:ManagedCluster" }, { type: "azure-native:containerservice/v20210301:ManagedCluster" }, { type: "azure-native:containerservice/v20210501:ManagedCluster" }, { type: "azure-native:containerservice/v20210701:ManagedCluster" }, { type: "azure-native:containerservice/v20210801:ManagedCluster" }, { type: "azure-native:containerservice/v20210901:ManagedCluster" }, { type: "azure-native:containerservice/v20211001:ManagedCluster" }, { type: "azure-native:containerservice/v20211101preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220101:ManagedCluster" }, { type: "azure-native:containerservice/v20220102preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220201:ManagedCluster" }, { type: "azure-native:containerservice/v20220202preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220301:ManagedCluster" }, { type: "azure-native:containerservice/v20220302preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220401:ManagedCluster" }, { type: "azure-native:containerservice/v20220402preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220502preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220601:ManagedCluster" }, { type: "azure-native:containerservice/v20220602preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220701:ManagedCluster" }, { type: "azure-native:containerservice/v20220702preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220802preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220803preview:ManagedCluster" }, { type: "azure-native:containerservice/v20220901:ManagedCluster" }, { type: "azure-native:containerservice/v20220902preview:ManagedCluster" }, { type: "azure-native:containerservice/v20221002preview:ManagedCluster" }, { type: "azure-native:containerservice/v20221101:ManagedCluster" }, { type: "azure-native:containerservice/v20221102preview:ManagedCluster" }, { type: "azure-native:containerservice/v20230101:ManagedCluster" }, { type: "azure-native:containerservice/v20230201:ManagedCluster" }, { type: "azure-native:containerservice/v20230202preview:ManagedCluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ManagedCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ManagedCluster resource.
 */
export interface ManagedClusterArgs {
    /**
     * The Azure Active Directory configuration.
     */
    aadProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterAADProfileArgs>;
    /**
     * The profile of managed cluster add-on.
     */
    addonProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterAddonProfileArgs>}>;
    /**
     * The agent pool properties.
     */
    agentPoolProfiles?: pulumi.Input<pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterAgentPoolProfileArgs>[]>;
    /**
     * The access profile for managed cluster API server.
     */
    apiServerAccessProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterAPIServerAccessProfileArgs>;
    /**
     * Parameters to be applied to the cluster-autoscaler when enabled
     */
    autoScalerProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterPropertiesAutoScalerProfileArgs>;
    /**
     * The auto upgrade configuration.
     */
    autoUpgradeProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterAutoUpgradeProfileArgs>;
    /**
     * Prometheus addon profile for the container service cluster
     */
    azureMonitorProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterAzureMonitorProfileArgs>;
    /**
     * CreationData to be used to specify the source Snapshot ID if the cluster will be created/upgraded using a snapshot.
     */
    creationData?: pulumi.Input<inputs.containerservice.v20230102preview.CreationDataArgs>;
    /**
     * If set to true, getting static credentials will be disabled for this cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
     */
    disableLocalAccounts?: pulumi.Input<boolean>;
    /**
     * This is of the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'
     */
    diskEncryptionSetID?: pulumi.Input<string>;
    /**
     * This cannot be updated once the Managed Cluster has been created.
     */
    dnsPrefix?: pulumi.Input<string>;
    /**
     * The default value is false. It can be enabled/disabled on creation and updating of the managed cluster. See [https://aka.ms/NamespaceARMResource](https://aka.ms/NamespaceARMResource) for more details on Namespace as a ARM Resource.
     */
    enableNamespaceResources?: pulumi.Input<boolean>;
    /**
     * (DEPRECATED) Whether to enable Kubernetes pod security policy (preview). PodSecurityPolicy was deprecated in Kubernetes v1.21, and removed from Kubernetes in v1.25. Learn more at https://aka.ms/k8s/psp and https://aka.ms/aks/psp.
     */
    enablePodSecurityPolicy?: pulumi.Input<boolean>;
    /**
     * Whether to enable Kubernetes Role-Based Access Control.
     */
    enableRBAC?: pulumi.Input<boolean>;
    /**
     * The extended location of the Virtual Machine.
     */
    extendedLocation?: pulumi.Input<inputs.containerservice.v20230102preview.ExtendedLocationArgs>;
    /**
     * This cannot be updated once the Managed Cluster has been created.
     */
    fqdnSubdomain?: pulumi.Input<string>;
    /**
     * The guardrails profile holds all the guardrails information for a given cluster
     */
    guardrailsProfile?: pulumi.Input<inputs.containerservice.v20230102preview.GuardrailsProfileArgs>;
    /**
     * Configurations for provisioning the cluster with HTTP proxy servers.
     */
    httpProxyConfig?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterHTTPProxyConfigArgs>;
    /**
     * The identity of the managed cluster, if configured.
     */
    identity?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterIdentityArgs>;
    /**
     * Identities associated with the cluster.
     */
    identityProfile?: pulumi.Input<{[key: string]: pulumi.Input<inputs.containerservice.v20230102preview.UserAssignedIdentityArgs>}>;
    /**
     * Ingress profile for the managed cluster.
     */
    ingressProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterIngressProfileArgs>;
    /**
     * When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between 1.14.x -> 1.15.x or 1.15.x -> 1.16.x are allowed, however 1.14.x -> 1.16.x is not allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * The profile for Linux VMs in the Managed Cluster.
     */
    linuxProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ContainerServiceLinuxProfileArgs>;
    /**
     * The geo-location where the resource lives
     */
    location?: pulumi.Input<string>;
    /**
     * The network configuration profile.
     */
    networkProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ContainerServiceNetworkProfileArgs>;
    /**
     * The name of the resource group containing agent pool nodes.
     */
    nodeResourceGroup?: pulumi.Input<string>;
    /**
     * The node resource group configuration profile.
     */
    nodeResourceGroupProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterNodeResourceGroupProfileArgs>;
    /**
     * The OIDC issuer profile of the Managed Cluster.
     */
    oidcIssuerProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterOIDCIssuerProfileArgs>;
    /**
     * See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity integration.
     */
    podIdentityProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterPodIdentityProfileArgs>;
    /**
     * Private link resources associated with the cluster.
     */
    privateLinkResources?: pulumi.Input<pulumi.Input<inputs.containerservice.v20230102preview.PrivateLinkResourceArgs>[]>;
    /**
     * Allow or deny public network access for AKS
     */
    publicNetworkAccess?: pulumi.Input<string | enums.containerservice.v20230102preview.PublicNetworkAccess>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the managed cluster resource.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Security profile for the managed cluster.
     */
    securityProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterSecurityProfileArgs>;
    /**
     * Information about a service principal identity for the cluster to use for manipulating Azure APIs.
     */
    servicePrincipalProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterServicePrincipalProfileArgs>;
    /**
     * The managed cluster SKU.
     */
    sku?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterSKUArgs>;
    /**
     * Storage profile for the managed cluster.
     */
    storageProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterStorageProfileArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Settings for upgrading a cluster.
     */
    upgradeSettings?: pulumi.Input<inputs.containerservice.v20230102preview.ClusterUpgradeSettingsArgs>;
    /**
     * The profile for Windows VMs in the Managed Cluster.
     */
    windowsProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterWindowsProfileArgs>;
    /**
     * Workload Auto-scaler profile for the managed cluster.
     */
    workloadAutoScalerProfile?: pulumi.Input<inputs.containerservice.v20230102preview.ManagedClusterWorkloadAutoScalerProfileArgs>;
}
