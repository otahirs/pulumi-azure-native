// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ApiArgs } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { ApiManagementServiceArgs } from "./apiManagementService";
export type ApiManagementService = import("./apiManagementService").ApiManagementService;
export const ApiManagementService: typeof import("./apiManagementService").ApiManagementService = null as any;
utilities.lazyLoad(exports, ["ApiManagementService"], () => require("./apiManagementService"));

export { ApiSchemaArgs } from "./apiSchema";
export type ApiSchema = import("./apiSchema").ApiSchema;
export const ApiSchema: typeof import("./apiSchema").ApiSchema = null as any;
utilities.lazyLoad(exports, ["ApiSchema"], () => require("./apiSchema"));

export { BackendArgs } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { GetApiArgs, GetApiResult, GetApiOutputArgs } from "./getApi";
export const getApi: typeof import("./getApi").getApi = null as any;
export const getApiOutput: typeof import("./getApi").getApiOutput = null as any;
utilities.lazyLoad(exports, ["getApi","getApiOutput"], () => require("./getApi"));

export { GetApiManagementServiceArgs, GetApiManagementServiceResult, GetApiManagementServiceOutputArgs } from "./getApiManagementService";
export const getApiManagementService: typeof import("./getApiManagementService").getApiManagementService = null as any;
export const getApiManagementServiceOutput: typeof import("./getApiManagementService").getApiManagementServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementService","getApiManagementServiceOutput"], () => require("./getApiManagementService"));

export { GetApiManagementServiceDomainOwnershipIdentifierArgs, GetApiManagementServiceDomainOwnershipIdentifierResult } from "./getApiManagementServiceDomainOwnershipIdentifier";
export const getApiManagementServiceDomainOwnershipIdentifier: typeof import("./getApiManagementServiceDomainOwnershipIdentifier").getApiManagementServiceDomainOwnershipIdentifier = null as any;
utilities.lazyLoad(exports, ["getApiManagementServiceDomainOwnershipIdentifier"], () => require("./getApiManagementServiceDomainOwnershipIdentifier"));

export { GetApiSchemaArgs, GetApiSchemaResult, GetApiSchemaOutputArgs } from "./getApiSchema";
export const getApiSchema: typeof import("./getApiSchema").getApiSchema = null as any;
export const getApiSchemaOutput: typeof import("./getApiSchema").getApiSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getApiSchema","getApiSchemaOutput"], () => require("./getApiSchema"));

export { GetBackendArgs, GetBackendResult, GetBackendOutputArgs } from "./getBackend";
export const getBackend: typeof import("./getBackend").getBackend = null as any;
export const getBackendOutput: typeof import("./getBackend").getBackendOutput = null as any;
utilities.lazyLoad(exports, ["getBackend","getBackendOutput"], () => require("./getBackend"));

export { ListDelegationSettingSecretsArgs, ListDelegationSettingSecretsResult, ListDelegationSettingSecretsOutputArgs } from "./listDelegationSettingSecrets";
export const listDelegationSettingSecrets: typeof import("./listDelegationSettingSecrets").listDelegationSettingSecrets = null as any;
export const listDelegationSettingSecretsOutput: typeof import("./listDelegationSettingSecrets").listDelegationSettingSecretsOutput = null as any;
utilities.lazyLoad(exports, ["listDelegationSettingSecrets","listDelegationSettingSecretsOutput"], () => require("./listDelegationSettingSecrets"));


// Export enums:
export * from "../../types/enums/apimanagement/v20210801";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:apimanagement/v20210801:Api":
                return new Api(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiManagementService":
                return new ApiManagementService(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:ApiSchema":
                return new ApiSchema(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20210801:Backend":
                return new Backend(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "apimanagement/v20210801", _module)
