// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * API Schema Contract details.
 *
 * ## Example Usage
 * ### ApiManagementCreateApiSchema
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const apiSchema = new azure_native.apimanagement.v20220801.ApiSchema("apiSchema", {
 *     apiId: "59d6bb8f1f7fab13dc67ec9b",
 *     contentType: "application/vnd.ms-azure-apim.xsd+xml",
 *     resourceGroupName: "rg1",
 *     schemaId: "ec12520d-9d48-4e7b-8f39-698ca2ac63f1",
 *     serviceName: "apimService1",
 *     value: `<s:schema elementFormDefault="qualified" targetNamespace="http://ws.cdyne.com/WeatherWS/" xmlns:tns="http://ws.cdyne.com/WeatherWS/" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:apim-wsdltns="http://ws.cdyne.com/WeatherWS/">
 *   <s:element name="GetWeatherInformation">
 *     <s:complexType />
 *   </s:element>
 *   <s:element name="GetWeatherInformationResponse">
 *     <s:complexType>
 *       <s:sequence>
 *         <s:element minOccurs="0" maxOccurs="1" name="GetWeatherInformationResult" type="tns:ArrayOfWeatherDescription" />
 *       </s:sequence>
 *     </s:complexType>
 *   </s:element>
 *   <s:complexType name="ArrayOfWeatherDescription">
 *     <s:sequence>
 *       <s:element minOccurs="0" maxOccurs="unbounded" name="WeatherDescription" type="tns:WeatherDescription" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:complexType name="WeatherDescription">
 *     <s:sequence>
 *       <s:element minOccurs="1" maxOccurs="1" name="WeatherID" type="s:short" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Description" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="PictureURL" type="s:string" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:element name="GetCityForecastByZIP">
 *     <s:complexType>
 *       <s:sequence>
 *         <s:element minOccurs="0" maxOccurs="1" name="ZIP" type="s:string" />
 *       </s:sequence>
 *     </s:complexType>
 *   </s:element>
 *   <s:element name="GetCityForecastByZIPResponse">
 *     <s:complexType>
 *       <s:sequence>
 *         <s:element minOccurs="0" maxOccurs="1" name="GetCityForecastByZIPResult" type="tns:ForecastReturn" />
 *       </s:sequence>
 *     </s:complexType>
 *   </s:element>
 *   <s:complexType name="ForecastReturn">
 *     <s:sequence>
 *       <s:element minOccurs="1" maxOccurs="1" name="Success" type="s:boolean" />
 *       <s:element minOccurs="0" maxOccurs="1" name="ResponseText" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="State" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="City" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="WeatherStationCity" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="ForecastResult" type="tns:ArrayOfForecast" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:complexType name="ArrayOfForecast">
 *     <s:sequence>
 *       <s:element minOccurs="0" maxOccurs="unbounded" name="Forecast" nillable="true" type="tns:Forecast" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:complexType name="Forecast">
 *     <s:sequence>
 *       <s:element minOccurs="1" maxOccurs="1" name="Date" type="s:dateTime" />
 *       <s:element minOccurs="1" maxOccurs="1" name="WeatherID" type="s:short" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Desciption" type="s:string" />
 *       <s:element minOccurs="1" maxOccurs="1" name="Temperatures" type="tns:temp" />
 *       <s:element minOccurs="1" maxOccurs="1" name="ProbabilityOfPrecipiation" type="tns:POP" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:complexType name="temp">
 *     <s:sequence>
 *       <s:element minOccurs="0" maxOccurs="1" name="MorningLow" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="DaytimeHigh" type="s:string" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:complexType name="POP">
 *     <s:sequence>
 *       <s:element minOccurs="0" maxOccurs="1" name="Nighttime" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Daytime" type="s:string" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:element name="GetCityWeatherByZIP">
 *     <s:complexType>
 *       <s:sequence>
 *         <s:element minOccurs="0" maxOccurs="1" name="ZIP" type="s:string" />
 *       </s:sequence>
 *     </s:complexType>
 *   </s:element>
 *   <s:element name="GetCityWeatherByZIPResponse">
 *     <s:complexType>
 *       <s:sequence>
 *         <s:element minOccurs="1" maxOccurs="1" name="GetCityWeatherByZIPResult" type="tns:WeatherReturn" />
 *       </s:sequence>
 *     </s:complexType>
 *   </s:element>
 *   <s:complexType name="WeatherReturn">
 *     <s:sequence>
 *       <s:element minOccurs="1" maxOccurs="1" name="Success" type="s:boolean" />
 *       <s:element minOccurs="0" maxOccurs="1" name="ResponseText" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="State" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="City" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="WeatherStationCity" type="s:string" />
 *       <s:element minOccurs="1" maxOccurs="1" name="WeatherID" type="s:short" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Description" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Temperature" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="RelativeHumidity" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Wind" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Pressure" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Visibility" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="WindChill" type="s:string" />
 *       <s:element minOccurs="0" maxOccurs="1" name="Remarks" type="s:string" />
 *     </s:sequence>
 *   </s:complexType>
 *   <s:element name="ArrayOfWeatherDescription" nillable="true" type="tns:ArrayOfWeatherDescription" />
 *   <s:element name="ForecastReturn" nillable="true" type="tns:ForecastReturn" />
 *   <s:element name="WeatherReturn" type="tns:WeatherReturn" />
 * </s:schema>`,
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:apimanagement/v20220801:ApiSchema ec12520d-9d48-4e7b-8f39-698ca2ac63f1 /subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/apis/59d6bb8f1f7fab13dc67ec9b/schemas/ec12520d-9d48-4e7b-8f39-698ca2ac63f1 
 * ```
 */
export class ApiSchema extends pulumi.CustomResource {
    /**
     * Get an existing ApiSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ApiSchema {
        return new ApiSchema(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:apimanagement/v20220801:ApiSchema';

    /**
     * Returns true if the given object is an instance of ApiSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiSchema.__pulumiType;
    }

    /**
     * Types definitions. Used for Swagger/OpenAPI v2/v3 schemas only, null otherwise.
     */
    public readonly components!: pulumi.Output<any | undefined>;
    /**
     * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use `application/vnd.ms-azure-apim.wadl.grammars+xml`.
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v1 schemas only, null otherwise.
     */
    public readonly definitions!: pulumi.Output<any | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Json escaped string defining the document representing the Schema. Used for schemas other than Swagger/OpenAPI.
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a ApiSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiSchemaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["definitions"] = args ? args.definitions : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["contentType"] = undefined /*out*/;
            resourceInputs["definitions"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:apimanagement:ApiSchema" }, { type: "azure-native:apimanagement/v20170301:ApiSchema" }, { type: "azure-native:apimanagement/v20180101:ApiSchema" }, { type: "azure-native:apimanagement/v20180601preview:ApiSchema" }, { type: "azure-native:apimanagement/v20190101:ApiSchema" }, { type: "azure-native:apimanagement/v20191201:ApiSchema" }, { type: "azure-native:apimanagement/v20191201preview:ApiSchema" }, { type: "azure-native:apimanagement/v20200601preview:ApiSchema" }, { type: "azure-native:apimanagement/v20201201:ApiSchema" }, { type: "azure-native:apimanagement/v20210101preview:ApiSchema" }, { type: "azure-native:apimanagement/v20210401preview:ApiSchema" }, { type: "azure-native:apimanagement/v20210801:ApiSchema" }, { type: "azure-native:apimanagement/v20211201preview:ApiSchema" }, { type: "azure-native:apimanagement/v20220401preview:ApiSchema" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ApiSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ApiSchema resource.
 */
export interface ApiSchemaArgs {
    /**
     * API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     */
    apiId: pulumi.Input<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v2/v3 schemas only, null otherwise.
     */
    components?: any;
    /**
     * Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use `application/vnd.ms-azure-apim.wadl.grammars+xml`.
     */
    contentType: pulumi.Input<string>;
    /**
     * Types definitions. Used for Swagger/OpenAPI v1 schemas only, null otherwise.
     */
    definitions?: any;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Schema id identifier. Must be unique in the current API Management service instance.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * The name of the API Management service.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Json escaped string defining the document representing the Schema. Used for schemas other than Swagger/OpenAPI.
     */
    value?: pulumi.Input<string>;
}
