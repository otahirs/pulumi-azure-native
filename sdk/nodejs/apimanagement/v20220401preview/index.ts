// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ApiArgs } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { ApiManagementServiceArgs } from "./apiManagementService";
export type ApiManagementService = import("./apiManagementService").ApiManagementService;
export const ApiManagementService: typeof import("./apiManagementService").ApiManagementService = null as any;
utilities.lazyLoad(exports, ["ApiManagementService"], () => require("./apiManagementService"));

export { ApiOperationArgs } from "./apiOperation";
export type ApiOperation = import("./apiOperation").ApiOperation;
export const ApiOperation: typeof import("./apiOperation").ApiOperation = null as any;
utilities.lazyLoad(exports, ["ApiOperation"], () => require("./apiOperation"));

export { ApiOperationPolicyArgs } from "./apiOperationPolicy";
export type ApiOperationPolicy = import("./apiOperationPolicy").ApiOperationPolicy;
export const ApiOperationPolicy: typeof import("./apiOperationPolicy").ApiOperationPolicy = null as any;
utilities.lazyLoad(exports, ["ApiOperationPolicy"], () => require("./apiOperationPolicy"));

export { ApiPolicyArgs } from "./apiPolicy";
export type ApiPolicy = import("./apiPolicy").ApiPolicy;
export const ApiPolicy: typeof import("./apiPolicy").ApiPolicy = null as any;
utilities.lazyLoad(exports, ["ApiPolicy"], () => require("./apiPolicy"));

export { ApiVersionSetArgs } from "./apiVersionSet";
export type ApiVersionSet = import("./apiVersionSet").ApiVersionSet;
export const ApiVersionSet: typeof import("./apiVersionSet").ApiVersionSet = null as any;
utilities.lazyLoad(exports, ["ApiVersionSet"], () => require("./apiVersionSet"));

export { BackendArgs } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { DiagnosticArgs } from "./diagnostic";
export type Diagnostic = import("./diagnostic").Diagnostic;
export const Diagnostic: typeof import("./diagnostic").Diagnostic = null as any;
utilities.lazyLoad(exports, ["Diagnostic"], () => require("./diagnostic"));

export { GetApiArgs, GetApiResult, GetApiOutputArgs } from "./getApi";
export const getApi: typeof import("./getApi").getApi = null as any;
export const getApiOutput: typeof import("./getApi").getApiOutput = null as any;
utilities.lazyLoad(exports, ["getApi","getApiOutput"], () => require("./getApi"));

export { GetApiManagementServiceArgs, GetApiManagementServiceResult, GetApiManagementServiceOutputArgs } from "./getApiManagementService";
export const getApiManagementService: typeof import("./getApiManagementService").getApiManagementService = null as any;
export const getApiManagementServiceOutput: typeof import("./getApiManagementService").getApiManagementServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApiManagementService","getApiManagementServiceOutput"], () => require("./getApiManagementService"));

export { GetApiManagementServiceDomainOwnershipIdentifierArgs, GetApiManagementServiceDomainOwnershipIdentifierResult } from "./getApiManagementServiceDomainOwnershipIdentifier";
export const getApiManagementServiceDomainOwnershipIdentifier: typeof import("./getApiManagementServiceDomainOwnershipIdentifier").getApiManagementServiceDomainOwnershipIdentifier = null as any;
utilities.lazyLoad(exports, ["getApiManagementServiceDomainOwnershipIdentifier"], () => require("./getApiManagementServiceDomainOwnershipIdentifier"));

export { GetApiOperationArgs, GetApiOperationResult, GetApiOperationOutputArgs } from "./getApiOperation";
export const getApiOperation: typeof import("./getApiOperation").getApiOperation = null as any;
export const getApiOperationOutput: typeof import("./getApiOperation").getApiOperationOutput = null as any;
utilities.lazyLoad(exports, ["getApiOperation","getApiOperationOutput"], () => require("./getApiOperation"));

export { GetApiOperationPolicyArgs, GetApiOperationPolicyResult, GetApiOperationPolicyOutputArgs } from "./getApiOperationPolicy";
export const getApiOperationPolicy: typeof import("./getApiOperationPolicy").getApiOperationPolicy = null as any;
export const getApiOperationPolicyOutput: typeof import("./getApiOperationPolicy").getApiOperationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApiOperationPolicy","getApiOperationPolicyOutput"], () => require("./getApiOperationPolicy"));

export { GetApiPolicyArgs, GetApiPolicyResult, GetApiPolicyOutputArgs } from "./getApiPolicy";
export const getApiPolicy: typeof import("./getApiPolicy").getApiPolicy = null as any;
export const getApiPolicyOutput: typeof import("./getApiPolicy").getApiPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApiPolicy","getApiPolicyOutput"], () => require("./getApiPolicy"));

export { GetApiVersionSetArgs, GetApiVersionSetResult, GetApiVersionSetOutputArgs } from "./getApiVersionSet";
export const getApiVersionSet: typeof import("./getApiVersionSet").getApiVersionSet = null as any;
export const getApiVersionSetOutput: typeof import("./getApiVersionSet").getApiVersionSetOutput = null as any;
utilities.lazyLoad(exports, ["getApiVersionSet","getApiVersionSetOutput"], () => require("./getApiVersionSet"));

export { GetBackendArgs, GetBackendResult, GetBackendOutputArgs } from "./getBackend";
export const getBackend: typeof import("./getBackend").getBackend = null as any;
export const getBackendOutput: typeof import("./getBackend").getBackendOutput = null as any;
utilities.lazyLoad(exports, ["getBackend","getBackendOutput"], () => require("./getBackend"));

export { GetDiagnosticArgs, GetDiagnosticResult, GetDiagnosticOutputArgs } from "./getDiagnostic";
export const getDiagnostic: typeof import("./getDiagnostic").getDiagnostic = null as any;
export const getDiagnosticOutput: typeof import("./getDiagnostic").getDiagnosticOutput = null as any;
utilities.lazyLoad(exports, ["getDiagnostic","getDiagnosticOutput"], () => require("./getDiagnostic"));

export { GetLoggerArgs, GetLoggerResult, GetLoggerOutputArgs } from "./getLogger";
export const getLogger: typeof import("./getLogger").getLogger = null as any;
export const getLoggerOutput: typeof import("./getLogger").getLoggerOutput = null as any;
utilities.lazyLoad(exports, ["getLogger","getLoggerOutput"], () => require("./getLogger"));

export { GetNamedValueArgs, GetNamedValueResult, GetNamedValueOutputArgs } from "./getNamedValue";
export const getNamedValue: typeof import("./getNamedValue").getNamedValue = null as any;
export const getNamedValueOutput: typeof import("./getNamedValue").getNamedValueOutput = null as any;
utilities.lazyLoad(exports, ["getNamedValue","getNamedValueOutput"], () => require("./getNamedValue"));

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));

export { GetProductPolicyArgs, GetProductPolicyResult, GetProductPolicyOutputArgs } from "./getProductPolicy";
export const getProductPolicy: typeof import("./getProductPolicy").getProductPolicy = null as any;
export const getProductPolicyOutput: typeof import("./getProductPolicy").getProductPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProductPolicy","getProductPolicyOutput"], () => require("./getProductPolicy"));

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));

export { LoggerArgs } from "./logger";
export type Logger = import("./logger").Logger;
export const Logger: typeof import("./logger").Logger = null as any;
utilities.lazyLoad(exports, ["Logger"], () => require("./logger"));

export { NamedValueArgs } from "./namedValue";
export type NamedValue = import("./namedValue").NamedValue;
export const NamedValue: typeof import("./namedValue").NamedValue = null as any;
utilities.lazyLoad(exports, ["NamedValue"], () => require("./namedValue"));

export { ProductArgs } from "./product";
export type Product = import("./product").Product;
export const Product: typeof import("./product").Product = null as any;
utilities.lazyLoad(exports, ["Product"], () => require("./product"));

export { ProductApiArgs } from "./productApi";
export type ProductApi = import("./productApi").ProductApi;
export const ProductApi: typeof import("./productApi").ProductApi = null as any;
utilities.lazyLoad(exports, ["ProductApi"], () => require("./productApi"));

export { ProductPolicyArgs } from "./productPolicy";
export type ProductPolicy = import("./productPolicy").ProductPolicy;
export const ProductPolicy: typeof import("./productPolicy").ProductPolicy = null as any;
utilities.lazyLoad(exports, ["ProductPolicy"], () => require("./productPolicy"));

export { SubscriptionArgs } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));


// Export enums:
export * from "../../types/enums/apimanagement/v20220401preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:apimanagement/v20220401preview:Api":
                return new Api(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ApiManagementService":
                return new ApiManagementService(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ApiOperation":
                return new ApiOperation(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ApiOperationPolicy":
                return new ApiOperationPolicy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ApiPolicy":
                return new ApiPolicy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ApiVersionSet":
                return new ApiVersionSet(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:Diagnostic":
                return new Diagnostic(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:Logger":
                return new Logger(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:NamedValue":
                return new NamedValue(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:Product":
                return new Product(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ProductApi":
                return new ProductApi(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:ProductPolicy":
                return new ProductPolicy(name, <any>undefined, { urn })
            case "azure-native:apimanagement/v20220401preview:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "apimanagement/v20220401preview", _module)
