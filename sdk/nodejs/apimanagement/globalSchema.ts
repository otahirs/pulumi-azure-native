// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Global Schema Contract details.
 * API Version: 2022-08-01.
 *
 * ## Example Usage
 * ### ApiManagementCreateSchema1
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const globalSchema = new azure_native.apimanagement.GlobalSchema("globalSchema", {
 *     description: "sample schema description",
 *     resourceGroupName: "rg1",
 *     schemaId: "schema1",
 *     schemaType: "xml",
 *     serviceName: "apimService1",
 *     value: `<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 *            xmlns:tns="http://tempuri.org/PurchaseOrderSchema.xsd"
 *            targetNamespace="http://tempuri.org/PurchaseOrderSchema.xsd"
 *            elementFormDefault="qualified">
 *  <xsd:element name="PurchaseOrder" type="tns:PurchaseOrderType"/>
 *  <xsd:complexType name="PurchaseOrderType">
 *   <xsd:sequence>
 *    <xsd:element name="ShipTo" type="tns:USAddress" maxOccurs="2"/>
 *    <xsd:element name="BillTo" type="tns:USAddress"/>
 *   </xsd:sequence>
 *   <xsd:attribute name="OrderDate" type="xsd:date"/>
 *  </xsd:complexType>
 * 
 *  <xsd:complexType name="USAddress">
 *   <xsd:sequence>
 *    <xsd:element name="name"   type="xsd:string"/>
 *    <xsd:element name="street" type="xsd:string"/>
 *    <xsd:element name="city"   type="xsd:string"/>
 *    <xsd:element name="state"  type="xsd:string"/>
 *    <xsd:element name="zip"    type="xsd:integer"/>
 *   </xsd:sequence>
 *   <xsd:attribute name="country" type="xsd:NMTOKEN" fixed="US"/>
 *  </xsd:complexType>
 * </xsd:schema>`,
 * });
 *
 * ```
 * ### ApiManagementCreateSchema2
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const globalSchema = new azure_native.apimanagement.GlobalSchema("globalSchema", {
 *     description: "sample schema description",
 *     resourceGroupName: "rg1",
 *     schemaId: "schema1",
 *     schemaType: "json",
 *     serviceName: "apimService1",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:apimanagement:GlobalSchema schema1 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/schemas/schema1 
 * ```
 */
export class GlobalSchema extends pulumi.CustomResource {
    /**
     * Get an existing GlobalSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GlobalSchema {
        return new GlobalSchema(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:apimanagement:GlobalSchema';

    /**
     * Returns true if the given object is an instance of GlobalSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalSchema.__pulumiType;
    }

    /**
     * Free-form schema entity description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Schema Type. Immutable.
     */
    public readonly schemaType!: pulumi.Output<string>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Json-encoded string for non json-based schema.
     */
    public readonly value!: pulumi.Output<any | undefined>;

    /**
     * Create a GlobalSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalSchemaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.schemaType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaType'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["schemaType"] = args ? args.schemaType : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["schemaType"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:apimanagement/v20210401preview:GlobalSchema" }, { type: "azure-native:apimanagement/v20210801:GlobalSchema" }, { type: "azure-native:apimanagement/v20211201preview:GlobalSchema" }, { type: "azure-native:apimanagement/v20220401preview:GlobalSchema" }, { type: "azure-native:apimanagement/v20220801:GlobalSchema" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GlobalSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GlobalSchema resource.
 */
export interface GlobalSchemaArgs {
    /**
     * Free-form schema entity description.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Schema id identifier. Must be unique in the current API Management service instance.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * Schema Type. Immutable.
     */
    schemaType: pulumi.Input<string | enums.apimanagement.SchemaType>;
    /**
     * The name of the API Management service.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Json-encoded string for non json-based schema.
     */
    value?: any;
}
