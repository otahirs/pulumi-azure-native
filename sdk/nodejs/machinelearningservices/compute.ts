// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Machine Learning compute object wrapped into ARM resource envelope.
 * API Version: 2022-10-01.
 *
 * ## Example Usage
 * ### Attach a Kubernetes Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "Kubernetes",
 *         description: "some compute",
 *         properties: {
 *             defaultInstanceType: "defaultInstanceType",
 *             instanceTypes: {
 *                 defaultInstanceType: {
 *                     resources: {
 *                         limits: {
 *                             cpu: "1",
 *                             memory: "4Gi",
 *                             "nvidia.com/gpu": undefined,
 *                         },
 *                         requests: {
 *                             cpu: "1",
 *                             memory: "4Gi",
 *                             "nvidia.com/gpu": undefined,
 *                         },
 *                     },
 *                 },
 *             },
 *             namespace: "default",
 *         },
 *         resourceId: "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2",
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Create a AML Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "AmlCompute",
 *         properties: {
 *             enableNodePublicIp: true,
 *             isolatedNetwork: false,
 *             osType: "Windows",
 *             remoteLoginPortPublicAccess: "NotSpecified",
 *             scaleSettings: {
 *                 maxNodeCount: 1,
 *                 minNodeCount: 0,
 *                 nodeIdleTimeBeforeScaleDown: "PT5M",
 *             },
 *             virtualMachineImage: {
 *                 id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myImageGallery/images/myImageDefinition/versions/0.0.1",
 *             },
 *             vmPriority: "Dedicated",
 *             vmSize: "STANDARD_NC6",
 *         },
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Create a DataFactory Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "DataFactory",
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Create an AKS Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "AKS",
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Create an ComputeInstance Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "ComputeInstance",
 *         properties: {
 *             applicationSharingPolicy: "Personal",
 *             computeInstanceAuthorizationType: "personal",
 *             personalComputeInstanceSettings: {
 *                 assignedUser: {
 *                     objectId: "00000000-0000-0000-0000-000000000000",
 *                     tenantId: "00000000-0000-0000-0000-000000000000",
 *                 },
 *             },
 *             sshSettings: {
 *                 sshPublicAccess: "Disabled",
 *             },
 *             subnet: {
 *                 id: "test-subnet-resource-id",
 *             },
 *             vmSize: "STANDARD_NC6",
 *         },
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Create an ComputeInstance Compute with Schedules
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "ComputeInstance",
 *         properties: {
 *             applicationSharingPolicy: "Personal",
 *             computeInstanceAuthorizationType: "personal",
 *             personalComputeInstanceSettings: {
 *                 assignedUser: {
 *                     objectId: "00000000-0000-0000-0000-000000000000",
 *                     tenantId: "00000000-0000-0000-0000-000000000000",
 *                 },
 *             },
 *             schedules: {
 *                 computeStartStop: [{
 *                     action: "Stop",
 *                     cron: {
 *                         expression: "0 18 * * *",
 *                         startTime: "2021-04-23T01:30:00",
 *                         timeZone: "Pacific Standard Time",
 *                     },
 *                     status: "Enabled",
 *                     triggerType: "Cron",
 *                 }],
 *             },
 *             sshSettings: {
 *                 sshPublicAccess: "Disabled",
 *             },
 *             vmSize: "STANDARD_NC6",
 *         },
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Create an ComputeInstance Compute with minimal inputs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "ComputeInstance",
 *         properties: {
 *             vmSize: "STANDARD_NC6",
 *         },
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Update a AML Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "AmlCompute",
 *         description: "some compute",
 *         properties: {
 *             scaleSettings: {
 *                 maxNodeCount: 4,
 *                 minNodeCount: 4,
 *                 nodeIdleTimeBeforeScaleDown: "PT5M",
 *             },
 *         },
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 * ### Update an AKS Compute
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const compute = new azure_native.machinelearningservices.Compute("compute", {
 *     computeName: "compute123",
 *     location: "eastus",
 *     properties: {
 *         computeType: "AKS",
 *         description: "some compute",
 *         properties: {
 *             agentCount: 4,
 *         },
 *         resourceId: "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourcegroups/testrg123/providers/Microsoft.ContainerService/managedClusters/compute123-56826-c9b00420020b2",
 *     },
 *     resourceGroupName: "testrg123",
 *     workspaceName: "workspaces123",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:machinelearningservices:Compute compute123 /subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.MachineLearningServices/workspaces/workspaces123/computes/compute123 
 * ```
 */
export class Compute extends pulumi.CustomResource {
    /**
     * Get an existing Compute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Compute {
        return new Compute(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:machinelearningservices:Compute';

    /**
     * Returns true if the given object is an instance of Compute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Compute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Compute.__pulumiType;
    }

    /**
     * The identity of the resource.
     */
    public readonly identity!: pulumi.Output<outputs.machinelearningservices.ManagedServiceIdentityResponse | undefined>;
    /**
     * Specifies the location of the resource.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Compute properties
     */
    public readonly properties!: pulumi.Output<outputs.machinelearningservices.AKSResponse | outputs.machinelearningservices.AmlComputeResponse | outputs.machinelearningservices.ComputeInstanceResponse | outputs.machinelearningservices.DataFactoryResponse | outputs.machinelearningservices.DataLakeAnalyticsResponse | outputs.machinelearningservices.DatabricksResponse | outputs.machinelearningservices.HDInsightResponse | outputs.machinelearningservices.KubernetesResponse | outputs.machinelearningservices.SynapseSparkResponse | outputs.machinelearningservices.VirtualMachineResponse>;
    /**
     * The sku of the workspace.
     */
    public readonly sku!: pulumi.Output<outputs.machinelearningservices.SkuResponse | undefined>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.machinelearningservices.SystemDataResponse>;
    /**
     * Contains resource tags defined as key/value pairs.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Compute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            resourceInputs["computeName"] = args ? args.computeName : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workspaceName"] = args ? args.workspaceName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:machinelearningservices/v20180301preview:Compute" }, { type: "azure-native:machinelearningservices/v20181119:Compute" }, { type: "azure-native:machinelearningservices/v20190501:Compute" }, { type: "azure-native:machinelearningservices/v20190601:Compute" }, { type: "azure-native:machinelearningservices/v20191101:Compute" }, { type: "azure-native:machinelearningservices/v20200101:Compute" }, { type: "azure-native:machinelearningservices/v20200218preview:Compute" }, { type: "azure-native:machinelearningservices/v20200301:Compute" }, { type: "azure-native:machinelearningservices/v20200401:Compute" }, { type: "azure-native:machinelearningservices/v20200501preview:Compute" }, { type: "azure-native:machinelearningservices/v20200515preview:Compute" }, { type: "azure-native:machinelearningservices/v20200601:Compute" }, { type: "azure-native:machinelearningservices/v20200801:Compute" }, { type: "azure-native:machinelearningservices/v20200901preview:Compute" }, { type: "azure-native:machinelearningservices/v20210101:Compute" }, { type: "azure-native:machinelearningservices/v20210301preview:Compute" }, { type: "azure-native:machinelearningservices/v20210401:Compute" }, { type: "azure-native:machinelearningservices/v20210701:Compute" }, { type: "azure-native:machinelearningservices/v20220101preview:Compute" }, { type: "azure-native:machinelearningservices/v20220201preview:Compute" }, { type: "azure-native:machinelearningservices/v20220501:Compute" }, { type: "azure-native:machinelearningservices/v20220601preview:Compute" }, { type: "azure-native:machinelearningservices/v20221001:Compute" }, { type: "azure-native:machinelearningservices/v20221001preview:Compute" }, { type: "azure-native:machinelearningservices/v20221201preview:Compute" }, { type: "azure-native:machinelearningservices/v20230201preview:Compute" }, { type: "azure-native:machinelearningservices/v20230401preview:Compute" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Compute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Compute resource.
 */
export interface ComputeArgs {
    /**
     * Name of the Azure Machine Learning compute.
     */
    computeName?: pulumi.Input<string>;
    /**
     * The identity of the resource.
     */
    identity?: pulumi.Input<inputs.machinelearningservices.ManagedServiceIdentityArgs>;
    /**
     * Specifies the location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * Compute properties
     */
    properties?: pulumi.Input<inputs.machinelearningservices.AKSArgs | inputs.machinelearningservices.AmlComputeArgs | inputs.machinelearningservices.ComputeInstanceArgs | inputs.machinelearningservices.DataFactoryArgs | inputs.machinelearningservices.DataLakeAnalyticsArgs | inputs.machinelearningservices.DatabricksArgs | inputs.machinelearningservices.HDInsightArgs | inputs.machinelearningservices.KubernetesArgs | inputs.machinelearningservices.SynapseSparkArgs | inputs.machinelearningservices.VirtualMachineArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The sku of the workspace.
     */
    sku?: pulumi.Input<inputs.machinelearningservices.SkuArgs>;
    /**
     * Contains resource tags defined as key/value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of Azure Machine Learning workspace.
     */
    workspaceName: pulumi.Input<string>;
}
