// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Describes the cloud service.
 *
 * ## Example Usage
 * ### Create New Cloud Service with Multiple Roles
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cloudService = new azure_native.compute.v20220904.CloudService("cloudService", {
 *     cloudServiceName: "{cs-name}",
 *     location: "westus",
 *     properties: {
 *         configuration: "{ServiceConfiguration}",
 *         networkProfile: {
 *             loadBalancerConfigurations: [{
 *                 name: "contosolb",
 *                 properties: {
 *                     frontendIpConfigurations: [{
 *                         name: "contosofe",
 *                         properties: {
 *                             publicIPAddress: {
 *                                 id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
 *                             },
 *                         },
 *                     }],
 *                 },
 *             }],
 *         },
 *         packageUrl: "{PackageUrl}",
 *         roleProfile: {
 *             roles: [
 *                 {
 *                     name: "ContosoFrontend",
 *                     sku: {
 *                         capacity: 1,
 *                         name: "Standard_D1_v2",
 *                         tier: "Standard",
 *                     },
 *                 },
 *                 {
 *                     name: "ContosoBackend",
 *                     sku: {
 *                         capacity: 1,
 *                         name: "Standard_D1_v2",
 *                         tier: "Standard",
 *                     },
 *                 },
 *             ],
 *         },
 *         upgradeMode: "Auto",
 *     },
 *     resourceGroupName: "ConstosoRG",
 * });
 *
 * ```
 * ### Create New Cloud Service with Multiple Roles in a specific availability zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cloudService = new azure_native.compute.v20220904.CloudService("cloudService", {
 *     cloudServiceName: "{cs-name}",
 *     location: "westus",
 *     properties: {
 *         configuration: "{ServiceConfiguration}",
 *         networkProfile: {
 *             loadBalancerConfigurations: [{
 *                 name: "contosolb",
 *                 properties: {
 *                     frontendIpConfigurations: [{
 *                         name: "contosofe",
 *                         properties: {
 *                             publicIPAddress: {
 *                                 id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
 *                             },
 *                         },
 *                     }],
 *                 },
 *             }],
 *         },
 *         packageUrl: "{PackageUrl}",
 *         roleProfile: {
 *             roles: [
 *                 {
 *                     name: "ContosoFrontend",
 *                     sku: {
 *                         capacity: 1,
 *                         name: "Standard_D1_v2",
 *                         tier: "Standard",
 *                     },
 *                 },
 *                 {
 *                     name: "ContosoBackend",
 *                     sku: {
 *                         capacity: 1,
 *                         name: "Standard_D1_v2",
 *                         tier: "Standard",
 *                     },
 *                 },
 *             ],
 *         },
 *         upgradeMode: "Auto",
 *     },
 *     resourceGroupName: "ConstosoRG",
 *     zones: ["1"],
 * });
 *
 * ```
 * ### Create New Cloud Service with Single Role
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cloudService = new azure_native.compute.v20220904.CloudService("cloudService", {
 *     cloudServiceName: "{cs-name}",
 *     location: "westus",
 *     properties: {
 *         configuration: "{ServiceConfiguration}",
 *         networkProfile: {
 *             loadBalancerConfigurations: [{
 *                 name: "myLoadBalancer",
 *                 properties: {
 *                     frontendIpConfigurations: [{
 *                         name: "myfe",
 *                         properties: {
 *                             publicIPAddress: {
 *                                 id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP",
 *                             },
 *                         },
 *                     }],
 *                 },
 *             }],
 *         },
 *         packageUrl: "{PackageUrl}",
 *         roleProfile: {
 *             roles: [{
 *                 name: "ContosoFrontend",
 *                 sku: {
 *                     capacity: 1,
 *                     name: "Standard_D1_v2",
 *                     tier: "Standard",
 *                 },
 *             }],
 *         },
 *         upgradeMode: "Auto",
 *     },
 *     resourceGroupName: "ConstosoRG",
 * });
 *
 * ```
 * ### Create New Cloud Service with Single Role and Certificate from Key Vault
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cloudService = new azure_native.compute.v20220904.CloudService("cloudService", {
 *     cloudServiceName: "{cs-name}",
 *     location: "westus",
 *     properties: {
 *         configuration: "{ServiceConfiguration}",
 *         networkProfile: {
 *             loadBalancerConfigurations: [{
 *                 name: "contosolb",
 *                 properties: {
 *                     frontendIpConfigurations: [{
 *                         name: "contosofe",
 *                         properties: {
 *                             publicIPAddress: {
 *                                 id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
 *                             },
 *                         },
 *                     }],
 *                 },
 *             }],
 *         },
 *         osProfile: {
 *             secrets: [{
 *                 sourceVault: {
 *                     id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
 *                 },
 *                 vaultCertificates: [{
 *                     certificateUrl: "https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
 *                 }],
 *             }],
 *         },
 *         packageUrl: "{PackageUrl}",
 *         roleProfile: {
 *             roles: [{
 *                 name: "ContosoFrontend",
 *                 sku: {
 *                     capacity: 1,
 *                     name: "Standard_D1_v2",
 *                     tier: "Standard",
 *                 },
 *             }],
 *         },
 *         upgradeMode: "Auto",
 *     },
 *     resourceGroupName: "ConstosoRG",
 * });
 *
 * ```
 * ### Create New Cloud Service with Single Role and RDP Extension
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cloudService = new azure_native.compute.v20220904.CloudService("cloudService", {
 *     cloudServiceName: "{cs-name}",
 *     location: "westus",
 *     properties: {
 *         configuration: "{ServiceConfiguration}",
 *         extensionProfile: {
 *             extensions: [{
 *                 name: "RDPExtension",
 *                 properties: {
 *                     autoUpgradeMinorVersion: false,
 *                     protectedSettings: "<PrivateConfig><Password>{password}</Password></PrivateConfig>",
 *                     publisher: "Microsoft.Windows.Azure.Extensions",
 *                     settings: "<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
 *                     type: "RDP",
 *                     typeHandlerVersion: "1.2",
 *                 },
 *             }],
 *         },
 *         networkProfile: {
 *             loadBalancerConfigurations: [{
 *                 name: "contosolb",
 *                 properties: {
 *                     frontendIpConfigurations: [{
 *                         name: "contosofe",
 *                         properties: {
 *                             publicIPAddress: {
 *                                 id: "/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
 *                             },
 *                         },
 *                     }],
 *                 },
 *             }],
 *         },
 *         packageUrl: "{PackageUrl}",
 *         roleProfile: {
 *             roles: [{
 *                 name: "ContosoFrontend",
 *                 sku: {
 *                     capacity: 1,
 *                     name: "Standard_D1_v2",
 *                     tier: "Standard",
 *                 },
 *             }],
 *         },
 *         upgradeMode: "Auto",
 *     },
 *     resourceGroupName: "ConstosoRG",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:compute/v20220904:CloudService {cs-name} /subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name} 
 * ```
 */
export class CloudService extends pulumi.CustomResource {
    /**
     * Get an existing CloudService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CloudService {
        return new CloudService(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:compute/v20220904:CloudService';

    /**
     * Returns true if the given object is an instance of CloudService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudService.__pulumiType;
    }

    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Cloud service properties
     */
    public readonly properties!: pulumi.Output<outputs.compute.v20220904.CloudServicePropertiesResponse>;
    /**
     * The system meta data relating to this resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.compute.v20220904.SystemDataResponse | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be provisioned. This field is optional.
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a CloudService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["cloudServiceName"] = args ? args.cloudServiceName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["zones"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:compute:CloudService" }, { type: "azure-native:compute/v20201001preview:CloudService" }, { type: "azure-native:compute/v20210301:CloudService" }, { type: "azure-native:compute/v20220404:CloudService" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(CloudService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CloudService resource.
 */
export interface CloudServiceArgs {
    /**
     * Name of the cloud service.
     */
    cloudServiceName?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * Cloud service properties
     */
    properties?: pulumi.Input<inputs.compute.v20220904.CloudServicePropertiesArgs>;
    /**
     * Name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be provisioned. This field is optional.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
