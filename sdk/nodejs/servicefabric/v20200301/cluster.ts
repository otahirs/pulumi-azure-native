// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * The cluster resource
 *
 * ## Example Usage
 * ### Put a cluster with maximum parameters
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cluster = new azure_native.servicefabric.v20200301.Cluster("cluster", {
 *     addOnFeatures: [
 *         "RepairManager",
 *         "DnsService",
 *         "BackupRestoreService",
 *         "ResourceMonitorService",
 *     ],
 *     applicationTypeVersionsCleanupPolicy: {
 *         maxUnusedVersionsToKeep: 2,
 *     },
 *     azureActiveDirectory: {
 *         clientApplication: "d151ad89-4bce-4ae8-b3d1-1dc79679fa75",
 *         clusterApplication: "5886372e-7bf4-4878-a497-8098aba608ae",
 *         tenantId: "6abcc6a0-8666-43f1-87b8-172cf86a9f9c",
 *     },
 *     certificateCommonNames: {
 *         commonNames: [{
 *             certificateCommonName: "abc.com",
 *             certificateIssuerThumbprint: "12599211F8F14C90AFA9532AD79A6F2CA1C00622",
 *         }],
 *         x509StoreName: "My",
 *     },
 *     clientCertificateCommonNames: [{
 *         certificateCommonName: "abc.com",
 *         certificateIssuerThumbprint: "5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
 *         isAdmin: true,
 *     }],
 *     clientCertificateThumbprints: [{
 *         certificateThumbprint: "5F3660C715EBBDA31DB1FFDCF508302348DE8E7A",
 *         isAdmin: true,
 *     }],
 *     clusterCodeVersion: "7.0.470.9590",
 *     clusterName: "myCluster",
 *     diagnosticsStorageAccountConfig: {
 *         blobEndpoint: "https://diag.blob.core.windows.net/",
 *         protectedAccountKeyName: "StorageAccountKey1",
 *         queueEndpoint: "https://diag.queue.core.windows.net/",
 *         storageAccountName: "diag",
 *         tableEndpoint: "https://diag.table.core.windows.net/",
 *     },
 *     eventStoreServiceEnabled: true,
 *     fabricSettings: [{
 *         name: "UpgradeService",
 *         parameters: [{
 *             name: "AppPollIntervalInSeconds",
 *             value: "60",
 *         }],
 *     }],
 *     location: "eastus",
 *     managementEndpoint: "https://myCluster.eastus.cloudapp.azure.com:19080",
 *     nodeTypes: [{
 *         applicationPorts: {
 *             endPort: 30000,
 *             startPort: 20000,
 *         },
 *         clientConnectionEndpointPort: 19000,
 *         durabilityLevel: "Bronze",
 *         ephemeralPorts: {
 *             endPort: 64000,
 *             startPort: 49000,
 *         },
 *         httpGatewayEndpointPort: 19007,
 *         isPrimary: true,
 *         name: "nt1vm",
 *         vmInstanceCount: 5,
 *     }],
 *     reliabilityLevel: "Silver",
 *     resourceGroupName: "resRg",
 *     reverseProxyCertificateCommonNames: {
 *         commonNames: [{
 *             certificateCommonName: "abc.com",
 *             certificateIssuerThumbprint: "12599211F8F14C90AFA9532AD79A6F2CA1C00622",
 *         }],
 *         x509StoreName: "My",
 *     },
 *     tags: {},
 *     upgradeDescription: {
 *         deltaHealthPolicy: {
 *             applicationDeltaHealthPolicies: {
 *                 "fabric:/myApp1": {
 *                     defaultServiceTypeDeltaHealthPolicy: {
 *                         maxPercentDeltaUnhealthyServices: 0,
 *                     },
 *                     serviceTypeDeltaHealthPolicies: {
 *                         myServiceType1: {
 *                             maxPercentDeltaUnhealthyServices: 0,
 *                         },
 *                     },
 *                 },
 *             },
 *             maxPercentDeltaUnhealthyApplications: 0,
 *             maxPercentDeltaUnhealthyNodes: 0,
 *             maxPercentUpgradeDomainDeltaUnhealthyNodes: 0,
 *         },
 *         forceRestart: false,
 *         healthCheckRetryTimeout: "00:05:00",
 *         healthCheckStableDuration: "00:00:30",
 *         healthCheckWaitDuration: "00:00:30",
 *         healthPolicy: {
 *             applicationHealthPolicies: {
 *                 "fabric:/myApp1": {
 *                     defaultServiceTypeHealthPolicy: {
 *                         maxPercentUnhealthyServices: 0,
 *                     },
 *                     serviceTypeHealthPolicies: {
 *                         myServiceType1: {
 *                             maxPercentUnhealthyServices: 100,
 *                         },
 *                     },
 *                 },
 *             },
 *             maxPercentUnhealthyApplications: 0,
 *             maxPercentUnhealthyNodes: 0,
 *         },
 *         upgradeDomainTimeout: "00:15:00",
 *         upgradeReplicaSetCheckTimeout: "00:10:00",
 *         upgradeTimeout: "01:00:00",
 *     },
 *     upgradeMode: "Manual",
 *     vmImage: "Windows",
 * });
 *
 * ```
 * ### Put a cluster with minimum parameters
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const cluster = new azure_native.servicefabric.v20200301.Cluster("cluster", {
 *     clusterName: "myCluster",
 *     diagnosticsStorageAccountConfig: {
 *         blobEndpoint: "https://diag.blob.core.windows.net/",
 *         protectedAccountKeyName: "StorageAccountKey1",
 *         queueEndpoint: "https://diag.queue.core.windows.net/",
 *         storageAccountName: "diag",
 *         tableEndpoint: "https://diag.table.core.windows.net/",
 *     },
 *     fabricSettings: [{
 *         name: "UpgradeService",
 *         parameters: [{
 *             name: "AppPollIntervalInSeconds",
 *             value: "60",
 *         }],
 *     }],
 *     location: "eastus",
 *     managementEndpoint: "http://myCluster.eastus.cloudapp.azure.com:19080",
 *     nodeTypes: [{
 *         applicationPorts: {
 *             endPort: 30000,
 *             startPort: 20000,
 *         },
 *         clientConnectionEndpointPort: 19000,
 *         durabilityLevel: "Bronze",
 *         ephemeralPorts: {
 *             endPort: 64000,
 *             startPort: 49000,
 *         },
 *         httpGatewayEndpointPort: 19007,
 *         isPrimary: true,
 *         name: "nt1vm",
 *         vmInstanceCount: 5,
 *     }],
 *     reliabilityLevel: "Silver",
 *     resourceGroupName: "resRg",
 *     tags: {},
 *     upgradeMode: "Automatic",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:servicefabric/v20200301:Cluster myCluster /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster 
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:servicefabric/v20200301:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The list of add-on features to enable in the cluster.
     */
    public readonly addOnFeatures!: pulumi.Output<string[] | undefined>;
    /**
     * The policy used to clean up unused versions.
     */
    public readonly applicationTypeVersionsCleanupPolicy!: pulumi.Output<outputs.servicefabric.v20200301.ApplicationTypeVersionsCleanupPolicyResponse | undefined>;
    /**
     * The Service Fabric runtime versions available for this cluster.
     */
    public /*out*/ readonly availableClusterVersions!: pulumi.Output<outputs.servicefabric.v20200301.ClusterVersionDetailsResponse[]>;
    /**
     * The AAD authentication settings of the cluster.
     */
    public readonly azureActiveDirectory!: pulumi.Output<outputs.servicefabric.v20200301.AzureActiveDirectoryResponse | undefined>;
    /**
     * The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     */
    public readonly certificate!: pulumi.Output<outputs.servicefabric.v20200301.CertificateDescriptionResponse | undefined>;
    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    public readonly certificateCommonNames!: pulumi.Output<outputs.servicefabric.v20200301.ServerCertificateCommonNamesResponse | undefined>;
    /**
     * The list of client certificates referenced by common name that are allowed to manage the cluster.
     */
    public readonly clientCertificateCommonNames!: pulumi.Output<outputs.servicefabric.v20200301.ClientCertificateCommonNameResponse[] | undefined>;
    /**
     * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     */
    public readonly clientCertificateThumbprints!: pulumi.Output<outputs.servicefabric.v20200301.ClientCertificateThumbprintResponse[] | undefined>;
    /**
     * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     */
    public readonly clusterCodeVersion!: pulumi.Output<string | undefined>;
    /**
     * The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
     */
    public /*out*/ readonly clusterEndpoint!: pulumi.Output<string>;
    /**
     * A service generated unique identifier for the cluster resource.
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * The current state of the cluster.
     *
     *   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
     *   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
     *   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
     *   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
     *   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
     *   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
     *   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
     *   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
     *   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
     *   - Ready - Indicates that the cluster is in a stable state.
     */
    public /*out*/ readonly clusterState!: pulumi.Output<string>;
    /**
     * The storage account information for storing Service Fabric diagnostic logs.
     */
    public readonly diagnosticsStorageAccountConfig!: pulumi.Output<outputs.servicefabric.v20200301.DiagnosticsStorageAccountConfigResponse | undefined>;
    /**
     * Azure resource etag.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Indicates if the event store service is enabled.
     */
    public readonly eventStoreServiceEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The list of custom fabric settings to configure the cluster.
     */
    public readonly fabricSettings!: pulumi.Output<outputs.servicefabric.v20200301.SettingsSectionDescriptionResponse[] | undefined>;
    /**
     * Azure resource location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The http management endpoint of the cluster.
     */
    public readonly managementEndpoint!: pulumi.Output<string>;
    /**
     * Azure resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The list of node types in the cluster.
     */
    public readonly nodeTypes!: pulumi.Output<outputs.servicefabric.v20200301.NodeTypeDescriptionResponse[]>;
    /**
     * The provisioning state of the cluster resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     *
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     */
    public readonly reliabilityLevel!: pulumi.Output<string | undefined>;
    /**
     * The server certificate used by reverse proxy.
     */
    public readonly reverseProxyCertificate!: pulumi.Output<outputs.servicefabric.v20200301.CertificateDescriptionResponse | undefined>;
    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    public readonly reverseProxyCertificateCommonNames!: pulumi.Output<outputs.servicefabric.v20200301.ServerCertificateCommonNamesResponse | undefined>;
    /**
     * Azure resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Azure resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The policy to use when upgrading the cluster.
     */
    public readonly upgradeDescription!: pulumi.Output<outputs.servicefabric.v20200301.ClusterUpgradePolicyResponse | undefined>;
    /**
     * The upgrade mode of the cluster when new Service Fabric runtime version is available.
     *
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     */
    public readonly upgradeMode!: pulumi.Output<string | undefined>;
    /**
     * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     */
    public readonly vmImage!: pulumi.Output<string | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.managementEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            if ((!args || args.nodeTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeTypes'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["addOnFeatures"] = args ? args.addOnFeatures : undefined;
            resourceInputs["applicationTypeVersionsCleanupPolicy"] = args ? args.applicationTypeVersionsCleanupPolicy : undefined;
            resourceInputs["azureActiveDirectory"] = args ? args.azureActiveDirectory : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateCommonNames"] = args ? args.certificateCommonNames : undefined;
            resourceInputs["clientCertificateCommonNames"] = args ? args.clientCertificateCommonNames : undefined;
            resourceInputs["clientCertificateThumbprints"] = args ? args.clientCertificateThumbprints : undefined;
            resourceInputs["clusterCodeVersion"] = args ? args.clusterCodeVersion : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["diagnosticsStorageAccountConfig"] = args ? args.diagnosticsStorageAccountConfig : undefined;
            resourceInputs["eventStoreServiceEnabled"] = args ? args.eventStoreServiceEnabled : undefined;
            resourceInputs["fabricSettings"] = args ? args.fabricSettings : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementEndpoint"] = args ? args.managementEndpoint : undefined;
            resourceInputs["nodeTypes"] = args ? args.nodeTypes : undefined;
            resourceInputs["reliabilityLevel"] = args ? args.reliabilityLevel : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["reverseProxyCertificate"] = args ? args.reverseProxyCertificate : undefined;
            resourceInputs["reverseProxyCertificateCommonNames"] = args ? args.reverseProxyCertificateCommonNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradeDescription"] = args ? (args.upgradeDescription ? pulumi.output(args.upgradeDescription).apply(inputs.servicefabric.v20200301.clusterUpgradePolicyArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            resourceInputs["vmImage"] = args ? args.vmImage : undefined;
            resourceInputs["availableClusterVersions"] = undefined /*out*/;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterState"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["addOnFeatures"] = undefined /*out*/;
            resourceInputs["applicationTypeVersionsCleanupPolicy"] = undefined /*out*/;
            resourceInputs["availableClusterVersions"] = undefined /*out*/;
            resourceInputs["azureActiveDirectory"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateCommonNames"] = undefined /*out*/;
            resourceInputs["clientCertificateCommonNames"] = undefined /*out*/;
            resourceInputs["clientCertificateThumbprints"] = undefined /*out*/;
            resourceInputs["clusterCodeVersion"] = undefined /*out*/;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterState"] = undefined /*out*/;
            resourceInputs["diagnosticsStorageAccountConfig"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["eventStoreServiceEnabled"] = undefined /*out*/;
            resourceInputs["fabricSettings"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managementEndpoint"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nodeTypes"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["reliabilityLevel"] = undefined /*out*/;
            resourceInputs["reverseProxyCertificate"] = undefined /*out*/;
            resourceInputs["reverseProxyCertificateCommonNames"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["upgradeDescription"] = undefined /*out*/;
            resourceInputs["upgradeMode"] = undefined /*out*/;
            resourceInputs["vmImage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:servicefabric/v20160901:Cluster" }, { type: "azure-native:servicefabric/v20170701preview:Cluster" }, { type: "azure-native:servicefabric/v20180201:Cluster" }, { type: "azure-native:servicefabric/v20190301:Cluster" }, { type: "azure-native:servicefabric/v20190301preview:Cluster" }, { type: "azure-native:servicefabric/v20190601preview:Cluster" }, { type: "azure-native:servicefabric/v20191101preview:Cluster" }, { type: "azure-native:servicefabric/v20201201preview:Cluster" }, { type: "azure-native:servicefabric/v20210601:Cluster" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The list of add-on features to enable in the cluster.
     */
    addOnFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The policy used to clean up unused versions.
     */
    applicationTypeVersionsCleanupPolicy?: pulumi.Input<inputs.servicefabric.v20200301.ApplicationTypeVersionsCleanupPolicyArgs>;
    /**
     * The AAD authentication settings of the cluster.
     */
    azureActiveDirectory?: pulumi.Input<inputs.servicefabric.v20200301.AzureActiveDirectoryArgs>;
    /**
     * The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     */
    certificate?: pulumi.Input<inputs.servicefabric.v20200301.CertificateDescriptionArgs>;
    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    certificateCommonNames?: pulumi.Input<inputs.servicefabric.v20200301.ServerCertificateCommonNamesArgs>;
    /**
     * The list of client certificates referenced by common name that are allowed to manage the cluster.
     */
    clientCertificateCommonNames?: pulumi.Input<pulumi.Input<inputs.servicefabric.v20200301.ClientCertificateCommonNameArgs>[]>;
    /**
     * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     */
    clientCertificateThumbprints?: pulumi.Input<pulumi.Input<inputs.servicefabric.v20200301.ClientCertificateThumbprintArgs>[]>;
    /**
     * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     */
    clusterCodeVersion?: pulumi.Input<string>;
    /**
     * The name of the cluster resource.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The storage account information for storing Service Fabric diagnostic logs.
     */
    diagnosticsStorageAccountConfig?: pulumi.Input<inputs.servicefabric.v20200301.DiagnosticsStorageAccountConfigArgs>;
    /**
     * Indicates if the event store service is enabled.
     */
    eventStoreServiceEnabled?: pulumi.Input<boolean>;
    /**
     * The list of custom fabric settings to configure the cluster.
     */
    fabricSettings?: pulumi.Input<pulumi.Input<inputs.servicefabric.v20200301.SettingsSectionDescriptionArgs>[]>;
    /**
     * Azure resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The http management endpoint of the cluster.
     */
    managementEndpoint: pulumi.Input<string>;
    /**
     * The list of node types in the cluster.
     */
    nodeTypes: pulumi.Input<pulumi.Input<inputs.servicefabric.v20200301.NodeTypeDescriptionArgs>[]>;
    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     *
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     */
    reliabilityLevel?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The server certificate used by reverse proxy.
     */
    reverseProxyCertificate?: pulumi.Input<inputs.servicefabric.v20200301.CertificateDescriptionArgs>;
    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     */
    reverseProxyCertificateCommonNames?: pulumi.Input<inputs.servicefabric.v20200301.ServerCertificateCommonNamesArgs>;
    /**
     * Azure resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The policy to use when upgrading the cluster.
     */
    upgradeDescription?: pulumi.Input<inputs.servicefabric.v20200301.ClusterUpgradePolicyArgs>;
    /**
     * The upgrade mode of the cluster when new Service Fabric runtime version is available.
     *
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     */
    upgradeMode?: pulumi.Input<string>;
    /**
     * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     */
    vmImage?: pulumi.Input<string>;
}
