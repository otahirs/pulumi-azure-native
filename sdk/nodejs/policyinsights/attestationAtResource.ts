// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * An attestation resource.
 * API Version: 2022-09-01.
 * Previous API Version: 2021-01-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Create attestation at individual resource scope
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const attestationAtResource = new azure_native.policyinsights.AttestationAtResource("attestationAtResource", {
 *     assessmentDate: "2021-06-10T00:00:00Z",
 *     attestationName: "790996e6-9871-4b1f-9cd9-ec42cd6ced1e",
 *     comments: "This subscription has passed a security audit.",
 *     complianceState: "Compliant",
 *     evidence: [{
 *         description: "The results of the security audit.",
 *         sourceUri: "https://gist.github.com/contoso/9573e238762c60166c090ae16b814011",
 *     }],
 *     expiresOn: "2021-06-15T00:00:00Z",
 *     metadata: {
 *         departmentId: "NYC-MARKETING-1",
 *     },
 *     owner: "55a32e28-3aa5-4eea-9b5a-4cd85153b966",
 *     policyAssignmentId: "/subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/providers/microsoft.authorization/policyassignments/b101830944f246d8a14088c5",
 *     policyDefinitionReferenceId: "0b158b46-ff42-4799-8e39-08a5c23b4551",
 *     resourceId: "subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/resourcegroups/myrg/providers/microsoft.compute/virtualMachines/devVM",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:policyinsights:AttestationAtResource 790996e6-9871-4b1f-9cd9-ec42cd6ced1e /subscriptions/35ee058e-5fa0-414c-8145-3ebb8d09b6e2/resourcegroups/myrg/providers/microsoft.compute/virtualMachines/devVM/providers/microsoft.policyinsights/attestations/790996e6-9871-4b1f-9cd9-ec42cd6ced1e 
 * ```
 */
export class AttestationAtResource extends pulumi.CustomResource {
    /**
     * Get an existing AttestationAtResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AttestationAtResource {
        return new AttestationAtResource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:policyinsights:AttestationAtResource';

    /**
     * Returns true if the given object is an instance of AttestationAtResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AttestationAtResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttestationAtResource.__pulumiType;
    }

    /**
     * The time the evidence was assessed
     */
    public readonly assessmentDate!: pulumi.Output<string | undefined>;
    /**
     * Comments describing why this attestation was created.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * The compliance state that should be set on the resource.
     */
    public readonly complianceState!: pulumi.Output<string | undefined>;
    /**
     * The evidence supporting the compliance state set in this attestation.
     */
    public readonly evidence!: pulumi.Output<outputs.policyinsights.AttestationEvidenceResponse[] | undefined>;
    /**
     * The time the compliance state should expire.
     */
    public readonly expiresOn!: pulumi.Output<string | undefined>;
    /**
     * The time the compliance state was last changed in this attestation.
     */
    public /*out*/ readonly lastComplianceStateChangeAt!: pulumi.Output<string>;
    /**
     * Additional metadata for this attestation
     */
    public readonly metadata!: pulumi.Output<any | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID.
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * The resource ID of the policy assignment that the attestation is setting the state for.
     */
    public readonly policyAssignmentId!: pulumi.Output<string>;
    /**
     * The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
     */
    public readonly policyDefinitionReferenceId!: pulumi.Output<string | undefined>;
    /**
     * The status of the attestation.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.policyinsights.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a AttestationAtResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttestationAtResourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.policyAssignmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyAssignmentId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["assessmentDate"] = args ? args.assessmentDate : undefined;
            resourceInputs["attestationName"] = args ? args.attestationName : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["complianceState"] = args ? args.complianceState : undefined;
            resourceInputs["evidence"] = args ? args.evidence : undefined;
            resourceInputs["expiresOn"] = args ? args.expiresOn : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["policyAssignmentId"] = args ? args.policyAssignmentId : undefined;
            resourceInputs["policyDefinitionReferenceId"] = args ? args.policyDefinitionReferenceId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["lastComplianceStateChangeAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["assessmentDate"] = undefined /*out*/;
            resourceInputs["comments"] = undefined /*out*/;
            resourceInputs["complianceState"] = undefined /*out*/;
            resourceInputs["evidence"] = undefined /*out*/;
            resourceInputs["expiresOn"] = undefined /*out*/;
            resourceInputs["lastComplianceStateChangeAt"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["policyAssignmentId"] = undefined /*out*/;
            resourceInputs["policyDefinitionReferenceId"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:policyinsights/v20210101:AttestationAtResource" }, { type: "azure-native:policyinsights/v20220901:AttestationAtResource" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AttestationAtResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AttestationAtResource resource.
 */
export interface AttestationAtResourceArgs {
    /**
     * The time the evidence was assessed
     */
    assessmentDate?: pulumi.Input<string>;
    /**
     * The name of the attestation.
     */
    attestationName?: pulumi.Input<string>;
    /**
     * Comments describing why this attestation was created.
     */
    comments?: pulumi.Input<string>;
    /**
     * The compliance state that should be set on the resource.
     */
    complianceState?: pulumi.Input<string | enums.policyinsights.ComplianceState>;
    /**
     * The evidence supporting the compliance state set in this attestation.
     */
    evidence?: pulumi.Input<pulumi.Input<inputs.policyinsights.AttestationEvidenceArgs>[]>;
    /**
     * The time the compliance state should expire.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * Additional metadata for this attestation
     */
    metadata?: any;
    /**
     * The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID.
     */
    owner?: pulumi.Input<string>;
    /**
     * The resource ID of the policy assignment that the attestation is setting the state for.
     */
    policyAssignmentId: pulumi.Input<string>;
    /**
     * The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
     */
    policyDefinitionReferenceId?: pulumi.Input<string>;
    /**
     * Resource ID.
     */
    resourceId: pulumi.Input<string>;
}
