// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Instance of an Azure ML web service resource.
 *
 * ## Example Usage
 * ### PUT WebService
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const webService = new azure_native.machinelearning.v20170101.WebService("webService", {
 *     location: "West US",
 *     properties: {
 *         assets: {
 *             asset1: {
 *                 locationInfo: {
 *                     credentials: "",
 *                     uri: "aml://module/moduleId-1",
 *                 },
 *                 name: "Execute R Script",
 *                 type: "Module",
 *             },
 *             asset2: {
 *                 locationInfo: {
 *                     credentials: "",
 *                     uri: "aml://module/moduleId-2",
 *                 },
 *                 name: "Import Data",
 *                 type: "Module",
 *             },
 *         },
 *         commitmentPlan: {
 *             id: "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.MachineLearning/commitmentPlans/commitmentPlanName",
 *         },
 *         description: "Web Service Description",
 *         diagnostics: {
 *             level: "None",
 *         },
 *         exampleRequest: {
 *             inputs: {
 *                 input1: [
 *                     ["age"],
 *                     ["workclass"],
 *                     ["fnlwgt"],
 *                     ["education"],
 *                     ["education-num"],
 *                 ],
 *             },
 *         },
 *         exposeSampleData: true,
 *         input: {
 *             description: "",
 *             properties: {
 *                 input1: {
 *                     description: "",
 *                     properties: {
 *                         column_name: {
 *                             type: "String",
 *                             xMsIsnullable: false,
 *                         },
 *                     },
 *                     title: "",
 *                     type: "object",
 *                 },
 *             },
 *             title: "",
 *             type: "object",
 *         },
 *         machineLearningWorkspace: {
 *             id: "workspaceId",
 *         },
 *         output: {
 *             description: "",
 *             properties: {
 *                 output1: {
 *                     description: "",
 *                     properties: {
 *                         age: {
 *                             format: "Int32",
 *                             type: "Integer",
 *                             xMsIsnullable: true,
 *                         },
 *                         workclass: {
 *                             type: "String",
 *                             xMsIsnullable: false,
 *                         },
 *                     },
 *                     title: "",
 *                     type: "object",
 *                 },
 *             },
 *             title: "",
 *             type: "object",
 *         },
 *         "package": {
 *             edges: [
 *                 {
 *                     sourceNodeId: "node2",
 *                     sourcePortId: "Results dataset",
 *                     targetNodeId: "node1",
 *                     targetPortId: "Dataset2",
 *                 },
 *                 {
 *                     sourceNodeId: "node3",
 *                     targetNodeId: "node1",
 *                     targetPortId: "Dataset1",
 *                 },
 *                 {
 *                     sourceNodeId: "node1",
 *                     sourcePortId: "Result Dataset",
 *                     targetNodeId: "node4",
 *                 },
 *             ],
 *             graphParameters: {},
 *             nodes: {
 *                 node1: {
 *                     assetId: "asset1",
 *                     parameters: {
 *                         "R Script": {
 *                             certificateThumbprint: "",
 *                             value: "The R Script",
 *                         },
 *                         "R Version": {
 *                             certificateThumbprint: "",
 *                             value: "CRAN R 3.1.0",
 *                         },
 *                     },
 *                 },
 *                 node2: {
 *                     assetId: "asset2",
 *                     parameters: {
 *                         "Account Key": {
 *                             certificateThumbprint: "TheThumbprint",
 *                             value: "Encrypted Key",
 *                         },
 *                         "Account Name": {
 *                             certificateThumbprint: "",
 *                             value: "accountName",
 *                         },
 *                         "Please Specify Authentication Type": {
 *                             certificateThumbprint: "",
 *                             value: "Account",
 *                         },
 *                         "Please Specify Data Source": {
 *                             certificateThumbprint: "",
 *                             value: "AzureBlobStorage",
 *                         },
 *                     },
 *                 },
 *                 node3: {
 *                     inputId: "input1",
 *                 },
 *                 node4: {
 *                     outputId: "output1",
 *                 },
 *             },
 *         },
 *         packageType: "Graph",
 *         parameters: {},
 *         payloadsInBlobStorage: false,
 *         readOnly: false,
 *         realtimeConfiguration: {
 *             maxConcurrentCalls: 4,
 *         },
 *         storageAccount: {
 *             key: "Storage_Key",
 *             name: "Storage_Name",
 *         },
 *         title: "Web Service Title",
 *     },
 *     resourceGroupName: "OneResourceGroupName",
 *     tags: {
 *         tag1: "value1",
 *         tag2: "value2",
 *     },
 *     webServiceName: "TargetWebServiceName",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:machinelearning/v20170101:WebService myresource1 TheWebServiceId 
 * ```
 */
export class WebService extends pulumi.CustomResource {
    /**
     * Get an existing WebService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WebService {
        return new WebService(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:machinelearning/v20170101:WebService';

    /**
     * Returns true if the given object is an instance of WebService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebService.__pulumiType;
    }

    /**
     * Specifies the location of the resource.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Specifies the name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Contains the property payload that describes the web service.
     */
    public readonly properties!: pulumi.Output<outputs.machinelearning.v20170101.WebServicePropertiesForGraphResponse>;
    /**
     * Contains resource tags defined as key/value pairs.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a WebService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["properties"] = args ? (args.properties ? pulumi.output(args.properties).apply(inputs.machinelearning.v20170101.webServicePropertiesForGraphArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["webServiceName"] = args ? args.webServiceName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:machinelearning:WebService" }, { type: "azure-native:machinelearning/v20160501preview:WebService" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WebService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WebService resource.
 */
export interface WebServiceArgs {
    /**
     * Specifies the location of the resource.
     */
    location?: pulumi.Input<string>;
    /**
     * Contains the property payload that describes the web service.
     */
    properties: pulumi.Input<inputs.machinelearning.v20170101.WebServicePropertiesForGraphArgs>;
    /**
     * Name of the resource group in which the web service is located.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Contains resource tags defined as key/value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the web service.
     */
    webServiceName?: pulumi.Input<string>;
}
