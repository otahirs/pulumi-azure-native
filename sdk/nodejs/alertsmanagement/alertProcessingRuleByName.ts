// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Alert processing rule object containing target scopes, conditions and scheduling logic.
 * API Version: 2021-08-08.
 *
 * ## Example Usage
 * ### Create or update a rule that adds an action group to all alerts in a subscription
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const alertProcessingRuleByName = new azure_native.alertsmanagement.AlertProcessingRuleByName("alertProcessingRuleByName", {
 *     alertProcessingRuleName: "AddActionGroupToSubscription",
 *     location: "Global",
 *     properties: {
 *         actions: [{
 *             actionGroupIds: ["/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/ActionGroup1"],
 *             actionType: "AddActionGroups",
 *         }],
 *         description: "Add ActionGroup1 to all alerts in the subscription",
 *         enabled: true,
 *         scopes: ["/subscriptions/subId1"],
 *     },
 *     resourceGroupName: "alertscorrelationrg",
 *     tags: {},
 * });
 *
 * ```
 * ### Create or update a rule that adds two action groups to all Sev0 and Sev1 alerts in two resource groups
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const alertProcessingRuleByName = new azure_native.alertsmanagement.AlertProcessingRuleByName("alertProcessingRuleByName", {
 *     alertProcessingRuleName: "AddActionGroupsBySeverity",
 *     location: "Global",
 *     properties: {
 *         actions: [{
 *             actionGroupIds: [
 *                 "/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId1",
 *                 "/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId2",
 *             ],
 *             actionType: "AddActionGroups",
 *         }],
 *         conditions: [{
 *             field: "Severity",
 *             operator: "Equals",
 *             values: [
 *                 "sev0",
 *                 "sev1",
 *             ],
 *         }],
 *         description: "Add AGId1 and AGId2 to all Sev0 and Sev1 alerts in these resourceGroups",
 *         enabled: true,
 *         scopes: [
 *             "/subscriptions/subId1/resourceGroups/RGId1",
 *             "/subscriptions/subId1/resourceGroups/RGId2",
 *         ],
 *     },
 *     resourceGroupName: "alertscorrelationrg",
 *     tags: {},
 * });
 *
 * ```
 * ### Create or update a rule that removes all action groups from alerts on a specific VM during a one-off maintenance window (1800-2000 at a specific date, Pacific Standard Time)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const alertProcessingRuleByName = new azure_native.alertsmanagement.AlertProcessingRuleByName("alertProcessingRuleByName", {
 *     alertProcessingRuleName: "RemoveActionGroupsMaintenanceWindow",
 *     location: "Global",
 *     properties: {
 *         actions: [{
 *             actionType: "RemoveAllActionGroups",
 *         }],
 *         description: "Removes all ActionGroups from all Alerts on VMName during the maintenance window",
 *         enabled: true,
 *         schedule: {
 *             effectiveFrom: "2021-04-15T18:00:00",
 *             effectiveUntil: "2021-04-15T20:00:00",
 *             timeZone: "Pacific Standard Time",
 *         },
 *         scopes: ["/subscriptions/subId1/resourceGroups/RGId1/providers/Microsoft.Compute/virtualMachines/VMName"],
 *     },
 *     resourceGroupName: "alertscorrelationrg",
 *     tags: {},
 * });
 *
 * ```
 * ### Create or update a rule that removes all action groups from all alerts in a subscription coming from a specific alert rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const alertProcessingRuleByName = new azure_native.alertsmanagement.AlertProcessingRuleByName("alertProcessingRuleByName", {
 *     alertProcessingRuleName: "RemoveActionGroupsSpecificAlertRule",
 *     location: "Global",
 *     properties: {
 *         actions: [{
 *             actionType: "RemoveAllActionGroups",
 *         }],
 *         conditions: [{
 *             field: "AlertRuleId",
 *             operator: "Equals",
 *             values: ["/subscriptions/suubId1/resourceGroups/Rgid2/providers/microsoft.insights/activityLogAlerts/RuleName"],
 *         }],
 *         description: "Removes all ActionGroups from all Alerts that fire on above AlertRule",
 *         enabled: true,
 *         scopes: ["/subscriptions/subId1"],
 *     },
 *     resourceGroupName: "alertscorrelationrg",
 *     tags: {},
 * });
 *
 * ```
 * ### Create or update a rule that removes all action groups from all alerts on any VM in two resource groups during a recurring maintenance window (2200-0400 every Sat and Sun, India Standard Time)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const alertProcessingRuleByName = new azure_native.alertsmanagement.AlertProcessingRuleByName("alertProcessingRuleByName", {
 *     alertProcessingRuleName: "RemoveActionGroupsRecurringMaintenance",
 *     location: "Global",
 *     properties: {
 *         actions: [{
 *             actionType: "RemoveAllActionGroups",
 *         }],
 *         conditions: [{
 *             field: "TargetResourceType",
 *             operator: "Equals",
 *             values: ["microsoft.compute/virtualmachines"],
 *         }],
 *         description: "Remove all ActionGroups from all Vitual machine Alerts during the recurring maintenance",
 *         enabled: true,
 *         schedule: {
 *             recurrences: [{
 *                 daysOfWeek: [
 *                     "Saturday",
 *                     "Sunday",
 *                 ],
 *                 endTime: "04:00:00",
 *                 recurrenceType: "Weekly",
 *                 startTime: "22:00:00",
 *             }],
 *             timeZone: "India Standard Time",
 *         },
 *         scopes: [
 *             "/subscriptions/subId1/resourceGroups/RGId1",
 *             "/subscriptions/subId1/resourceGroups/RGId2",
 *         ],
 *     },
 *     resourceGroupName: "alertscorrelationrg",
 *     tags: {},
 * });
 *
 * ```
 * ### Create or update a rule that removes all action groups outside business hours (Mon-Fri 09:00-17:00, Eastern Standard Time)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const alertProcessingRuleByName = new azure_native.alertsmanagement.AlertProcessingRuleByName("alertProcessingRuleByName", {
 *     alertProcessingRuleName: "RemoveActionGroupsOutsideBusinessHours",
 *     location: "Global",
 *     properties: {
 *         actions: [{
 *             actionType: "RemoveAllActionGroups",
 *         }],
 *         description: "Remove all ActionGroups outside business hours",
 *         enabled: true,
 *         schedule: {
 *             recurrences: [
 *                 {
 *                     endTime: "09:00:00",
 *                     recurrenceType: "Daily",
 *                     startTime: "17:00:00",
 *                 },
 *                 {
 *                     daysOfWeek: [
 *                         "Saturday",
 *                         "Sunday",
 *                     ],
 *                     recurrenceType: "Weekly",
 *                 },
 *             ],
 *             timeZone: "Eastern Standard Time",
 *         },
 *         scopes: ["/subscriptions/subId1"],
 *     },
 *     resourceGroupName: "alertscorrelationrg",
 *     tags: {},
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:alertsmanagement:AlertProcessingRuleByName RemoveActionGroupsOutsideBusinessHours /subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/RemoveActionGroupsOutsideBusinessHours 
 * ```
 */
export class AlertProcessingRuleByName extends pulumi.CustomResource {
    /**
     * Get an existing AlertProcessingRuleByName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AlertProcessingRuleByName {
        return new AlertProcessingRuleByName(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:alertsmanagement:AlertProcessingRuleByName';

    /**
     * Returns true if the given object is an instance of AlertProcessingRuleByName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertProcessingRuleByName {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertProcessingRuleByName.__pulumiType;
    }

    /**
     * Resource location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Azure resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Alert processing rule properties.
     */
    public readonly properties!: pulumi.Output<outputs.alertsmanagement.AlertProcessingRulePropertiesResponse>;
    /**
     * Alert processing rule system data.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.alertsmanagement.SystemDataResponse>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Azure resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a AlertProcessingRuleByName resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertProcessingRuleByNameArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["alertProcessingRuleName"] = args ? args.alertProcessingRuleName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["properties"] = args ? (args.properties ? pulumi.output(args.properties).apply(inputs.alertsmanagement.alertProcessingRulePropertiesArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:alertsmanagement/v20181102privatepreview:AlertProcessingRuleByName" }, { type: "azure-native:alertsmanagement/v20190505preview:AlertProcessingRuleByName" }, { type: "azure-native:alertsmanagement/v20210808:AlertProcessingRuleByName" }, { type: "azure-native:alertsmanagement/v20210808preview:AlertProcessingRuleByName" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AlertProcessingRuleByName.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AlertProcessingRuleByName resource.
 */
export interface AlertProcessingRuleByNameArgs {
    /**
     * The name of the alert processing rule that needs to be created/updated.
     */
    alertProcessingRuleName?: pulumi.Input<string>;
    /**
     * Resource location
     */
    location?: pulumi.Input<string>;
    /**
     * Alert processing rule properties.
     */
    properties?: pulumi.Input<inputs.alertsmanagement.AlertProcessingRulePropertiesArgs>;
    /**
     * Resource group name where the resource is created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
