// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AppArgs } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { BuildServiceAgentPoolArgs } from "./buildServiceAgentPool";
export type BuildServiceAgentPool = import("./buildServiceAgentPool").BuildServiceAgentPool;
export const BuildServiceAgentPool: typeof import("./buildServiceAgentPool").BuildServiceAgentPool = null as any;
utilities.lazyLoad(exports, ["BuildServiceAgentPool"], () => require("./buildServiceAgentPool"));

export { BuildServiceBuilderArgs } from "./buildServiceBuilder";
export type BuildServiceBuilder = import("./buildServiceBuilder").BuildServiceBuilder;
export const BuildServiceBuilder: typeof import("./buildServiceBuilder").BuildServiceBuilder = null as any;
utilities.lazyLoad(exports, ["BuildServiceBuilder"], () => require("./buildServiceBuilder"));

export { BuildpackBindingArgs } from "./buildpackBinding";
export type BuildpackBinding = import("./buildpackBinding").BuildpackBinding;
export const BuildpackBinding: typeof import("./buildpackBinding").BuildpackBinding = null as any;
utilities.lazyLoad(exports, ["BuildpackBinding"], () => require("./buildpackBinding"));

export { ConfigurationServiceArgs } from "./configurationService";
export type ConfigurationService = import("./configurationService").ConfigurationService;
export const ConfigurationService: typeof import("./configurationService").ConfigurationService = null as any;
utilities.lazyLoad(exports, ["ConfigurationService"], () => require("./configurationService"));

export { DeploymentArgs } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetBuildServiceAgentPoolArgs, GetBuildServiceAgentPoolResult, GetBuildServiceAgentPoolOutputArgs } from "./getBuildServiceAgentPool";
export const getBuildServiceAgentPool: typeof import("./getBuildServiceAgentPool").getBuildServiceAgentPool = null as any;
export const getBuildServiceAgentPoolOutput: typeof import("./getBuildServiceAgentPool").getBuildServiceAgentPoolOutput = null as any;
utilities.lazyLoad(exports, ["getBuildServiceAgentPool","getBuildServiceAgentPoolOutput"], () => require("./getBuildServiceAgentPool"));

export { GetBuildServiceBuilderArgs, GetBuildServiceBuilderResult, GetBuildServiceBuilderOutputArgs } from "./getBuildServiceBuilder";
export const getBuildServiceBuilder: typeof import("./getBuildServiceBuilder").getBuildServiceBuilder = null as any;
export const getBuildServiceBuilderOutput: typeof import("./getBuildServiceBuilder").getBuildServiceBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getBuildServiceBuilder","getBuildServiceBuilderOutput"], () => require("./getBuildServiceBuilder"));

export { GetBuildpackBindingArgs, GetBuildpackBindingResult, GetBuildpackBindingOutputArgs } from "./getBuildpackBinding";
export const getBuildpackBinding: typeof import("./getBuildpackBinding").getBuildpackBinding = null as any;
export const getBuildpackBindingOutput: typeof import("./getBuildpackBinding").getBuildpackBindingOutput = null as any;
utilities.lazyLoad(exports, ["getBuildpackBinding","getBuildpackBindingOutput"], () => require("./getBuildpackBinding"));

export { GetConfigurationServiceArgs, GetConfigurationServiceResult, GetConfigurationServiceOutputArgs } from "./getConfigurationService";
export const getConfigurationService: typeof import("./getConfigurationService").getConfigurationService = null as any;
export const getConfigurationServiceOutput: typeof import("./getConfigurationService").getConfigurationServiceOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationService","getConfigurationServiceOutput"], () => require("./getConfigurationService"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceRegistryArgs, GetServiceRegistryResult, GetServiceRegistryOutputArgs } from "./getServiceRegistry";
export const getServiceRegistry: typeof import("./getServiceRegistry").getServiceRegistry = null as any;
export const getServiceRegistryOutput: typeof import("./getServiceRegistry").getServiceRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRegistry","getServiceRegistryOutput"], () => require("./getServiceRegistry"));

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceRegistryArgs } from "./serviceRegistry";
export type ServiceRegistry = import("./serviceRegistry").ServiceRegistry;
export const ServiceRegistry: typeof import("./serviceRegistry").ServiceRegistry = null as any;
utilities.lazyLoad(exports, ["ServiceRegistry"], () => require("./serviceRegistry"));


// Export enums:
export * from "../../types/enums/appplatform/v20221101preview";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azure-native:appplatform/v20221101preview:App":
                return new App(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:BuildServiceAgentPool":
                return new BuildServiceAgentPool(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:BuildServiceBuilder":
                return new BuildServiceBuilder(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:BuildpackBinding":
                return new BuildpackBinding(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:ConfigurationService":
                return new ConfigurationService(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:Service":
                return new Service(name, <any>undefined, { urn })
            case "azure-native:appplatform/v20221101preview:ServiceRegistry":
                return new ServiceRegistry(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "appplatform/v20221101preview", _module)
