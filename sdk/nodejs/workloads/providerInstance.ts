// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A provider instance associated with SAP monitor.
 * API Version: 2023-04-01.
 * Previous API Version: 2021-12-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Create a Db2 provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         dbName: "dbName",
 *         dbPassword: "password",
 *         dbPasswordUri: "",
 *         dbPort: "dbPort",
 *         dbUsername: "username",
 *         hostname: "hostname",
 *         providerType: "Db2",
 *         sapSid: "SID",
 *         sslCertificateUri: "https://storageaccount.blob.core.windows.net/containername/filename",
 *         sslPreference: "ServerCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a Db2 provider with Root Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         dbName: "dbName",
 *         dbPassword: "password",
 *         dbPasswordUri: "",
 *         dbPort: "dbPort",
 *         dbUsername: "username",
 *         hostname: "hostname",
 *         providerType: "Db2",
 *         sapSid: "SID",
 *         sslPreference: "RootCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a MsSqlServer provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         dbPassword: "****",
 *         dbPasswordUri: "",
 *         dbPort: "5912",
 *         dbUsername: "user",
 *         hostname: "hostname",
 *         providerType: "MsSqlServer",
 *         sapSid: "sid",
 *         sslCertificateUri: "https://storageaccount.blob.core.windows.net/containername/filename",
 *         sslPreference: "ServerCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a MsSqlServer provider with Root Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         dbPassword: "****",
 *         dbPasswordUri: "",
 *         dbPort: "5912",
 *         dbUsername: "user",
 *         hostname: "hostname",
 *         providerType: "MsSqlServer",
 *         sapSid: "sid",
 *         sslPreference: "RootCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a OS provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         prometheusUrl: "http://192.168.0.0:9090/metrics",
 *         providerType: "PrometheusOS",
 *         sapSid: "SID",
 *         sslCertificateUri: "https://storageaccount.blob.core.windows.net/containername/filename",
 *         sslPreference: "ServerCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a OS provider with Root Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         prometheusUrl: "http://192.168.0.0:9090/metrics",
 *         providerType: "PrometheusOS",
 *         sapSid: "SID",
 *         sslPreference: "RootCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a PrometheusHaCluster provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         clusterName: "clusterName",
 *         hostname: "hostname",
 *         prometheusUrl: "http://192.168.0.0:9090/metrics",
 *         providerType: "PrometheusHaCluster",
 *         sid: "sid",
 *         sslCertificateUri: "https://storageaccount.blob.core.windows.net/containername/filename",
 *         sslPreference: "ServerCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a PrometheusHaCluster provider with Root Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         clusterName: "clusterName",
 *         hostname: "hostname",
 *         prometheusUrl: "http://192.168.0.0:9090/metrics",
 *         providerType: "PrometheusHaCluster",
 *         sid: "sid",
 *         sslPreference: "RootCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a SAP monitor Hana provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         dbName: "db",
 *         dbPassword: "****",
 *         dbPasswordUri: "",
 *         dbUsername: "user",
 *         hostname: "name",
 *         instanceNumber: "00",
 *         providerType: "SapHana",
 *         sapSid: "SID",
 *         sqlPort: "0000",
 *         sslCertificateUri: "https://storageaccount.blob.core.windows.net/containername/filename",
 *         sslHostNameInCertificate: "xyz.domain.com",
 *         sslPreference: "ServerCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a SAP monitor Hana provider with Root Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         dbName: "db",
 *         dbPassword: "****",
 *         dbPasswordUri: "",
 *         dbUsername: "user",
 *         hostname: "name",
 *         instanceNumber: "00",
 *         providerType: "SapHana",
 *         sapSid: "SID",
 *         sqlPort: "0000",
 *         sslHostNameInCertificate: "xyz.domain.com",
 *         sslPreference: "RootCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a SAP monitor NetWeaver provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         providerType: "SapNetWeaver",
 *         sapClientId: "111",
 *         sapHostFileEntries: ["127.0.0.1 name fqdn"],
 *         sapHostname: "name",
 *         sapInstanceNr: "00",
 *         sapPassword: "****",
 *         sapPasswordUri: "",
 *         sapPortNumber: "1234",
 *         sapSid: "SID",
 *         sapUsername: "username",
 *         sslCertificateUri: "https://storageaccount.blob.core.windows.net/containername/filename",
 *         sslPreference: "ServerCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 * ### Create a SAP monitor NetWeaver provider with Root Certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const providerInstance = new azure_native.workloads.ProviderInstance("providerInstance", {
 *     monitorName: "mySapMonitor",
 *     providerInstanceName: "myProviderInstance",
 *     providerSettings: {
 *         providerType: "SapNetWeaver",
 *         sapClientId: "111",
 *         sapHostFileEntries: ["127.0.0.1 name fqdn"],
 *         sapHostname: "name",
 *         sapInstanceNr: "00",
 *         sapPassword: "****",
 *         sapPasswordUri: "",
 *         sapPortNumber: "1234",
 *         sapSid: "SID",
 *         sapUsername: "username",
 *         sslPreference: "RootCertificate",
 *     },
 *     resourceGroupName: "myResourceGroup",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:workloads:ProviderInstance myProviderInstance /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance 
 * ```
 */
export class ProviderInstance extends pulumi.CustomResource {
    /**
     * Get an existing ProviderInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProviderInstance {
        return new ProviderInstance(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:workloads:ProviderInstance';

    /**
     * Returns true if the given object is an instance of ProviderInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderInstance.__pulumiType;
    }

    /**
     * Defines the provider instance errors.
     */
    public /*out*/ readonly errors!: pulumi.Output<outputs.workloads.ProviderInstancePropertiesResponseErrors>;
    /**
     * [currently not in use] Managed service identity(user assigned identities)
     */
    public readonly identity!: pulumi.Output<outputs.workloads.UserAssignedServiceIdentityResponse | undefined>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Defines the provider specific properties.
     */
    public readonly providerSettings!: pulumi.Output<outputs.workloads.DB2ProviderInstancePropertiesResponse | outputs.workloads.HanaDbProviderInstancePropertiesResponse | outputs.workloads.MsSqlServerProviderInstancePropertiesResponse | outputs.workloads.PrometheusHaClusterProviderInstancePropertiesResponse | outputs.workloads.PrometheusOSProviderInstancePropertiesResponse | outputs.workloads.SapNetWeaverProviderInstancePropertiesResponse | undefined>;
    /**
     * State of provisioning of the provider instance
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.workloads.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ProviderInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderInstanceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.monitorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["monitorName"] = args ? args.monitorName : undefined;
            resourceInputs["providerInstanceName"] = args ? args.providerInstanceName : undefined;
            resourceInputs["providerSettings"] = args ? args.providerSettings : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["providerSettings"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:workloads/v20211201preview:ProviderInstance" }, { type: "azure-native:workloads/v20221101preview:ProviderInstance" }, { type: "azure-native:workloads/v20230401:ProviderInstance" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ProviderInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProviderInstance resource.
 */
export interface ProviderInstanceArgs {
    /**
     * [currently not in use] Managed service identity(user assigned identities)
     */
    identity?: pulumi.Input<inputs.workloads.UserAssignedServiceIdentityArgs>;
    /**
     * Name of the SAP monitor resource.
     */
    monitorName: pulumi.Input<string>;
    /**
     * Name of the provider instance.
     */
    providerInstanceName?: pulumi.Input<string>;
    /**
     * Defines the provider specific properties.
     */
    providerSettings?: pulumi.Input<inputs.workloads.DB2ProviderInstancePropertiesArgs | inputs.workloads.HanaDbProviderInstancePropertiesArgs | inputs.workloads.MsSqlServerProviderInstancePropertiesArgs | inputs.workloads.PrometheusHaClusterProviderInstancePropertiesArgs | inputs.workloads.PrometheusOSProviderInstancePropertiesArgs | inputs.workloads.SapNetWeaverProviderInstancePropertiesArgs>;
    /**
     * The name of the resource group. The name is case insensitive.
     */
    resourceGroupName: pulumi.Input<string>;
}
