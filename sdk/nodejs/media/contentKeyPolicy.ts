// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A Content Key Policy resource.
 * API Version: 2022-08-01.
 * Previous API Version: 2020-05-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Creates a Content Key Policy with ClearKey option and Token Restriction
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const contentKeyPolicy = new azure_native.media.ContentKeyPolicy("contentKeyPolicy", {
 *     accountName: "contosomedia",
 *     contentKeyPolicyName: "PolicyWithClearKeyOptionAndSwtTokenRestriction",
 *     description: "ArmPolicyDescription",
 *     options: [{
 *         configuration: {
 *             odataType: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
 *         },
 *         name: "ClearKeyOption",
 *         restriction: {
 *             audience: "urn:audience",
 *             issuer: "urn:issuer",
 *             odataType: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
 *             primaryVerificationKey: {
 *                 keyValue: "AAAAAAAAAAAAAAAAAAAAAA==",
 *                 odataType: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
 *             },
 *             restrictionTokenType: "Swt",
 *         },
 *     }],
 *     resourceGroupName: "contosorg",
 * });
 *
 * ```
 * ### Creates a Content Key Policy with PlayReady option and Open Restriction
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const contentKeyPolicy = new azure_native.media.ContentKeyPolicy("contentKeyPolicy", {
 *     accountName: "contosomedia",
 *     contentKeyPolicyName: "PolicyWithPlayReadyOptionAndOpenRestriction",
 *     description: "ArmPolicyDescription",
 *     options: [{
 *         configuration: {
 *             licenses: [{
 *                 allowTestDevices: true,
 *                 beginDate: "2017-10-16T18:22:53.46Z",
 *                 contentKeyLocation: {
 *                     odataType: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
 *                 },
 *                 contentType: "UltraVioletDownload",
 *                 licenseType: "Persistent",
 *                 playRight: {
 *                     allowPassingVideoContentToUnknownOutput: "NotAllowed",
 *                     digitalVideoOnlyContentRestriction: false,
 *                     imageConstraintForAnalogComponentVideoRestriction: true,
 *                     imageConstraintForAnalogComputerMonitorRestriction: false,
 *                     scmsRestriction: 2,
 *                 },
 *                 securityLevel: "SL150",
 *             }],
 *             odataType: "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration",
 *         },
 *         name: "ArmPolicyOptionName",
 *         restriction: {
 *             odataType: "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
 *         },
 *     }],
 *     resourceGroupName: "contosorg",
 * });
 *
 * ```
 * ### Creates a Content Key Policy with Widevine option and Token Restriction
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const contentKeyPolicy = new azure_native.media.ContentKeyPolicy("contentKeyPolicy", {
 *     accountName: "contosomedia",
 *     contentKeyPolicyName: "PolicyWithWidevineOptionAndJwtTokenRestriction",
 *     description: "ArmPolicyDescription",
 *     options: [{
 *         configuration: {
 *             odataType: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
 *             widevineTemplate: "{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}",
 *         },
 *         name: "widevineoption",
 *         restriction: {
 *             alternateVerificationKeys: [{
 *                 keyValue: "AAAAAAAAAAAAAAAAAAAAAA==",
 *                 odataType: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
 *             }],
 *             audience: "urn:audience",
 *             issuer: "urn:issuer",
 *             odataType: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
 *             primaryVerificationKey: {
 *                 exponent: "AQAB",
 *                 modulus: "AQAD",
 *                 odataType: "#Microsoft.Media.ContentKeyPolicyRsaTokenKey",
 *             },
 *             restrictionTokenType: "Jwt",
 *         },
 *     }],
 *     resourceGroupName: "contosorg",
 * });
 *
 * ```
 * ### Creates a Content Key Policy with multiple options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const contentKeyPolicy = new azure_native.media.ContentKeyPolicy("contentKeyPolicy", {
 *     accountName: "contosomedia",
 *     contentKeyPolicyName: "PolicyCreatedWithMultipleOptions",
 *     description: "ArmPolicyDescription",
 *     options: [
 *         {
 *             configuration: {
 *                 odataType: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
 *             },
 *             name: "ClearKeyOption",
 *             restriction: {
 *                 audience: "urn:audience",
 *                 issuer: "urn:issuer",
 *                 odataType: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
 *                 primaryVerificationKey: {
 *                     keyValue: "AAAAAAAAAAAAAAAAAAAAAA==",
 *                     odataType: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
 *                 },
 *                 restrictionTokenType: "Swt",
 *             },
 *         },
 *         {
 *             configuration: {
 *                 odataType: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
 *                 widevineTemplate: "{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}",
 *             },
 *             name: "widevineoption",
 *             restriction: {
 *                 odataType: "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
 *             },
 *         },
 *     ],
 *     resourceGroupName: "contosorg",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:media:ContentKeyPolicy PolicyCreatedWithMultipleOptions /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosorg/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyCreatedWithMultipleOptions 
 * ```
 */
export class ContentKeyPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ContentKeyPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ContentKeyPolicy {
        return new ContentKeyPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:media:ContentKeyPolicy';

    /**
     * Returns true if the given object is an instance of ContentKeyPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentKeyPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentKeyPolicy.__pulumiType;
    }

    /**
     * The creation date of the Policy
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * A description for the Policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The last modified date of the Policy
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The Key Policy options.
     */
    public readonly options!: pulumi.Output<outputs.media.ContentKeyPolicyOptionResponse[]>;
    /**
     * The legacy Policy ID.
     */
    public /*out*/ readonly policyId!: pulumi.Output<string>;
    /**
     * The system metadata relating to this resource.
     */
    public /*out*/ readonly systemData!: pulumi.Output<outputs.media.SystemDataResponse>;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ContentKeyPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentKeyPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.options === undefined) && !opts.urn) {
                throw new Error("Missing required property 'options'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["contentKeyPolicyName"] = args ? args.contentKeyPolicyName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
            resourceInputs["systemData"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:media/v20180330preview:ContentKeyPolicy" }, { type: "azure-native:media/v20180601preview:ContentKeyPolicy" }, { type: "azure-native:media/v20180701:ContentKeyPolicy" }, { type: "azure-native:media/v20200501:ContentKeyPolicy" }, { type: "azure-native:media/v20210601:ContentKeyPolicy" }, { type: "azure-native:media/v20211101:ContentKeyPolicy" }, { type: "azure-native:media/v20220801:ContentKeyPolicy" }, { type: "azure-native:media/v20230101:ContentKeyPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ContentKeyPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ContentKeyPolicy resource.
 */
export interface ContentKeyPolicyArgs {
    /**
     * The Media Services account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * The Content Key Policy name.
     */
    contentKeyPolicyName?: pulumi.Input<string>;
    /**
     * A description for the Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The Key Policy options.
     */
    options: pulumi.Input<pulumi.Input<inputs.media.ContentKeyPolicyOptionArgs>[]>;
    /**
     * The name of the resource group within the Azure subscription.
     */
    resourceGroupName: pulumi.Input<string>;
}
