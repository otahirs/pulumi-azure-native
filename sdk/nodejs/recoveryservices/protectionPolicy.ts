// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Base class for backup policy. Workload-specific backup policies are derived from this class.
 * API Version: 2023-02-01.
 * Previous API Version: 2021-02-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Create or Update Daily Azure Storage Protection Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "dailyPolicy2",
 *     properties: {
 *         backupManagementType: "AzureStorage",
 *         retentionPolicy: {
 *             dailySchedule: {
 *                 retentionDuration: {
 *                     count: 5,
 *                     durationType: "Days",
 *                 },
 *                 retentionTimes: ["2021-09-29T08:00:00.000Z"],
 *             },
 *             monthlySchedule: {
 *                 retentionDuration: {
 *                     count: 60,
 *                     durationType: "Months",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *                 retentionTimes: ["2021-09-29T08:00:00.000Z"],
 *             },
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             weeklySchedule: {
 *                 daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                 retentionDuration: {
 *                     count: 12,
 *                     durationType: "Weeks",
 *                 },
 *                 retentionTimes: ["2021-09-29T08:00:00.000Z"],
 *             },
 *             yearlySchedule: {
 *                 monthsOfYear: [azure_native.recoveryservices.MonthOfYear.January],
 *                 retentionDuration: {
 *                     count: 10,
 *                     durationType: "Years",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *                 retentionTimes: ["2021-09-29T08:00:00.000Z"],
 *             },
 *         },
 *         schedulePolicy: {
 *             schedulePolicyType: "SimpleSchedulePolicy",
 *             scheduleRunFrequency: "Daily",
 *             scheduleRunTimes: ["2021-09-29T08:00:00.000Z"],
 *         },
 *         timeZone: "UTC",
 *         workLoadType: "AzureFileShare",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "swaggertestvault",
 * });
 *
 * ```
 * ### Create or Update Enhanced Azure Vm Protection Policy with Hourly backup
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "v2-daily-sample",
 *     properties: {
 *         backupManagementType: "AzureIaasVM",
 *         instantRpRetentionRangeInDays: 30,
 *         policyType: "V2",
 *         retentionPolicy: {
 *             dailySchedule: {
 *                 retentionDuration: {
 *                     count: 180,
 *                     durationType: "Days",
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *             monthlySchedule: {
 *                 retentionDuration: {
 *                     count: 60,
 *                     durationType: "Months",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             weeklySchedule: {
 *                 daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                 retentionDuration: {
 *                     count: 12,
 *                     durationType: "Weeks",
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *             yearlySchedule: {
 *                 monthsOfYear: [azure_native.recoveryservices.MonthOfYear.January],
 *                 retentionDuration: {
 *                     count: 10,
 *                     durationType: "Years",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *         },
 *         schedulePolicy: {
 *             hourlySchedule: {
 *                 interval: 4,
 *                 scheduleWindowDuration: 16,
 *                 scheduleWindowStartTime: "2021-12-17T08:00:00Z",
 *             },
 *             schedulePolicyType: "SimpleSchedulePolicyV2",
 *             scheduleRunFrequency: "Hourly",
 *         },
 *         timeZone: "India Standard Time",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "NetSDKTestRsVault",
 * });
 *
 * ```
 * ### Create or Update Enhanced Azure Vm Protection Policy with daily backup
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "v2-daily-sample",
 *     properties: {
 *         backupManagementType: "AzureIaasVM",
 *         instantRpRetentionRangeInDays: 30,
 *         policyType: "V2",
 *         retentionPolicy: {
 *             dailySchedule: {
 *                 retentionDuration: {
 *                     count: 180,
 *                     durationType: "Days",
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *             monthlySchedule: {
 *                 retentionDuration: {
 *                     count: 60,
 *                     durationType: "Months",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             weeklySchedule: {
 *                 daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                 retentionDuration: {
 *                     count: 12,
 *                     durationType: "Weeks",
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *             yearlySchedule: {
 *                 monthsOfYear: [azure_native.recoveryservices.MonthOfYear.January],
 *                 retentionDuration: {
 *                     count: 10,
 *                     durationType: "Years",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *                 retentionTimes: ["2021-12-17T08:00:00+00:00"],
 *             },
 *         },
 *         schedulePolicy: {
 *             dailySchedule: {
 *                 scheduleRunTimes: ["2018-01-24T10:00:00Z"],
 *             },
 *             schedulePolicyType: "SimpleSchedulePolicyV2",
 *             scheduleRunFrequency: "Daily",
 *         },
 *         timeZone: "India Standard Time",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "NetSDKTestRsVault",
 * });
 *
 * ```
 * ### Create or Update Full Azure Vm Protection Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "testPolicy1",
 *     properties: {
 *         backupManagementType: "AzureIaasVM",
 *         retentionPolicy: {
 *             monthlySchedule: {
 *                 retentionDuration: {
 *                     count: 2,
 *                     durationType: "Months",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [
 *                         azure_native.recoveryservices.DayOfWeek.Wednesday,
 *                         azure_native.recoveryservices.DayOfWeek.Thursday,
 *                     ],
 *                     weeksOfTheMonth: [
 *                         azure_native.recoveryservices.WeekOfMonth.First,
 *                         azure_native.recoveryservices.WeekOfMonth.Third,
 *                     ],
 *                 },
 *                 retentionTimes: ["2018-01-24T10:00:00Z"],
 *             },
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             weeklySchedule: {
 *                 daysOfTheWeek: [
 *                     azure_native.recoveryservices.DayOfWeek.Monday,
 *                     azure_native.recoveryservices.DayOfWeek.Wednesday,
 *                     azure_native.recoveryservices.DayOfWeek.Thursday,
 *                 ],
 *                 retentionDuration: {
 *                     count: 1,
 *                     durationType: "Weeks",
 *                 },
 *                 retentionTimes: ["2018-01-24T10:00:00Z"],
 *             },
 *             yearlySchedule: {
 *                 monthsOfYear: [
 *                     azure_native.recoveryservices.MonthOfYear.February,
 *                     azure_native.recoveryservices.MonthOfYear.November,
 *                 ],
 *                 retentionDuration: {
 *                     count: 4,
 *                     durationType: "Years",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [
 *                         azure_native.recoveryservices.DayOfWeek.Monday,
 *                         azure_native.recoveryservices.DayOfWeek.Thursday,
 *                     ],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.Fourth],
 *                 },
 *                 retentionTimes: ["2018-01-24T10:00:00Z"],
 *             },
 *         },
 *         schedulePolicy: {
 *             schedulePolicyType: "SimpleSchedulePolicy",
 *             scheduleRunDays: [
 *                 azure_native.recoveryservices.DayOfWeek.Monday,
 *                 azure_native.recoveryservices.DayOfWeek.Wednesday,
 *                 azure_native.recoveryservices.DayOfWeek.Thursday,
 *             ],
 *             scheduleRunFrequency: "Weekly",
 *             scheduleRunTimes: ["2018-01-24T10:00:00Z"],
 *         },
 *         timeZone: "Pacific Standard Time",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "NetSDKTestRsVault",
 * });
 *
 * ```
 * ### Create or Update Full Azure Workload Protection Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "testPolicy1",
 *     properties: {
 *         backupManagementType: "AzureWorkload",
 *         settings: {
 *             issqlcompression: false,
 *             timeZone: "Pacific Standard Time",
 *         },
 *         subProtectionPolicy: [
 *             {
 *                 policyType: "Full",
 *                 retentionPolicy: {
 *                     monthlySchedule: {
 *                         retentionDuration: {
 *                             count: 1,
 *                             durationType: "Months",
 *                         },
 *                         retentionScheduleFormatType: "Weekly",
 *                         retentionScheduleWeekly: {
 *                             daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                             weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.Second],
 *                         },
 *                         retentionTimes: ["2018-01-24T10:00:00Z"],
 *                     },
 *                     retentionPolicyType: "LongTermRetentionPolicy",
 *                     weeklySchedule: {
 *                         daysOfTheWeek: [
 *                             azure_native.recoveryservices.DayOfWeek.Sunday,
 *                             azure_native.recoveryservices.DayOfWeek.Tuesday,
 *                         ],
 *                         retentionDuration: {
 *                             count: 2,
 *                             durationType: "Weeks",
 *                         },
 *                         retentionTimes: ["2018-01-24T10:00:00Z"],
 *                     },
 *                     yearlySchedule: {
 *                         monthsOfYear: [
 *                             azure_native.recoveryservices.MonthOfYear.January,
 *                             azure_native.recoveryservices.MonthOfYear.June,
 *                             azure_native.recoveryservices.MonthOfYear.December,
 *                         ],
 *                         retentionDuration: {
 *                             count: 1,
 *                             durationType: "Years",
 *                         },
 *                         retentionScheduleFormatType: "Weekly",
 *                         retentionScheduleWeekly: {
 *                             daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                             weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.Last],
 *                         },
 *                         retentionTimes: ["2018-01-24T10:00:00Z"],
 *                     },
 *                 },
 *                 schedulePolicy: {
 *                     schedulePolicyType: "SimpleSchedulePolicy",
 *                     scheduleRunDays: [
 *                         azure_native.recoveryservices.DayOfWeek.Sunday,
 *                         azure_native.recoveryservices.DayOfWeek.Tuesday,
 *                     ],
 *                     scheduleRunFrequency: "Weekly",
 *                     scheduleRunTimes: ["2018-01-24T10:00:00Z"],
 *                 },
 *             },
 *             {
 *                 policyType: "Differential",
 *                 retentionPolicy: {
 *                     retentionDuration: {
 *                         count: 8,
 *                         durationType: "Days",
 *                     },
 *                     retentionPolicyType: "SimpleRetentionPolicy",
 *                 },
 *                 schedulePolicy: {
 *                     schedulePolicyType: "SimpleSchedulePolicy",
 *                     scheduleRunDays: [azure_native.recoveryservices.DayOfWeek.Friday],
 *                     scheduleRunFrequency: "Weekly",
 *                     scheduleRunTimes: ["2018-01-24T10:00:00Z"],
 *                 },
 *             },
 *             {
 *                 policyType: "Log",
 *                 retentionPolicy: {
 *                     retentionDuration: {
 *                         count: 7,
 *                         durationType: "Days",
 *                     },
 *                     retentionPolicyType: "SimpleRetentionPolicy",
 *                 },
 *                 schedulePolicy: {
 *                     scheduleFrequencyInMins: 60,
 *                     schedulePolicyType: "LogSchedulePolicy",
 *                 },
 *             },
 *         ],
 *         workLoadType: "SQLDataBase",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "NetSDKTestRsVault",
 * });
 *
 * ```
 * ### Create or Update Hourly Azure Storage Protection Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "newPolicy2",
 *     properties: {
 *         backupManagementType: "AzureStorage",
 *         retentionPolicy: {
 *             dailySchedule: {
 *                 retentionDuration: {
 *                     count: 5,
 *                     durationType: "Days",
 *                 },
 *             },
 *             monthlySchedule: {
 *                 retentionDuration: {
 *                     count: 60,
 *                     durationType: "Months",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *             },
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *             weeklySchedule: {
 *                 daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                 retentionDuration: {
 *                     count: 12,
 *                     durationType: "Weeks",
 *                 },
 *             },
 *             yearlySchedule: {
 *                 monthsOfYear: [azure_native.recoveryservices.MonthOfYear.January],
 *                 retentionDuration: {
 *                     count: 10,
 *                     durationType: "Years",
 *                 },
 *                 retentionScheduleFormatType: "Weekly",
 *                 retentionScheduleWeekly: {
 *                     daysOfTheWeek: [azure_native.recoveryservices.DayOfWeek.Sunday],
 *                     weeksOfTheMonth: [azure_native.recoveryservices.WeekOfMonth.First],
 *                 },
 *             },
 *         },
 *         schedulePolicy: {
 *             hourlySchedule: {
 *                 interval: 4,
 *                 scheduleWindowDuration: 12,
 *                 scheduleWindowStartTime: "2021-09-29T08:00:00.000Z",
 *             },
 *             schedulePolicyType: "SimpleSchedulePolicy",
 *             scheduleRunFrequency: "Hourly",
 *         },
 *         timeZone: "UTC",
 *         workLoadType: "AzureFileShare",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "swaggertestvault",
 * });
 *
 * ```
 * ### Create or Update Simple Azure Vm Protection Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const protectionPolicy = new azure_native.recoveryservices.ProtectionPolicy("protectionPolicy", {
 *     policyName: "testPolicy1",
 *     properties: {
 *         backupManagementType: "AzureIaasVM",
 *         retentionPolicy: {
 *             dailySchedule: {
 *                 retentionDuration: {
 *                     count: 1,
 *                     durationType: "Days",
 *                 },
 *                 retentionTimes: ["2018-01-24T02:00:00Z"],
 *             },
 *             retentionPolicyType: "LongTermRetentionPolicy",
 *         },
 *         schedulePolicy: {
 *             schedulePolicyType: "SimpleSchedulePolicy",
 *             scheduleRunFrequency: "Daily",
 *             scheduleRunTimes: ["2018-01-24T02:00:00Z"],
 *         },
 *         timeZone: "Pacific Standard Time",
 *     },
 *     resourceGroupName: "SwaggerTestRg",
 *     vaultName: "NetSDKTestRsVault",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:recoveryservices:ProtectionPolicy testPolicy1 /Subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SwaggerTestRg/providers/Microsoft.RecoveryServices/vaults/NetSDKTestRsVault/backupPolicies/testPolicy1 
 * ```
 */
export class ProtectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ProtectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProtectionPolicy {
        return new ProtectionPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:recoveryservices:ProtectionPolicy';

    /**
     * Returns true if the given object is an instance of ProtectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProtectionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProtectionPolicy.__pulumiType;
    }

    /**
     * Optional ETag.
     */
    public readonly eTag!: pulumi.Output<string | undefined>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Resource name associated with the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * ProtectionPolicyResource properties
     */
    public readonly properties!: pulumi.Output<outputs.recoveryservices.AzureFileShareProtectionPolicyResponse | outputs.recoveryservices.AzureIaaSVMProtectionPolicyResponse | outputs.recoveryservices.AzureSqlProtectionPolicyResponse | outputs.recoveryservices.AzureVmWorkloadProtectionPolicyResponse | outputs.recoveryservices.GenericProtectionPolicyResponse | outputs.recoveryservices.MabProtectionPolicyResponse>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ProtectionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProtectionPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.vaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultName'");
            }
            resourceInputs["eTag"] = args ? args.eTag : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vaultName"] = args ? args.vaultName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["eTag"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:recoveryservices/v20160601:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20201001:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20201201:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210101:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210201:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210201preview:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210210:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210301:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210401:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210601:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210701:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20210801:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20211001:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20211201:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220101:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220201:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220301:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220401:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220601preview:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220901preview:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20220930preview:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20221001:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20230101:ProtectionPolicy" }, { type: "azure-native:recoveryservices/v20230201:ProtectionPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ProtectionPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProtectionPolicy resource.
 */
export interface ProtectionPolicyArgs {
    /**
     * Optional ETag.
     */
    eTag?: pulumi.Input<string>;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * Backup policy to be created.
     */
    policyName?: pulumi.Input<string>;
    /**
     * ProtectionPolicyResource properties
     */
    properties?: pulumi.Input<inputs.recoveryservices.AzureFileShareProtectionPolicyArgs | inputs.recoveryservices.AzureIaaSVMProtectionPolicyArgs | inputs.recoveryservices.AzureSqlProtectionPolicyArgs | inputs.recoveryservices.AzureVmWorkloadProtectionPolicyArgs | inputs.recoveryservices.GenericProtectionPolicyArgs | inputs.recoveryservices.MabProtectionPolicyArgs>;
    /**
     * The name of the resource group where the recovery services vault is present.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the recovery services vault.
     */
    vaultName: pulumi.Input<string>;
}
