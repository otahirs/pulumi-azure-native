// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Key Vault Access Policy for managing policies on existing vaults.
 */
export class AccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AccessPolicy {
        return new AccessPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:keyvault:AccessPolicy';

    /**
     * Returns true if the given object is an instance of AccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessPolicy.__pulumiType;
    }

    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
     */
    public readonly applicationId!: pulumi.Output<string | undefined>;
    /**
     * Permissions the identity has for certificates.
     */
    public readonly certificatePermissions!: pulumi.Output<string[] | undefined>;
    /**
     * Permissions the identity has for keys.
     */
    public readonly keyPermissions!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the Key Vault.
     */
    public readonly keyVaultName!: pulumi.Output<string | undefined>;
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
     */
    public readonly objectId!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource group that contains the vault.
     */
    public readonly resourceGroupName!: pulumi.Output<string | undefined>;
    /**
     * Permissions the identity has for secrets.
     */
    public readonly secretPermissions!: pulumi.Output<string[] | undefined>;
    /**
     * Permissions the identity has for storage accounts.
     */
    public readonly storagePermissions!: pulumi.Output<string[] | undefined>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;

    /**
     * Create a AccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccessPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["certificatePermissions"] = args ? args.certificatePermissions : undefined;
            resourceInputs["keyPermissions"] = args ? args.keyPermissions : undefined;
            resourceInputs["keyVaultName"] = args ? args.keyVaultName : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secretPermissions"] = args ? args.secretPermissions : undefined;
            resourceInputs["storagePermissions"] = args ? args.storagePermissions : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        } else {
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["certificatePermissions"] = undefined /*out*/;
            resourceInputs["keyPermissions"] = undefined /*out*/;
            resourceInputs["keyVaultName"] = undefined /*out*/;
            resourceInputs["objectId"] = undefined /*out*/;
            resourceInputs["resourceGroupName"] = undefined /*out*/;
            resourceInputs["secretPermissions"] = undefined /*out*/;
            resourceInputs["storagePermissions"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AccessPolicy resource.
 */
export interface AccessPolicyArgs {
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Permissions the identity has for certificates.
     */
    certificatePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Permissions the identity has for keys.
     */
    keyPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Key Vault.
     */
    keyVaultName?: pulumi.Input<string>;
    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
     */
    objectId?: pulumi.Input<string>;
    /**
     * Name of the resource group that contains the vault.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * Permissions the identity has for secrets.
     */
    secretPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Permissions the identity has for storage accounts.
     */
    storagePermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    tenantId?: pulumi.Input<string>;
}
