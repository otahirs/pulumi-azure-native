// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AutoUserScope = {
    /**
     * Specifies that the service should create a new user for the task.
     */
    Task: "Task",
    /**
     * Specifies that the task runs as the common auto user account which is created on every node in a pool.
     */
    Pool: "Pool",
} as const;

export type AutoUserScope = (typeof AutoUserScope)[keyof typeof AutoUserScope];

export const CachingType = {
    /**
     * The caching mode for the disk is not enabled.
     */
    None: "None",
    /**
     * The caching mode for the disk is read only.
     */
    ReadOnly: "ReadOnly",
    /**
     * The caching mode for the disk is read and write.
     */
    ReadWrite: "ReadWrite",
} as const;

export type CachingType = (typeof CachingType)[keyof typeof CachingType];

export const CertificateFormat = {
    /**
     * The certificate is a PFX (PKCS#12) formatted certificate or certificate chain.
     */
    Pfx: "Pfx",
    /**
     * The certificate is a base64-encoded X.509 certificate.
     */
    Cer: "Cer",
} as const;

export type CertificateFormat = (typeof CertificateFormat)[keyof typeof CertificateFormat];

export const CertificateStoreLocation = {
    /**
     * Certificates should be installed to the CurrentUser certificate store.
     */
    CurrentUser: "CurrentUser",
    /**
     * Certificates should be installed to the LocalMachine certificate store.
     */
    LocalMachine: "LocalMachine",
} as const;

export type CertificateStoreLocation = (typeof CertificateStoreLocation)[keyof typeof CertificateStoreLocation];

export const CertificateVisibility = {
    /**
     * The certificate should be visible to the user account under which the start task is run.
     */
    StartTask: "StartTask",
    /**
     * The certificate should be visible to the user accounts under which job tasks are run.
     */
    Task: "Task",
    /**
     * The certificate should be visible to the user accounts under which users remotely access the node.
     */
    RemoteUser: "RemoteUser",
} as const;

export type CertificateVisibility = (typeof CertificateVisibility)[keyof typeof CertificateVisibility];

export const ComputeNodeDeallocationOption = {
    /**
     * Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Remove nodes as soon as tasks have been terminated.
     */
    Requeue: "Requeue",
    /**
     * Terminate running tasks. The tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Remove nodes as soon as tasks have been terminated.
     */
    Terminate: "Terminate",
    /**
     * Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.
     */
    TaskCompletion: "TaskCompletion",
    /**
     * Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.
     */
    RetainedData: "RetainedData",
} as const;

export type ComputeNodeDeallocationOption = (typeof ComputeNodeDeallocationOption)[keyof typeof ComputeNodeDeallocationOption];

export const ComputeNodeFillType = {
    /**
     * Tasks should be assigned evenly across all nodes in the pool.
     */
    Spread: "Spread",
    /**
     * As many tasks as possible (maxTasksPerNode) should be assigned to each node in the pool before any tasks are assigned to the next node in the pool.
     */
    Pack: "Pack",
} as const;

export type ComputeNodeFillType = (typeof ComputeNodeFillType)[keyof typeof ComputeNodeFillType];

export const ContainerType = {
    /**
     * A Docker compatible container technology will be used to launch the containers.
     */
    DockerCompatible: "DockerCompatible",
} as const;

export type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];

export const ElevationLevel = {
    /**
     * The user is a standard user without elevated access.
     */
    NonAdmin: "NonAdmin",
    /**
     * The user is a user with elevated access and operates with full Administrator permissions.
     */
    Admin: "Admin",
} as const;

export type ElevationLevel = (typeof ElevationLevel)[keyof typeof ElevationLevel];

export const InboundEndpointProtocol = {
    /**
     * Use TCP for the endpoint.
     */
    TCP: "TCP",
    /**
     * Use UDP for the endpoint.
     */
    UDP: "UDP",
} as const;

export type InboundEndpointProtocol = (typeof InboundEndpointProtocol)[keyof typeof InboundEndpointProtocol];

export const InterNodeCommunicationState = {
    /**
     * Enable network communication between virtual machines.
     */
    Enabled: "Enabled",
    /**
     * Disable network communication between virtual machines.
     */
    Disabled: "Disabled",
} as const;

export type InterNodeCommunicationState = (typeof InterNodeCommunicationState)[keyof typeof InterNodeCommunicationState];

export const LoginMode = {
    /**
     * The LOGON32_LOGON_BATCH Win32 login mode. The batch login mode is recommended for long running parallel processes.
     */
    Batch: "Batch",
    /**
     * The LOGON32_LOGON_INTERACTIVE Win32 login mode. Some applications require having permissions associated with the interactive login mode. If this is the case for an application used in your task, then this option is recommended.
     */
    Interactive: "Interactive",
} as const;

export type LoginMode = (typeof LoginMode)[keyof typeof LoginMode];

export const NetworkSecurityGroupRuleAccess = {
    /**
     * Allow access.
     */
    Allow: "Allow",
    /**
     * Deny access.
     */
    Deny: "Deny",
} as const;

export type NetworkSecurityGroupRuleAccess = (typeof NetworkSecurityGroupRuleAccess)[keyof typeof NetworkSecurityGroupRuleAccess];

export const PoolAllocationMode = {
    /**
     * Pools will be allocated in subscriptions owned by the Batch service.
     */
    BatchService: "BatchService",
    /**
     * Pools will be allocated in a subscription owned by the user.
     */
    UserSubscription: "UserSubscription",
} as const;

export type PoolAllocationMode = (typeof PoolAllocationMode)[keyof typeof PoolAllocationMode];

export const StorageAccountType = {
    /**
     * The data disk should use standard locally redundant storage.
     */
    Standard_LRS: "Standard_LRS",
    /**
     * The data disk should use premium locally redundant storage.
     */
    Premium_LRS: "Premium_LRS",
} as const;

export type StorageAccountType = (typeof StorageAccountType)[keyof typeof StorageAccountType];
