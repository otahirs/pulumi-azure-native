// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Describes a DNS record set (a collection of DNS records with the same name and type).
 * API Version: 2018-05-01.
 * Previous API Version: 2018-05-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Create A recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     aRecords: [{
 *         ipv4Address: "127.0.0.1",
 *     }],
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "A",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create A recordset with alias target resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "A",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     targetResource: {
 *         id: "/subscriptions/726f8cd6-6459-4db4-8e6d-2cd2716904e2/resourceGroups/test/providers/Microsoft.Network/trafficManagerProfiles/testpp2",
 *     },
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create AAAA recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     aaaaRecords: [{
 *         ipv6Address: "::1",
 *     }],
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "AAAA",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create CAA recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     caaRecords: [{
 *         flags: 0,
 *         tag: "issue",
 *         value: "ca.contoso.com",
 *     }],
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "CAA",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create CNAME recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     cnameRecord: {
 *         cname: "contoso.com",
 *     },
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "CNAME",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create MX recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     mxRecords: [{
 *         exchange: "mail.contoso.com",
 *         preference: 0,
 *     }],
 *     recordType: "MX",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create NS recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     nsRecords: [{
 *         nsdname: "ns1.contoso.com",
 *     }],
 *     recordType: "NS",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create PTR recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     ptrRecords: [{
 *         ptrdname: "localhost",
 *     }],
 *     recordType: "PTR",
 *     relativeRecordSetName: "1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     zoneName: "0.0.127.in-addr.arpa",
 * });
 *
 * ```
 * ### Create SOA recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "SOA",
 *     relativeRecordSetName: "@",
 *     resourceGroupName: "rg1",
 *     soaRecord: {
 *         email: "hostmaster.contoso.com",
 *         expireTime: 2419200,
 *         host: "ns1.contoso.com",
 *         minimumTtl: 300,
 *         refreshTime: 3600,
 *         retryTime: 300,
 *         serialNumber: 1,
 *     },
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create SRV recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "SRV",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     srvRecords: [{
 *         port: 80,
 *         priority: 0,
 *         target: "contoso.com",
 *         weight: 10,
 *     }],
 *     ttl: 3600,
 *     zoneName: "zone1",
 * });
 *
 * ```
 * ### Create TXT recordset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const recordSet = new azure_native.network.RecordSet("recordSet", {
 *     metadata: {
 *         key1: "value1",
 *     },
 *     recordType: "TXT",
 *     relativeRecordSetName: "record1",
 *     resourceGroupName: "rg1",
 *     ttl: 3600,
 *     txtRecords: [{
 *         value: [
 *             "string1",
 *             "string2",
 *         ],
 *     }],
 *     zoneName: "zone1",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:network:RecordSet record1 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dnsZones/zone1/TXT/record1 
 * ```
 */
export class RecordSet extends pulumi.CustomResource {
    /**
     * Get an existing RecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RecordSet {
        return new RecordSet(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:network:RecordSet';

    /**
     * Returns true if the given object is an instance of RecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordSet.__pulumiType;
    }

    /**
     * The list of A records in the record set.
     */
    public readonly aRecords!: pulumi.Output<outputs.network.ARecordResponse[] | undefined>;
    /**
     * The list of AAAA records in the record set.
     */
    public readonly aaaaRecords!: pulumi.Output<outputs.network.AaaaRecordResponse[] | undefined>;
    /**
     * The list of CAA records in the record set.
     */
    public readonly caaRecords!: pulumi.Output<outputs.network.CaaRecordResponse[] | undefined>;
    /**
     * The CNAME record in the  record set.
     */
    public readonly cnameRecord!: pulumi.Output<outputs.network.CnameRecordResponse | undefined>;
    /**
     * The etag of the record set.
     */
    public /*out*/ readonly etag!: pulumi.Output<string | undefined>;
    /**
     * Fully qualified domain name of the record set.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * The metadata attached to the record set.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The list of MX records in the record set.
     */
    public readonly mxRecords!: pulumi.Output<outputs.network.MxRecordResponse[] | undefined>;
    /**
     * The name of the record set.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The list of NS records in the record set.
     */
    public readonly nsRecords!: pulumi.Output<outputs.network.NsRecordResponse[] | undefined>;
    /**
     * provisioning State of the record set.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The list of PTR records in the record set.
     */
    public readonly ptrRecords!: pulumi.Output<outputs.network.PtrRecordResponse[] | undefined>;
    /**
     * The SOA record in the record set.
     */
    public readonly soaRecord!: pulumi.Output<outputs.network.SoaRecordResponse | undefined>;
    /**
     * The list of SRV records in the record set.
     */
    public readonly srvRecords!: pulumi.Output<outputs.network.SrvRecordResponse[] | undefined>;
    /**
     * A reference to an azure resource from where the dns resource value is taken.
     */
    public readonly targetResource!: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * The TTL (time-to-live) of the records in the record set.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * The list of TXT records in the record set.
     */
    public readonly txtRecords!: pulumi.Output<outputs.network.TxtRecordResponse[] | undefined>;
    /**
     * The type of the record set.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a RecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordSetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["aRecords"] = args ? args.aRecords : undefined;
            resourceInputs["aaaaRecords"] = args ? args.aaaaRecords : undefined;
            resourceInputs["caaRecords"] = args ? args.caaRecords : undefined;
            resourceInputs["cnameRecord"] = args ? args.cnameRecord : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mxRecords"] = args ? args.mxRecords : undefined;
            resourceInputs["nsRecords"] = args ? args.nsRecords : undefined;
            resourceInputs["ptrRecords"] = args ? args.ptrRecords : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["relativeRecordSetName"] = args ? args.relativeRecordSetName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["soaRecord"] = args ? args.soaRecord : undefined;
            resourceInputs["srvRecords"] = args ? args.srvRecords : undefined;
            resourceInputs["targetResource"] = args ? args.targetResource : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["txtRecords"] = args ? args.txtRecords : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["aRecords"] = undefined /*out*/;
            resourceInputs["aaaaRecords"] = undefined /*out*/;
            resourceInputs["caaRecords"] = undefined /*out*/;
            resourceInputs["cnameRecord"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["mxRecords"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nsRecords"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["ptrRecords"] = undefined /*out*/;
            resourceInputs["soaRecord"] = undefined /*out*/;
            resourceInputs["srvRecords"] = undefined /*out*/;
            resourceInputs["targetResource"] = undefined /*out*/;
            resourceInputs["ttl"] = undefined /*out*/;
            resourceInputs["txtRecords"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:network/v20150504preview:RecordSet" }, { type: "azure-native:network/v20160401:RecordSet" }, { type: "azure-native:network/v20170901:RecordSet" }, { type: "azure-native:network/v20171001:RecordSet" }, { type: "azure-native:network/v20180301preview:RecordSet" }, { type: "azure-native:network/v20180501:RecordSet" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(RecordSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RecordSet resource.
 */
export interface RecordSetArgs {
    /**
     * The list of A records in the record set.
     */
    aRecords?: pulumi.Input<pulumi.Input<inputs.network.ARecordArgs>[]>;
    /**
     * The list of AAAA records in the record set.
     */
    aaaaRecords?: pulumi.Input<pulumi.Input<inputs.network.AaaaRecordArgs>[]>;
    /**
     * The list of CAA records in the record set.
     */
    caaRecords?: pulumi.Input<pulumi.Input<inputs.network.CaaRecordArgs>[]>;
    /**
     * The CNAME record in the  record set.
     */
    cnameRecord?: pulumi.Input<inputs.network.CnameRecordArgs>;
    /**
     * The metadata attached to the record set.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The list of MX records in the record set.
     */
    mxRecords?: pulumi.Input<pulumi.Input<inputs.network.MxRecordArgs>[]>;
    /**
     * The list of NS records in the record set.
     */
    nsRecords?: pulumi.Input<pulumi.Input<inputs.network.NsRecordArgs>[]>;
    /**
     * The list of PTR records in the record set.
     */
    ptrRecords?: pulumi.Input<pulumi.Input<inputs.network.PtrRecordArgs>[]>;
    /**
     * The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).
     */
    recordType: pulumi.Input<string>;
    /**
     * The name of the record set, relative to the name of the zone.
     */
    relativeRecordSetName?: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The SOA record in the record set.
     */
    soaRecord?: pulumi.Input<inputs.network.SoaRecordArgs>;
    /**
     * The list of SRV records in the record set.
     */
    srvRecords?: pulumi.Input<pulumi.Input<inputs.network.SrvRecordArgs>[]>;
    /**
     * A reference to an azure resource from where the dns resource value is taken.
     */
    targetResource?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * The TTL (time-to-live) of the records in the record set.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The list of TXT records in the record set.
     */
    txtRecords?: pulumi.Input<pulumi.Input<inputs.network.TxtRecordArgs>[]>;
    /**
     * The name of the DNS zone (without a terminating dot).
     */
    zoneName: pulumi.Input<string>;
}
