// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Azure Firewall resource.
 * API Version: 2022-09-01.
 * Previous API Version: 2020-11-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Create Azure Firewall
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
 *     applicationRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "apprulecoll",
 *         priority: 110,
 *         rules: [{
 *             description: "Deny inbound rule",
 *             name: "rule1",
 *             protocols: [{
 *                 port: 443,
 *                 protocolType: "Https",
 *             }],
 *             sourceAddresses: [
 *                 "216.58.216.164",
 *                 "10.0.0.0/24",
 *             ],
 *             targetFqdns: ["www.test.com"],
 *         }],
 *     }],
 *     azureFirewallName: "azurefirewall",
 *     ipConfigurations: [{
 *         name: "azureFirewallIpConfiguration",
 *         publicIPAddress: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
 *         },
 *         subnet: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
 *         },
 *     }],
 *     location: "West US",
 *     natRuleCollections: [{
 *         action: {
 *             type: "Dnat",
 *         },
 *         name: "natrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "D-NAT all outbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["443"],
 *                 name: "DNAT-HTTPS-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedAddress: "1.2.3.5",
 *                 translatedPort: "8443",
 *             },
 *             {
 *                 description: "D-NAT all inbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["80"],
 *                 name: "DNAT-HTTP-traffic-With-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedFqdn: "internalhttpserver",
 *                 translatedPort: "880",
 *             },
 *         ],
 *     }],
 *     networkRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "netrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "Block traffic based on source IPs and ports",
 *                 destinationAddresses: ["*"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: [
 *                     "192.168.1.1-192.168.1.12",
 *                     "10.1.4.12-10.1.4.255",
 *                 ],
 *             },
 *             {
 *                 description: "Block traffic based on source IPs and ports to amazon",
 *                 destinationFqdns: ["www.amazon.com"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic-with-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["10.2.4.12-10.2.4.255"],
 *             },
 *         ],
 *     }],
 *     resourceGroupName: "rg1",
 *     sku: {
 *         name: "AZFW_VNet",
 *         tier: "Standard",
 *     },
 *     tags: {
 *         key1: "value1",
 *     },
 *     threatIntelMode: "Alert",
 *     zones: [],
 * });
 *
 * ```
 * ### Create Azure Firewall With Additional Properties
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
 *     additionalProperties: {
 *         key1: "value1",
 *         key2: "value2",
 *     },
 *     applicationRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "apprulecoll",
 *         priority: 110,
 *         rules: [{
 *             description: "Deny inbound rule",
 *             name: "rule1",
 *             protocols: [{
 *                 port: 443,
 *                 protocolType: "Https",
 *             }],
 *             sourceAddresses: [
 *                 "216.58.216.164",
 *                 "10.0.0.0/24",
 *             ],
 *             targetFqdns: ["www.test.com"],
 *         }],
 *     }],
 *     azureFirewallName: "azurefirewall",
 *     ipConfigurations: [{
 *         name: "azureFirewallIpConfiguration",
 *         publicIPAddress: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
 *         },
 *         subnet: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
 *         },
 *     }],
 *     location: "West US",
 *     natRuleCollections: [{
 *         action: {
 *             type: "Dnat",
 *         },
 *         name: "natrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "D-NAT all outbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["443"],
 *                 name: "DNAT-HTTPS-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedAddress: "1.2.3.5",
 *                 translatedPort: "8443",
 *             },
 *             {
 *                 description: "D-NAT all inbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["80"],
 *                 name: "DNAT-HTTP-traffic-With-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedFqdn: "internalhttpserver",
 *                 translatedPort: "880",
 *             },
 *         ],
 *     }],
 *     networkRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "netrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "Block traffic based on source IPs and ports",
 *                 destinationAddresses: ["*"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: [
 *                     "192.168.1.1-192.168.1.12",
 *                     "10.1.4.12-10.1.4.255",
 *                 ],
 *             },
 *             {
 *                 description: "Block traffic based on source IPs and ports to amazon",
 *                 destinationFqdns: ["www.amazon.com"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic-with-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["10.2.4.12-10.2.4.255"],
 *             },
 *         ],
 *     }],
 *     resourceGroupName: "rg1",
 *     sku: {
 *         name: "AZFW_VNet",
 *         tier: "Standard",
 *     },
 *     tags: {
 *         key1: "value1",
 *     },
 *     threatIntelMode: "Alert",
 *     zones: [],
 * });
 *
 * ```
 * ### Create Azure Firewall With IpGroups
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
 *     applicationRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "apprulecoll",
 *         priority: 110,
 *         rules: [{
 *             description: "Deny inbound rule",
 *             name: "rule1",
 *             protocols: [{
 *                 port: 443,
 *                 protocolType: "Https",
 *             }],
 *             sourceAddresses: [
 *                 "216.58.216.164",
 *                 "10.0.0.0/24",
 *             ],
 *             targetFqdns: ["www.test.com"],
 *         }],
 *     }],
 *     azureFirewallName: "azurefirewall",
 *     ipConfigurations: [{
 *         name: "azureFirewallIpConfiguration",
 *         publicIPAddress: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
 *         },
 *         subnet: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
 *         },
 *     }],
 *     location: "West US",
 *     natRuleCollections: [{
 *         action: {
 *             type: "Dnat",
 *         },
 *         name: "natrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "D-NAT all outbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["443"],
 *                 name: "DNAT-HTTPS-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedAddress: "1.2.3.5",
 *                 translatedPort: "8443",
 *             },
 *             {
 *                 description: "D-NAT all inbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["80"],
 *                 name: "DNAT-HTTP-traffic-With-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedFqdn: "internalhttpserver",
 *                 translatedPort: "880",
 *             },
 *         ],
 *     }],
 *     networkRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "netrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "Block traffic based on source IPs and ports",
 *                 destinationAddresses: ["*"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: [
 *                     "192.168.1.1-192.168.1.12",
 *                     "10.1.4.12-10.1.4.255",
 *                 ],
 *             },
 *             {
 *                 description: "Block traffic based on source IPs and ports to amazon",
 *                 destinationFqdns: ["www.amazon.com"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic-with-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["10.2.4.12-10.2.4.255"],
 *             },
 *         ],
 *     }],
 *     resourceGroupName: "rg1",
 *     sku: {
 *         name: "AZFW_VNet",
 *         tier: "Standard",
 *     },
 *     tags: {
 *         key1: "value1",
 *     },
 *     threatIntelMode: "Alert",
 *     zones: [],
 * });
 *
 * ```
 * ### Create Azure Firewall With Zones
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
 *     applicationRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "apprulecoll",
 *         priority: 110,
 *         rules: [{
 *             description: "Deny inbound rule",
 *             name: "rule1",
 *             protocols: [{
 *                 port: 443,
 *                 protocolType: "Https",
 *             }],
 *             sourceAddresses: [
 *                 "216.58.216.164",
 *                 "10.0.0.0/24",
 *             ],
 *             targetFqdns: ["www.test.com"],
 *         }],
 *     }],
 *     azureFirewallName: "azurefirewall",
 *     ipConfigurations: [{
 *         name: "azureFirewallIpConfiguration",
 *         publicIPAddress: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
 *         },
 *         subnet: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
 *         },
 *     }],
 *     location: "West US 2",
 *     natRuleCollections: [{
 *         action: {
 *             type: "Dnat",
 *         },
 *         name: "natrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "D-NAT all outbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["443"],
 *                 name: "DNAT-HTTPS-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedAddress: "1.2.3.5",
 *                 translatedPort: "8443",
 *             },
 *             {
 *                 description: "D-NAT all inbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["80"],
 *                 name: "DNAT-HTTP-traffic-With-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedFqdn: "internalhttpserver",
 *                 translatedPort: "880",
 *             },
 *         ],
 *     }],
 *     networkRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "netrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "Block traffic based on source IPs and ports",
 *                 destinationAddresses: ["*"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: [
 *                     "192.168.1.1-192.168.1.12",
 *                     "10.1.4.12-10.1.4.255",
 *                 ],
 *             },
 *             {
 *                 description: "Block traffic based on source IPs and ports to amazon",
 *                 destinationFqdns: ["www.amazon.com"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic-with-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["10.2.4.12-10.2.4.255"],
 *             },
 *         ],
 *     }],
 *     resourceGroupName: "rg1",
 *     sku: {
 *         name: "AZFW_VNet",
 *         tier: "Standard",
 *     },
 *     tags: {
 *         key1: "value1",
 *     },
 *     threatIntelMode: "Alert",
 *     zones: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 * });
 *
 * ```
 * ### Create Azure Firewall With management subnet
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
 *     applicationRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "apprulecoll",
 *         priority: 110,
 *         rules: [{
 *             description: "Deny inbound rule",
 *             name: "rule1",
 *             protocols: [{
 *                 port: 443,
 *                 protocolType: "Https",
 *             }],
 *             sourceAddresses: [
 *                 "216.58.216.164",
 *                 "10.0.0.0/24",
 *             ],
 *             targetFqdns: ["www.test.com"],
 *         }],
 *     }],
 *     azureFirewallName: "azurefirewall",
 *     ipConfigurations: [{
 *         name: "azureFirewallIpConfiguration",
 *         publicIPAddress: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
 *         },
 *         subnet: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
 *         },
 *     }],
 *     location: "West US",
 *     managementIpConfiguration: {
 *         name: "azureFirewallMgmtIpConfiguration",
 *         publicIPAddress: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName",
 *         },
 *         subnet: {
 *             id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet",
 *         },
 *     },
 *     natRuleCollections: [{
 *         action: {
 *             type: "Dnat",
 *         },
 *         name: "natrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "D-NAT all outbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["443"],
 *                 name: "DNAT-HTTPS-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedAddress: "1.2.3.5",
 *                 translatedPort: "8443",
 *             },
 *             {
 *                 description: "D-NAT all inbound web traffic for inspection",
 *                 destinationAddresses: ["1.2.3.4"],
 *                 destinationPorts: ["80"],
 *                 name: "DNAT-HTTP-traffic-With-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["*"],
 *                 translatedFqdn: "internalhttpserver",
 *                 translatedPort: "880",
 *             },
 *         ],
 *     }],
 *     networkRuleCollections: [{
 *         action: {
 *             type: "Deny",
 *         },
 *         name: "netrulecoll",
 *         priority: 112,
 *         rules: [
 *             {
 *                 description: "Block traffic based on source IPs and ports",
 *                 destinationAddresses: ["*"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: [
 *                     "192.168.1.1-192.168.1.12",
 *                     "10.1.4.12-10.1.4.255",
 *                 ],
 *             },
 *             {
 *                 description: "Block traffic based on source IPs and ports to amazon",
 *                 destinationFqdns: ["www.amazon.com"],
 *                 destinationPorts: [
 *                     "443-444",
 *                     "8443",
 *                 ],
 *                 name: "L4-traffic-with-FQDN",
 *                 protocols: ["TCP"],
 *                 sourceAddresses: ["10.2.4.12-10.2.4.255"],
 *             },
 *         ],
 *     }],
 *     resourceGroupName: "rg1",
 *     sku: {
 *         name: "AZFW_VNet",
 *         tier: "Standard",
 *     },
 *     tags: {
 *         key1: "value1",
 *     },
 *     threatIntelMode: "Alert",
 *     zones: [],
 * });
 *
 * ```
 * ### Create Azure Firewall in virtual Hub
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const azureFirewall = new azure_native.network.AzureFirewall("azureFirewall", {
 *     azureFirewallName: "azurefirewall",
 *     firewallPolicy: {
 *         id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1",
 *     },
 *     hubIPAddresses: {
 *         publicIPs: {
 *             addresses: [],
 *             count: 1,
 *         },
 *     },
 *     location: "West US",
 *     resourceGroupName: "rg1",
 *     sku: {
 *         name: "AZFW_Hub",
 *         tier: "Standard",
 *     },
 *     tags: {
 *         key1: "value1",
 *     },
 *     threatIntelMode: "Alert",
 *     virtualHub: {
 *         id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1",
 *     },
 *     zones: [],
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:network:AzureFirewall azurefirewall /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall 
 * ```
 */
export class AzureFirewall extends pulumi.CustomResource {
    /**
     * Get an existing AzureFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AzureFirewall {
        return new AzureFirewall(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:network:AzureFirewall';

    /**
     * Returns true if the given object is an instance of AzureFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureFirewall.__pulumiType;
    }

    /**
     * The additional properties used to further config this azure firewall.
     */
    public readonly additionalProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Collection of application rule collections used by Azure Firewall.
     */
    public readonly applicationRuleCollections!: pulumi.Output<outputs.network.AzureFirewallApplicationRuleCollectionResponse[] | undefined>;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The firewallPolicy associated with this azure firewall.
     */
    public readonly firewallPolicy!: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * IP addresses associated with AzureFirewall.
     */
    public readonly hubIPAddresses!: pulumi.Output<outputs.network.HubIPAddressesResponse | undefined>;
    /**
     * IP configuration of the Azure Firewall resource.
     */
    public readonly ipConfigurations!: pulumi.Output<outputs.network.AzureFirewallIPConfigurationResponse[] | undefined>;
    /**
     * IpGroups associated with AzureFirewall.
     */
    public /*out*/ readonly ipGroups!: pulumi.Output<outputs.network.AzureFirewallIpGroupsResponse[]>;
    /**
     * Resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * IP configuration of the Azure Firewall used for management traffic.
     */
    public readonly managementIpConfiguration!: pulumi.Output<outputs.network.AzureFirewallIPConfigurationResponse | undefined>;
    /**
     * Resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Collection of NAT rule collections used by Azure Firewall.
     */
    public readonly natRuleCollections!: pulumi.Output<outputs.network.AzureFirewallNatRuleCollectionResponse[] | undefined>;
    /**
     * Collection of network rule collections used by Azure Firewall.
     */
    public readonly networkRuleCollections!: pulumi.Output<outputs.network.AzureFirewallNetworkRuleCollectionResponse[] | undefined>;
    /**
     * The provisioning state of the Azure firewall resource.
     */
    public /*out*/ readonly provisioningState!: pulumi.Output<string>;
    /**
     * The Azure Firewall Resource SKU.
     */
    public readonly sku!: pulumi.Output<outputs.network.AzureFirewallSkuResponse | undefined>;
    /**
     * Resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The operation mode for Threat Intelligence.
     */
    public readonly threatIntelMode!: pulumi.Output<string | undefined>;
    /**
     * Resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The virtualHub to which the firewall belongs.
     */
    public readonly virtualHub!: pulumi.Output<outputs.network.SubResourceResponse | undefined>;
    /**
     * A list of availability zones denoting where the resource needs to come from.
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AzureFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureFirewallArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["applicationRuleCollections"] = args ? args.applicationRuleCollections : undefined;
            resourceInputs["azureFirewallName"] = args ? args.azureFirewallName : undefined;
            resourceInputs["firewallPolicy"] = args ? args.firewallPolicy : undefined;
            resourceInputs["hubIPAddresses"] = args ? args.hubIPAddresses : undefined;
            resourceInputs["id"] = args ? args.id : undefined;
            resourceInputs["ipConfigurations"] = args ? args.ipConfigurations : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementIpConfiguration"] = args ? args.managementIpConfiguration : undefined;
            resourceInputs["natRuleCollections"] = args ? args.natRuleCollections : undefined;
            resourceInputs["networkRuleCollections"] = args ? args.networkRuleCollections : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatIntelMode"] = args ? args.threatIntelMode : undefined;
            resourceInputs["virtualHub"] = args ? args.virtualHub : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["ipGroups"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["additionalProperties"] = undefined /*out*/;
            resourceInputs["applicationRuleCollections"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["firewallPolicy"] = undefined /*out*/;
            resourceInputs["hubIPAddresses"] = undefined /*out*/;
            resourceInputs["ipConfigurations"] = undefined /*out*/;
            resourceInputs["ipGroups"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managementIpConfiguration"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["natRuleCollections"] = undefined /*out*/;
            resourceInputs["networkRuleCollections"] = undefined /*out*/;
            resourceInputs["provisioningState"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["threatIntelMode"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["virtualHub"] = undefined /*out*/;
            resourceInputs["zones"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:network/v20180401:AzureFirewall" }, { type: "azure-native:network/v20180601:AzureFirewall" }, { type: "azure-native:network/v20180701:AzureFirewall" }, { type: "azure-native:network/v20180801:AzureFirewall" }, { type: "azure-native:network/v20181001:AzureFirewall" }, { type: "azure-native:network/v20181101:AzureFirewall" }, { type: "azure-native:network/v20181201:AzureFirewall" }, { type: "azure-native:network/v20190201:AzureFirewall" }, { type: "azure-native:network/v20190401:AzureFirewall" }, { type: "azure-native:network/v20190601:AzureFirewall" }, { type: "azure-native:network/v20190701:AzureFirewall" }, { type: "azure-native:network/v20190801:AzureFirewall" }, { type: "azure-native:network/v20190901:AzureFirewall" }, { type: "azure-native:network/v20191101:AzureFirewall" }, { type: "azure-native:network/v20191201:AzureFirewall" }, { type: "azure-native:network/v20200301:AzureFirewall" }, { type: "azure-native:network/v20200401:AzureFirewall" }, { type: "azure-native:network/v20200501:AzureFirewall" }, { type: "azure-native:network/v20200601:AzureFirewall" }, { type: "azure-native:network/v20200701:AzureFirewall" }, { type: "azure-native:network/v20200801:AzureFirewall" }, { type: "azure-native:network/v20201101:AzureFirewall" }, { type: "azure-native:network/v20210201:AzureFirewall" }, { type: "azure-native:network/v20210301:AzureFirewall" }, { type: "azure-native:network/v20210501:AzureFirewall" }, { type: "azure-native:network/v20210801:AzureFirewall" }, { type: "azure-native:network/v20220101:AzureFirewall" }, { type: "azure-native:network/v20220501:AzureFirewall" }, { type: "azure-native:network/v20220701:AzureFirewall" }, { type: "azure-native:network/v20220901:AzureFirewall" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AzureFirewall.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AzureFirewall resource.
 */
export interface AzureFirewallArgs {
    /**
     * The additional properties used to further config this azure firewall.
     */
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Collection of application rule collections used by Azure Firewall.
     */
    applicationRuleCollections?: pulumi.Input<pulumi.Input<inputs.network.AzureFirewallApplicationRuleCollectionArgs>[]>;
    /**
     * The name of the Azure Firewall.
     */
    azureFirewallName?: pulumi.Input<string>;
    /**
     * The firewallPolicy associated with this azure firewall.
     */
    firewallPolicy?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * IP addresses associated with AzureFirewall.
     */
    hubIPAddresses?: pulumi.Input<inputs.network.HubIPAddressesArgs>;
    /**
     * Resource ID.
     */
    id?: pulumi.Input<string>;
    /**
     * IP configuration of the Azure Firewall resource.
     */
    ipConfigurations?: pulumi.Input<pulumi.Input<inputs.network.AzureFirewallIPConfigurationArgs>[]>;
    /**
     * Resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * IP configuration of the Azure Firewall used for management traffic.
     */
    managementIpConfiguration?: pulumi.Input<inputs.network.AzureFirewallIPConfigurationArgs>;
    /**
     * Collection of NAT rule collections used by Azure Firewall.
     */
    natRuleCollections?: pulumi.Input<pulumi.Input<inputs.network.AzureFirewallNatRuleCollectionArgs>[]>;
    /**
     * Collection of network rule collections used by Azure Firewall.
     */
    networkRuleCollections?: pulumi.Input<pulumi.Input<inputs.network.AzureFirewallNetworkRuleCollectionArgs>[]>;
    /**
     * The name of the resource group.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The Azure Firewall Resource SKU.
     */
    sku?: pulumi.Input<inputs.network.AzureFirewallSkuArgs>;
    /**
     * Resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The operation mode for Threat Intelligence.
     */
    threatIntelMode?: pulumi.Input<string | enums.network.AzureFirewallThreatIntelMode>;
    /**
     * The virtualHub to which the firewall belongs.
     */
    virtualHub?: pulumi.Input<inputs.network.SubResourceArgs>;
    /**
     * A list of availability zones denoting where the resource needs to come from.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
