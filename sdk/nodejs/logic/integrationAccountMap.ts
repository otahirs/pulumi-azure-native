// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The integration account map.
 * API Version: 2019-05-01.
 * Previous API Version: 2019-05-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
 *
 * ## Example Usage
 * ### Create or update a map
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const integrationAccountMap = new azure_native.logic.IntegrationAccountMap("integrationAccountMap", {
 *     content: `<?xml version="1.0" encoding="UTF-16"?>
 * <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:var="http://schemas.microsoft.com/BizTalk/2003/var" exclude-result-prefixes="msxsl var s0 userCSharp" version="1.0" xmlns:ns0="http://BizTalk_Server_Project4.StringFunctoidsDestinationSchema" xmlns:s0="http://BizTalk_Server_Project4.StringFunctoidsSourceSchema" xmlns:userCSharp="http://schemas.microsoft.com/BizTalk/2003/userCSharp">
 *   <xsl:import href="http://btsfunctoids.blob.core.windows.net/functoids/functoids.xslt" />
 *   <xsl:output omit-xml-declaration="yes" method="xml" version="1.0" />
 *   <xsl:template match="/">
 *     <xsl:apply-templates select="/s0:Root" />
 *   </xsl:template>
 *   <xsl:template match="/s0:Root">
 *     <xsl:variable name="var:v1" select="userCSharp:StringFind(string(StringFindSource/text()) , &quot;SearchString&quot;)" />
 *     <xsl:variable name="var:v2" select="userCSharp:StringLeft(string(StringLeftSource/text()) , &quot;2&quot;)" />
 *     <xsl:variable name="var:v3" select="userCSharp:StringRight(string(StringRightSource/text()) , &quot;2&quot;)" />
 *     <xsl:variable name="var:v4" select="userCSharp:StringUpperCase(string(UppercaseSource/text()))" />
 *     <xsl:variable name="var:v5" select="userCSharp:StringLowerCase(string(LowercaseSource/text()))" />
 *     <xsl:variable name="var:v6" select="userCSharp:StringSize(string(SizeSource/text()))" />
 *     <xsl:variable name="var:v7" select="userCSharp:StringSubstring(string(StringExtractSource/text()) , &quot;0&quot; , &quot;2&quot;)" />
 *     <xsl:variable name="var:v8" select="userCSharp:StringConcat(string(StringConcatSource/text()))" />
 *     <xsl:variable name="var:v9" select="userCSharp:StringTrimLeft(string(StringLeftTrimSource/text()))" />
 *     <xsl:variable name="var:v10" select="userCSharp:StringTrimRight(string(StringRightTrimSource/text()))" />
 *     <ns0:Root>
 *       <StringFindDestination>
 *         <xsl:value-of select="$var:v1" />
 *       </StringFindDestination>
 *       <StringLeftDestination>
 *         <xsl:value-of select="$var:v2" />
 *       </StringLeftDestination>
 *       <StringRightDestination>
 *         <xsl:value-of select="$var:v3" />
 *       </StringRightDestination>
 *       <UppercaseDestination>
 *         <xsl:value-of select="$var:v4" />
 *       </UppercaseDestination>
 *       <LowercaseDestination>
 *         <xsl:value-of select="$var:v5" />
 *       </LowercaseDestination>
 *       <SizeDestination>
 *         <xsl:value-of select="$var:v6" />
 *       </SizeDestination>
 *       <StringExtractDestination>
 *         <xsl:value-of select="$var:v7" />
 *       </StringExtractDestination>
 *       <StringConcatDestination>
 *         <xsl:value-of select="$var:v8" />
 *       </StringConcatDestination>
 *       <StringLeftTrimDestination>
 *         <xsl:value-of select="$var:v9" />
 *       </StringLeftTrimDestination>
 *       <StringRightTrimDestination>
 *         <xsl:value-of select="$var:v10" />
 *       </StringRightTrimDestination>
 *     </ns0:Root>
 *   </xsl:template>
 * </xsl:stylesheet>`,
 *     contentType: "application/xml",
 *     integrationAccountName: "testIntegrationAccount",
 *     location: "westus",
 *     mapName: "testMap",
 *     mapType: "Xslt",
 *     metadata: {},
 *     resourceGroupName: "testResourceGroup",
 * });
 *
 * ```
 * ### Create or update a map larger than 4 MB
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure_native from "@pulumi/azure-native";
 *
 * const integrationAccountMap = new azure_native.logic.IntegrationAccountMap("integrationAccountMap", {
 *     contentType: "application/xml",
 *     integrationAccountName: "testIntegrationAccount",
 *     location: "westus",
 *     mapName: "testMap",
 *     mapType: "Xslt",
 *     metadata: {},
 *     resourceGroupName: "testResourceGroup",
 * });
 *
 * ```
 *
 * ## Import
 *
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 *
 * ```sh
 * $ pulumi import azure-native:logic:IntegrationAccountMap testMap /subscriptions/<Azure-subscription-ID>/resourceGroups/refresh/providers/Microsoft.Logic/integrationAccounts/testIntegrationAccount/maps/testMap 
 * ```
 */
export class IntegrationAccountMap extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAccountMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IntegrationAccountMap {
        return new IntegrationAccountMap(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azure-native:logic:IntegrationAccountMap';

    /**
     * Returns true if the given object is an instance of IntegrationAccountMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAccountMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountMap.__pulumiType;
    }

    /**
     * The changed time.
     */
    public /*out*/ readonly changedTime!: pulumi.Output<string>;
    /**
     * The content.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * The content link.
     */
    public /*out*/ readonly contentLink!: pulumi.Output<outputs.logic.ContentLinkResponse>;
    /**
     * The content type.
     */
    public readonly contentType!: pulumi.Output<string | undefined>;
    /**
     * The created time.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The map type.
     */
    public readonly mapType!: pulumi.Output<string>;
    /**
     * The metadata.
     */
    public readonly metadata!: pulumi.Output<any | undefined>;
    /**
     * Gets the resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The parameters schema of integration account map.
     */
    public readonly parametersSchema!: pulumi.Output<outputs.logic.IntegrationAccountMapPropertiesResponseParametersSchema | undefined>;
    /**
     * The resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Gets the resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a IntegrationAccountMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAccountMapArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.integrationAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if ((!args || args.mapType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mapType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["integrationAccountName"] = args ? args.integrationAccountName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mapName"] = args ? args.mapName : undefined;
            resourceInputs["mapType"] = args ? args.mapType : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["parametersSchema"] = args ? args.parametersSchema : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["changedTime"] = undefined /*out*/;
            resourceInputs["contentLink"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["changedTime"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["contentLink"] = undefined /*out*/;
            resourceInputs["contentType"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["mapType"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parametersSchema"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "azure-native:logic/v20150801preview:IntegrationAccountMap" }, { type: "azure-native:logic/v20160601:IntegrationAccountMap" }, { type: "azure-native:logic/v20180701preview:IntegrationAccountMap" }, { type: "azure-native:logic/v20190501:IntegrationAccountMap" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(IntegrationAccountMap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IntegrationAccountMap resource.
 */
export interface IntegrationAccountMapArgs {
    /**
     * The content.
     */
    content?: pulumi.Input<string>;
    /**
     * The content type.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The integration account name.
     */
    integrationAccountName: pulumi.Input<string>;
    /**
     * The resource location.
     */
    location?: pulumi.Input<string>;
    /**
     * The integration account map name.
     */
    mapName?: pulumi.Input<string>;
    /**
     * The map type.
     */
    mapType: pulumi.Input<string | enums.logic.MapType>;
    /**
     * The metadata.
     */
    metadata?: any;
    /**
     * The parameters schema of integration account map.
     */
    parametersSchema?: pulumi.Input<inputs.logic.IntegrationAccountMapPropertiesParametersSchemaArgs>;
    /**
     * The resource group name.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
