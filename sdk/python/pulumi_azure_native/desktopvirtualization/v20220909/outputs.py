# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AgentUpdatePropertiesResponse',
    'MaintenanceWindowPropertiesResponse',
    'MsixPackageApplicationsResponse',
    'MsixPackageDependenciesResponse',
    'RegistrationInfoResponse',
    'ResourceModelWithAllowedPropertySetResponseIdentity',
    'ResourceModelWithAllowedPropertySetResponsePlan',
    'ResourceModelWithAllowedPropertySetResponseSku',
    'ScalingHostPoolReferenceResponse',
    'ScalingScheduleResponse',
    'SystemDataResponse',
    'TimeResponse',
]

@pulumi.output_type
class AgentUpdatePropertiesResponse(dict):
    """
    The session host configuration for updating agent, monitoring agent, and stack component.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maintenanceWindowTimeZone":
            suggest = "maintenance_window_time_zone"
        elif key == "maintenanceWindows":
            suggest = "maintenance_windows"
        elif key == "useSessionHostLocalTime":
            suggest = "use_session_host_local_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentUpdatePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentUpdatePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentUpdatePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maintenance_window_time_zone: Optional[str] = None,
                 maintenance_windows: Optional[Sequence['outputs.MaintenanceWindowPropertiesResponse']] = None,
                 type: Optional[str] = None,
                 use_session_host_local_time: Optional[bool] = None):
        """
        The session host configuration for updating agent, monitoring agent, and stack component.
        :param str maintenance_window_time_zone: Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
        :param Sequence['MaintenanceWindowPropertiesResponse'] maintenance_windows: List of maintenance windows. Maintenance windows are 2 hours long.
        :param str type: The type of maintenance for session host components.
        :param bool use_session_host_local_time: Whether to use localTime of the virtual machine.
        """
        AgentUpdatePropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maintenance_window_time_zone=maintenance_window_time_zone,
            maintenance_windows=maintenance_windows,
            type=type,
            use_session_host_local_time=use_session_host_local_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maintenance_window_time_zone: Optional[str] = None,
             maintenance_windows: Optional[Sequence['outputs.MaintenanceWindowPropertiesResponse']] = None,
             type: Optional[str] = None,
             use_session_host_local_time: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if maintenance_window_time_zone is None and 'maintenanceWindowTimeZone' in kwargs:
            maintenance_window_time_zone = kwargs['maintenanceWindowTimeZone']
        if maintenance_windows is None and 'maintenanceWindows' in kwargs:
            maintenance_windows = kwargs['maintenanceWindows']
        if use_session_host_local_time is None and 'useSessionHostLocalTime' in kwargs:
            use_session_host_local_time = kwargs['useSessionHostLocalTime']

        if maintenance_window_time_zone is not None:
            _setter("maintenance_window_time_zone", maintenance_window_time_zone)
        if maintenance_windows is not None:
            _setter("maintenance_windows", maintenance_windows)
        if type is not None:
            _setter("type", type)
        if use_session_host_local_time is not None:
            _setter("use_session_host_local_time", use_session_host_local_time)

    @property
    @pulumi.getter(name="maintenanceWindowTimeZone")
    def maintenance_window_time_zone(self) -> Optional[str]:
        """
        Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
        """
        return pulumi.get(self, "maintenance_window_time_zone")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[Sequence['outputs.MaintenanceWindowPropertiesResponse']]:
        """
        List of maintenance windows. Maintenance windows are 2 hours long.
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of maintenance for session host components.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useSessionHostLocalTime")
    def use_session_host_local_time(self) -> Optional[bool]:
        """
        Whether to use localTime of the virtual machine.
        """
        return pulumi.get(self, "use_session_host_local_time")


@pulumi.output_type
class MaintenanceWindowPropertiesResponse(dict):
    """
    Maintenance window starting hour and day of week.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaintenanceWindowPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaintenanceWindowPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaintenanceWindowPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        Maintenance window starting hour and day of week.
        :param str day_of_week: Day of the week.
        :param int hour: The update start hour of the day. (0 - 23)
        """
        MaintenanceWindowPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            hour=hour,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: Optional[str] = None,
             hour: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if day_of_week is None and 'dayOfWeek' in kwargs:
            day_of_week = kwargs['dayOfWeek']

        if day_of_week is not None:
            _setter("day_of_week", day_of_week)
        if hour is not None:
            _setter("hour", hour)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        Day of the week.
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        The update start hour of the day. (0 - 23)
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MsixPackageApplicationsResponse(dict):
    """
    Schema for MSIX Package Application properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "appUserModelID":
            suggest = "app_user_model_id"
        elif key == "friendlyName":
            suggest = "friendly_name"
        elif key == "iconImageName":
            suggest = "icon_image_name"
        elif key == "rawIcon":
            suggest = "raw_icon"
        elif key == "rawPng":
            suggest = "raw_png"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MsixPackageApplicationsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MsixPackageApplicationsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MsixPackageApplicationsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 app_user_model_id: Optional[str] = None,
                 description: Optional[str] = None,
                 friendly_name: Optional[str] = None,
                 icon_image_name: Optional[str] = None,
                 raw_icon: Optional[str] = None,
                 raw_png: Optional[str] = None):
        """
        Schema for MSIX Package Application properties.
        :param str app_id: Package Application Id, found in appxmanifest.xml.
        :param str app_user_model_id: Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        :param str description: Description of Package Application.
        :param str friendly_name: User friendly name.
        :param str icon_image_name: User friendly name.
        :param str raw_icon: the icon a 64 bit string as a byte array.
        :param str raw_png: the icon a 64 bit string as a byte array.
        """
        MsixPackageApplicationsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_id=app_id,
            app_user_model_id=app_user_model_id,
            description=description,
            friendly_name=friendly_name,
            icon_image_name=icon_image_name,
            raw_icon=raw_icon,
            raw_png=raw_png,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_id: Optional[str] = None,
             app_user_model_id: Optional[str] = None,
             description: Optional[str] = None,
             friendly_name: Optional[str] = None,
             icon_image_name: Optional[str] = None,
             raw_icon: Optional[str] = None,
             raw_png: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if app_id is None and 'appId' in kwargs:
            app_id = kwargs['appId']
        if app_user_model_id is None and 'appUserModelID' in kwargs:
            app_user_model_id = kwargs['appUserModelID']
        if friendly_name is None and 'friendlyName' in kwargs:
            friendly_name = kwargs['friendlyName']
        if icon_image_name is None and 'iconImageName' in kwargs:
            icon_image_name = kwargs['iconImageName']
        if raw_icon is None and 'rawIcon' in kwargs:
            raw_icon = kwargs['rawIcon']
        if raw_png is None and 'rawPng' in kwargs:
            raw_png = kwargs['rawPng']

        if app_id is not None:
            _setter("app_id", app_id)
        if app_user_model_id is not None:
            _setter("app_user_model_id", app_user_model_id)
        if description is not None:
            _setter("description", description)
        if friendly_name is not None:
            _setter("friendly_name", friendly_name)
        if icon_image_name is not None:
            _setter("icon_image_name", icon_image_name)
        if raw_icon is not None:
            _setter("raw_icon", raw_icon)
        if raw_png is not None:
            _setter("raw_png", raw_png)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        Package Application Id, found in appxmanifest.xml.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appUserModelID")
    def app_user_model_id(self) -> Optional[str]:
        """
        Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
        """
        return pulumi.get(self, "app_user_model_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of Package Application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        """
        User friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter(name="iconImageName")
    def icon_image_name(self) -> Optional[str]:
        """
        User friendly name.
        """
        return pulumi.get(self, "icon_image_name")

    @property
    @pulumi.getter(name="rawIcon")
    def raw_icon(self) -> Optional[str]:
        """
        the icon a 64 bit string as a byte array.
        """
        return pulumi.get(self, "raw_icon")

    @property
    @pulumi.getter(name="rawPng")
    def raw_png(self) -> Optional[str]:
        """
        the icon a 64 bit string as a byte array.
        """
        return pulumi.get(self, "raw_png")


@pulumi.output_type
class MsixPackageDependenciesResponse(dict):
    """
    Schema for MSIX Package Dependencies properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dependencyName":
            suggest = "dependency_name"
        elif key == "minVersion":
            suggest = "min_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MsixPackageDependenciesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MsixPackageDependenciesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MsixPackageDependenciesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dependency_name: Optional[str] = None,
                 min_version: Optional[str] = None,
                 publisher: Optional[str] = None):
        """
        Schema for MSIX Package Dependencies properties.
        :param str dependency_name: Name of package dependency.
        :param str min_version: Dependency version required.
        :param str publisher: Name of dependency publisher.
        """
        MsixPackageDependenciesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dependency_name=dependency_name,
            min_version=min_version,
            publisher=publisher,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dependency_name: Optional[str] = None,
             min_version: Optional[str] = None,
             publisher: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dependency_name is None and 'dependencyName' in kwargs:
            dependency_name = kwargs['dependencyName']
        if min_version is None and 'minVersion' in kwargs:
            min_version = kwargs['minVersion']

        if dependency_name is not None:
            _setter("dependency_name", dependency_name)
        if min_version is not None:
            _setter("min_version", min_version)
        if publisher is not None:
            _setter("publisher", publisher)

    @property
    @pulumi.getter(name="dependencyName")
    def dependency_name(self) -> Optional[str]:
        """
        Name of package dependency.
        """
        return pulumi.get(self, "dependency_name")

    @property
    @pulumi.getter(name="minVersion")
    def min_version(self) -> Optional[str]:
        """
        Dependency version required.
        """
        return pulumi.get(self, "min_version")

    @property
    @pulumi.getter
    def publisher(self) -> Optional[str]:
        """
        Name of dependency publisher.
        """
        return pulumi.get(self, "publisher")


@pulumi.output_type
class RegistrationInfoResponse(dict):
    """
    Represents a RegistrationInfo definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationTime":
            suggest = "expiration_time"
        elif key == "registrationTokenOperation":
            suggest = "registration_token_operation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistrationInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistrationInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistrationInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration_time: Optional[str] = None,
                 registration_token_operation: Optional[str] = None,
                 token: Optional[str] = None):
        """
        Represents a RegistrationInfo definition.
        :param str expiration_time: Expiration time of registration token.
        :param str registration_token_operation: The type of resetting the token.
        :param str token: The registration token base64 encoded string.
        """
        RegistrationInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expiration_time=expiration_time,
            registration_token_operation=registration_token_operation,
            token=token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expiration_time: Optional[str] = None,
             registration_token_operation: Optional[str] = None,
             token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if expiration_time is None and 'expirationTime' in kwargs:
            expiration_time = kwargs['expirationTime']
        if registration_token_operation is None and 'registrationTokenOperation' in kwargs:
            registration_token_operation = kwargs['registrationTokenOperation']

        if expiration_time is not None:
            _setter("expiration_time", expiration_time)
        if registration_token_operation is not None:
            _setter("registration_token_operation", registration_token_operation)
        if token is not None:
            _setter("token", token)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        """
        Expiration time of registration token.
        """
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="registrationTokenOperation")
    def registration_token_operation(self) -> Optional[str]:
        """
        The type of resetting the token.
        """
        return pulumi.get(self, "registration_token_operation")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        The registration token base64 encoded string.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class ResourceModelWithAllowedPropertySetResponseIdentity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceModelWithAllowedPropertySetResponseIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceModelWithAllowedPropertySetResponseIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceModelWithAllowedPropertySetResponseIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None):
        """
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        """
        ResourceModelWithAllowedPropertySetResponseIdentity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if principal_id is None and 'principalId' in kwargs:
            principal_id = kwargs['principalId']
        if principal_id is None:
            raise TypeError("Missing 'principal_id' argument")
        if tenant_id is None and 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if tenant_id is None:
            raise TypeError("Missing 'tenant_id' argument")

        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceModelWithAllowedPropertySetResponsePlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "promotionCode":
            suggest = "promotion_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceModelWithAllowedPropertySetResponsePlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceModelWithAllowedPropertySetResponsePlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceModelWithAllowedPropertySetResponsePlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 product: str,
                 publisher: str,
                 promotion_code: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str name: A user defined name of the 3rd Party Artifact that is being procured.
        :param str product: The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        :param str publisher: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        :param str promotion_code: A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        :param str version: The version of the desired product/artifact.
        """
        ResourceModelWithAllowedPropertySetResponsePlan._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            product=product,
            publisher=publisher,
            promotion_code=promotion_code,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             product: Optional[str] = None,
             publisher: Optional[str] = None,
             promotion_code: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if product is None:
            raise TypeError("Missing 'product' argument")
        if publisher is None:
            raise TypeError("Missing 'publisher' argument")
        if promotion_code is None and 'promotionCode' in kwargs:
            promotion_code = kwargs['promotionCode']

        _setter("name", name)
        _setter("product", product)
        _setter("publisher", publisher)
        if promotion_code is not None:
            _setter("promotion_code", promotion_code)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A user defined name of the 3rd Party Artifact that is being procured.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def product(self) -> str:
        """
        The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. 
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        """
        The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        """
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="promotionCode")
    def promotion_code(self) -> Optional[str]:
        """
        A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        """
        return pulumi.get(self, "promotion_code")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        The version of the desired product/artifact.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ResourceModelWithAllowedPropertySetResponseSku(dict):
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        ResourceModelWithAllowedPropertySetResponseSku._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            capacity=capacity,
            family=family,
            size=size,
            tier=tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             capacity: Optional[int] = None,
             family: Optional[str] = None,
             size: Optional[str] = None,
             tier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("name", name)
        if capacity is not None:
            _setter("capacity", capacity)
        if family is not None:
            _setter("family", family)
        if size is not None:
            _setter("size", size)
        if tier is not None:
            _setter("tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class ScalingHostPoolReferenceResponse(dict):
    """
    Scaling plan reference to hostpool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostPoolArmPath":
            suggest = "host_pool_arm_path"
        elif key == "scalingPlanEnabled":
            suggest = "scaling_plan_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingHostPoolReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingHostPoolReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingHostPoolReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_pool_arm_path: Optional[str] = None,
                 scaling_plan_enabled: Optional[bool] = None):
        """
        Scaling plan reference to hostpool.
        :param str host_pool_arm_path: Arm path of referenced hostpool.
        :param bool scaling_plan_enabled: Is the scaling plan enabled for this hostpool.
        """
        ScalingHostPoolReferenceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host_pool_arm_path=host_pool_arm_path,
            scaling_plan_enabled=scaling_plan_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host_pool_arm_path: Optional[str] = None,
             scaling_plan_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if host_pool_arm_path is None and 'hostPoolArmPath' in kwargs:
            host_pool_arm_path = kwargs['hostPoolArmPath']
        if scaling_plan_enabled is None and 'scalingPlanEnabled' in kwargs:
            scaling_plan_enabled = kwargs['scalingPlanEnabled']

        if host_pool_arm_path is not None:
            _setter("host_pool_arm_path", host_pool_arm_path)
        if scaling_plan_enabled is not None:
            _setter("scaling_plan_enabled", scaling_plan_enabled)

    @property
    @pulumi.getter(name="hostPoolArmPath")
    def host_pool_arm_path(self) -> Optional[str]:
        """
        Arm path of referenced hostpool.
        """
        return pulumi.get(self, "host_pool_arm_path")

    @property
    @pulumi.getter(name="scalingPlanEnabled")
    def scaling_plan_enabled(self) -> Optional[bool]:
        """
        Is the scaling plan enabled for this hostpool.
        """
        return pulumi.get(self, "scaling_plan_enabled")


@pulumi.output_type
class ScalingScheduleResponse(dict):
    """
    A ScalingPlanPooledSchedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeek":
            suggest = "days_of_week"
        elif key == "offPeakLoadBalancingAlgorithm":
            suggest = "off_peak_load_balancing_algorithm"
        elif key == "offPeakStartTime":
            suggest = "off_peak_start_time"
        elif key == "peakLoadBalancingAlgorithm":
            suggest = "peak_load_balancing_algorithm"
        elif key == "peakStartTime":
            suggest = "peak_start_time"
        elif key == "rampDownCapacityThresholdPct":
            suggest = "ramp_down_capacity_threshold_pct"
        elif key == "rampDownForceLogoffUsers":
            suggest = "ramp_down_force_logoff_users"
        elif key == "rampDownLoadBalancingAlgorithm":
            suggest = "ramp_down_load_balancing_algorithm"
        elif key == "rampDownMinimumHostsPct":
            suggest = "ramp_down_minimum_hosts_pct"
        elif key == "rampDownNotificationMessage":
            suggest = "ramp_down_notification_message"
        elif key == "rampDownStartTime":
            suggest = "ramp_down_start_time"
        elif key == "rampDownStopHostsWhen":
            suggest = "ramp_down_stop_hosts_when"
        elif key == "rampDownWaitTimeMinutes":
            suggest = "ramp_down_wait_time_minutes"
        elif key == "rampUpCapacityThresholdPct":
            suggest = "ramp_up_capacity_threshold_pct"
        elif key == "rampUpLoadBalancingAlgorithm":
            suggest = "ramp_up_load_balancing_algorithm"
        elif key == "rampUpMinimumHostsPct":
            suggest = "ramp_up_minimum_hosts_pct"
        elif key == "rampUpStartTime":
            suggest = "ramp_up_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingScheduleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingScheduleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingScheduleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_week: Optional[Sequence[str]] = None,
                 name: Optional[str] = None,
                 off_peak_load_balancing_algorithm: Optional[str] = None,
                 off_peak_start_time: Optional['outputs.TimeResponse'] = None,
                 peak_load_balancing_algorithm: Optional[str] = None,
                 peak_start_time: Optional['outputs.TimeResponse'] = None,
                 ramp_down_capacity_threshold_pct: Optional[int] = None,
                 ramp_down_force_logoff_users: Optional[bool] = None,
                 ramp_down_load_balancing_algorithm: Optional[str] = None,
                 ramp_down_minimum_hosts_pct: Optional[int] = None,
                 ramp_down_notification_message: Optional[str] = None,
                 ramp_down_start_time: Optional['outputs.TimeResponse'] = None,
                 ramp_down_stop_hosts_when: Optional[str] = None,
                 ramp_down_wait_time_minutes: Optional[int] = None,
                 ramp_up_capacity_threshold_pct: Optional[int] = None,
                 ramp_up_load_balancing_algorithm: Optional[str] = None,
                 ramp_up_minimum_hosts_pct: Optional[int] = None,
                 ramp_up_start_time: Optional['outputs.TimeResponse'] = None):
        """
        A ScalingPlanPooledSchedule.
        :param Sequence[str] days_of_week: Set of days of the week on which this schedule is active.
        :param str name: Name of the ScalingPlanPooledSchedule.
        :param str off_peak_load_balancing_algorithm: Load balancing algorithm for off-peak period.
        :param 'TimeResponse' off_peak_start_time: Starting time for off-peak period.
        :param str peak_load_balancing_algorithm: Load balancing algorithm for peak period.
        :param 'TimeResponse' peak_start_time: Starting time for peak period.
        :param int ramp_down_capacity_threshold_pct: Capacity threshold for ramp down period.
        :param bool ramp_down_force_logoff_users: Should users be logged off forcefully from hosts.
        :param str ramp_down_load_balancing_algorithm: Load balancing algorithm for ramp down period.
        :param int ramp_down_minimum_hosts_pct: Minimum host percentage for ramp down period.
        :param str ramp_down_notification_message: Notification message for users during ramp down period.
        :param 'TimeResponse' ramp_down_start_time: Starting time for ramp down period.
        :param str ramp_down_stop_hosts_when: Specifies when to stop hosts during ramp down period.
        :param int ramp_down_wait_time_minutes: Number of minutes to wait to stop hosts during ramp down period.
        :param int ramp_up_capacity_threshold_pct: Capacity threshold for ramp up period.
        :param str ramp_up_load_balancing_algorithm: Load balancing algorithm for ramp up period.
        :param int ramp_up_minimum_hosts_pct: Minimum host percentage for ramp up period.
        :param 'TimeResponse' ramp_up_start_time: Starting time for ramp up period.
        """
        ScalingScheduleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days_of_week=days_of_week,
            name=name,
            off_peak_load_balancing_algorithm=off_peak_load_balancing_algorithm,
            off_peak_start_time=off_peak_start_time,
            peak_load_balancing_algorithm=peak_load_balancing_algorithm,
            peak_start_time=peak_start_time,
            ramp_down_capacity_threshold_pct=ramp_down_capacity_threshold_pct,
            ramp_down_force_logoff_users=ramp_down_force_logoff_users,
            ramp_down_load_balancing_algorithm=ramp_down_load_balancing_algorithm,
            ramp_down_minimum_hosts_pct=ramp_down_minimum_hosts_pct,
            ramp_down_notification_message=ramp_down_notification_message,
            ramp_down_start_time=ramp_down_start_time,
            ramp_down_stop_hosts_when=ramp_down_stop_hosts_when,
            ramp_down_wait_time_minutes=ramp_down_wait_time_minutes,
            ramp_up_capacity_threshold_pct=ramp_up_capacity_threshold_pct,
            ramp_up_load_balancing_algorithm=ramp_up_load_balancing_algorithm,
            ramp_up_minimum_hosts_pct=ramp_up_minimum_hosts_pct,
            ramp_up_start_time=ramp_up_start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days_of_week: Optional[Sequence[str]] = None,
             name: Optional[str] = None,
             off_peak_load_balancing_algorithm: Optional[str] = None,
             off_peak_start_time: Optional['outputs.TimeResponse'] = None,
             peak_load_balancing_algorithm: Optional[str] = None,
             peak_start_time: Optional['outputs.TimeResponse'] = None,
             ramp_down_capacity_threshold_pct: Optional[int] = None,
             ramp_down_force_logoff_users: Optional[bool] = None,
             ramp_down_load_balancing_algorithm: Optional[str] = None,
             ramp_down_minimum_hosts_pct: Optional[int] = None,
             ramp_down_notification_message: Optional[str] = None,
             ramp_down_start_time: Optional['outputs.TimeResponse'] = None,
             ramp_down_stop_hosts_when: Optional[str] = None,
             ramp_down_wait_time_minutes: Optional[int] = None,
             ramp_up_capacity_threshold_pct: Optional[int] = None,
             ramp_up_load_balancing_algorithm: Optional[str] = None,
             ramp_up_minimum_hosts_pct: Optional[int] = None,
             ramp_up_start_time: Optional['outputs.TimeResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if days_of_week is None and 'daysOfWeek' in kwargs:
            days_of_week = kwargs['daysOfWeek']
        if off_peak_load_balancing_algorithm is None and 'offPeakLoadBalancingAlgorithm' in kwargs:
            off_peak_load_balancing_algorithm = kwargs['offPeakLoadBalancingAlgorithm']
        if off_peak_start_time is None and 'offPeakStartTime' in kwargs:
            off_peak_start_time = kwargs['offPeakStartTime']
        if peak_load_balancing_algorithm is None and 'peakLoadBalancingAlgorithm' in kwargs:
            peak_load_balancing_algorithm = kwargs['peakLoadBalancingAlgorithm']
        if peak_start_time is None and 'peakStartTime' in kwargs:
            peak_start_time = kwargs['peakStartTime']
        if ramp_down_capacity_threshold_pct is None and 'rampDownCapacityThresholdPct' in kwargs:
            ramp_down_capacity_threshold_pct = kwargs['rampDownCapacityThresholdPct']
        if ramp_down_force_logoff_users is None and 'rampDownForceLogoffUsers' in kwargs:
            ramp_down_force_logoff_users = kwargs['rampDownForceLogoffUsers']
        if ramp_down_load_balancing_algorithm is None and 'rampDownLoadBalancingAlgorithm' in kwargs:
            ramp_down_load_balancing_algorithm = kwargs['rampDownLoadBalancingAlgorithm']
        if ramp_down_minimum_hosts_pct is None and 'rampDownMinimumHostsPct' in kwargs:
            ramp_down_minimum_hosts_pct = kwargs['rampDownMinimumHostsPct']
        if ramp_down_notification_message is None and 'rampDownNotificationMessage' in kwargs:
            ramp_down_notification_message = kwargs['rampDownNotificationMessage']
        if ramp_down_start_time is None and 'rampDownStartTime' in kwargs:
            ramp_down_start_time = kwargs['rampDownStartTime']
        if ramp_down_stop_hosts_when is None and 'rampDownStopHostsWhen' in kwargs:
            ramp_down_stop_hosts_when = kwargs['rampDownStopHostsWhen']
        if ramp_down_wait_time_minutes is None and 'rampDownWaitTimeMinutes' in kwargs:
            ramp_down_wait_time_minutes = kwargs['rampDownWaitTimeMinutes']
        if ramp_up_capacity_threshold_pct is None and 'rampUpCapacityThresholdPct' in kwargs:
            ramp_up_capacity_threshold_pct = kwargs['rampUpCapacityThresholdPct']
        if ramp_up_load_balancing_algorithm is None and 'rampUpLoadBalancingAlgorithm' in kwargs:
            ramp_up_load_balancing_algorithm = kwargs['rampUpLoadBalancingAlgorithm']
        if ramp_up_minimum_hosts_pct is None and 'rampUpMinimumHostsPct' in kwargs:
            ramp_up_minimum_hosts_pct = kwargs['rampUpMinimumHostsPct']
        if ramp_up_start_time is None and 'rampUpStartTime' in kwargs:
            ramp_up_start_time = kwargs['rampUpStartTime']

        if days_of_week is not None:
            _setter("days_of_week", days_of_week)
        if name is not None:
            _setter("name", name)
        if off_peak_load_balancing_algorithm is not None:
            _setter("off_peak_load_balancing_algorithm", off_peak_load_balancing_algorithm)
        if off_peak_start_time is not None:
            _setter("off_peak_start_time", off_peak_start_time)
        if peak_load_balancing_algorithm is not None:
            _setter("peak_load_balancing_algorithm", peak_load_balancing_algorithm)
        if peak_start_time is not None:
            _setter("peak_start_time", peak_start_time)
        if ramp_down_capacity_threshold_pct is not None:
            _setter("ramp_down_capacity_threshold_pct", ramp_down_capacity_threshold_pct)
        if ramp_down_force_logoff_users is not None:
            _setter("ramp_down_force_logoff_users", ramp_down_force_logoff_users)
        if ramp_down_load_balancing_algorithm is not None:
            _setter("ramp_down_load_balancing_algorithm", ramp_down_load_balancing_algorithm)
        if ramp_down_minimum_hosts_pct is not None:
            _setter("ramp_down_minimum_hosts_pct", ramp_down_minimum_hosts_pct)
        if ramp_down_notification_message is not None:
            _setter("ramp_down_notification_message", ramp_down_notification_message)
        if ramp_down_start_time is not None:
            _setter("ramp_down_start_time", ramp_down_start_time)
        if ramp_down_stop_hosts_when is not None:
            _setter("ramp_down_stop_hosts_when", ramp_down_stop_hosts_when)
        if ramp_down_wait_time_minutes is not None:
            _setter("ramp_down_wait_time_minutes", ramp_down_wait_time_minutes)
        if ramp_up_capacity_threshold_pct is not None:
            _setter("ramp_up_capacity_threshold_pct", ramp_up_capacity_threshold_pct)
        if ramp_up_load_balancing_algorithm is not None:
            _setter("ramp_up_load_balancing_algorithm", ramp_up_load_balancing_algorithm)
        if ramp_up_minimum_hosts_pct is not None:
            _setter("ramp_up_minimum_hosts_pct", ramp_up_minimum_hosts_pct)
        if ramp_up_start_time is not None:
            _setter("ramp_up_start_time", ramp_up_start_time)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[Sequence[str]]:
        """
        Set of days of the week on which this schedule is active.
        """
        return pulumi.get(self, "days_of_week")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the ScalingPlanPooledSchedule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="offPeakLoadBalancingAlgorithm")
    def off_peak_load_balancing_algorithm(self) -> Optional[str]:
        """
        Load balancing algorithm for off-peak period.
        """
        return pulumi.get(self, "off_peak_load_balancing_algorithm")

    @property
    @pulumi.getter(name="offPeakStartTime")
    def off_peak_start_time(self) -> Optional['outputs.TimeResponse']:
        """
        Starting time for off-peak period.
        """
        return pulumi.get(self, "off_peak_start_time")

    @property
    @pulumi.getter(name="peakLoadBalancingAlgorithm")
    def peak_load_balancing_algorithm(self) -> Optional[str]:
        """
        Load balancing algorithm for peak period.
        """
        return pulumi.get(self, "peak_load_balancing_algorithm")

    @property
    @pulumi.getter(name="peakStartTime")
    def peak_start_time(self) -> Optional['outputs.TimeResponse']:
        """
        Starting time for peak period.
        """
        return pulumi.get(self, "peak_start_time")

    @property
    @pulumi.getter(name="rampDownCapacityThresholdPct")
    def ramp_down_capacity_threshold_pct(self) -> Optional[int]:
        """
        Capacity threshold for ramp down period.
        """
        return pulumi.get(self, "ramp_down_capacity_threshold_pct")

    @property
    @pulumi.getter(name="rampDownForceLogoffUsers")
    def ramp_down_force_logoff_users(self) -> Optional[bool]:
        """
        Should users be logged off forcefully from hosts.
        """
        return pulumi.get(self, "ramp_down_force_logoff_users")

    @property
    @pulumi.getter(name="rampDownLoadBalancingAlgorithm")
    def ramp_down_load_balancing_algorithm(self) -> Optional[str]:
        """
        Load balancing algorithm for ramp down period.
        """
        return pulumi.get(self, "ramp_down_load_balancing_algorithm")

    @property
    @pulumi.getter(name="rampDownMinimumHostsPct")
    def ramp_down_minimum_hosts_pct(self) -> Optional[int]:
        """
        Minimum host percentage for ramp down period.
        """
        return pulumi.get(self, "ramp_down_minimum_hosts_pct")

    @property
    @pulumi.getter(name="rampDownNotificationMessage")
    def ramp_down_notification_message(self) -> Optional[str]:
        """
        Notification message for users during ramp down period.
        """
        return pulumi.get(self, "ramp_down_notification_message")

    @property
    @pulumi.getter(name="rampDownStartTime")
    def ramp_down_start_time(self) -> Optional['outputs.TimeResponse']:
        """
        Starting time for ramp down period.
        """
        return pulumi.get(self, "ramp_down_start_time")

    @property
    @pulumi.getter(name="rampDownStopHostsWhen")
    def ramp_down_stop_hosts_when(self) -> Optional[str]:
        """
        Specifies when to stop hosts during ramp down period.
        """
        return pulumi.get(self, "ramp_down_stop_hosts_when")

    @property
    @pulumi.getter(name="rampDownWaitTimeMinutes")
    def ramp_down_wait_time_minutes(self) -> Optional[int]:
        """
        Number of minutes to wait to stop hosts during ramp down period.
        """
        return pulumi.get(self, "ramp_down_wait_time_minutes")

    @property
    @pulumi.getter(name="rampUpCapacityThresholdPct")
    def ramp_up_capacity_threshold_pct(self) -> Optional[int]:
        """
        Capacity threshold for ramp up period.
        """
        return pulumi.get(self, "ramp_up_capacity_threshold_pct")

    @property
    @pulumi.getter(name="rampUpLoadBalancingAlgorithm")
    def ramp_up_load_balancing_algorithm(self) -> Optional[str]:
        """
        Load balancing algorithm for ramp up period.
        """
        return pulumi.get(self, "ramp_up_load_balancing_algorithm")

    @property
    @pulumi.getter(name="rampUpMinimumHostsPct")
    def ramp_up_minimum_hosts_pct(self) -> Optional[int]:
        """
        Minimum host percentage for ramp up period.
        """
        return pulumi.get(self, "ramp_up_minimum_hosts_pct")

    @property
    @pulumi.getter(name="rampUpStartTime")
    def ramp_up_start_time(self) -> Optional['outputs.TimeResponse']:
        """
        Starting time for ramp up period.
        """
        return pulumi.get(self, "ramp_up_start_time")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        SystemDataResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            created_by=created_by,
            created_by_type=created_by_type,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            last_modified_by_type=last_modified_by_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             created_by: Optional[str] = None,
             created_by_type: Optional[str] = None,
             last_modified_at: Optional[str] = None,
             last_modified_by: Optional[str] = None,
             last_modified_by_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if created_at is None and 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_type is None and 'createdByType' in kwargs:
            created_by_type = kwargs['createdByType']
        if last_modified_at is None and 'lastModifiedAt' in kwargs:
            last_modified_at = kwargs['lastModifiedAt']
        if last_modified_by is None and 'lastModifiedBy' in kwargs:
            last_modified_by = kwargs['lastModifiedBy']
        if last_modified_by_type is None and 'lastModifiedByType' in kwargs:
            last_modified_by_type = kwargs['lastModifiedByType']

        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_type is not None:
            _setter("created_by_type", created_by_type)
        if last_modified_at is not None:
            _setter("last_modified_at", last_modified_at)
        if last_modified_by is not None:
            _setter("last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            _setter("last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TimeResponse(dict):
    """
    The time for a scaling action to occur.
    """
    def __init__(__self__, *,
                 hour: int,
                 minute: int):
        """
        The time for a scaling action to occur.
        :param int hour: The hour.
        :param int minute: The minute.
        """
        TimeResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hour=hour,
            minute=minute,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hour: Optional[int] = None,
             minute: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if hour is None:
            raise TypeError("Missing 'hour' argument")
        if minute is None:
            raise TypeError("Missing 'minute' argument")

        _setter("hour", hour)
        _setter("minute", minute)

    @property
    @pulumi.getter
    def hour(self) -> int:
        """
        The hour.
        """
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def minute(self) -> int:
        """
        The minute.
        """
        return pulumi.get(self, "minute")


