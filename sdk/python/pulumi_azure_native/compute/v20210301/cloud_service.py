# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CloudServiceArgs', 'CloudService']

@pulumi.input_type
class CloudServiceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input['CloudServicePropertiesArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CloudService resource.
        :param pulumi.Input[str] resource_group_name: Name of the resource group.
        :param pulumi.Input[str] cloud_service_name: Name of the cloud service.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input['CloudServicePropertiesArgs'] properties: Cloud service properties
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        Name of the resource group.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cloud service.
        """
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Resource location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['CloudServicePropertiesArgs']]:
        """
        Cloud service properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['CloudServicePropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class CloudService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['CloudServicePropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Describes the cloud service.

        ## Example Usage
        ### Create New Cloud Service with Multiple Roles

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "contosolb",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "contosofe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [
                        {
                            "name": "ContosoFrontend",
                            "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                                capacity=1,
                                name="Standard_D1_v2",
                                tier="Standard",
                            ),
                        },
                        {
                            "name": "ContosoBackend",
                            "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                                capacity=1,
                                name="Standard_D1_v2",
                                tier="Standard",
                            ),
                        },
                    ],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```
        ### Create New Cloud Service with Single Role

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "myLoadBalancer",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "myfe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [{
                        "name": "ContosoFrontend",
                        "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                            capacity=1,
                            name="Standard_D1_v2",
                            tier="Standard",
                        ),
                    }],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```
        ### Create New Cloud Service with Single Role and Certificate from Key Vault

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "contosolb",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "contosofe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                os_profile={
                    "secrets": [{
                        "sourceVault": azure_native.compute.v20210301.SubResourceArgs(
                            id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
                        ),
                        "vaultCertificates": [azure_native.compute.v20210301.CloudServiceVaultCertificateArgs(
                            certificate_url="https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
                        )],
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [{
                        "name": "ContosoFrontend",
                        "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                            capacity=1,
                            name="Standard_D1_v2",
                            tier="Standard",
                        ),
                    }],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```
        ### Create New Cloud Service with Single Role and RDP Extension

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                extension_profile={
                    "extensions": [{
                        "name": "RDPExtension",
                        "properties": azure_native.compute.v20210301.CloudServiceExtensionPropertiesArgs(
                            auto_upgrade_minor_version=False,
                            protected_settings="<PrivateConfig><Password>{password}</Password></PrivateConfig>",
                            publisher="Microsoft.Windows.Azure.Extensions",
                            settings="<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
                            type="RDP",
                            type_handler_version="1.2.1",
                        ),
                    }],
                },
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "contosolb",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "contosofe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [{
                        "name": "ContosoFrontend",
                        "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                            capacity=1,
                            name="Standard_D1_v2",
                            tier="Standard",
                        ),
                    }],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:compute/v20210301:CloudService {cs-name} /subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name} 
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_service_name: Name of the cloud service.
        :param pulumi.Input[str] location: Resource location.
        :param pulumi.Input[pulumi.InputType['CloudServicePropertiesArgs']] properties: Cloud service properties
        :param pulumi.Input[str] resource_group_name: Name of the resource group.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Describes the cloud service.

        ## Example Usage
        ### Create New Cloud Service with Multiple Roles

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "contosolb",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "contosofe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [
                        {
                            "name": "ContosoFrontend",
                            "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                                capacity=1,
                                name="Standard_D1_v2",
                                tier="Standard",
                            ),
                        },
                        {
                            "name": "ContosoBackend",
                            "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                                capacity=1,
                                name="Standard_D1_v2",
                                tier="Standard",
                            ),
                        },
                    ],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```
        ### Create New Cloud Service with Single Role

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "myLoadBalancer",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "myfe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [{
                        "name": "ContosoFrontend",
                        "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                            capacity=1,
                            name="Standard_D1_v2",
                            tier="Standard",
                        ),
                    }],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```
        ### Create New Cloud Service with Single Role and Certificate from Key Vault

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "contosolb",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "contosofe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                os_profile={
                    "secrets": [{
                        "sourceVault": azure_native.compute.v20210301.SubResourceArgs(
                            id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}",
                        ),
                        "vaultCertificates": [azure_native.compute.v20210301.CloudServiceVaultCertificateArgs(
                            certificate_url="https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}",
                        )],
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [{
                        "name": "ContosoFrontend",
                        "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                            capacity=1,
                            name="Standard_D1_v2",
                            tier="Standard",
                        ),
                    }],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```
        ### Create New Cloud Service with Single Role and RDP Extension

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        cloud_service = azure_native.compute.v20210301.CloudService("cloudService",
            cloud_service_name="{cs-name}",
            location="westus",
            properties=azure_native.compute.v20210301.CloudServicePropertiesResponseArgs(
                configuration="{ServiceConfiguration}",
                extension_profile={
                    "extensions": [{
                        "name": "RDPExtension",
                        "properties": azure_native.compute.v20210301.CloudServiceExtensionPropertiesArgs(
                            auto_upgrade_minor_version=False,
                            protected_settings="<PrivateConfig><Password>{password}</Password></PrivateConfig>",
                            publisher="Microsoft.Windows.Azure.Extensions",
                            settings="<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>",
                            type="RDP",
                            type_handler_version="1.2.1",
                        ),
                    }],
                },
                network_profile={
                    "loadBalancerConfigurations": [{
                        "name": "contosolb",
                        "properties": {
                            "frontendIPConfigurations": [{
                                "name": "contosofe",
                                "properties": {
                                    "publicIPAddress": azure_native.compute.v20210301.SubResourceArgs(
                                        id="/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip",
                                    ),
                                },
                            }],
                        },
                    }],
                },
                package_url="{PackageUrl}",
                role_profile={
                    "roles": [{
                        "name": "ContosoFrontend",
                        "sku": azure_native.compute.v20210301.CloudServiceRoleSkuArgs(
                            capacity=1,
                            name="Standard_D1_v2",
                            tier="Standard",
                        ),
                    }],
                },
                upgrade_mode="Auto",
            ),
            resource_group_name="ConstosoRG")

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:compute/v20210301:CloudService {cs-name} /subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name} 
        ```

        :param str resource_name: The name of the resource.
        :param CloudServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['CloudServicePropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudServiceArgs.__new__(CloudServiceArgs)

            __props__.__dict__["cloud_service_name"] = cloud_service_name
            __props__.__dict__["location"] = location
            __props__.__dict__["properties"] = properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:compute:CloudService"), pulumi.Alias(type_="azure-native:compute/v20201001preview:CloudService"), pulumi.Alias(type_="azure-native:compute/v20220404:CloudService"), pulumi.Alias(type_="azure-native:compute/v20220904:CloudService")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CloudService, __self__).__init__(
            'azure-native:compute/v20210301:CloudService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CloudService':
        """
        Get an existing CloudService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CloudServiceArgs.__new__(CloudServiceArgs)

        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return CloudService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.CloudServicePropertiesResponse']:
        """
        Cloud service properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

