# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'OperationsDefinitionResponseDisplay',
]

@pulumi.output_type
class OperationsDefinitionResponseDisplay(dict):
    """
    Display information of the operation.
    """
    def __init__(__self__, *,
                 description: str,
                 operation: str,
                 provider: str,
                 resource: str):
        """
        Display information of the operation.
        """
        OperationsDefinitionResponseDisplay._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            operation=operation,
            provider=provider,
            resource=resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             operation: Optional[str] = None,
             provider: Optional[str] = None,
             resource: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if operation is None:
            raise TypeError("Missing 'operation' argument")
        if provider is None:
            raise TypeError("Missing 'provider' argument")
        if resource is None:
            raise TypeError("Missing 'resource' argument")

        _setter("description", description)
        _setter("operation", operation)
        _setter("provider", provider)
        _setter("resource", resource)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")


