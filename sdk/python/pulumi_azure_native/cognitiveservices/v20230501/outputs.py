# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AbusePenaltyResponse',
    'AccountPropertiesResponse',
    'ApiPropertiesResponse',
    'CallRateLimitResponse',
    'CommitmentPeriodResponse',
    'CommitmentPlanAssociationResponse',
    'CommitmentPlanPropertiesResponse',
    'CommitmentQuotaResponse',
    'DeploymentModelResponse',
    'DeploymentPropertiesResponse',
    'DeploymentScaleSettingsResponse',
    'EncryptionResponse',
    'IdentityResponse',
    'IpRuleResponse',
    'KeyVaultPropertiesResponse',
    'MultiRegionSettingsResponse',
    'NetworkRuleSetResponse',
    'PrivateEndpointConnectionPropertiesResponse',
    'PrivateEndpointConnectionResponse',
    'PrivateEndpointResponse',
    'PrivateLinkServiceConnectionStateResponse',
    'QuotaLimitResponse',
    'RegionSettingResponse',
    'RequestMatchPatternResponse',
    'SkuCapabilityResponse',
    'SkuChangeInfoResponse',
    'SkuResponse',
    'SystemDataResponse',
    'ThrottlingRuleResponse',
    'UserAssignedIdentityResponse',
    'UserOwnedStorageResponse',
    'VirtualNetworkRuleResponse',
]

@pulumi.output_type
class AbusePenaltyResponse(dict):
    """
    The abuse penalty.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rateLimitPercentage":
            suggest = "rate_limit_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AbusePenaltyResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AbusePenaltyResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AbusePenaltyResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 expiration: Optional[str] = None,
                 rate_limit_percentage: Optional[float] = None):
        """
        The abuse penalty.
        :param str action: The action of AbusePenalty.
        :param str expiration: The datetime of expiration of the AbusePenalty.
        :param float rate_limit_percentage: The percentage of rate limit.
        """
        AbusePenaltyResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            expiration=expiration,
            rate_limit_percentage=rate_limit_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             expiration: Optional[str] = None,
             rate_limit_percentage: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rate_limit_percentage is None and 'rateLimitPercentage' in kwargs:
            rate_limit_percentage = kwargs['rateLimitPercentage']

        if action is not None:
            _setter("action", action)
        if expiration is not None:
            _setter("expiration", expiration)
        if rate_limit_percentage is not None:
            _setter("rate_limit_percentage", rate_limit_percentage)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action of AbusePenalty.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        """
        The datetime of expiration of the AbusePenalty.
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter(name="rateLimitPercentage")
    def rate_limit_percentage(self) -> Optional[float]:
        """
        The percentage of rate limit.
        """
        return pulumi.get(self, "rate_limit_percentage")


@pulumi.output_type
class AccountPropertiesResponse(dict):
    """
    Properties of Cognitive Services account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abusePenalty":
            suggest = "abuse_penalty"
        elif key == "callRateLimit":
            suggest = "call_rate_limit"
        elif key == "commitmentPlanAssociations":
            suggest = "commitment_plan_associations"
        elif key == "dateCreated":
            suggest = "date_created"
        elif key == "deletionDate":
            suggest = "deletion_date"
        elif key == "internalId":
            suggest = "internal_id"
        elif key == "isMigrated":
            suggest = "is_migrated"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "quotaLimit":
            suggest = "quota_limit"
        elif key == "scheduledPurgeDate":
            suggest = "scheduled_purge_date"
        elif key == "skuChangeInfo":
            suggest = "sku_change_info"
        elif key == "allowedFqdnList":
            suggest = "allowed_fqdn_list"
        elif key == "apiProperties":
            suggest = "api_properties"
        elif key == "customSubDomainName":
            suggest = "custom_sub_domain_name"
        elif key == "disableLocalAuth":
            suggest = "disable_local_auth"
        elif key == "dynamicThrottlingEnabled":
            suggest = "dynamic_throttling_enabled"
        elif key == "migrationToken":
            suggest = "migration_token"
        elif key == "networkAcls":
            suggest = "network_acls"
        elif key == "publicNetworkAccess":
            suggest = "public_network_access"
        elif key == "restrictOutboundNetworkAccess":
            suggest = "restrict_outbound_network_access"
        elif key == "userOwnedStorage":
            suggest = "user_owned_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abuse_penalty: 'outputs.AbusePenaltyResponse',
                 call_rate_limit: 'outputs.CallRateLimitResponse',
                 capabilities: Sequence['outputs.SkuCapabilityResponse'],
                 commitment_plan_associations: Sequence['outputs.CommitmentPlanAssociationResponse'],
                 date_created: str,
                 deletion_date: str,
                 endpoint: str,
                 endpoints: Mapping[str, str],
                 internal_id: str,
                 is_migrated: bool,
                 private_endpoint_connections: Sequence['outputs.PrivateEndpointConnectionResponse'],
                 provisioning_state: str,
                 quota_limit: 'outputs.QuotaLimitResponse',
                 scheduled_purge_date: str,
                 sku_change_info: 'outputs.SkuChangeInfoResponse',
                 allowed_fqdn_list: Optional[Sequence[str]] = None,
                 api_properties: Optional['outputs.ApiPropertiesResponse'] = None,
                 custom_sub_domain_name: Optional[str] = None,
                 disable_local_auth: Optional[bool] = None,
                 dynamic_throttling_enabled: Optional[bool] = None,
                 encryption: Optional['outputs.EncryptionResponse'] = None,
                 locations: Optional['outputs.MultiRegionSettingsResponse'] = None,
                 migration_token: Optional[str] = None,
                 network_acls: Optional['outputs.NetworkRuleSetResponse'] = None,
                 public_network_access: Optional[str] = None,
                 restrict_outbound_network_access: Optional[bool] = None,
                 user_owned_storage: Optional[Sequence['outputs.UserOwnedStorageResponse']] = None):
        """
        Properties of Cognitive Services account.
        :param 'AbusePenaltyResponse' abuse_penalty: The abuse penalty.
        :param 'CallRateLimitResponse' call_rate_limit: The call rate limit Cognitive Services account.
        :param Sequence['SkuCapabilityResponse'] capabilities: Gets the capabilities of the cognitive services account. Each item indicates the capability of a specific feature. The values are read-only and for reference only.
        :param Sequence['CommitmentPlanAssociationResponse'] commitment_plan_associations: The commitment plan associations of Cognitive Services account.
        :param str date_created: Gets the date of cognitive services account creation.
        :param str deletion_date: The deletion date, only available for deleted account.
        :param str endpoint: Endpoint of the created account.
        :param str internal_id: The internal identifier (deprecated, do not use this property).
        :param bool is_migrated: If the resource is migrated from an existing key.
        :param Sequence['PrivateEndpointConnectionResponse'] private_endpoint_connections: The private endpoint connection associated with the Cognitive Services account.
        :param str provisioning_state: Gets the status of the cognitive services account at the time the operation was called.
        :param str scheduled_purge_date: The scheduled purge date, only available for deleted account.
        :param 'SkuChangeInfoResponse' sku_change_info: Sku change info of account.
        :param 'ApiPropertiesResponse' api_properties: The api properties for special APIs.
        :param str custom_sub_domain_name: Optional subdomain name used for token-based authentication.
        :param bool dynamic_throttling_enabled: The flag to enable dynamic throttling.
        :param 'EncryptionResponse' encryption: The encryption properties for this resource.
        :param 'MultiRegionSettingsResponse' locations: The multiregion settings of Cognitive Services account.
        :param str migration_token: Resource migration token.
        :param 'NetworkRuleSetResponse' network_acls: A collection of rules governing the accessibility from specific network locations.
        :param str public_network_access: Whether or not public endpoint access is allowed for this account.
        :param Sequence['UserOwnedStorageResponse'] user_owned_storage: The storage accounts for this resource.
        """
        AccountPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abuse_penalty=abuse_penalty,
            call_rate_limit=call_rate_limit,
            capabilities=capabilities,
            commitment_plan_associations=commitment_plan_associations,
            date_created=date_created,
            deletion_date=deletion_date,
            endpoint=endpoint,
            endpoints=endpoints,
            internal_id=internal_id,
            is_migrated=is_migrated,
            private_endpoint_connections=private_endpoint_connections,
            provisioning_state=provisioning_state,
            quota_limit=quota_limit,
            scheduled_purge_date=scheduled_purge_date,
            sku_change_info=sku_change_info,
            allowed_fqdn_list=allowed_fqdn_list,
            api_properties=api_properties,
            custom_sub_domain_name=custom_sub_domain_name,
            disable_local_auth=disable_local_auth,
            dynamic_throttling_enabled=dynamic_throttling_enabled,
            encryption=encryption,
            locations=locations,
            migration_token=migration_token,
            network_acls=network_acls,
            public_network_access=public_network_access,
            restrict_outbound_network_access=restrict_outbound_network_access,
            user_owned_storage=user_owned_storage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abuse_penalty: Optional['outputs.AbusePenaltyResponse'] = None,
             call_rate_limit: Optional['outputs.CallRateLimitResponse'] = None,
             capabilities: Optional[Sequence['outputs.SkuCapabilityResponse']] = None,
             commitment_plan_associations: Optional[Sequence['outputs.CommitmentPlanAssociationResponse']] = None,
             date_created: Optional[str] = None,
             deletion_date: Optional[str] = None,
             endpoint: Optional[str] = None,
             endpoints: Optional[Mapping[str, str]] = None,
             internal_id: Optional[str] = None,
             is_migrated: Optional[bool] = None,
             private_endpoint_connections: Optional[Sequence['outputs.PrivateEndpointConnectionResponse']] = None,
             provisioning_state: Optional[str] = None,
             quota_limit: Optional['outputs.QuotaLimitResponse'] = None,
             scheduled_purge_date: Optional[str] = None,
             sku_change_info: Optional['outputs.SkuChangeInfoResponse'] = None,
             allowed_fqdn_list: Optional[Sequence[str]] = None,
             api_properties: Optional['outputs.ApiPropertiesResponse'] = None,
             custom_sub_domain_name: Optional[str] = None,
             disable_local_auth: Optional[bool] = None,
             dynamic_throttling_enabled: Optional[bool] = None,
             encryption: Optional['outputs.EncryptionResponse'] = None,
             locations: Optional['outputs.MultiRegionSettingsResponse'] = None,
             migration_token: Optional[str] = None,
             network_acls: Optional['outputs.NetworkRuleSetResponse'] = None,
             public_network_access: Optional[str] = None,
             restrict_outbound_network_access: Optional[bool] = None,
             user_owned_storage: Optional[Sequence['outputs.UserOwnedStorageResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if abuse_penalty is None and 'abusePenalty' in kwargs:
            abuse_penalty = kwargs['abusePenalty']
        if abuse_penalty is None:
            raise TypeError("Missing 'abuse_penalty' argument")
        if call_rate_limit is None and 'callRateLimit' in kwargs:
            call_rate_limit = kwargs['callRateLimit']
        if call_rate_limit is None:
            raise TypeError("Missing 'call_rate_limit' argument")
        if capabilities is None:
            raise TypeError("Missing 'capabilities' argument")
        if commitment_plan_associations is None and 'commitmentPlanAssociations' in kwargs:
            commitment_plan_associations = kwargs['commitmentPlanAssociations']
        if commitment_plan_associations is None:
            raise TypeError("Missing 'commitment_plan_associations' argument")
        if date_created is None and 'dateCreated' in kwargs:
            date_created = kwargs['dateCreated']
        if date_created is None:
            raise TypeError("Missing 'date_created' argument")
        if deletion_date is None and 'deletionDate' in kwargs:
            deletion_date = kwargs['deletionDate']
        if deletion_date is None:
            raise TypeError("Missing 'deletion_date' argument")
        if endpoint is None:
            raise TypeError("Missing 'endpoint' argument")
        if endpoints is None:
            raise TypeError("Missing 'endpoints' argument")
        if internal_id is None and 'internalId' in kwargs:
            internal_id = kwargs['internalId']
        if internal_id is None:
            raise TypeError("Missing 'internal_id' argument")
        if is_migrated is None and 'isMigrated' in kwargs:
            is_migrated = kwargs['isMigrated']
        if is_migrated is None:
            raise TypeError("Missing 'is_migrated' argument")
        if private_endpoint_connections is None and 'privateEndpointConnections' in kwargs:
            private_endpoint_connections = kwargs['privateEndpointConnections']
        if private_endpoint_connections is None:
            raise TypeError("Missing 'private_endpoint_connections' argument")
        if provisioning_state is None and 'provisioningState' in kwargs:
            provisioning_state = kwargs['provisioningState']
        if provisioning_state is None:
            raise TypeError("Missing 'provisioning_state' argument")
        if quota_limit is None and 'quotaLimit' in kwargs:
            quota_limit = kwargs['quotaLimit']
        if quota_limit is None:
            raise TypeError("Missing 'quota_limit' argument")
        if scheduled_purge_date is None and 'scheduledPurgeDate' in kwargs:
            scheduled_purge_date = kwargs['scheduledPurgeDate']
        if scheduled_purge_date is None:
            raise TypeError("Missing 'scheduled_purge_date' argument")
        if sku_change_info is None and 'skuChangeInfo' in kwargs:
            sku_change_info = kwargs['skuChangeInfo']
        if sku_change_info is None:
            raise TypeError("Missing 'sku_change_info' argument")
        if allowed_fqdn_list is None and 'allowedFqdnList' in kwargs:
            allowed_fqdn_list = kwargs['allowedFqdnList']
        if api_properties is None and 'apiProperties' in kwargs:
            api_properties = kwargs['apiProperties']
        if custom_sub_domain_name is None and 'customSubDomainName' in kwargs:
            custom_sub_domain_name = kwargs['customSubDomainName']
        if disable_local_auth is None and 'disableLocalAuth' in kwargs:
            disable_local_auth = kwargs['disableLocalAuth']
        if dynamic_throttling_enabled is None and 'dynamicThrottlingEnabled' in kwargs:
            dynamic_throttling_enabled = kwargs['dynamicThrottlingEnabled']
        if migration_token is None and 'migrationToken' in kwargs:
            migration_token = kwargs['migrationToken']
        if network_acls is None and 'networkAcls' in kwargs:
            network_acls = kwargs['networkAcls']
        if public_network_access is None and 'publicNetworkAccess' in kwargs:
            public_network_access = kwargs['publicNetworkAccess']
        if restrict_outbound_network_access is None and 'restrictOutboundNetworkAccess' in kwargs:
            restrict_outbound_network_access = kwargs['restrictOutboundNetworkAccess']
        if user_owned_storage is None and 'userOwnedStorage' in kwargs:
            user_owned_storage = kwargs['userOwnedStorage']

        _setter("abuse_penalty", abuse_penalty)
        _setter("call_rate_limit", call_rate_limit)
        _setter("capabilities", capabilities)
        _setter("commitment_plan_associations", commitment_plan_associations)
        _setter("date_created", date_created)
        _setter("deletion_date", deletion_date)
        _setter("endpoint", endpoint)
        _setter("endpoints", endpoints)
        _setter("internal_id", internal_id)
        _setter("is_migrated", is_migrated)
        _setter("private_endpoint_connections", private_endpoint_connections)
        _setter("provisioning_state", provisioning_state)
        _setter("quota_limit", quota_limit)
        _setter("scheduled_purge_date", scheduled_purge_date)
        _setter("sku_change_info", sku_change_info)
        if allowed_fqdn_list is not None:
            _setter("allowed_fqdn_list", allowed_fqdn_list)
        if api_properties is not None:
            _setter("api_properties", api_properties)
        if custom_sub_domain_name is not None:
            _setter("custom_sub_domain_name", custom_sub_domain_name)
        if disable_local_auth is not None:
            _setter("disable_local_auth", disable_local_auth)
        if dynamic_throttling_enabled is not None:
            _setter("dynamic_throttling_enabled", dynamic_throttling_enabled)
        if encryption is not None:
            _setter("encryption", encryption)
        if locations is not None:
            _setter("locations", locations)
        if migration_token is not None:
            _setter("migration_token", migration_token)
        if network_acls is not None:
            _setter("network_acls", network_acls)
        if public_network_access is not None:
            _setter("public_network_access", public_network_access)
        if restrict_outbound_network_access is not None:
            _setter("restrict_outbound_network_access", restrict_outbound_network_access)
        if user_owned_storage is not None:
            _setter("user_owned_storage", user_owned_storage)

    @property
    @pulumi.getter(name="abusePenalty")
    def abuse_penalty(self) -> 'outputs.AbusePenaltyResponse':
        """
        The abuse penalty.
        """
        return pulumi.get(self, "abuse_penalty")

    @property
    @pulumi.getter(name="callRateLimit")
    def call_rate_limit(self) -> 'outputs.CallRateLimitResponse':
        """
        The call rate limit Cognitive Services account.
        """
        return pulumi.get(self, "call_rate_limit")

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence['outputs.SkuCapabilityResponse']:
        """
        Gets the capabilities of the cognitive services account. Each item indicates the capability of a specific feature. The values are read-only and for reference only.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="commitmentPlanAssociations")
    def commitment_plan_associations(self) -> Sequence['outputs.CommitmentPlanAssociationResponse']:
        """
        The commitment plan associations of Cognitive Services account.
        """
        return pulumi.get(self, "commitment_plan_associations")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        Gets the date of cognitive services account creation.
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter(name="deletionDate")
    def deletion_date(self) -> str:
        """
        The deletion date, only available for deleted account.
        """
        return pulumi.get(self, "deletion_date")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        Endpoint of the created account.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def endpoints(self) -> Mapping[str, str]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> str:
        """
        The internal identifier (deprecated, do not use this property).
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="isMigrated")
    def is_migrated(self) -> bool:
        """
        If the resource is migrated from an existing key.
        """
        return pulumi.get(self, "is_migrated")

    @property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.PrivateEndpointConnectionResponse']:
        """
        The private endpoint connection associated with the Cognitive Services account.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets the status of the cognitive services account at the time the operation was called.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="quotaLimit")
    def quota_limit(self) -> 'outputs.QuotaLimitResponse':
        return pulumi.get(self, "quota_limit")

    @property
    @pulumi.getter(name="scheduledPurgeDate")
    def scheduled_purge_date(self) -> str:
        """
        The scheduled purge date, only available for deleted account.
        """
        return pulumi.get(self, "scheduled_purge_date")

    @property
    @pulumi.getter(name="skuChangeInfo")
    def sku_change_info(self) -> 'outputs.SkuChangeInfoResponse':
        """
        Sku change info of account.
        """
        return pulumi.get(self, "sku_change_info")

    @property
    @pulumi.getter(name="allowedFqdnList")
    def allowed_fqdn_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_fqdn_list")

    @property
    @pulumi.getter(name="apiProperties")
    def api_properties(self) -> Optional['outputs.ApiPropertiesResponse']:
        """
        The api properties for special APIs.
        """
        return pulumi.get(self, "api_properties")

    @property
    @pulumi.getter(name="customSubDomainName")
    def custom_sub_domain_name(self) -> Optional[str]:
        """
        Optional subdomain name used for token-based authentication.
        """
        return pulumi.get(self, "custom_sub_domain_name")

    @property
    @pulumi.getter(name="disableLocalAuth")
    def disable_local_auth(self) -> Optional[bool]:
        return pulumi.get(self, "disable_local_auth")

    @property
    @pulumi.getter(name="dynamicThrottlingEnabled")
    def dynamic_throttling_enabled(self) -> Optional[bool]:
        """
        The flag to enable dynamic throttling.
        """
        return pulumi.get(self, "dynamic_throttling_enabled")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.EncryptionResponse']:
        """
        The encryption properties for this resource.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def locations(self) -> Optional['outputs.MultiRegionSettingsResponse']:
        """
        The multiregion settings of Cognitive Services account.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="migrationToken")
    def migration_token(self) -> Optional[str]:
        """
        Resource migration token.
        """
        return pulumi.get(self, "migration_token")

    @property
    @pulumi.getter(name="networkAcls")
    def network_acls(self) -> Optional['outputs.NetworkRuleSetResponse']:
        """
        A collection of rules governing the accessibility from specific network locations.
        """
        return pulumi.get(self, "network_acls")

    @property
    @pulumi.getter(name="publicNetworkAccess")
    def public_network_access(self) -> Optional[str]:
        """
        Whether or not public endpoint access is allowed for this account.
        """
        return pulumi.get(self, "public_network_access")

    @property
    @pulumi.getter(name="restrictOutboundNetworkAccess")
    def restrict_outbound_network_access(self) -> Optional[bool]:
        return pulumi.get(self, "restrict_outbound_network_access")

    @property
    @pulumi.getter(name="userOwnedStorage")
    def user_owned_storage(self) -> Optional[Sequence['outputs.UserOwnedStorageResponse']]:
        """
        The storage accounts for this resource.
        """
        return pulumi.get(self, "user_owned_storage")


@pulumi.output_type
class ApiPropertiesResponse(dict):
    """
    The api properties for special APIs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadClientId":
            suggest = "aad_client_id"
        elif key == "aadTenantId":
            suggest = "aad_tenant_id"
        elif key == "eventHubConnectionString":
            suggest = "event_hub_connection_string"
        elif key == "qnaAzureSearchEndpointId":
            suggest = "qna_azure_search_endpoint_id"
        elif key == "qnaAzureSearchEndpointKey":
            suggest = "qna_azure_search_endpoint_key"
        elif key == "qnaRuntimeEndpoint":
            suggest = "qna_runtime_endpoint"
        elif key == "statisticsEnabled":
            suggest = "statistics_enabled"
        elif key == "storageAccountConnectionString":
            suggest = "storage_account_connection_string"
        elif key == "superUser":
            suggest = "super_user"
        elif key == "websiteName":
            suggest = "website_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aad_client_id: Optional[str] = None,
                 aad_tenant_id: Optional[str] = None,
                 event_hub_connection_string: Optional[str] = None,
                 qna_azure_search_endpoint_id: Optional[str] = None,
                 qna_azure_search_endpoint_key: Optional[str] = None,
                 qna_runtime_endpoint: Optional[str] = None,
                 statistics_enabled: Optional[bool] = None,
                 storage_account_connection_string: Optional[str] = None,
                 super_user: Optional[str] = None,
                 website_name: Optional[str] = None):
        """
        The api properties for special APIs.
        :param str aad_client_id: (Metrics Advisor Only) The Azure AD Client Id (Application Id).
        :param str aad_tenant_id: (Metrics Advisor Only) The Azure AD Tenant Id.
        :param str event_hub_connection_string: (Personalization Only) The flag to enable statistics of Bing Search.
        :param str qna_azure_search_endpoint_id: (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
        :param str qna_azure_search_endpoint_key: (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
        :param str qna_runtime_endpoint: (QnAMaker Only) The runtime endpoint of QnAMaker.
        :param bool statistics_enabled: (Bing Search Only) The flag to enable statistics of Bing Search.
        :param str storage_account_connection_string: (Personalization Only) The storage account connection string.
        :param str super_user: (Metrics Advisor Only) The super user of Metrics Advisor.
        :param str website_name: (Metrics Advisor Only) The website name of Metrics Advisor.
        """
        ApiPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aad_client_id=aad_client_id,
            aad_tenant_id=aad_tenant_id,
            event_hub_connection_string=event_hub_connection_string,
            qna_azure_search_endpoint_id=qna_azure_search_endpoint_id,
            qna_azure_search_endpoint_key=qna_azure_search_endpoint_key,
            qna_runtime_endpoint=qna_runtime_endpoint,
            statistics_enabled=statistics_enabled,
            storage_account_connection_string=storage_account_connection_string,
            super_user=super_user,
            website_name=website_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aad_client_id: Optional[str] = None,
             aad_tenant_id: Optional[str] = None,
             event_hub_connection_string: Optional[str] = None,
             qna_azure_search_endpoint_id: Optional[str] = None,
             qna_azure_search_endpoint_key: Optional[str] = None,
             qna_runtime_endpoint: Optional[str] = None,
             statistics_enabled: Optional[bool] = None,
             storage_account_connection_string: Optional[str] = None,
             super_user: Optional[str] = None,
             website_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aad_client_id is None and 'aadClientId' in kwargs:
            aad_client_id = kwargs['aadClientId']
        if aad_tenant_id is None and 'aadTenantId' in kwargs:
            aad_tenant_id = kwargs['aadTenantId']
        if event_hub_connection_string is None and 'eventHubConnectionString' in kwargs:
            event_hub_connection_string = kwargs['eventHubConnectionString']
        if qna_azure_search_endpoint_id is None and 'qnaAzureSearchEndpointId' in kwargs:
            qna_azure_search_endpoint_id = kwargs['qnaAzureSearchEndpointId']
        if qna_azure_search_endpoint_key is None and 'qnaAzureSearchEndpointKey' in kwargs:
            qna_azure_search_endpoint_key = kwargs['qnaAzureSearchEndpointKey']
        if qna_runtime_endpoint is None and 'qnaRuntimeEndpoint' in kwargs:
            qna_runtime_endpoint = kwargs['qnaRuntimeEndpoint']
        if statistics_enabled is None and 'statisticsEnabled' in kwargs:
            statistics_enabled = kwargs['statisticsEnabled']
        if storage_account_connection_string is None and 'storageAccountConnectionString' in kwargs:
            storage_account_connection_string = kwargs['storageAccountConnectionString']
        if super_user is None and 'superUser' in kwargs:
            super_user = kwargs['superUser']
        if website_name is None and 'websiteName' in kwargs:
            website_name = kwargs['websiteName']

        if aad_client_id is not None:
            _setter("aad_client_id", aad_client_id)
        if aad_tenant_id is not None:
            _setter("aad_tenant_id", aad_tenant_id)
        if event_hub_connection_string is not None:
            _setter("event_hub_connection_string", event_hub_connection_string)
        if qna_azure_search_endpoint_id is not None:
            _setter("qna_azure_search_endpoint_id", qna_azure_search_endpoint_id)
        if qna_azure_search_endpoint_key is not None:
            _setter("qna_azure_search_endpoint_key", qna_azure_search_endpoint_key)
        if qna_runtime_endpoint is not None:
            _setter("qna_runtime_endpoint", qna_runtime_endpoint)
        if statistics_enabled is not None:
            _setter("statistics_enabled", statistics_enabled)
        if storage_account_connection_string is not None:
            _setter("storage_account_connection_string", storage_account_connection_string)
        if super_user is not None:
            _setter("super_user", super_user)
        if website_name is not None:
            _setter("website_name", website_name)

    @property
    @pulumi.getter(name="aadClientId")
    def aad_client_id(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The Azure AD Client Id (Application Id).
        """
        return pulumi.get(self, "aad_client_id")

    @property
    @pulumi.getter(name="aadTenantId")
    def aad_tenant_id(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The Azure AD Tenant Id.
        """
        return pulumi.get(self, "aad_tenant_id")

    @property
    @pulumi.getter(name="eventHubConnectionString")
    def event_hub_connection_string(self) -> Optional[str]:
        """
        (Personalization Only) The flag to enable statistics of Bing Search.
        """
        return pulumi.get(self, "event_hub_connection_string")

    @property
    @pulumi.getter(name="qnaAzureSearchEndpointId")
    def qna_azure_search_endpoint_id(self) -> Optional[str]:
        """
        (QnAMaker Only) The Azure Search endpoint id of QnAMaker.
        """
        return pulumi.get(self, "qna_azure_search_endpoint_id")

    @property
    @pulumi.getter(name="qnaAzureSearchEndpointKey")
    def qna_azure_search_endpoint_key(self) -> Optional[str]:
        """
        (QnAMaker Only) The Azure Search endpoint key of QnAMaker.
        """
        return pulumi.get(self, "qna_azure_search_endpoint_key")

    @property
    @pulumi.getter(name="qnaRuntimeEndpoint")
    def qna_runtime_endpoint(self) -> Optional[str]:
        """
        (QnAMaker Only) The runtime endpoint of QnAMaker.
        """
        return pulumi.get(self, "qna_runtime_endpoint")

    @property
    @pulumi.getter(name="statisticsEnabled")
    def statistics_enabled(self) -> Optional[bool]:
        """
        (Bing Search Only) The flag to enable statistics of Bing Search.
        """
        return pulumi.get(self, "statistics_enabled")

    @property
    @pulumi.getter(name="storageAccountConnectionString")
    def storage_account_connection_string(self) -> Optional[str]:
        """
        (Personalization Only) The storage account connection string.
        """
        return pulumi.get(self, "storage_account_connection_string")

    @property
    @pulumi.getter(name="superUser")
    def super_user(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The super user of Metrics Advisor.
        """
        return pulumi.get(self, "super_user")

    @property
    @pulumi.getter(name="websiteName")
    def website_name(self) -> Optional[str]:
        """
        (Metrics Advisor Only) The website name of Metrics Advisor.
        """
        return pulumi.get(self, "website_name")


@pulumi.output_type
class CallRateLimitResponse(dict):
    """
    The call rate limit Cognitive Services account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewalPeriod":
            suggest = "renewal_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CallRateLimitResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CallRateLimitResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CallRateLimitResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[float] = None,
                 renewal_period: Optional[float] = None,
                 rules: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None):
        """
        The call rate limit Cognitive Services account.
        :param float count: The count value of Call Rate Limit.
        :param float renewal_period: The renewal period in seconds of Call Rate Limit.
        """
        CallRateLimitResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            renewal_period=renewal_period,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[float] = None,
             renewal_period: Optional[float] = None,
             rules: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if renewal_period is None and 'renewalPeriod' in kwargs:
            renewal_period = kwargs['renewalPeriod']

        if count is not None:
            _setter("count", count)
        if renewal_period is not None:
            _setter("renewal_period", renewal_period)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        """
        The count value of Call Rate Limit.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> Optional[float]:
        """
        The renewal period in seconds of Call Rate Limit.
        """
        return pulumi.get(self, "renewal_period")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.ThrottlingRuleResponse']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class CommitmentPeriodResponse(dict):
    """
    Cognitive Services account commitment period.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentPeriodResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentPeriodResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentPeriodResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_date: str,
                 quota: 'outputs.CommitmentQuotaResponse',
                 start_date: str,
                 count: Optional[int] = None,
                 tier: Optional[str] = None):
        """
        Cognitive Services account commitment period.
        :param str end_date: Commitment period end date.
        :param 'CommitmentQuotaResponse' quota: Cognitive Services account commitment quota.
        :param str start_date: Commitment period start date.
        :param int count: Commitment period commitment count.
        :param str tier: Commitment period commitment tier.
        """
        CommitmentPeriodResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_date=end_date,
            quota=quota,
            start_date=start_date,
            count=count,
            tier=tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_date: Optional[str] = None,
             quota: Optional['outputs.CommitmentQuotaResponse'] = None,
             start_date: Optional[str] = None,
             count: Optional[int] = None,
             tier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if end_date is None and 'endDate' in kwargs:
            end_date = kwargs['endDate']
        if end_date is None:
            raise TypeError("Missing 'end_date' argument")
        if quota is None:
            raise TypeError("Missing 'quota' argument")
        if start_date is None and 'startDate' in kwargs:
            start_date = kwargs['startDate']
        if start_date is None:
            raise TypeError("Missing 'start_date' argument")

        _setter("end_date", end_date)
        _setter("quota", quota)
        _setter("start_date", start_date)
        if count is not None:
            _setter("count", count)
        if tier is not None:
            _setter("tier", tier)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        """
        Commitment period end date.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def quota(self) -> 'outputs.CommitmentQuotaResponse':
        """
        Cognitive Services account commitment quota.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        """
        Commitment period start date.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Commitment period commitment count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        Commitment period commitment tier.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class CommitmentPlanAssociationResponse(dict):
    """
    The commitment plan association.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitmentPlanId":
            suggest = "commitment_plan_id"
        elif key == "commitmentPlanLocation":
            suggest = "commitment_plan_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentPlanAssociationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentPlanAssociationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentPlanAssociationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commitment_plan_id: Optional[str] = None,
                 commitment_plan_location: Optional[str] = None):
        """
        The commitment plan association.
        :param str commitment_plan_id: The Azure resource id of the commitment plan.
        :param str commitment_plan_location: The location of of the commitment plan.
        """
        CommitmentPlanAssociationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commitment_plan_id=commitment_plan_id,
            commitment_plan_location=commitment_plan_location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commitment_plan_id: Optional[str] = None,
             commitment_plan_location: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if commitment_plan_id is None and 'commitmentPlanId' in kwargs:
            commitment_plan_id = kwargs['commitmentPlanId']
        if commitment_plan_location is None and 'commitmentPlanLocation' in kwargs:
            commitment_plan_location = kwargs['commitmentPlanLocation']

        if commitment_plan_id is not None:
            _setter("commitment_plan_id", commitment_plan_id)
        if commitment_plan_location is not None:
            _setter("commitment_plan_location", commitment_plan_location)

    @property
    @pulumi.getter(name="commitmentPlanId")
    def commitment_plan_id(self) -> Optional[str]:
        """
        The Azure resource id of the commitment plan.
        """
        return pulumi.get(self, "commitment_plan_id")

    @property
    @pulumi.getter(name="commitmentPlanLocation")
    def commitment_plan_location(self) -> Optional[str]:
        """
        The location of of the commitment plan.
        """
        return pulumi.get(self, "commitment_plan_location")


@pulumi.output_type
class CommitmentPlanPropertiesResponse(dict):
    """
    Properties of Cognitive Services account commitment plan.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningIssues":
            suggest = "provisioning_issues"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "autoRenew":
            suggest = "auto_renew"
        elif key == "commitmentPlanGuid":
            suggest = "commitment_plan_guid"
        elif key == "hostingModel":
            suggest = "hosting_model"
        elif key == "planType":
            suggest = "plan_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentPlanPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentPlanPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentPlanPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last: 'outputs.CommitmentPeriodResponse',
                 provisioning_issues: Sequence[str],
                 provisioning_state: str,
                 auto_renew: Optional[bool] = None,
                 commitment_plan_guid: Optional[str] = None,
                 current: Optional['outputs.CommitmentPeriodResponse'] = None,
                 hosting_model: Optional[str] = None,
                 next: Optional['outputs.CommitmentPeriodResponse'] = None,
                 plan_type: Optional[str] = None):
        """
        Properties of Cognitive Services account commitment plan.
        :param 'CommitmentPeriodResponse' last: Cognitive Services account commitment period.
        :param Sequence[str] provisioning_issues: The list of ProvisioningIssue.
        :param str provisioning_state: Gets the status of the resource at the time the operation was called.
        :param bool auto_renew: AutoRenew commitment plan.
        :param str commitment_plan_guid: Commitment plan guid.
        :param 'CommitmentPeriodResponse' current: Cognitive Services account commitment period.
        :param str hosting_model: Account hosting model.
        :param 'CommitmentPeriodResponse' next: Cognitive Services account commitment period.
        :param str plan_type: Commitment plan type.
        """
        CommitmentPlanPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            last=last,
            provisioning_issues=provisioning_issues,
            provisioning_state=provisioning_state,
            auto_renew=auto_renew,
            commitment_plan_guid=commitment_plan_guid,
            current=current,
            hosting_model=hosting_model,
            next=next,
            plan_type=plan_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             last: Optional['outputs.CommitmentPeriodResponse'] = None,
             provisioning_issues: Optional[Sequence[str]] = None,
             provisioning_state: Optional[str] = None,
             auto_renew: Optional[bool] = None,
             commitment_plan_guid: Optional[str] = None,
             current: Optional['outputs.CommitmentPeriodResponse'] = None,
             hosting_model: Optional[str] = None,
             next: Optional['outputs.CommitmentPeriodResponse'] = None,
             plan_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if last is None:
            raise TypeError("Missing 'last' argument")
        if provisioning_issues is None and 'provisioningIssues' in kwargs:
            provisioning_issues = kwargs['provisioningIssues']
        if provisioning_issues is None:
            raise TypeError("Missing 'provisioning_issues' argument")
        if provisioning_state is None and 'provisioningState' in kwargs:
            provisioning_state = kwargs['provisioningState']
        if provisioning_state is None:
            raise TypeError("Missing 'provisioning_state' argument")
        if auto_renew is None and 'autoRenew' in kwargs:
            auto_renew = kwargs['autoRenew']
        if commitment_plan_guid is None and 'commitmentPlanGuid' in kwargs:
            commitment_plan_guid = kwargs['commitmentPlanGuid']
        if hosting_model is None and 'hostingModel' in kwargs:
            hosting_model = kwargs['hostingModel']
        if plan_type is None and 'planType' in kwargs:
            plan_type = kwargs['planType']

        _setter("last", last)
        _setter("provisioning_issues", provisioning_issues)
        _setter("provisioning_state", provisioning_state)
        if auto_renew is not None:
            _setter("auto_renew", auto_renew)
        if commitment_plan_guid is not None:
            _setter("commitment_plan_guid", commitment_plan_guid)
        if current is not None:
            _setter("current", current)
        if hosting_model is not None:
            _setter("hosting_model", hosting_model)
        if next is not None:
            _setter("next", next)
        if plan_type is not None:
            _setter("plan_type", plan_type)

    @property
    @pulumi.getter
    def last(self) -> 'outputs.CommitmentPeriodResponse':
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "last")

    @property
    @pulumi.getter(name="provisioningIssues")
    def provisioning_issues(self) -> Sequence[str]:
        """
        The list of ProvisioningIssue.
        """
        return pulumi.get(self, "provisioning_issues")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets the status of the resource at the time the operation was called.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[bool]:
        """
        AutoRenew commitment plan.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="commitmentPlanGuid")
    def commitment_plan_guid(self) -> Optional[str]:
        """
        Commitment plan guid.
        """
        return pulumi.get(self, "commitment_plan_guid")

    @property
    @pulumi.getter
    def current(self) -> Optional['outputs.CommitmentPeriodResponse']:
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "current")

    @property
    @pulumi.getter(name="hostingModel")
    def hosting_model(self) -> Optional[str]:
        """
        Account hosting model.
        """
        return pulumi.get(self, "hosting_model")

    @property
    @pulumi.getter
    def next(self) -> Optional['outputs.CommitmentPeriodResponse']:
        """
        Cognitive Services account commitment period.
        """
        return pulumi.get(self, "next")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        """
        Commitment plan type.
        """
        return pulumi.get(self, "plan_type")


@pulumi.output_type
class CommitmentQuotaResponse(dict):
    """
    Cognitive Services account commitment quota.
    """
    def __init__(__self__, *,
                 quantity: Optional[float] = None,
                 unit: Optional[str] = None):
        """
        Cognitive Services account commitment quota.
        :param float quantity: Commitment quota quantity.
        :param str unit: Commitment quota unit.
        """
        CommitmentQuotaResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            quantity=quantity,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             quantity: Optional[float] = None,
             unit: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if quantity is not None:
            _setter("quantity", quantity)
        if unit is not None:
            _setter("unit", unit)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[float]:
        """
        Commitment quota quantity.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Commitment quota unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class DeploymentModelResponse(dict):
    """
    Properties of Cognitive Services account deployment model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callRateLimit":
            suggest = "call_rate_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentModelResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentModelResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentModelResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call_rate_limit: 'outputs.CallRateLimitResponse',
                 format: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param 'CallRateLimitResponse' call_rate_limit: The call rate limit Cognitive Services account.
        :param str format: Deployment model format.
        :param str name: Deployment model name.
        :param str source: Optional. Deployment model source ARM resource ID.
        :param str version: Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
        """
        DeploymentModelResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            call_rate_limit=call_rate_limit,
            format=format,
            name=name,
            source=source,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             call_rate_limit: Optional['outputs.CallRateLimitResponse'] = None,
             format: Optional[str] = None,
             name: Optional[str] = None,
             source: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if call_rate_limit is None and 'callRateLimit' in kwargs:
            call_rate_limit = kwargs['callRateLimit']
        if call_rate_limit is None:
            raise TypeError("Missing 'call_rate_limit' argument")

        _setter("call_rate_limit", call_rate_limit)
        if format is not None:
            _setter("format", format)
        if name is not None:
            _setter("name", name)
        if source is not None:
            _setter("source", source)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="callRateLimit")
    def call_rate_limit(self) -> 'outputs.CallRateLimitResponse':
        """
        The call rate limit Cognitive Services account.
        """
        return pulumi.get(self, "call_rate_limit")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Deployment model format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Deployment model name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Optional. Deployment model source ARM resource ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentPropertiesResponse(dict):
    """
    Properties of Cognitive Services account deployment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callRateLimit":
            suggest = "call_rate_limit"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "rateLimits":
            suggest = "rate_limits"
        elif key == "raiPolicyName":
            suggest = "rai_policy_name"
        elif key == "scaleSettings":
            suggest = "scale_settings"
        elif key == "versionUpgradeOption":
            suggest = "version_upgrade_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call_rate_limit: 'outputs.CallRateLimitResponse',
                 capabilities: Mapping[str, str],
                 provisioning_state: str,
                 rate_limits: Sequence['outputs.ThrottlingRuleResponse'],
                 model: Optional['outputs.DeploymentModelResponse'] = None,
                 rai_policy_name: Optional[str] = None,
                 scale_settings: Optional['outputs.DeploymentScaleSettingsResponse'] = None,
                 version_upgrade_option: Optional[str] = None):
        """
        Properties of Cognitive Services account deployment.
        :param 'CallRateLimitResponse' call_rate_limit: The call rate limit Cognitive Services account.
        :param Mapping[str, str] capabilities: The capabilities.
        :param str provisioning_state: Gets the status of the resource at the time the operation was called.
        :param 'DeploymentModelResponse' model: Properties of Cognitive Services account deployment model.
        :param str rai_policy_name: The name of RAI policy.
        :param 'DeploymentScaleSettingsResponse' scale_settings: Properties of Cognitive Services account deployment model.
        :param str version_upgrade_option: Deployment model version upgrade option.
        """
        DeploymentPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            call_rate_limit=call_rate_limit,
            capabilities=capabilities,
            provisioning_state=provisioning_state,
            rate_limits=rate_limits,
            model=model,
            rai_policy_name=rai_policy_name,
            scale_settings=scale_settings,
            version_upgrade_option=version_upgrade_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             call_rate_limit: Optional['outputs.CallRateLimitResponse'] = None,
             capabilities: Optional[Mapping[str, str]] = None,
             provisioning_state: Optional[str] = None,
             rate_limits: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None,
             model: Optional['outputs.DeploymentModelResponse'] = None,
             rai_policy_name: Optional[str] = None,
             scale_settings: Optional['outputs.DeploymentScaleSettingsResponse'] = None,
             version_upgrade_option: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if call_rate_limit is None and 'callRateLimit' in kwargs:
            call_rate_limit = kwargs['callRateLimit']
        if call_rate_limit is None:
            raise TypeError("Missing 'call_rate_limit' argument")
        if capabilities is None:
            raise TypeError("Missing 'capabilities' argument")
        if provisioning_state is None and 'provisioningState' in kwargs:
            provisioning_state = kwargs['provisioningState']
        if provisioning_state is None:
            raise TypeError("Missing 'provisioning_state' argument")
        if rate_limits is None and 'rateLimits' in kwargs:
            rate_limits = kwargs['rateLimits']
        if rate_limits is None:
            raise TypeError("Missing 'rate_limits' argument")
        if rai_policy_name is None and 'raiPolicyName' in kwargs:
            rai_policy_name = kwargs['raiPolicyName']
        if scale_settings is None and 'scaleSettings' in kwargs:
            scale_settings = kwargs['scaleSettings']
        if version_upgrade_option is None and 'versionUpgradeOption' in kwargs:
            version_upgrade_option = kwargs['versionUpgradeOption']

        _setter("call_rate_limit", call_rate_limit)
        _setter("capabilities", capabilities)
        _setter("provisioning_state", provisioning_state)
        _setter("rate_limits", rate_limits)
        if model is not None:
            _setter("model", model)
        if rai_policy_name is not None:
            _setter("rai_policy_name", rai_policy_name)
        if scale_settings is not None:
            _setter("scale_settings", scale_settings)
        if version_upgrade_option is not None:
            _setter("version_upgrade_option", version_upgrade_option)

    @property
    @pulumi.getter(name="callRateLimit")
    def call_rate_limit(self) -> 'outputs.CallRateLimitResponse':
        """
        The call rate limit Cognitive Services account.
        """
        return pulumi.get(self, "call_rate_limit")

    @property
    @pulumi.getter
    def capabilities(self) -> Mapping[str, str]:
        """
        The capabilities.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Gets the status of the resource at the time the operation was called.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="rateLimits")
    def rate_limits(self) -> Sequence['outputs.ThrottlingRuleResponse']:
        return pulumi.get(self, "rate_limits")

    @property
    @pulumi.getter
    def model(self) -> Optional['outputs.DeploymentModelResponse']:
        """
        Properties of Cognitive Services account deployment model.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="raiPolicyName")
    def rai_policy_name(self) -> Optional[str]:
        """
        The name of RAI policy.
        """
        return pulumi.get(self, "rai_policy_name")

    @property
    @pulumi.getter(name="scaleSettings")
    def scale_settings(self) -> Optional['outputs.DeploymentScaleSettingsResponse']:
        """
        Properties of Cognitive Services account deployment model.
        """
        return pulumi.get(self, "scale_settings")

    @property
    @pulumi.getter(name="versionUpgradeOption")
    def version_upgrade_option(self) -> Optional[str]:
        """
        Deployment model version upgrade option.
        """
        return pulumi.get(self, "version_upgrade_option")


@pulumi.output_type
class DeploymentScaleSettingsResponse(dict):
    """
    Properties of Cognitive Services account deployment model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeCapacity":
            suggest = "active_capacity"
        elif key == "scaleType":
            suggest = "scale_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentScaleSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentScaleSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentScaleSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_capacity: int,
                 capacity: Optional[int] = None,
                 scale_type: Optional[str] = None):
        """
        Properties of Cognitive Services account deployment model.
        :param int active_capacity: Deployment active capacity. This value might be different from `capacity` if customer recently updated `capacity`.
        :param int capacity: Deployment capacity.
        :param str scale_type: Deployment scale type.
        """
        DeploymentScaleSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active_capacity=active_capacity,
            capacity=capacity,
            scale_type=scale_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active_capacity: Optional[int] = None,
             capacity: Optional[int] = None,
             scale_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if active_capacity is None and 'activeCapacity' in kwargs:
            active_capacity = kwargs['activeCapacity']
        if active_capacity is None:
            raise TypeError("Missing 'active_capacity' argument")
        if scale_type is None and 'scaleType' in kwargs:
            scale_type = kwargs['scaleType']

        _setter("active_capacity", active_capacity)
        if capacity is not None:
            _setter("capacity", capacity)
        if scale_type is not None:
            _setter("scale_type", scale_type)

    @property
    @pulumi.getter(name="activeCapacity")
    def active_capacity(self) -> int:
        """
        Deployment active capacity. This value might be different from `capacity` if customer recently updated `capacity`.
        """
        return pulumi.get(self, "active_capacity")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Deployment capacity.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="scaleType")
    def scale_type(self) -> Optional[str]:
        """
        Deployment scale type.
        """
        return pulumi.get(self, "scale_type")


@pulumi.output_type
class EncryptionResponse(dict):
    """
    Properties to configure Encryption
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySource":
            suggest = "key_source"
        elif key == "keyVaultProperties":
            suggest = "key_vault_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_source: Optional[str] = None,
                 key_vault_properties: Optional['outputs.KeyVaultPropertiesResponse'] = None):
        """
        Properties to configure Encryption
        :param str key_source: Enumerates the possible value of keySource for Encryption
        :param 'KeyVaultPropertiesResponse' key_vault_properties: Properties of KeyVault
        """
        EncryptionResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_source=key_source,
            key_vault_properties=key_vault_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_source: Optional[str] = None,
             key_vault_properties: Optional['outputs.KeyVaultPropertiesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_source is None and 'keySource' in kwargs:
            key_source = kwargs['keySource']
        if key_vault_properties is None and 'keyVaultProperties' in kwargs:
            key_vault_properties = kwargs['keyVaultProperties']

        if key_source is None:
            key_source = 'Microsoft.KeyVault'
        if key_source is not None:
            _setter("key_source", key_source)
        if key_vault_properties is not None:
            _setter("key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="keySource")
    def key_source(self) -> Optional[str]:
        """
        Enumerates the possible value of keySource for Encryption
        """
        return pulumi.get(self, "key_source")

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional['outputs.KeyVaultPropertiesResponse']:
        """
        Properties of KeyVault
        """
        return pulumi.get(self, "key_vault_properties")


@pulumi.output_type
class IdentityResponse(dict):
    """
    Identity for the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Identity for the resource.
        :param str principal_id: The principal ID of resource identity.
        :param str tenant_id: The tenant ID of resource.
        :param str type: The identity type.
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
        """
        IdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
            user_assigned_identities=user_assigned_identities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             type: Optional[str] = None,
             user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if principal_id is None and 'principalId' in kwargs:
            principal_id = kwargs['principalId']
        if principal_id is None:
            raise TypeError("Missing 'principal_id' argument")
        if tenant_id is None and 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if tenant_id is None:
            raise TypeError("Missing 'tenant_id' argument")
        if user_assigned_identities is None and 'userAssignedIdentities' in kwargs:
            user_assigned_identities = kwargs['userAssignedIdentities']

        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        if type is not None:
            _setter("type", type)
        if user_assigned_identities is not None:
            _setter("user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of resource identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The identity type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class IpRuleResponse(dict):
    """
    A rule governing the accessibility from a specific ip address or ip range.
    """
    def __init__(__self__, *,
                 value: str):
        """
        A rule governing the accessibility from a specific ip address or ip range.
        :param str value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
        """
        IpRuleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class KeyVaultPropertiesResponse(dict):
    """
    Properties to configure keyVault Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityClientId":
            suggest = "identity_client_id"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "keyVaultUri":
            suggest = "key_vault_uri"
        elif key == "keyVersion":
            suggest = "key_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyVaultPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyVaultPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyVaultPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_client_id: Optional[str] = None,
                 key_name: Optional[str] = None,
                 key_vault_uri: Optional[str] = None,
                 key_version: Optional[str] = None):
        """
        Properties to configure keyVault Properties
        :param str key_name: Name of the Key from KeyVault
        :param str key_vault_uri: Uri of KeyVault
        :param str key_version: Version of the Key from KeyVault
        """
        KeyVaultPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_client_id=identity_client_id,
            key_name=key_name,
            key_vault_uri=key_vault_uri,
            key_version=key_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_client_id: Optional[str] = None,
             key_name: Optional[str] = None,
             key_vault_uri: Optional[str] = None,
             key_version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if identity_client_id is None and 'identityClientId' in kwargs:
            identity_client_id = kwargs['identityClientId']
        if key_name is None and 'keyName' in kwargs:
            key_name = kwargs['keyName']
        if key_vault_uri is None and 'keyVaultUri' in kwargs:
            key_vault_uri = kwargs['keyVaultUri']
        if key_version is None and 'keyVersion' in kwargs:
            key_version = kwargs['keyVersion']

        if identity_client_id is not None:
            _setter("identity_client_id", identity_client_id)
        if key_name is not None:
            _setter("key_name", key_name)
        if key_vault_uri is not None:
            _setter("key_vault_uri", key_vault_uri)
        if key_version is not None:
            _setter("key_version", key_version)

    @property
    @pulumi.getter(name="identityClientId")
    def identity_client_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_client_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        """
        Name of the Key from KeyVault
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyVaultUri")
    def key_vault_uri(self) -> Optional[str]:
        """
        Uri of KeyVault
        """
        return pulumi.get(self, "key_vault_uri")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[str]:
        """
        Version of the Key from KeyVault
        """
        return pulumi.get(self, "key_version")


@pulumi.output_type
class MultiRegionSettingsResponse(dict):
    """
    The multiregion settings Cognitive Services account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routingMethod":
            suggest = "routing_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiRegionSettingsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiRegionSettingsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiRegionSettingsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Optional[Sequence['outputs.RegionSettingResponse']] = None,
                 routing_method: Optional[str] = None):
        """
        The multiregion settings Cognitive Services account.
        :param str routing_method: Multiregion routing methods.
        """
        MultiRegionSettingsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            regions=regions,
            routing_method=routing_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             regions: Optional[Sequence['outputs.RegionSettingResponse']] = None,
             routing_method: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if routing_method is None and 'routingMethod' in kwargs:
            routing_method = kwargs['routingMethod']

        if regions is not None:
            _setter("regions", regions)
        if routing_method is not None:
            _setter("routing_method", routing_method)

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence['outputs.RegionSettingResponse']]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="routingMethod")
    def routing_method(self) -> Optional[str]:
        """
        Multiregion routing methods.
        """
        return pulumi.get(self, "routing_method")


@pulumi.output_type
class NetworkRuleSetResponse(dict):
    """
    A set of rules governing the network accessibility.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAction":
            suggest = "default_action"
        elif key == "ipRules":
            suggest = "ip_rules"
        elif key == "virtualNetworkRules":
            suggest = "virtual_network_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRuleSetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRuleSetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRuleSetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_action: Optional[str] = None,
                 ip_rules: Optional[Sequence['outputs.IpRuleResponse']] = None,
                 virtual_network_rules: Optional[Sequence['outputs.VirtualNetworkRuleResponse']] = None):
        """
        A set of rules governing the network accessibility.
        :param str default_action: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
        :param Sequence['IpRuleResponse'] ip_rules: The list of IP address rules.
        :param Sequence['VirtualNetworkRuleResponse'] virtual_network_rules: The list of virtual network rules.
        """
        NetworkRuleSetResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_action=default_action,
            ip_rules=ip_rules,
            virtual_network_rules=virtual_network_rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_action: Optional[str] = None,
             ip_rules: Optional[Sequence['outputs.IpRuleResponse']] = None,
             virtual_network_rules: Optional[Sequence['outputs.VirtualNetworkRuleResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if default_action is None and 'defaultAction' in kwargs:
            default_action = kwargs['defaultAction']
        if ip_rules is None and 'ipRules' in kwargs:
            ip_rules = kwargs['ipRules']
        if virtual_network_rules is None and 'virtualNetworkRules' in kwargs:
            virtual_network_rules = kwargs['virtualNetworkRules']

        if default_action is not None:
            _setter("default_action", default_action)
        if ip_rules is not None:
            _setter("ip_rules", ip_rules)
        if virtual_network_rules is not None:
            _setter("virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        """
        The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[Sequence['outputs.IpRuleResponse']]:
        """
        The list of IP address rules.
        """
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[Sequence['outputs.VirtualNetworkRuleResponse']]:
        """
        The list of virtual network rules.
        """
        return pulumi.get(self, "virtual_network_rules")


@pulumi.output_type
class PrivateEndpointConnectionPropertiesResponse(dict):
    """
    Properties of the PrivateEndpointConnectProperties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateLinkServiceConnectionState":
            suggest = "private_link_service_connection_state"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "groupIds":
            suggest = "group_ids"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_link_service_connection_state: 'outputs.PrivateLinkServiceConnectionStateResponse',
                 provisioning_state: str,
                 group_ids: Optional[Sequence[str]] = None,
                 private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None):
        """
        Properties of the PrivateEndpointConnectProperties.
        :param 'PrivateLinkServiceConnectionStateResponse' private_link_service_connection_state: A collection of information about the state of the connection between service consumer and provider.
        :param str provisioning_state: The provisioning state of the private endpoint connection resource.
        :param Sequence[str] group_ids: The private link resource group ids.
        :param 'PrivateEndpointResponse' private_endpoint: The resource of private end point.
        """
        PrivateEndpointConnectionPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_link_service_connection_state=private_link_service_connection_state,
            provisioning_state=provisioning_state,
            group_ids=group_ids,
            private_endpoint=private_endpoint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_link_service_connection_state: Optional['outputs.PrivateLinkServiceConnectionStateResponse'] = None,
             provisioning_state: Optional[str] = None,
             group_ids: Optional[Sequence[str]] = None,
             private_endpoint: Optional['outputs.PrivateEndpointResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if private_link_service_connection_state is None and 'privateLinkServiceConnectionState' in kwargs:
            private_link_service_connection_state = kwargs['privateLinkServiceConnectionState']
        if private_link_service_connection_state is None:
            raise TypeError("Missing 'private_link_service_connection_state' argument")
        if provisioning_state is None and 'provisioningState' in kwargs:
            provisioning_state = kwargs['provisioningState']
        if provisioning_state is None:
            raise TypeError("Missing 'provisioning_state' argument")
        if group_ids is None and 'groupIds' in kwargs:
            group_ids = kwargs['groupIds']
        if private_endpoint is None and 'privateEndpoint' in kwargs:
            private_endpoint = kwargs['privateEndpoint']

        _setter("private_link_service_connection_state", private_link_service_connection_state)
        _setter("provisioning_state", provisioning_state)
        if group_ids is not None:
            _setter("group_ids", group_ids)
        if private_endpoint is not None:
            _setter("private_endpoint", private_endpoint)

    @property
    @pulumi.getter(name="privateLinkServiceConnectionState")
    def private_link_service_connection_state(self) -> 'outputs.PrivateLinkServiceConnectionStateResponse':
        """
        A collection of information about the state of the connection between service consumer and provider.
        """
        return pulumi.get(self, "private_link_service_connection_state")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the private endpoint connection resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        """
        The private link resource group ids.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional['outputs.PrivateEndpointResponse']:
        """
        The resource of private end point.
        """
        return pulumi.get(self, "private_endpoint")


@pulumi.output_type
class PrivateEndpointConnectionResponse(dict):
    """
    The Private Endpoint Connection resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemData":
            suggest = "system_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateEndpointConnectionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateEndpointConnectionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 etag: str,
                 id: str,
                 name: str,
                 system_data: 'outputs.SystemDataResponse',
                 type: str,
                 location: Optional[str] = None,
                 properties: Optional['outputs.PrivateEndpointConnectionPropertiesResponse'] = None):
        """
        The Private Endpoint Connection resource.
        :param str etag: Resource Etag.
        :param str id: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        :param str name: The name of the resource
        :param 'SystemDataResponse' system_data: Metadata pertaining to creation and last modification of the resource.
        :param str type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        :param str location: The location of the private endpoint connection
        :param 'PrivateEndpointConnectionPropertiesResponse' properties: Resource properties.
        """
        PrivateEndpointConnectionResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            etag=etag,
            id=id,
            name=name,
            system_data=system_data,
            type=type,
            location=location,
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             etag: Optional[str] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             system_data: Optional['outputs.SystemDataResponse'] = None,
             type: Optional[str] = None,
             location: Optional[str] = None,
             properties: Optional['outputs.PrivateEndpointConnectionPropertiesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if etag is None:
            raise TypeError("Missing 'etag' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if system_data is None and 'systemData' in kwargs:
            system_data = kwargs['systemData']
        if system_data is None:
            raise TypeError("Missing 'system_data' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("etag", etag)
        _setter("id", id)
        _setter("name", name)
        _setter("system_data", system_data)
        _setter("type", type)
        if location is not None:
            _setter("location", location)
        if properties is not None:
            _setter("properties", properties)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Resource Etag.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location of the private endpoint connection
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.PrivateEndpointConnectionPropertiesResponse']:
        """
        Resource properties.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class PrivateEndpointResponse(dict):
    """
    The Private Endpoint resource.
    """
    def __init__(__self__, *,
                 id: str):
        """
        The Private Endpoint resource.
        :param str id: The ARM identifier for Private Endpoint
        """
        PrivateEndpointResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ARM identifier for Private Endpoint
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PrivateLinkServiceConnectionStateResponse(dict):
    """
    A collection of information about the state of the connection between service consumer and provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionsRequired":
            suggest = "actions_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateLinkServiceConnectionStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateLinkServiceConnectionStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions_required: Optional[str] = None,
                 description: Optional[str] = None,
                 status: Optional[str] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param str actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param str description: The reason for approval/rejection of the connection.
        :param str status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        PrivateLinkServiceConnectionStateResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions_required=actions_required,
            description=description,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions_required: Optional[str] = None,
             description: Optional[str] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if actions_required is None and 'actionsRequired' in kwargs:
            actions_required = kwargs['actionsRequired']

        if actions_required is not None:
            _setter("actions_required", actions_required)
        if description is not None:
            _setter("description", description)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[str]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class QuotaLimitResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewalPeriod":
            suggest = "renewal_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuotaLimitResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuotaLimitResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuotaLimitResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[float] = None,
                 renewal_period: Optional[float] = None,
                 rules: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None):
        QuotaLimitResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            renewal_period=renewal_period,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[float] = None,
             renewal_period: Optional[float] = None,
             rules: Optional[Sequence['outputs.ThrottlingRuleResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if renewal_period is None and 'renewalPeriod' in kwargs:
            renewal_period = kwargs['renewalPeriod']

        if count is not None:
            _setter("count", count)
        if renewal_period is not None:
            _setter("renewal_period", renewal_period)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> Optional[float]:
        return pulumi.get(self, "renewal_period")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.ThrottlingRuleResponse']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class RegionSettingResponse(dict):
    """
    The call rate limit Cognitive Services account.
    """
    def __init__(__self__, *,
                 customsubdomain: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[float] = None):
        """
        The call rate limit Cognitive Services account.
        :param str customsubdomain: Maps the region to the regional custom subdomain.
        :param str name: Name of the region.
        :param float value: A value for priority or weighted routing methods.
        """
        RegionSettingResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customsubdomain=customsubdomain,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customsubdomain: Optional[str] = None,
             name: Optional[str] = None,
             value: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if customsubdomain is not None:
            _setter("customsubdomain", customsubdomain)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def customsubdomain(self) -> Optional[str]:
        """
        Maps the region to the regional custom subdomain.
        """
        return pulumi.get(self, "customsubdomain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the region.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        """
        A value for priority or weighted routing methods.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RequestMatchPatternResponse(dict):
    def __init__(__self__, *,
                 method: Optional[str] = None,
                 path: Optional[str] = None):
        RequestMatchPatternResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            method=method,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             method: Optional[str] = None,
             path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if method is not None:
            _setter("method", method)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class SkuCapabilityResponse(dict):
    """
    SkuCapability indicates the capability of a certain feature.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        SkuCapability indicates the capability of a certain feature.
        :param str name: The name of the SkuCapability.
        :param str value: The value of the SkuCapability.
        """
        SkuCapabilityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the SkuCapability.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the SkuCapability.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SkuChangeInfoResponse(dict):
    """
    Sku change info of account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countOfDowngrades":
            suggest = "count_of_downgrades"
        elif key == "countOfUpgradesAfterDowngrades":
            suggest = "count_of_upgrades_after_downgrades"
        elif key == "lastChangeDate":
            suggest = "last_change_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SkuChangeInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SkuChangeInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SkuChangeInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count_of_downgrades: Optional[float] = None,
                 count_of_upgrades_after_downgrades: Optional[float] = None,
                 last_change_date: Optional[str] = None):
        """
        Sku change info of account.
        :param float count_of_downgrades: Gets the count of downgrades.
        :param float count_of_upgrades_after_downgrades: Gets the count of upgrades after downgrades.
        :param str last_change_date: Gets the last change date.
        """
        SkuChangeInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count_of_downgrades=count_of_downgrades,
            count_of_upgrades_after_downgrades=count_of_upgrades_after_downgrades,
            last_change_date=last_change_date,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count_of_downgrades: Optional[float] = None,
             count_of_upgrades_after_downgrades: Optional[float] = None,
             last_change_date: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if count_of_downgrades is None and 'countOfDowngrades' in kwargs:
            count_of_downgrades = kwargs['countOfDowngrades']
        if count_of_upgrades_after_downgrades is None and 'countOfUpgradesAfterDowngrades' in kwargs:
            count_of_upgrades_after_downgrades = kwargs['countOfUpgradesAfterDowngrades']
        if last_change_date is None and 'lastChangeDate' in kwargs:
            last_change_date = kwargs['lastChangeDate']

        if count_of_downgrades is not None:
            _setter("count_of_downgrades", count_of_downgrades)
        if count_of_upgrades_after_downgrades is not None:
            _setter("count_of_upgrades_after_downgrades", count_of_upgrades_after_downgrades)
        if last_change_date is not None:
            _setter("last_change_date", last_change_date)

    @property
    @pulumi.getter(name="countOfDowngrades")
    def count_of_downgrades(self) -> Optional[float]:
        """
        Gets the count of downgrades.
        """
        return pulumi.get(self, "count_of_downgrades")

    @property
    @pulumi.getter(name="countOfUpgradesAfterDowngrades")
    def count_of_upgrades_after_downgrades(self) -> Optional[float]:
        """
        Gets the count of upgrades after downgrades.
        """
        return pulumi.get(self, "count_of_upgrades_after_downgrades")

    @property
    @pulumi.getter(name="lastChangeDate")
    def last_change_date(self) -> Optional[str]:
        """
        Gets the last change date.
        """
        return pulumi.get(self, "last_change_date")


@pulumi.output_type
class SkuResponse(dict):
    """
    The resource model definition representing SKU
    """
    def __init__(__self__, *,
                 name: str,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        The resource model definition representing SKU
        :param str name: The name of the SKU. Ex - P3. It is typically a letter+number code
        :param int capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        :param str family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        :param str size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        :param str tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        SkuResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            capacity=capacity,
            family=family,
            size=size,
            tier=tier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             capacity: Optional[int] = None,
             family: Optional[str] = None,
             size: Optional[str] = None,
             tier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("name", name)
        if capacity is not None:
            _setter("capacity", capacity)
        if family is not None:
            _setter("family", family)
        if size is not None:
            _setter("size", size)
        if tier is not None:
            _setter("tier", tier)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SKU. Ex - P3. It is typically a letter+number code
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        If the service has different generations of hardware, for the same SKU, then that can be captured here.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. 
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        SystemDataResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            created_by=created_by,
            created_by_type=created_by_type,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            last_modified_by_type=last_modified_by_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             created_by: Optional[str] = None,
             created_by_type: Optional[str] = None,
             last_modified_at: Optional[str] = None,
             last_modified_by: Optional[str] = None,
             last_modified_by_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if created_at is None and 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_type is None and 'createdByType' in kwargs:
            created_by_type = kwargs['createdByType']
        if last_modified_at is None and 'lastModifiedAt' in kwargs:
            last_modified_at = kwargs['lastModifiedAt']
        if last_modified_by is None and 'lastModifiedBy' in kwargs:
            last_modified_by = kwargs['lastModifiedBy']
        if last_modified_by_type is None and 'lastModifiedByType' in kwargs:
            last_modified_by_type = kwargs['lastModifiedByType']

        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_type is not None:
            _setter("created_by_type", created_by_type)
        if last_modified_at is not None:
            _setter("last_modified_at", last_modified_at)
        if last_modified_by is not None:
            _setter("last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            _setter("last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class ThrottlingRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicThrottlingEnabled":
            suggest = "dynamic_throttling_enabled"
        elif key == "matchPatterns":
            suggest = "match_patterns"
        elif key == "minCount":
            suggest = "min_count"
        elif key == "renewalPeriod":
            suggest = "renewal_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: Optional[float] = None,
                 dynamic_throttling_enabled: Optional[bool] = None,
                 key: Optional[str] = None,
                 match_patterns: Optional[Sequence['outputs.RequestMatchPatternResponse']] = None,
                 min_count: Optional[float] = None,
                 renewal_period: Optional[float] = None):
        ThrottlingRuleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            dynamic_throttling_enabled=dynamic_throttling_enabled,
            key=key,
            match_patterns=match_patterns,
            min_count=min_count,
            renewal_period=renewal_period,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[float] = None,
             dynamic_throttling_enabled: Optional[bool] = None,
             key: Optional[str] = None,
             match_patterns: Optional[Sequence['outputs.RequestMatchPatternResponse']] = None,
             min_count: Optional[float] = None,
             renewal_period: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dynamic_throttling_enabled is None and 'dynamicThrottlingEnabled' in kwargs:
            dynamic_throttling_enabled = kwargs['dynamicThrottlingEnabled']
        if match_patterns is None and 'matchPatterns' in kwargs:
            match_patterns = kwargs['matchPatterns']
        if min_count is None and 'minCount' in kwargs:
            min_count = kwargs['minCount']
        if renewal_period is None and 'renewalPeriod' in kwargs:
            renewal_period = kwargs['renewalPeriod']

        if count is not None:
            _setter("count", count)
        if dynamic_throttling_enabled is not None:
            _setter("dynamic_throttling_enabled", dynamic_throttling_enabled)
        if key is not None:
            _setter("key", key)
        if match_patterns is not None:
            _setter("match_patterns", match_patterns)
        if min_count is not None:
            _setter("min_count", min_count)
        if renewal_period is not None:
            _setter("renewal_period", renewal_period)

    @property
    @pulumi.getter
    def count(self) -> Optional[float]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dynamicThrottlingEnabled")
    def dynamic_throttling_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_throttling_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="matchPatterns")
    def match_patterns(self) -> Optional[Sequence['outputs.RequestMatchPatternResponse']]:
        return pulumi.get(self, "match_patterns")

    @property
    @pulumi.getter(name="minCount")
    def min_count(self) -> Optional[float]:
        return pulumi.get(self, "min_count")

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> Optional[float]:
        return pulumi.get(self, "renewal_period")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User-assigned managed identity.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User-assigned managed identity.
        :param str client_id: Client App Id associated with this identity.
        :param str principal_id: Azure Active Directory principal ID associated with this Identity.
        """
        UserAssignedIdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            principal_id=principal_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: Optional[str] = None,
             principal_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if client_id is None and 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if client_id is None:
            raise TypeError("Missing 'client_id' argument")
        if principal_id is None and 'principalId' in kwargs:
            principal_id = kwargs['principalId']
        if principal_id is None:
            raise TypeError("Missing 'principal_id' argument")

        _setter("client_id", client_id)
        _setter("principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        Client App Id associated with this identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        Azure Active Directory principal ID associated with this Identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class UserOwnedStorageResponse(dict):
    """
    The user owned storage for Cognitive Services account.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityClientId":
            suggest = "identity_client_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserOwnedStorageResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserOwnedStorageResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserOwnedStorageResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_client_id: Optional[str] = None,
                 resource_id: Optional[str] = None):
        """
        The user owned storage for Cognitive Services account.
        :param str resource_id: Full resource id of a Microsoft.Storage resource.
        """
        UserOwnedStorageResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identity_client_id=identity_client_id,
            resource_id=resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identity_client_id: Optional[str] = None,
             resource_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if identity_client_id is None and 'identityClientId' in kwargs:
            identity_client_id = kwargs['identityClientId']
        if resource_id is None and 'resourceId' in kwargs:
            resource_id = kwargs['resourceId']

        if identity_client_id is not None:
            _setter("identity_client_id", identity_client_id)
        if resource_id is not None:
            _setter("resource_id", resource_id)

    @property
    @pulumi.getter(name="identityClientId")
    def identity_client_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_client_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        Full resource id of a Microsoft.Storage resource.
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class VirtualNetworkRuleResponse(dict):
    """
    A rule governing the accessibility from a specific virtual network.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreMissingVnetServiceEndpoint":
            suggest = "ignore_missing_vnet_service_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 ignore_missing_vnet_service_endpoint: Optional[bool] = None,
                 state: Optional[str] = None):
        """
        A rule governing the accessibility from a specific virtual network.
        :param str id: Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
        :param bool ignore_missing_vnet_service_endpoint: Ignore missing vnet service endpoint or not.
        :param str state: Gets the state of virtual network rule.
        """
        VirtualNetworkRuleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            ignore_missing_vnet_service_endpoint=ignore_missing_vnet_service_endpoint,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             ignore_missing_vnet_service_endpoint: Optional[bool] = None,
             state: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if ignore_missing_vnet_service_endpoint is None and 'ignoreMissingVnetServiceEndpoint' in kwargs:
            ignore_missing_vnet_service_endpoint = kwargs['ignoreMissingVnetServiceEndpoint']

        _setter("id", id)
        if ignore_missing_vnet_service_endpoint is not None:
            _setter("ignore_missing_vnet_service_endpoint", ignore_missing_vnet_service_endpoint)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreMissingVnetServiceEndpoint")
    def ignore_missing_vnet_service_endpoint(self) -> Optional[bool]:
        """
        Ignore missing vnet service endpoint or not.
        """
        return pulumi.get(self, "ignore_missing_vnet_service_endpoint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Gets the state of virtual network rule.
        """
        return pulumi.get(self, "state")


