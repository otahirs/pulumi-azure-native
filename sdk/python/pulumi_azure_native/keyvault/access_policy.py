# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AccessPolicyArgs', 'AccessPolicy']

@pulumi.input_type
class AccessPolicyArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 certificate_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_vault_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 secret_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AccessPolicy resource.
        :param pulumi.Input[str] application_id: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificate_permissions: Permissions the identity has for certificates.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_permissions: Permissions the identity has for keys.
        :param pulumi.Input[str] key_vault_name: Name of the Key Vault.
        :param pulumi.Input[str] object_id: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        :param pulumi.Input[str] resource_group_name: Name of the resource group that contains the vault.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] secret_permissions: Permissions the identity has for secrets.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_permissions: Permissions the identity has for storage accounts.
        :param pulumi.Input[str] tenant_id: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if certificate_permissions is not None:
            pulumi.set(__self__, "certificate_permissions", certificate_permissions)
        if key_permissions is not None:
            pulumi.set(__self__, "key_permissions", key_permissions)
        if key_vault_name is not None:
            pulumi.set(__self__, "key_vault_name", key_vault_name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if secret_permissions is not None:
            pulumi.set(__self__, "secret_permissions", secret_permissions)
        if storage_permissions is not None:
            pulumi.set(__self__, "storage_permissions", storage_permissions)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="certificatePermissions")
    def certificate_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Permissions the identity has for certificates.
        """
        return pulumi.get(self, "certificate_permissions")

    @certificate_permissions.setter
    def certificate_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificate_permissions", value)

    @property
    @pulumi.getter(name="keyPermissions")
    def key_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Permissions the identity has for keys.
        """
        return pulumi.get(self, "key_permissions")

    @key_permissions.setter
    def key_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_permissions", value)

    @property
    @pulumi.getter(name="keyVaultName")
    def key_vault_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Key Vault.
        """
        return pulumi.get(self, "key_vault_name")

    @key_vault_name.setter
    def key_vault_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_name", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource group that contains the vault.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="secretPermissions")
    def secret_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Permissions the identity has for secrets.
        """
        return pulumi.get(self, "secret_permissions")

    @secret_permissions.setter
    def secret_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "secret_permissions", value)

    @property
    @pulumi.getter(name="storagePermissions")
    def storage_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Permissions the identity has for storage accounts.
        """
        return pulumi.get(self, "storage_permissions")

    @storage_permissions.setter
    def storage_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage_permissions", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


class AccessPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 certificate_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_vault_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 secret_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Key Vault Access Policy for managing policies on existing vaults.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificate_permissions: Permissions the identity has for certificates.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_permissions: Permissions the identity has for keys.
        :param pulumi.Input[str] key_vault_name: Name of the Key Vault.
        :param pulumi.Input[str] object_id: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        :param pulumi.Input[str] resource_group_name: Name of the resource group that contains the vault.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] secret_permissions: Permissions the identity has for secrets.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] storage_permissions: Permissions the identity has for storage accounts.
        :param pulumi.Input[str] tenant_id: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccessPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Key Vault Access Policy for managing policies on existing vaults.

        :param str resource_name: The name of the resource.
        :param AccessPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 certificate_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_vault_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 secret_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessPolicyArgs.__new__(AccessPolicyArgs)

            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["certificate_permissions"] = certificate_permissions
            __props__.__dict__["key_permissions"] = key_permissions
            __props__.__dict__["key_vault_name"] = key_vault_name
            __props__.__dict__["object_id"] = object_id
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["secret_permissions"] = secret_permissions
            __props__.__dict__["storage_permissions"] = storage_permissions
            __props__.__dict__["tenant_id"] = tenant_id
        super(AccessPolicy, __self__).__init__(
            'azure-native:keyvault:AccessPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AccessPolicy':
        """
        Get an existing AccessPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AccessPolicyArgs.__new__(AccessPolicyArgs)

        __props__.__dict__["application_id"] = None
        __props__.__dict__["certificate_permissions"] = None
        __props__.__dict__["key_permissions"] = None
        __props__.__dict__["key_vault_name"] = None
        __props__.__dict__["object_id"] = None
        __props__.__dict__["resource_group_name"] = None
        __props__.__dict__["secret_permissions"] = None
        __props__.__dict__["storage_permissions"] = None
        __props__.__dict__["tenant_id"] = None
        return AccessPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[Optional[str]]:
        """
        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="certificatePermissions")
    def certificate_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Permissions the identity has for certificates.
        """
        return pulumi.get(self, "certificate_permissions")

    @property
    @pulumi.getter(name="keyPermissions")
    def key_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Permissions the identity has for keys.
        """
        return pulumi.get(self, "key_permissions")

    @property
    @pulumi.getter(name="keyVaultName")
    def key_vault_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the Key Vault.
        """
        return pulumi.get(self, "key_vault_name")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Output[Optional[str]]:
        """
        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the resource group that contains the vault.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="secretPermissions")
    def secret_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Permissions the identity has for secrets.
        """
        return pulumi.get(self, "secret_permissions")

    @property
    @pulumi.getter(name="storagePermissions")
    def storage_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Permissions the identity has for storage accounts.
        """
        return pulumi.get(self, "storage_permissions")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        return pulumi.get(self, "tenant_id")

