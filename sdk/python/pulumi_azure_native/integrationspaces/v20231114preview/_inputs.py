# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'BusinessProcessIdentifierArgs',
    'BusinessProcessMappingItemArgs',
    'BusinessProcessStageArgs',
    'TrackingDataStoreArgs',
]

@pulumi.input_type
class BusinessProcessIdentifierArgs:
    def __init__(__self__, *,
                 property_name: Optional[pulumi.Input[str]] = None,
                 property_type: Optional[pulumi.Input[str]] = None):
        """
        The properties of business process identifier.
        :param pulumi.Input[str] property_name: The property name of the business process identifier.
        :param pulumi.Input[str] property_type: The property type of the business process identifier.
        """
        BusinessProcessIdentifierArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property_name=property_name,
            property_type=property_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property_name: Optional[pulumi.Input[str]] = None,
             property_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if property_name is None and 'propertyName' in kwargs:
            property_name = kwargs['propertyName']
        if property_type is None and 'propertyType' in kwargs:
            property_type = kwargs['propertyType']

        if property_name is not None:
            _setter("property_name", property_name)
        if property_type is not None:
            _setter("property_type", property_type)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[pulumi.Input[str]]:
        """
        The property name of the business process identifier.
        """
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter(name="propertyType")
    def property_type(self) -> Optional[pulumi.Input[str]]:
        """
        The property type of the business process identifier.
        """
        return pulumi.get(self, "property_type")

    @property_type.setter
    def property_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property_type", value)


@pulumi.input_type
class BusinessProcessMappingItemArgs:
    def __init__(__self__, *,
                 logic_app_resource_id: Optional[pulumi.Input[str]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 operation_type: Optional[pulumi.Input[str]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None):
        """
        The properties of business process mapping.
        :param pulumi.Input[str] logic_app_resource_id: The logic app resource id.
        :param pulumi.Input[str] operation_name: The operation name.
        :param pulumi.Input[str] operation_type: The mapping item operation type of the business process.
        :param pulumi.Input[str] workflow_name: The workflow name within the logic app.
        """
        BusinessProcessMappingItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            logic_app_resource_id=logic_app_resource_id,
            operation_name=operation_name,
            operation_type=operation_type,
            workflow_name=workflow_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             logic_app_resource_id: Optional[pulumi.Input[str]] = None,
             operation_name: Optional[pulumi.Input[str]] = None,
             operation_type: Optional[pulumi.Input[str]] = None,
             workflow_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if logic_app_resource_id is None and 'logicAppResourceId' in kwargs:
            logic_app_resource_id = kwargs['logicAppResourceId']
        if operation_name is None and 'operationName' in kwargs:
            operation_name = kwargs['operationName']
        if operation_type is None and 'operationType' in kwargs:
            operation_type = kwargs['operationType']
        if workflow_name is None and 'workflowName' in kwargs:
            workflow_name = kwargs['workflowName']

        if logic_app_resource_id is not None:
            _setter("logic_app_resource_id", logic_app_resource_id)
        if operation_name is not None:
            _setter("operation_name", operation_name)
        if operation_type is not None:
            _setter("operation_type", operation_type)
        if workflow_name is not None:
            _setter("workflow_name", workflow_name)

    @property
    @pulumi.getter(name="logicAppResourceId")
    def logic_app_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The logic app resource id.
        """
        return pulumi.get(self, "logic_app_resource_id")

    @logic_app_resource_id.setter
    def logic_app_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logic_app_resource_id", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        The operation name.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[str]]:
        """
        The mapping item operation type of the business process.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[pulumi.Input[str]]:
        """
        The workflow name within the logic app.
        """
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_name", value)


@pulumi.input_type
class BusinessProcessStageArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 stages_before: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The properties of business process stage.
        :param pulumi.Input[str] description: The description of the business stage.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: The properties within the properties of the business process stage.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] stages_before: The property to keep track of stages before current in the business process stage.
        """
        BusinessProcessStageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            properties=properties,
            stages_before=stages_before,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[pulumi.Input[str]] = None,
             properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             stages_before: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if stages_before is None and 'stagesBefore' in kwargs:
            stages_before = kwargs['stagesBefore']

        if description is not None:
            _setter("description", description)
        if properties is not None:
            _setter("properties", properties)
        if stages_before is not None:
            _setter("stages_before", stages_before)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the business stage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The properties within the properties of the business process stage.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="stagesBefore")
    def stages_before(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The property to keep track of stages before current in the business process stage.
        """
        return pulumi.get(self, "stages_before")

    @stages_before.setter
    def stages_before(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stages_before", value)


@pulumi.input_type
class TrackingDataStoreArgs:
    def __init__(__self__, *,
                 data_store_ingestion_uri: pulumi.Input[str],
                 data_store_resource_id: pulumi.Input[str],
                 data_store_uri: pulumi.Input[str],
                 database_name: pulumi.Input[str]):
        """
        The properties of tracking data store.
        :param pulumi.Input[str] data_store_ingestion_uri: The data store ingestion URI.
        :param pulumi.Input[str] data_store_resource_id: The data store resource id.
        :param pulumi.Input[str] data_store_uri: The data store URI.
        :param pulumi.Input[str] database_name: The database name.
        """
        TrackingDataStoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_store_ingestion_uri=data_store_ingestion_uri,
            data_store_resource_id=data_store_resource_id,
            data_store_uri=data_store_uri,
            database_name=database_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_store_ingestion_uri: Optional[pulumi.Input[str]] = None,
             data_store_resource_id: Optional[pulumi.Input[str]] = None,
             data_store_uri: Optional[pulumi.Input[str]] = None,
             database_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if data_store_ingestion_uri is None and 'dataStoreIngestionUri' in kwargs:
            data_store_ingestion_uri = kwargs['dataStoreIngestionUri']
        if data_store_ingestion_uri is None:
            raise TypeError("Missing 'data_store_ingestion_uri' argument")
        if data_store_resource_id is None and 'dataStoreResourceId' in kwargs:
            data_store_resource_id = kwargs['dataStoreResourceId']
        if data_store_resource_id is None:
            raise TypeError("Missing 'data_store_resource_id' argument")
        if data_store_uri is None and 'dataStoreUri' in kwargs:
            data_store_uri = kwargs['dataStoreUri']
        if data_store_uri is None:
            raise TypeError("Missing 'data_store_uri' argument")
        if database_name is None and 'databaseName' in kwargs:
            database_name = kwargs['databaseName']
        if database_name is None:
            raise TypeError("Missing 'database_name' argument")

        _setter("data_store_ingestion_uri", data_store_ingestion_uri)
        _setter("data_store_resource_id", data_store_resource_id)
        _setter("data_store_uri", data_store_uri)
        _setter("database_name", database_name)

    @property
    @pulumi.getter(name="dataStoreIngestionUri")
    def data_store_ingestion_uri(self) -> pulumi.Input[str]:
        """
        The data store ingestion URI.
        """
        return pulumi.get(self, "data_store_ingestion_uri")

    @data_store_ingestion_uri.setter
    def data_store_ingestion_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_store_ingestion_uri", value)

    @property
    @pulumi.getter(name="dataStoreResourceId")
    def data_store_resource_id(self) -> pulumi.Input[str]:
        """
        The data store resource id.
        """
        return pulumi.get(self, "data_store_resource_id")

    @data_store_resource_id.setter
    def data_store_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_store_resource_id", value)

    @property
    @pulumi.getter(name="dataStoreUri")
    def data_store_uri(self) -> pulumi.Input[str]:
        """
        The data store URI.
        """
        return pulumi.get(self, "data_store_uri")

    @data_store_uri.setter
    def data_store_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_store_uri", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The database name.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)


