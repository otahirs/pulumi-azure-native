# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AadProfileArgs',
    'ArcAgentProfileArgs',
    'ConnectedClusterIdentityArgs',
]

@pulumi.input_type
class AadProfileArgs:
    def __init__(__self__, *,
                 admin_group_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_azure_rbac: Optional[pulumi.Input[bool]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        AAD Profile specifies attributes for Azure Active Directory integration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] admin_group_object_ids: The list of AAD group object IDs that will have admin role of the cluster.
        :param pulumi.Input[bool] enable_azure_rbac: Whether to enable Azure RBAC for Kubernetes authorization.
        :param pulumi.Input[str] tenant_id: The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
        """
        AadProfileArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_group_object_ids=admin_group_object_ids,
            enable_azure_rbac=enable_azure_rbac,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_group_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             enable_azure_rbac: Optional[pulumi.Input[bool]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if admin_group_object_ids is None and 'adminGroupObjectIDs' in kwargs:
            admin_group_object_ids = kwargs['adminGroupObjectIDs']
        if enable_azure_rbac is None and 'enableAzureRBAC' in kwargs:
            enable_azure_rbac = kwargs['enableAzureRBAC']
        if tenant_id is None and 'tenantID' in kwargs:
            tenant_id = kwargs['tenantID']

        if admin_group_object_ids is not None:
            _setter("admin_group_object_ids", admin_group_object_ids)
        if enable_azure_rbac is not None:
            _setter("enable_azure_rbac", enable_azure_rbac)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminGroupObjectIDs")
    def admin_group_object_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of AAD group object IDs that will have admin role of the cluster.
        """
        return pulumi.get(self, "admin_group_object_ids")

    @admin_group_object_ids.setter
    def admin_group_object_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "admin_group_object_ids", value)

    @property
    @pulumi.getter(name="enableAzureRBAC")
    def enable_azure_rbac(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable Azure RBAC for Kubernetes authorization.
        """
        return pulumi.get(self, "enable_azure_rbac")

    @enable_azure_rbac.setter
    def enable_azure_rbac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_azure_rbac", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ArcAgentProfileArgs:
    def __init__(__self__, *,
                 agent_auto_upgrade: Optional[pulumi.Input[Union[str, 'AutoUpgradeOptions']]] = None,
                 desired_agent_version: Optional[pulumi.Input[str]] = None):
        """
        Defines the Arc Agent properties for the clusters.
        :param pulumi.Input[Union[str, 'AutoUpgradeOptions']] agent_auto_upgrade: Indicates whether the Arc agents on the be upgraded automatically to the latest version. Defaults to Enabled.
        :param pulumi.Input[str] desired_agent_version: Version of the Arc agents to be installed on the cluster resource
        """
        ArcAgentProfileArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            agent_auto_upgrade=agent_auto_upgrade,
            desired_agent_version=desired_agent_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             agent_auto_upgrade: Optional[pulumi.Input[Union[str, 'AutoUpgradeOptions']]] = None,
             desired_agent_version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if agent_auto_upgrade is None and 'agentAutoUpgrade' in kwargs:
            agent_auto_upgrade = kwargs['agentAutoUpgrade']
        if desired_agent_version is None and 'desiredAgentVersion' in kwargs:
            desired_agent_version = kwargs['desiredAgentVersion']

        if agent_auto_upgrade is None:
            agent_auto_upgrade = 'Enabled'
        if agent_auto_upgrade is not None:
            _setter("agent_auto_upgrade", agent_auto_upgrade)
        if desired_agent_version is not None:
            _setter("desired_agent_version", desired_agent_version)

    @property
    @pulumi.getter(name="agentAutoUpgrade")
    def agent_auto_upgrade(self) -> Optional[pulumi.Input[Union[str, 'AutoUpgradeOptions']]]:
        """
        Indicates whether the Arc agents on the be upgraded automatically to the latest version. Defaults to Enabled.
        """
        return pulumi.get(self, "agent_auto_upgrade")

    @agent_auto_upgrade.setter
    def agent_auto_upgrade(self, value: Optional[pulumi.Input[Union[str, 'AutoUpgradeOptions']]]):
        pulumi.set(self, "agent_auto_upgrade", value)

    @property
    @pulumi.getter(name="desiredAgentVersion")
    def desired_agent_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the Arc agents to be installed on the cluster resource
        """
        return pulumi.get(self, "desired_agent_version")

    @desired_agent_version.setter
    def desired_agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desired_agent_version", value)


@pulumi.input_type
class ConnectedClusterIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['ResourceIdentityType']] = None):
        """
        Identity for the connected cluster.
        :param pulumi.Input['ResourceIdentityType'] type: The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
        """
        ConnectedClusterIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[pulumi.Input['ResourceIdentityType']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if type is None:
            type = 'SystemAssigned'
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ResourceIdentityType']:
        """
        The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ResourceIdentityType']):
        pulumi.set(self, "type", value)


