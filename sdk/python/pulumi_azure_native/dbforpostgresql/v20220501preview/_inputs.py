# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AdminCredentialsArgs',
    'MigrationSecretParametersArgs',
]

@pulumi.input_type
class AdminCredentialsArgs:
    def __init__(__self__, *,
                 source_server_password: pulumi.Input[str],
                 target_server_password: pulumi.Input[str]):
        """
        Server admin credentials.
        """
        AdminCredentialsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_server_password=source_server_password,
            target_server_password=target_server_password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_server_password: Optional[pulumi.Input[str]] = None,
             target_server_password: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if source_server_password is None and 'sourceServerPassword' in kwargs:
            source_server_password = kwargs['sourceServerPassword']
        if source_server_password is None:
            raise TypeError("Missing 'source_server_password' argument")
        if target_server_password is None and 'targetServerPassword' in kwargs:
            target_server_password = kwargs['targetServerPassword']
        if target_server_password is None:
            raise TypeError("Missing 'target_server_password' argument")

        _setter("source_server_password", source_server_password)
        _setter("target_server_password", target_server_password)

    @property
    @pulumi.getter(name="sourceServerPassword")
    def source_server_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_server_password")

    @source_server_password.setter
    def source_server_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_server_password", value)

    @property
    @pulumi.getter(name="targetServerPassword")
    def target_server_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_server_password")

    @target_server_password.setter
    def target_server_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_server_password", value)


@pulumi.input_type
class MigrationSecretParametersArgs:
    def __init__(__self__, *,
                 admin_credentials: pulumi.Input['AdminCredentialsArgs']):
        """
        Migration secret parameters.
        :param pulumi.Input['AdminCredentialsArgs'] admin_credentials: Server admin credentials.
        """
        MigrationSecretParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_credentials=admin_credentials,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_credentials: Optional[pulumi.Input['AdminCredentialsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if admin_credentials is None and 'adminCredentials' in kwargs:
            admin_credentials = kwargs['adminCredentials']
        if admin_credentials is None:
            raise TypeError("Missing 'admin_credentials' argument")

        _setter("admin_credentials", admin_credentials)

    @property
    @pulumi.getter(name="adminCredentials")
    def admin_credentials(self) -> pulumi.Input['AdminCredentialsArgs']:
        """
        Server admin credentials.
        """
        return pulumi.get(self, "admin_credentials")

    @admin_credentials.setter
    def admin_credentials(self, value: pulumi.Input['AdminCredentialsArgs']):
        pulumi.set(self, "admin_credentials", value)


