# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['JobArgs', 'Job']

@pulumi.input_type
class JobArgs:
    def __init__(__self__, *,
                 job_base_properties: pulumi.Input[Union['AutoMLJobArgs', 'CommandJobArgs', 'PipelineJobArgs', 'SweepJobArgs']],
                 resource_group_name: pulumi.Input[str],
                 workspace_name: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Job resource.
        :param pulumi.Input[Union['AutoMLJobArgs', 'CommandJobArgs', 'PipelineJobArgs', 'SweepJobArgs']] job_base_properties: [Required] Additional attributes of the entity.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] workspace_name: Name of Azure Machine Learning workspace.
        :param pulumi.Input[str] id: The name and identifier for the Job. This is case-sensitive.
        """
        pulumi.set(__self__, "job_base_properties", job_base_properties)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "workspace_name", workspace_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="jobBaseProperties")
    def job_base_properties(self) -> pulumi.Input[Union['AutoMLJobArgs', 'CommandJobArgs', 'PipelineJobArgs', 'SweepJobArgs']]:
        """
        [Required] Additional attributes of the entity.
        """
        return pulumi.get(self, "job_base_properties")

    @job_base_properties.setter
    def job_base_properties(self, value: pulumi.Input[Union['AutoMLJobArgs', 'CommandJobArgs', 'PipelineJobArgs', 'SweepJobArgs']]):
        pulumi.set(self, "job_base_properties", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="workspaceName")
    def workspace_name(self) -> pulumi.Input[str]:
        """
        Name of Azure Machine Learning workspace.
        """
        return pulumi.get(self, "workspace_name")

    @workspace_name.setter
    def workspace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The name and identifier for the Job. This is case-sensitive.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


class Job(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 job_base_properties: Optional[pulumi.Input[Union[pulumi.InputType['AutoMLJobArgs'], pulumi.InputType['CommandJobArgs'], pulumi.InputType['PipelineJobArgs'], pulumi.InputType['SweepJobArgs']]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Azure Resource Manager resource envelope.
        API Version: 2022-10-01.
        Previous API Version: 2021-03-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.

        ## Example Usage
        ### CreateOrUpdate AutoML Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties={
                "computeId": "string",
                "description": "string",
                "displayName": "string",
                "environmentId": "string",
                "environmentVariables": {
                    "string": "string",
                },
                "experimentName": "string",
                "identity": azure_native.machinelearningservices.AmlTokenArgs(
                    identity_type="AMLToken",
                ),
                "isArchived": False,
                "jobType": "AutoML",
                "outputs": {
                    "string": azure_native.machinelearningservices.UriFileJobOutputArgs(
                        description="string",
                        job_output_type="uri_file",
                        mode="ReadWriteMount",
                        uri="string",
                    ),
                },
                "properties": {
                    "string": "string",
                },
                "resources": azure_native.machinelearningservices.JobResourceConfigurationArgs(
                    instance_count=1,
                    instance_type="string",
                    properties={
                        "string": {
                            "9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": None,
                        },
                    },
                ),
                "services": {
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                "tags": {
                    "string": "string",
                },
                "taskDetails": azure_native.machinelearningservices.ImageClassificationArgs(
                    limit_settings=azure_native.machinelearningservices.ImageLimitSettingsArgs(
                        max_trials=2,
                    ),
                    model_settings=azure_native.machinelearningservices.ImageModelSettingsClassificationArgs(
                        validation_crop_size=2,
                    ),
                    search_space=[azure_native.machinelearningservices.ImageModelDistributionSettingsClassificationArgs(
                        validation_crop_size="choice(2, 360)",
                    )],
                    target_column_name="string",
                    task_type="ImageClassification",
                    training_data=azure_native.machinelearningservices.MLTableJobInputArgs(
                        job_input_type="mltable",
                        uri="string",
                    ),
                ),
            },
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```
        ### CreateOrUpdate Command Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties=azure_native.machinelearningservices.CommandJobArgs(
                code_id="string",
                command="string",
                compute_id="string",
                description="string",
                display_name="string",
                distribution=azure_native.machinelearningservices.TensorFlowArgs(
                    distribution_type="TensorFlow",
                    parameter_server_count=1,
                    worker_count=1,
                ),
                environment_id="string",
                environment_variables={
                    "string": "string",
                },
                experiment_name="string",
                identity=azure_native.machinelearningservices.AmlTokenArgs(
                    identity_type="AMLToken",
                ),
                inputs={
                    "string": azure_native.machinelearningservices.LiteralJobInputArgs(
                        description="string",
                        job_input_type="literal",
                        value="string",
                    ),
                },
                job_type="Command",
                limits=azure_native.machinelearningservices.CommandJobLimitsArgs(
                    job_limits_type="Command",
                    timeout="PT5M",
                ),
                outputs={
                    "string": azure_native.machinelearningservices.UriFileJobOutputArgs(
                        description="string",
                        job_output_type="uri_file",
                        mode="ReadWriteMount",
                        uri="string",
                    ),
                },
                properties={
                    "string": "string",
                },
                resources=azure_native.machinelearningservices.JobResourceConfigurationArgs(
                    instance_count=1,
                    instance_type="string",
                    properties={
                        "string": {
                            "e6b6493e-7d5e-4db3-be1e-306ec641327e": None,
                        },
                    },
                ),
                services={
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                tags={
                    "string": "string",
                },
            ),
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```
        ### CreateOrUpdate Pipeline Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties=azure_native.machinelearningservices.PipelineJobArgs(
                compute_id="string",
                description="string",
                display_name="string",
                experiment_name="string",
                inputs={
                    "string": azure_native.machinelearningservices.LiteralJobInputArgs(
                        description="string",
                        job_input_type="literal",
                        value="string",
                    ),
                },
                job_type="Pipeline",
                outputs={
                    "string": azure_native.machinelearningservices.UriFileJobOutputArgs(
                        description="string",
                        job_output_type="uri_file",
                        mode="Upload",
                        uri="string",
                    ),
                },
                properties={
                    "string": "string",
                },
                services={
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                settings={},
                tags={
                    "string": "string",
                },
            ),
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```
        ### CreateOrUpdate Sweep Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties=azure_native.machinelearningservices.SweepJobArgs(
                compute_id="string",
                description="string",
                display_name="string",
                early_termination=azure_native.machinelearningservices.MedianStoppingPolicyArgs(
                    delay_evaluation=1,
                    evaluation_interval=1,
                    policy_type="MedianStopping",
                ),
                experiment_name="string",
                job_type="Sweep",
                limits=azure_native.machinelearningservices.SweepJobLimitsArgs(
                    job_limits_type="Sweep",
                    max_concurrent_trials=1,
                    max_total_trials=1,
                    trial_timeout="PT1S",
                ),
                objective=azure_native.machinelearningservices.ObjectiveArgs(
                    goal="Minimize",
                    primary_metric="string",
                ),
                properties={
                    "string": "string",
                },
                sampling_algorithm=azure_native.machinelearningservices.GridSamplingAlgorithmArgs(
                    sampling_algorithm_type="Grid",
                ),
                search_space={
                    "string": {},
                },
                services={
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                tags={
                    "string": "string",
                },
                trial=azure_native.machinelearningservices.TrialComponentArgs(
                    code_id="string",
                    command="string",
                    distribution=azure_native.machinelearningservices.MpiArgs(
                        distribution_type="Mpi",
                        process_count_per_instance=1,
                    ),
                    environment_id="string",
                    environment_variables={
                        "string": "string",
                    },
                    resources=azure_native.machinelearningservices.JobResourceConfigurationArgs(
                        instance_count=1,
                        instance_type="string",
                        properties={
                            "string": {
                                "e6b6493e-7d5e-4db3-be1e-306ec641327e": None,
                            },
                        },
                    ),
                ),
            ),
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:machinelearningservices:Job string string 
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] id: The name and identifier for the Job. This is case-sensitive.
        :param pulumi.Input[Union[pulumi.InputType['AutoMLJobArgs'], pulumi.InputType['CommandJobArgs'], pulumi.InputType['PipelineJobArgs'], pulumi.InputType['SweepJobArgs']]] job_base_properties: [Required] Additional attributes of the entity.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] workspace_name: Name of Azure Machine Learning workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Azure Resource Manager resource envelope.
        API Version: 2022-10-01.
        Previous API Version: 2021-03-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.

        ## Example Usage
        ### CreateOrUpdate AutoML Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties={
                "computeId": "string",
                "description": "string",
                "displayName": "string",
                "environmentId": "string",
                "environmentVariables": {
                    "string": "string",
                },
                "experimentName": "string",
                "identity": azure_native.machinelearningservices.AmlTokenArgs(
                    identity_type="AMLToken",
                ),
                "isArchived": False,
                "jobType": "AutoML",
                "outputs": {
                    "string": azure_native.machinelearningservices.UriFileJobOutputArgs(
                        description="string",
                        job_output_type="uri_file",
                        mode="ReadWriteMount",
                        uri="string",
                    ),
                },
                "properties": {
                    "string": "string",
                },
                "resources": azure_native.machinelearningservices.JobResourceConfigurationArgs(
                    instance_count=1,
                    instance_type="string",
                    properties={
                        "string": {
                            "9bec0ab0-c62f-4fa9-a97c-7b24bbcc90ad": None,
                        },
                    },
                ),
                "services": {
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                "tags": {
                    "string": "string",
                },
                "taskDetails": azure_native.machinelearningservices.ImageClassificationArgs(
                    limit_settings=azure_native.machinelearningservices.ImageLimitSettingsArgs(
                        max_trials=2,
                    ),
                    model_settings=azure_native.machinelearningservices.ImageModelSettingsClassificationArgs(
                        validation_crop_size=2,
                    ),
                    search_space=[azure_native.machinelearningservices.ImageModelDistributionSettingsClassificationArgs(
                        validation_crop_size="choice(2, 360)",
                    )],
                    target_column_name="string",
                    task_type="ImageClassification",
                    training_data=azure_native.machinelearningservices.MLTableJobInputArgs(
                        job_input_type="mltable",
                        uri="string",
                    ),
                ),
            },
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```
        ### CreateOrUpdate Command Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties=azure_native.machinelearningservices.CommandJobArgs(
                code_id="string",
                command="string",
                compute_id="string",
                description="string",
                display_name="string",
                distribution=azure_native.machinelearningservices.TensorFlowArgs(
                    distribution_type="TensorFlow",
                    parameter_server_count=1,
                    worker_count=1,
                ),
                environment_id="string",
                environment_variables={
                    "string": "string",
                },
                experiment_name="string",
                identity=azure_native.machinelearningservices.AmlTokenArgs(
                    identity_type="AMLToken",
                ),
                inputs={
                    "string": azure_native.machinelearningservices.LiteralJobInputArgs(
                        description="string",
                        job_input_type="literal",
                        value="string",
                    ),
                },
                job_type="Command",
                limits=azure_native.machinelearningservices.CommandJobLimitsArgs(
                    job_limits_type="Command",
                    timeout="PT5M",
                ),
                outputs={
                    "string": azure_native.machinelearningservices.UriFileJobOutputArgs(
                        description="string",
                        job_output_type="uri_file",
                        mode="ReadWriteMount",
                        uri="string",
                    ),
                },
                properties={
                    "string": "string",
                },
                resources=azure_native.machinelearningservices.JobResourceConfigurationArgs(
                    instance_count=1,
                    instance_type="string",
                    properties={
                        "string": {
                            "e6b6493e-7d5e-4db3-be1e-306ec641327e": None,
                        },
                    },
                ),
                services={
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                tags={
                    "string": "string",
                },
            ),
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```
        ### CreateOrUpdate Pipeline Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties=azure_native.machinelearningservices.PipelineJobArgs(
                compute_id="string",
                description="string",
                display_name="string",
                experiment_name="string",
                inputs={
                    "string": azure_native.machinelearningservices.LiteralJobInputArgs(
                        description="string",
                        job_input_type="literal",
                        value="string",
                    ),
                },
                job_type="Pipeline",
                outputs={
                    "string": azure_native.machinelearningservices.UriFileJobOutputArgs(
                        description="string",
                        job_output_type="uri_file",
                        mode="Upload",
                        uri="string",
                    ),
                },
                properties={
                    "string": "string",
                },
                services={
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                settings={},
                tags={
                    "string": "string",
                },
            ),
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```
        ### CreateOrUpdate Sweep Job.

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.machinelearningservices.Job("job",
            id="string",
            job_base_properties=azure_native.machinelearningservices.SweepJobArgs(
                compute_id="string",
                description="string",
                display_name="string",
                early_termination=azure_native.machinelearningservices.MedianStoppingPolicyArgs(
                    delay_evaluation=1,
                    evaluation_interval=1,
                    policy_type="MedianStopping",
                ),
                experiment_name="string",
                job_type="Sweep",
                limits=azure_native.machinelearningservices.SweepJobLimitsArgs(
                    job_limits_type="Sweep",
                    max_concurrent_trials=1,
                    max_total_trials=1,
                    trial_timeout="PT1S",
                ),
                objective=azure_native.machinelearningservices.ObjectiveArgs(
                    goal="Minimize",
                    primary_metric="string",
                ),
                properties={
                    "string": "string",
                },
                sampling_algorithm=azure_native.machinelearningservices.GridSamplingAlgorithmArgs(
                    sampling_algorithm_type="Grid",
                ),
                search_space={
                    "string": {},
                },
                services={
                    "string": azure_native.machinelearningservices.JobServiceArgs(
                        endpoint="string",
                        job_service_type="string",
                        port=1,
                        properties={
                            "string": "string",
                        },
                    ),
                },
                tags={
                    "string": "string",
                },
                trial=azure_native.machinelearningservices.TrialComponentArgs(
                    code_id="string",
                    command="string",
                    distribution=azure_native.machinelearningservices.MpiArgs(
                        distribution_type="Mpi",
                        process_count_per_instance=1,
                    ),
                    environment_id="string",
                    environment_variables={
                        "string": "string",
                    },
                    resources=azure_native.machinelearningservices.JobResourceConfigurationArgs(
                        instance_count=1,
                        instance_type="string",
                        properties={
                            "string": {
                                "e6b6493e-7d5e-4db3-be1e-306ec641327e": None,
                            },
                        },
                    ),
                ),
            ),
            resource_group_name="test-rg",
            workspace_name="my-aml-workspace")

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:machinelearningservices:Job string string 
        ```

        :param str resource_name: The name of the resource.
        :param JobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 job_base_properties: Optional[pulumi.Input[Union[pulumi.InputType['AutoMLJobArgs'], pulumi.InputType['CommandJobArgs'], pulumi.InputType['PipelineJobArgs'], pulumi.InputType['SweepJobArgs']]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 workspace_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobArgs.__new__(JobArgs)

            __props__.__dict__["id"] = id
            if job_base_properties is None and not opts.urn:
                raise TypeError("Missing required property 'job_base_properties'")
            __props__.__dict__["job_base_properties"] = job_base_properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if workspace_name is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_name'")
            __props__.__dict__["workspace_name"] = workspace_name
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:machinelearningservices/v20210301preview:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220201preview:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220501:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20220601preview:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20221001:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20221001preview:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20221201preview:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20230201preview:Job"), pulumi.Alias(type_="azure-native:machinelearningservices/v20230401preview:Job")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Job, __self__).__init__(
            'azure-native:machinelearningservices:Job',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Job':
        """
        Get an existing Job resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = JobArgs.__new__(JobArgs)

        __props__.__dict__["job_base_properties"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        return Job(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="jobBaseProperties")
    def job_base_properties(self) -> pulumi.Output[Any]:
        """
        [Required] Additional attributes of the entity.
        """
        return pulumi.get(self, "job_base_properties")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

