# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ConnectorArgs', 'Connector']

@pulumi.input_type
class ConnectorArgs:
    def __init__(__self__, *,
                 authentication_details: Optional[pulumi.Input[Union['AwAssumeRoleAuthenticationDetailsPropertiesArgs', 'AwsCredsAuthenticationDetailsPropertiesArgs', 'GcpCredentialsDetailsPropertiesArgs']]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 hybrid_compute_settings: Optional[pulumi.Input['HybridComputeSettingsPropertiesArgs']] = None):
        """
        The set of arguments for constructing a Connector resource.
        :param pulumi.Input[Union['AwAssumeRoleAuthenticationDetailsPropertiesArgs', 'AwsCredsAuthenticationDetailsPropertiesArgs', 'GcpCredentialsDetailsPropertiesArgs']] authentication_details: Settings for authentication management, these settings are relevant only for the cloud connector.
        :param pulumi.Input[str] connector_name: Name of the cloud account connector
        :param pulumi.Input['HybridComputeSettingsPropertiesArgs'] hybrid_compute_settings: Settings for hybrid compute management. These settings are relevant only for Arc autoProvision (Hybrid Compute).
        """
        if authentication_details is not None:
            pulumi.set(__self__, "authentication_details", authentication_details)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)
        if hybrid_compute_settings is not None:
            pulumi.set(__self__, "hybrid_compute_settings", hybrid_compute_settings)

    @property
    @pulumi.getter(name="authenticationDetails")
    def authentication_details(self) -> Optional[pulumi.Input[Union['AwAssumeRoleAuthenticationDetailsPropertiesArgs', 'AwsCredsAuthenticationDetailsPropertiesArgs', 'GcpCredentialsDetailsPropertiesArgs']]]:
        """
        Settings for authentication management, these settings are relevant only for the cloud connector.
        """
        return pulumi.get(self, "authentication_details")

    @authentication_details.setter
    def authentication_details(self, value: Optional[pulumi.Input[Union['AwAssumeRoleAuthenticationDetailsPropertiesArgs', 'AwsCredsAuthenticationDetailsPropertiesArgs', 'GcpCredentialsDetailsPropertiesArgs']]]):
        pulumi.set(self, "authentication_details", value)

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cloud account connector
        """
        return pulumi.get(self, "connector_name")

    @connector_name.setter
    def connector_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_name", value)

    @property
    @pulumi.getter(name="hybridComputeSettings")
    def hybrid_compute_settings(self) -> Optional[pulumi.Input['HybridComputeSettingsPropertiesArgs']]:
        """
        Settings for hybrid compute management. These settings are relevant only for Arc autoProvision (Hybrid Compute).
        """
        return pulumi.get(self, "hybrid_compute_settings")

    @hybrid_compute_settings.setter
    def hybrid_compute_settings(self, value: Optional[pulumi.Input['HybridComputeSettingsPropertiesArgs']]):
        pulumi.set(self, "hybrid_compute_settings", value)


class Connector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_details: Optional[pulumi.Input[Union[pulumi.InputType['AwAssumeRoleAuthenticationDetailsPropertiesArgs'], pulumi.InputType['AwsCredsAuthenticationDetailsPropertiesArgs'], pulumi.InputType['GcpCredentialsDetailsPropertiesArgs']]]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 hybrid_compute_settings: Optional[pulumi.Input[pulumi.InputType['HybridComputeSettingsPropertiesArgs']]] = None,
                 __props__=None):
        """
        The connector setting

        ## Example Usage
        ### AwsAssumeRole - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        connector = azure_native.security.v20200101preview.Connector("connector",
            authentication_details=azure_native.security.v20200101preview.AwAssumeRoleAuthenticationDetailsPropertiesArgs(
                authentication_type="awsAssumeRole",
                aws_assume_role_arn="arn:aws:iam::81231569658:role/AscConnector",
                aws_external_id="20ff7fc3-e762-44dd-bd96-b71116dcdc23",
            ),
            connector_name="aws_dev2",
            hybrid_compute_settings=azure_native.security.v20200101preview.HybridComputeSettingsPropertiesResponseArgs(
                auto_provision="On",
                proxy_server=azure_native.security.v20200101preview.ProxyServerPropertiesArgs(
                    ip="167.220.197.140",
                    port="34",
                ),
                region="West US 2",
                resource_group_name="AwsConnectorRG",
                service_principal=azure_native.security.v20200101preview.ServicePrincipalPropertiesArgs(
                    application_id="ad9bcd79-be9c-45ab-abd8-80ca1654a7d1",
                    secret="<secret>",
                ),
            ))

        ```
        ### AwsCred - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        connector = azure_native.security.v20200101preview.Connector("connector",
            authentication_details=azure_native.security.v20200101preview.AwsCredsAuthenticationDetailsPropertiesArgs(
                authentication_type="awsCreds",
                aws_access_key_id="AKIARPZCNODDNAEQFSOE",
                aws_secret_access_key="<awsSecretAccessKey>",
            ),
            connector_name="aws_dev1",
            hybrid_compute_settings=azure_native.security.v20200101preview.HybridComputeSettingsPropertiesResponseArgs(
                auto_provision="On",
                proxy_server=azure_native.security.v20200101preview.ProxyServerPropertiesArgs(
                    ip="167.220.197.140",
                    port="34",
                ),
                region="West US 2",
                resource_group_name="AwsConnectorRG",
                service_principal=azure_native.security.v20200101preview.ServicePrincipalPropertiesArgs(
                    application_id="ad9bcd79-be9c-45ab-abd8-80ca1654a7d1",
                    secret="<secret>",
                ),
            ))

        ```
        ### gcpCredentials - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        connector = azure_native.security.v20200101preview.Connector("connector",
            authentication_details=azure_native.security.v20200101preview.GcpCredentialsDetailsPropertiesArgs(
                auth_provider_x509_cert_url="https://www.googleapis.com/oauth2/v1/certs",
                auth_uri="https://accounts.google.com/o/oauth2/auth",
                authentication_type="gcpCredentials",
                client_email="asc-135@asc-project-1234.iam.gserviceaccount.com",
                client_id="105889053725632919854",
                client_x509_cert_url="https://www.googleapis.com/robot/v1/metadata/x509/asc-135%40asc-project-1234.iam.gserviceaccount.com",
                organization_id="AscDemoOrg",
                private_key="******",
                private_key_id="6efg587hra2568as34d22326b044cc20dc2af",
                project_id="asc-project-1234",
                token_uri="https://oauth2.googleapis.com/token",
                type="service_account",
            ),
            connector_name="gcp_dev",
            hybrid_compute_settings=azure_native.security.v20200101preview.HybridComputeSettingsPropertiesResponseArgs(
                auto_provision="Off",
            ))

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:security/v20200101preview:Connector gcp_dev /subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/gcp_dev 
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[pulumi.InputType['AwAssumeRoleAuthenticationDetailsPropertiesArgs'], pulumi.InputType['AwsCredsAuthenticationDetailsPropertiesArgs'], pulumi.InputType['GcpCredentialsDetailsPropertiesArgs']]] authentication_details: Settings for authentication management, these settings are relevant only for the cloud connector.
        :param pulumi.Input[str] connector_name: Name of the cloud account connector
        :param pulumi.Input[pulumi.InputType['HybridComputeSettingsPropertiesArgs']] hybrid_compute_settings: Settings for hybrid compute management. These settings are relevant only for Arc autoProvision (Hybrid Compute).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConnectorArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The connector setting

        ## Example Usage
        ### AwsAssumeRole - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        connector = azure_native.security.v20200101preview.Connector("connector",
            authentication_details=azure_native.security.v20200101preview.AwAssumeRoleAuthenticationDetailsPropertiesArgs(
                authentication_type="awsAssumeRole",
                aws_assume_role_arn="arn:aws:iam::81231569658:role/AscConnector",
                aws_external_id="20ff7fc3-e762-44dd-bd96-b71116dcdc23",
            ),
            connector_name="aws_dev2",
            hybrid_compute_settings=azure_native.security.v20200101preview.HybridComputeSettingsPropertiesResponseArgs(
                auto_provision="On",
                proxy_server=azure_native.security.v20200101preview.ProxyServerPropertiesArgs(
                    ip="167.220.197.140",
                    port="34",
                ),
                region="West US 2",
                resource_group_name="AwsConnectorRG",
                service_principal=azure_native.security.v20200101preview.ServicePrincipalPropertiesArgs(
                    application_id="ad9bcd79-be9c-45ab-abd8-80ca1654a7d1",
                    secret="<secret>",
                ),
            ))

        ```
        ### AwsCred - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        connector = azure_native.security.v20200101preview.Connector("connector",
            authentication_details=azure_native.security.v20200101preview.AwsCredsAuthenticationDetailsPropertiesArgs(
                authentication_type="awsCreds",
                aws_access_key_id="AKIARPZCNODDNAEQFSOE",
                aws_secret_access_key="<awsSecretAccessKey>",
            ),
            connector_name="aws_dev1",
            hybrid_compute_settings=azure_native.security.v20200101preview.HybridComputeSettingsPropertiesResponseArgs(
                auto_provision="On",
                proxy_server=azure_native.security.v20200101preview.ProxyServerPropertiesArgs(
                    ip="167.220.197.140",
                    port="34",
                ),
                region="West US 2",
                resource_group_name="AwsConnectorRG",
                service_principal=azure_native.security.v20200101preview.ServicePrincipalPropertiesArgs(
                    application_id="ad9bcd79-be9c-45ab-abd8-80ca1654a7d1",
                    secret="<secret>",
                ),
            ))

        ```
        ### gcpCredentials - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        connector = azure_native.security.v20200101preview.Connector("connector",
            authentication_details=azure_native.security.v20200101preview.GcpCredentialsDetailsPropertiesArgs(
                auth_provider_x509_cert_url="https://www.googleapis.com/oauth2/v1/certs",
                auth_uri="https://accounts.google.com/o/oauth2/auth",
                authentication_type="gcpCredentials",
                client_email="asc-135@asc-project-1234.iam.gserviceaccount.com",
                client_id="105889053725632919854",
                client_x509_cert_url="https://www.googleapis.com/robot/v1/metadata/x509/asc-135%40asc-project-1234.iam.gserviceaccount.com",
                organization_id="AscDemoOrg",
                private_key="******",
                private_key_id="6efg587hra2568as34d22326b044cc20dc2af",
                project_id="asc-project-1234",
                token_uri="https://oauth2.googleapis.com/token",
                type="service_account",
            ),
            connector_name="gcp_dev",
            hybrid_compute_settings=azure_native.security.v20200101preview.HybridComputeSettingsPropertiesResponseArgs(
                auto_provision="Off",
            ))

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:security/v20200101preview:Connector gcp_dev /subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/gcp_dev 
        ```

        :param str resource_name: The name of the resource.
        :param ConnectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_details: Optional[pulumi.Input[Union[pulumi.InputType['AwAssumeRoleAuthenticationDetailsPropertiesArgs'], pulumi.InputType['AwsCredsAuthenticationDetailsPropertiesArgs'], pulumi.InputType['GcpCredentialsDetailsPropertiesArgs']]]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 hybrid_compute_settings: Optional[pulumi.Input[pulumi.InputType['HybridComputeSettingsPropertiesArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorArgs.__new__(ConnectorArgs)

            __props__.__dict__["authentication_details"] = authentication_details
            __props__.__dict__["connector_name"] = connector_name
            __props__.__dict__["hybrid_compute_settings"] = hybrid_compute_settings
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        super(Connector, __self__).__init__(
            'azure-native:security/v20200101preview:Connector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Connector':
        """
        Get an existing Connector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ConnectorArgs.__new__(ConnectorArgs)

        __props__.__dict__["authentication_details"] = None
        __props__.__dict__["hybrid_compute_settings"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["type"] = None
        return Connector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationDetails")
    def authentication_details(self) -> pulumi.Output[Optional[Any]]:
        """
        Settings for authentication management, these settings are relevant only for the cloud connector.
        """
        return pulumi.get(self, "authentication_details")

    @property
    @pulumi.getter(name="hybridComputeSettings")
    def hybrid_compute_settings(self) -> pulumi.Output[Optional['outputs.HybridComputeSettingsPropertiesResponse']]:
        """
        Settings for hybrid compute management. These settings are relevant only for Arc autoProvision (Hybrid Compute).
        """
        return pulumi.get(self, "hybrid_compute_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

