# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AdditionalConfigurationResponse',
    'AddressDetailsResponse',
    'AddressPropertiesResponse',
    'AvailabilityInformationResponse',
    'BillingMeterDetailsResponse',
    'CategoryInformationResponse',
    'ChildConfigurationResponse',
    'ConfigurationDeviceDetailsResponse',
    'ConfigurationResponse',
    'ContactDetailsResponse',
    'CostInformationResponse',
    'DescriptionResponse',
    'DeviceDetailsResponse',
    'DimensionsResponse',
    'DisplayInfoResponse',
    'EncryptionPreferencesResponse',
    'ErrorAdditionalInfoResponse',
    'ErrorDetailResponse',
    'FilterablePropertyResponse',
    'ForwardShippingDetailsResponse',
    'GroupedChildConfigurationsResponse',
    'HierarchyInformationResponse',
    'ImageInformationResponse',
    'LinkResponse',
    'ManagementResourcePreferencesResponse',
    'NotificationPreferenceResponse',
    'OrderItemDetailsResponse',
    'Pav2MeterDetailsResponse',
    'PreferencesResponse',
    'ProductDetailsResponse',
    'ProductFamilyResponse',
    'ProductLineResponse',
    'ProductResponse',
    'PurchaseMeterDetailsResponse',
    'ResourceProviderDetailsResponse',
    'ReverseShippingDetailsResponse',
    'ShippingAddressResponse',
    'SpecificationResponse',
    'StageDetailsResponse',
    'SystemDataResponse',
    'TransportPreferencesResponse',
]

@pulumi.output_type
class AdditionalConfigurationResponse(dict):
    """
    Additional Configuration details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hierarchyInformation":
            suggest = "hierarchy_information"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdditionalConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdditionalConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdditionalConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 quantity: int):
        """
        Additional Configuration details.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy of the product which uniquely identifies the configuration.
        :param int quantity: Quantity of the product.
        """
        AdditionalConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hierarchy_information=hierarchy_information,
            quantity=quantity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             quantity: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if quantity is None:
            raise TypeError("Missing 'quantity' argument")

        _setter("hierarchy_information", hierarchy_information)
        _setter("quantity", quantity)

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy of the product which uniquely identifies the configuration.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter
    def quantity(self) -> int:
        """
        Quantity of the product.
        """
        return pulumi.get(self, "quantity")


@pulumi.output_type
class AddressDetailsResponse(dict):
    """
    Address details for an order item.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardAddress":
            suggest = "forward_address"
        elif key == "returnAddress":
            suggest = "return_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forward_address: 'outputs.AddressPropertiesResponse',
                 return_address: 'outputs.AddressPropertiesResponse'):
        """
        Address details for an order item.
        :param 'AddressPropertiesResponse' forward_address: Customer address and contact details. It should be address resource
        :param 'AddressPropertiesResponse' return_address: Return shipping address
        """
        AddressDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward_address=forward_address,
            return_address=return_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward_address: Optional['outputs.AddressPropertiesResponse'] = None,
             return_address: Optional['outputs.AddressPropertiesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if forward_address is None and 'forwardAddress' in kwargs:
            forward_address = kwargs['forwardAddress']
        if forward_address is None:
            raise TypeError("Missing 'forward_address' argument")
        if return_address is None and 'returnAddress' in kwargs:
            return_address = kwargs['returnAddress']
        if return_address is None:
            raise TypeError("Missing 'return_address' argument")

        _setter("forward_address", forward_address)
        _setter("return_address", return_address)

    @property
    @pulumi.getter(name="forwardAddress")
    def forward_address(self) -> 'outputs.AddressPropertiesResponse':
        """
        Customer address and contact details. It should be address resource
        """
        return pulumi.get(self, "forward_address")

    @property
    @pulumi.getter(name="returnAddress")
    def return_address(self) -> 'outputs.AddressPropertiesResponse':
        """
        Return shipping address
        """
        return pulumi.get(self, "return_address")


@pulumi.output_type
class AddressPropertiesResponse(dict):
    """
    Address Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressValidationStatus":
            suggest = "address_validation_status"
        elif key == "contactDetails":
            suggest = "contact_details"
        elif key == "shippingAddress":
            suggest = "shipping_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddressPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddressPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddressPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_validation_status: str,
                 contact_details: 'outputs.ContactDetailsResponse',
                 shipping_address: Optional['outputs.ShippingAddressResponse'] = None):
        """
        Address Properties
        :param str address_validation_status: Status of address validation
        :param 'ContactDetailsResponse' contact_details: Contact details for the address
        :param 'ShippingAddressResponse' shipping_address: Shipping details for the address
        """
        AddressPropertiesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_validation_status=address_validation_status,
            contact_details=contact_details,
            shipping_address=shipping_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_validation_status: Optional[str] = None,
             contact_details: Optional['outputs.ContactDetailsResponse'] = None,
             shipping_address: Optional['outputs.ShippingAddressResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if address_validation_status is None and 'addressValidationStatus' in kwargs:
            address_validation_status = kwargs['addressValidationStatus']
        if address_validation_status is None:
            raise TypeError("Missing 'address_validation_status' argument")
        if contact_details is None and 'contactDetails' in kwargs:
            contact_details = kwargs['contactDetails']
        if contact_details is None:
            raise TypeError("Missing 'contact_details' argument")
        if shipping_address is None and 'shippingAddress' in kwargs:
            shipping_address = kwargs['shippingAddress']

        _setter("address_validation_status", address_validation_status)
        _setter("contact_details", contact_details)
        if shipping_address is not None:
            _setter("shipping_address", shipping_address)

    @property
    @pulumi.getter(name="addressValidationStatus")
    def address_validation_status(self) -> str:
        """
        Status of address validation
        """
        return pulumi.get(self, "address_validation_status")

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> 'outputs.ContactDetailsResponse':
        """
        Contact details for the address
        """
        return pulumi.get(self, "contact_details")

    @property
    @pulumi.getter(name="shippingAddress")
    def shipping_address(self) -> Optional['outputs.ShippingAddressResponse']:
        """
        Shipping details for the address
        """
        return pulumi.get(self, "shipping_address")


@pulumi.output_type
class AvailabilityInformationResponse(dict):
    """
    Availability information of a product system.
    """
    def __init__(__self__, *,
                 availability_stage: str,
                 disabled_reason: str,
                 disabled_reason_message: str):
        """
        Availability information of a product system.
        :param str availability_stage: Current availability stage of the product.
        :param str disabled_reason: Reason why the product is disabled.
        :param str disabled_reason_message: Message for why the product is disabled.
        """
        AvailabilityInformationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_stage=availability_stage,
            disabled_reason=disabled_reason,
            disabled_reason_message=disabled_reason_message,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_stage: Optional[str] = None,
             disabled_reason: Optional[str] = None,
             disabled_reason_message: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_stage is None and 'availabilityStage' in kwargs:
            availability_stage = kwargs['availabilityStage']
        if availability_stage is None:
            raise TypeError("Missing 'availability_stage' argument")
        if disabled_reason is None and 'disabledReason' in kwargs:
            disabled_reason = kwargs['disabledReason']
        if disabled_reason is None:
            raise TypeError("Missing 'disabled_reason' argument")
        if disabled_reason_message is None and 'disabledReasonMessage' in kwargs:
            disabled_reason_message = kwargs['disabledReasonMessage']
        if disabled_reason_message is None:
            raise TypeError("Missing 'disabled_reason_message' argument")

        _setter("availability_stage", availability_stage)
        _setter("disabled_reason", disabled_reason)
        _setter("disabled_reason_message", disabled_reason_message)

    @property
    @pulumi.getter(name="availabilityStage")
    def availability_stage(self) -> str:
        """
        Current availability stage of the product.
        """
        return pulumi.get(self, "availability_stage")

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> str:
        """
        Reason why the product is disabled.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter(name="disabledReasonMessage")
    def disabled_reason_message(self) -> str:
        """
        Message for why the product is disabled.
        """
        return pulumi.get(self, "disabled_reason_message")


@pulumi.output_type
class BillingMeterDetailsResponse(dict):
    """
    Holds billing meter details for each type of billing.
    """
    def __init__(__self__, *,
                 frequency: str,
                 meter_details: Any,
                 metering_type: str,
                 name: str):
        """
        Holds billing meter details for each type of billing.
        :param str frequency: Frequency of recurrence.
        :param Union['Pav2MeterDetailsResponse', 'PurchaseMeterDetailsResponse'] meter_details: Represents MeterDetails.
        :param str metering_type: Represents Metering type (eg one-time or recurrent).
        :param str name: Represents Billing type name.
        """
        BillingMeterDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frequency=frequency,
            meter_details=meter_details,
            metering_type=metering_type,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frequency: Optional[str] = None,
             meter_details: Optional[Any] = None,
             metering_type: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if frequency is None:
            raise TypeError("Missing 'frequency' argument")
        if meter_details is None and 'meterDetails' in kwargs:
            meter_details = kwargs['meterDetails']
        if meter_details is None:
            raise TypeError("Missing 'meter_details' argument")
        if metering_type is None and 'meteringType' in kwargs:
            metering_type = kwargs['meteringType']
        if metering_type is None:
            raise TypeError("Missing 'metering_type' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("frequency", frequency)
        _setter("meter_details", meter_details)
        _setter("metering_type", metering_type)
        _setter("name", name)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        Frequency of recurrence.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="meterDetails")
    def meter_details(self) -> Any:
        """
        Represents MeterDetails.
        """
        return pulumi.get(self, "meter_details")

    @property
    @pulumi.getter(name="meteringType")
    def metering_type(self) -> str:
        """
        Represents Metering type (eg one-time or recurrent).
        """
        return pulumi.get(self, "metering_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Represents Billing type name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CategoryInformationResponse(dict):
    """
    Category related properties of a child configuration.
    """
    def __init__(__self__, *,
                 category_display_name: Optional[str] = None,
                 category_name: Optional[str] = None,
                 description: Optional[str] = None,
                 links: Optional[Sequence['outputs.LinkResponse']] = None):
        """
        Category related properties of a child configuration.
        :param str category_display_name: Category display name of the child configuration.
        :param str category_name: Category name of the child configuration.
        :param str description: Description text for the category.
        :param Sequence['LinkResponse'] links: Links for the category.
        """
        CategoryInformationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_display_name=category_display_name,
            category_name=category_name,
            description=description,
            links=links,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_display_name: Optional[str] = None,
             category_name: Optional[str] = None,
             description: Optional[str] = None,
             links: Optional[Sequence['outputs.LinkResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category_display_name is None and 'categoryDisplayName' in kwargs:
            category_display_name = kwargs['categoryDisplayName']
        if category_name is None and 'categoryName' in kwargs:
            category_name = kwargs['categoryName']

        if category_display_name is not None:
            _setter("category_display_name", category_display_name)
        if category_name is not None:
            _setter("category_name", category_name)
        if description is not None:
            _setter("description", description)
        if links is not None:
            _setter("links", links)

    @property
    @pulumi.getter(name="categoryDisplayName")
    def category_display_name(self) -> Optional[str]:
        """
        Category display name of the child configuration.
        """
        return pulumi.get(self, "category_display_name")

    @property
    @pulumi.getter(name="categoryName")
    def category_name(self) -> Optional[str]:
        """
        Category name of the child configuration.
        """
        return pulumi.get(self, "category_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description text for the category.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.LinkResponse']]:
        """
        Links for the category.
        """
        return pulumi.get(self, "links")


@pulumi.output_type
class ChildConfigurationResponse(dict):
    """
    Child configuration object.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 child_configuration_type: str,
                 child_configuration_types: Sequence[str],
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 dimensions: 'outputs.DimensionsResponse',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: str,
                 grouped_child_configurations: Sequence['outputs.GroupedChildConfigurationsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 is_part_of_base_configuration: bool,
                 maximum_quantity: int,
                 minimum_quantity: int,
                 specifications: Sequence['outputs.SpecificationResponse']):
        """
        Child configuration object.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param str child_configuration_type: Child configuration type.
        :param Sequence[str] child_configuration_types: Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param 'DimensionsResponse' dimensions: Dimensions of the configuration.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param Sequence['GroupedChildConfigurationsResponse'] grouped_child_configurations: Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param bool is_part_of_base_configuration: Flag to indicate if the child configuration is part of the base configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default.
        :param int maximum_quantity: Maximum quantity a customer can order while choosing this configuration.
        :param int minimum_quantity: Minimum quantity a customer can order while choosing this configuration.
        :param Sequence['SpecificationResponse'] specifications: Specifications of the configuration.
        """
        ChildConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_information=availability_information,
            child_configuration_type=child_configuration_type,
            child_configuration_types=child_configuration_types,
            cost_information=cost_information,
            description=description,
            dimensions=dimensions,
            display_name=display_name,
            filterable_properties=filterable_properties,
            fulfilled_by=fulfilled_by,
            grouped_child_configurations=grouped_child_configurations,
            hierarchy_information=hierarchy_information,
            image_information=image_information,
            is_part_of_base_configuration=is_part_of_base_configuration,
            maximum_quantity=maximum_quantity,
            minimum_quantity=minimum_quantity,
            specifications=specifications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_information: Optional['outputs.AvailabilityInformationResponse'] = None,
             child_configuration_type: Optional[str] = None,
             child_configuration_types: Optional[Sequence[str]] = None,
             cost_information: Optional['outputs.CostInformationResponse'] = None,
             description: Optional['outputs.DescriptionResponse'] = None,
             dimensions: Optional['outputs.DimensionsResponse'] = None,
             display_name: Optional[str] = None,
             filterable_properties: Optional[Sequence['outputs.FilterablePropertyResponse']] = None,
             fulfilled_by: Optional[str] = None,
             grouped_child_configurations: Optional[Sequence['outputs.GroupedChildConfigurationsResponse']] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             image_information: Optional[Sequence['outputs.ImageInformationResponse']] = None,
             is_part_of_base_configuration: Optional[bool] = None,
             maximum_quantity: Optional[int] = None,
             minimum_quantity: Optional[int] = None,
             specifications: Optional[Sequence['outputs.SpecificationResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_information is None and 'availabilityInformation' in kwargs:
            availability_information = kwargs['availabilityInformation']
        if availability_information is None:
            raise TypeError("Missing 'availability_information' argument")
        if child_configuration_type is None and 'childConfigurationType' in kwargs:
            child_configuration_type = kwargs['childConfigurationType']
        if child_configuration_type is None:
            raise TypeError("Missing 'child_configuration_type' argument")
        if child_configuration_types is None and 'childConfigurationTypes' in kwargs:
            child_configuration_types = kwargs['childConfigurationTypes']
        if child_configuration_types is None:
            raise TypeError("Missing 'child_configuration_types' argument")
        if cost_information is None and 'costInformation' in kwargs:
            cost_information = kwargs['costInformation']
        if cost_information is None:
            raise TypeError("Missing 'cost_information' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if dimensions is None:
            raise TypeError("Missing 'dimensions' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if filterable_properties is None and 'filterableProperties' in kwargs:
            filterable_properties = kwargs['filterableProperties']
        if filterable_properties is None:
            raise TypeError("Missing 'filterable_properties' argument")
        if fulfilled_by is None and 'fulfilledBy' in kwargs:
            fulfilled_by = kwargs['fulfilledBy']
        if fulfilled_by is None:
            raise TypeError("Missing 'fulfilled_by' argument")
        if grouped_child_configurations is None and 'groupedChildConfigurations' in kwargs:
            grouped_child_configurations = kwargs['groupedChildConfigurations']
        if grouped_child_configurations is None:
            raise TypeError("Missing 'grouped_child_configurations' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if image_information is None and 'imageInformation' in kwargs:
            image_information = kwargs['imageInformation']
        if image_information is None:
            raise TypeError("Missing 'image_information' argument")
        if is_part_of_base_configuration is None and 'isPartOfBaseConfiguration' in kwargs:
            is_part_of_base_configuration = kwargs['isPartOfBaseConfiguration']
        if is_part_of_base_configuration is None:
            raise TypeError("Missing 'is_part_of_base_configuration' argument")
        if maximum_quantity is None and 'maximumQuantity' in kwargs:
            maximum_quantity = kwargs['maximumQuantity']
        if maximum_quantity is None:
            raise TypeError("Missing 'maximum_quantity' argument")
        if minimum_quantity is None and 'minimumQuantity' in kwargs:
            minimum_quantity = kwargs['minimumQuantity']
        if minimum_quantity is None:
            raise TypeError("Missing 'minimum_quantity' argument")
        if specifications is None:
            raise TypeError("Missing 'specifications' argument")

        _setter("availability_information", availability_information)
        _setter("child_configuration_type", child_configuration_type)
        _setter("child_configuration_types", child_configuration_types)
        _setter("cost_information", cost_information)
        _setter("description", description)
        _setter("dimensions", dimensions)
        _setter("display_name", display_name)
        _setter("filterable_properties", filterable_properties)
        _setter("fulfilled_by", fulfilled_by)
        _setter("grouped_child_configurations", grouped_child_configurations)
        _setter("hierarchy_information", hierarchy_information)
        _setter("image_information", image_information)
        _setter("is_part_of_base_configuration", is_part_of_base_configuration)
        _setter("maximum_quantity", maximum_quantity)
        _setter("minimum_quantity", minimum_quantity)
        _setter("specifications", specifications)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="childConfigurationType")
    def child_configuration_type(self) -> str:
        """
        Child configuration type.
        """
        return pulumi.get(self, "child_configuration_type")

    @property
    @pulumi.getter(name="childConfigurationTypes")
    def child_configuration_types(self) -> Sequence[str]:
        """
        Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        """
        return pulumi.get(self, "child_configuration_types")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dimensions(self) -> 'outputs.DimensionsResponse':
        """
        Dimensions of the configuration.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @property
    @pulumi.getter(name="groupedChildConfigurations")
    def grouped_child_configurations(self) -> Sequence['outputs.GroupedChildConfigurationsResponse']:
        """
        Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        """
        return pulumi.get(self, "grouped_child_configurations")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter(name="isPartOfBaseConfiguration")
    def is_part_of_base_configuration(self) -> bool:
        """
        Flag to indicate if the child configuration is part of the base configuration, which means the customer need not pass this configuration in OptInAdditionalConfigurations while placing an order, it will be shipped by default.
        """
        return pulumi.get(self, "is_part_of_base_configuration")

    @property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> int:
        """
        Maximum quantity a customer can order while choosing this configuration.
        """
        return pulumi.get(self, "maximum_quantity")

    @property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> int:
        """
        Minimum quantity a customer can order while choosing this configuration.
        """
        return pulumi.get(self, "minimum_quantity")

    @property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.SpecificationResponse']:
        """
        Specifications of the configuration.
        """
        return pulumi.get(self, "specifications")


@pulumi.output_type
class ConfigurationDeviceDetailsResponse(dict):
    """
    Device details for configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceDetails":
            suggest = "device_details"
        elif key == "hierarchyInformation":
            suggest = "hierarchy_information"
        elif key == "identificationType":
            suggest = "identification_type"
        elif key == "displayInfo":
            suggest = "display_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationDeviceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationDeviceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationDeviceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_details: Sequence['outputs.DeviceDetailsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 identification_type: str,
                 quantity: int,
                 display_info: Optional['outputs.DisplayInfoResponse'] = None):
        """
        Device details for configuration.
        :param Sequence['DeviceDetailsResponse'] device_details: List of device details.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy of the product which uniquely identifies the configuration.
        :param str identification_type: Identification type of the configuration.
        :param int quantity: Quantity of the product.
        :param 'DisplayInfoResponse' display_info: Display details of the product.
        """
        ConfigurationDeviceDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            device_details=device_details,
            hierarchy_information=hierarchy_information,
            identification_type=identification_type,
            quantity=quantity,
            display_info=display_info,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             device_details: Optional[Sequence['outputs.DeviceDetailsResponse']] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             identification_type: Optional[str] = None,
             quantity: Optional[int] = None,
             display_info: Optional['outputs.DisplayInfoResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if device_details is None and 'deviceDetails' in kwargs:
            device_details = kwargs['deviceDetails']
        if device_details is None:
            raise TypeError("Missing 'device_details' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if identification_type is None and 'identificationType' in kwargs:
            identification_type = kwargs['identificationType']
        if identification_type is None:
            raise TypeError("Missing 'identification_type' argument")
        if quantity is None:
            raise TypeError("Missing 'quantity' argument")
        if display_info is None and 'displayInfo' in kwargs:
            display_info = kwargs['displayInfo']

        _setter("device_details", device_details)
        _setter("hierarchy_information", hierarchy_information)
        _setter("identification_type", identification_type)
        _setter("quantity", quantity)
        if display_info is not None:
            _setter("display_info", display_info)

    @property
    @pulumi.getter(name="deviceDetails")
    def device_details(self) -> Sequence['outputs.DeviceDetailsResponse']:
        """
        List of device details.
        """
        return pulumi.get(self, "device_details")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy of the product which uniquely identifies the configuration.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="identificationType")
    def identification_type(self) -> str:
        """
        Identification type of the configuration.
        """
        return pulumi.get(self, "identification_type")

    @property
    @pulumi.getter
    def quantity(self) -> int:
        """
        Quantity of the product.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter(name="displayInfo")
    def display_info(self) -> Optional['outputs.DisplayInfoResponse']:
        """
        Display details of the product.
        """
        return pulumi.get(self, "display_info")


@pulumi.output_type
class ConfigurationResponse(dict):
    """
    Configuration object.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 child_configuration_types: Sequence[str],
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 dimensions: 'outputs.DimensionsResponse',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: str,
                 grouped_child_configurations: Sequence['outputs.GroupedChildConfigurationsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 specifications: Sequence['outputs.SpecificationResponse']):
        """
        Configuration object.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param Sequence[str] child_configuration_types: Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param 'DimensionsResponse' dimensions: Dimensions of the configuration.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param Sequence['GroupedChildConfigurationsResponse'] grouped_child_configurations: Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param Sequence['SpecificationResponse'] specifications: Specifications of the configuration.
        """
        ConfigurationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_information=availability_information,
            child_configuration_types=child_configuration_types,
            cost_information=cost_information,
            description=description,
            dimensions=dimensions,
            display_name=display_name,
            filterable_properties=filterable_properties,
            fulfilled_by=fulfilled_by,
            grouped_child_configurations=grouped_child_configurations,
            hierarchy_information=hierarchy_information,
            image_information=image_information,
            specifications=specifications,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_information: Optional['outputs.AvailabilityInformationResponse'] = None,
             child_configuration_types: Optional[Sequence[str]] = None,
             cost_information: Optional['outputs.CostInformationResponse'] = None,
             description: Optional['outputs.DescriptionResponse'] = None,
             dimensions: Optional['outputs.DimensionsResponse'] = None,
             display_name: Optional[str] = None,
             filterable_properties: Optional[Sequence['outputs.FilterablePropertyResponse']] = None,
             fulfilled_by: Optional[str] = None,
             grouped_child_configurations: Optional[Sequence['outputs.GroupedChildConfigurationsResponse']] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             image_information: Optional[Sequence['outputs.ImageInformationResponse']] = None,
             specifications: Optional[Sequence['outputs.SpecificationResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_information is None and 'availabilityInformation' in kwargs:
            availability_information = kwargs['availabilityInformation']
        if availability_information is None:
            raise TypeError("Missing 'availability_information' argument")
        if child_configuration_types is None and 'childConfigurationTypes' in kwargs:
            child_configuration_types = kwargs['childConfigurationTypes']
        if child_configuration_types is None:
            raise TypeError("Missing 'child_configuration_types' argument")
        if cost_information is None and 'costInformation' in kwargs:
            cost_information = kwargs['costInformation']
        if cost_information is None:
            raise TypeError("Missing 'cost_information' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if dimensions is None:
            raise TypeError("Missing 'dimensions' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if filterable_properties is None and 'filterableProperties' in kwargs:
            filterable_properties = kwargs['filterableProperties']
        if filterable_properties is None:
            raise TypeError("Missing 'filterable_properties' argument")
        if fulfilled_by is None and 'fulfilledBy' in kwargs:
            fulfilled_by = kwargs['fulfilledBy']
        if fulfilled_by is None:
            raise TypeError("Missing 'fulfilled_by' argument")
        if grouped_child_configurations is None and 'groupedChildConfigurations' in kwargs:
            grouped_child_configurations = kwargs['groupedChildConfigurations']
        if grouped_child_configurations is None:
            raise TypeError("Missing 'grouped_child_configurations' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if image_information is None and 'imageInformation' in kwargs:
            image_information = kwargs['imageInformation']
        if image_information is None:
            raise TypeError("Missing 'image_information' argument")
        if specifications is None:
            raise TypeError("Missing 'specifications' argument")

        _setter("availability_information", availability_information)
        _setter("child_configuration_types", child_configuration_types)
        _setter("cost_information", cost_information)
        _setter("description", description)
        _setter("dimensions", dimensions)
        _setter("display_name", display_name)
        _setter("filterable_properties", filterable_properties)
        _setter("fulfilled_by", fulfilled_by)
        _setter("grouped_child_configurations", grouped_child_configurations)
        _setter("hierarchy_information", hierarchy_information)
        _setter("image_information", image_information)
        _setter("specifications", specifications)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="childConfigurationTypes")
    def child_configuration_types(self) -> Sequence[str]:
        """
        Different types of child configurations which exist for this configuration, these can be used to populate the child configuration filter.
        """
        return pulumi.get(self, "child_configuration_types")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dimensions(self) -> 'outputs.DimensionsResponse':
        """
        Dimensions of the configuration.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @property
    @pulumi.getter(name="groupedChildConfigurations")
    def grouped_child_configurations(self) -> Sequence['outputs.GroupedChildConfigurationsResponse']:
        """
        Child configurations present for the configuration after applying child configuration filter, grouped by the category name of the child configuration.
        """
        return pulumi.get(self, "grouped_child_configurations")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter
    def specifications(self) -> Sequence['outputs.SpecificationResponse']:
        """
        Specifications of the configuration.
        """
        return pulumi.get(self, "specifications")


@pulumi.output_type
class ContactDetailsResponse(dict):
    """
    Contact Details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactName":
            suggest = "contact_name"
        elif key == "emailList":
            suggest = "email_list"
        elif key == "phoneExtension":
            suggest = "phone_extension"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContactDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContactDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContactDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_name: str,
                 email_list: Sequence[str],
                 phone: str,
                 mobile: Optional[str] = None,
                 phone_extension: Optional[str] = None):
        """
        Contact Details.
        :param str contact_name: Contact name of the person.
        :param Sequence[str] email_list: List of Email-ids to be notified about job progress.
        :param str phone: Phone number of the contact person.
        :param str mobile: Mobile number of the contact person.
        :param str phone_extension: Phone extension number of the contact person.
        """
        ContactDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contact_name=contact_name,
            email_list=email_list,
            phone=phone,
            mobile=mobile,
            phone_extension=phone_extension,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contact_name: Optional[str] = None,
             email_list: Optional[Sequence[str]] = None,
             phone: Optional[str] = None,
             mobile: Optional[str] = None,
             phone_extension: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if contact_name is None and 'contactName' in kwargs:
            contact_name = kwargs['contactName']
        if contact_name is None:
            raise TypeError("Missing 'contact_name' argument")
        if email_list is None and 'emailList' in kwargs:
            email_list = kwargs['emailList']
        if email_list is None:
            raise TypeError("Missing 'email_list' argument")
        if phone is None:
            raise TypeError("Missing 'phone' argument")
        if phone_extension is None and 'phoneExtension' in kwargs:
            phone_extension = kwargs['phoneExtension']

        _setter("contact_name", contact_name)
        _setter("email_list", email_list)
        _setter("phone", phone)
        if mobile is not None:
            _setter("mobile", mobile)
        if phone_extension is not None:
            _setter("phone_extension", phone_extension)

    @property
    @pulumi.getter(name="contactName")
    def contact_name(self) -> str:
        """
        Contact name of the person.
        """
        return pulumi.get(self, "contact_name")

    @property
    @pulumi.getter(name="emailList")
    def email_list(self) -> Sequence[str]:
        """
        List of Email-ids to be notified about job progress.
        """
        return pulumi.get(self, "email_list")

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        Phone number of the contact person.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def mobile(self) -> Optional[str]:
        """
        Mobile number of the contact person.
        """
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter(name="phoneExtension")
    def phone_extension(self) -> Optional[str]:
        """
        Phone extension number of the contact person.
        """
        return pulumi.get(self, "phone_extension")


@pulumi.output_type
class CostInformationResponse(dict):
    """
    Cost information for the product system.
    """
    def __init__(__self__, *,
                 billing_info_url: str,
                 billing_meter_details: Sequence['outputs.BillingMeterDetailsResponse']):
        """
        Cost information for the product system.
        :param str billing_info_url: Default url to display billing information.
        :param Sequence['BillingMeterDetailsResponse'] billing_meter_details: Details on the various billing aspects for the product system.
        """
        CostInformationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_info_url=billing_info_url,
            billing_meter_details=billing_meter_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_info_url: Optional[str] = None,
             billing_meter_details: Optional[Sequence['outputs.BillingMeterDetailsResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if billing_info_url is None and 'billingInfoUrl' in kwargs:
            billing_info_url = kwargs['billingInfoUrl']
        if billing_info_url is None:
            raise TypeError("Missing 'billing_info_url' argument")
        if billing_meter_details is None and 'billingMeterDetails' in kwargs:
            billing_meter_details = kwargs['billingMeterDetails']
        if billing_meter_details is None:
            raise TypeError("Missing 'billing_meter_details' argument")

        _setter("billing_info_url", billing_info_url)
        _setter("billing_meter_details", billing_meter_details)

    @property
    @pulumi.getter(name="billingInfoUrl")
    def billing_info_url(self) -> str:
        """
        Default url to display billing information.
        """
        return pulumi.get(self, "billing_info_url")

    @property
    @pulumi.getter(name="billingMeterDetails")
    def billing_meter_details(self) -> Sequence['outputs.BillingMeterDetailsResponse']:
        """
        Details on the various billing aspects for the product system.
        """
        return pulumi.get(self, "billing_meter_details")


@pulumi.output_type
class DescriptionResponse(dict):
    """
    Description related properties of a product system.
    """
    def __init__(__self__, *,
                 attributes: Sequence[str],
                 description_type: str,
                 keywords: Sequence[str],
                 links: Sequence['outputs.LinkResponse'],
                 long_description: str,
                 short_description: str):
        """
        Description related properties of a product system.
        :param Sequence[str] attributes: Attributes for the product system.
        :param str description_type: Type of description.
        :param Sequence[str] keywords: Keywords for the product system.
        :param Sequence['LinkResponse'] links: Links for the product system.
        :param str long_description: Long description of the product system.
        :param str short_description: Short description of the product system.
        """
        DescriptionResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            description_type=description_type,
            keywords=keywords,
            links=links,
            long_description=long_description,
            short_description=short_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Sequence[str]] = None,
             description_type: Optional[str] = None,
             keywords: Optional[Sequence[str]] = None,
             links: Optional[Sequence['outputs.LinkResponse']] = None,
             long_description: Optional[str] = None,
             short_description: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attributes is None:
            raise TypeError("Missing 'attributes' argument")
        if description_type is None and 'descriptionType' in kwargs:
            description_type = kwargs['descriptionType']
        if description_type is None:
            raise TypeError("Missing 'description_type' argument")
        if keywords is None:
            raise TypeError("Missing 'keywords' argument")
        if links is None:
            raise TypeError("Missing 'links' argument")
        if long_description is None and 'longDescription' in kwargs:
            long_description = kwargs['longDescription']
        if long_description is None:
            raise TypeError("Missing 'long_description' argument")
        if short_description is None and 'shortDescription' in kwargs:
            short_description = kwargs['shortDescription']
        if short_description is None:
            raise TypeError("Missing 'short_description' argument")

        _setter("attributes", attributes)
        _setter("description_type", description_type)
        _setter("keywords", keywords)
        _setter("links", links)
        _setter("long_description", long_description)
        _setter("short_description", short_description)

    @property
    @pulumi.getter
    def attributes(self) -> Sequence[str]:
        """
        Attributes for the product system.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="descriptionType")
    def description_type(self) -> str:
        """
        Type of description.
        """
        return pulumi.get(self, "description_type")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[str]:
        """
        Keywords for the product system.
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.LinkResponse']:
        """
        Links for the product system.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> str:
        """
        Long description of the product system.
        """
        return pulumi.get(self, "long_description")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> str:
        """
        Short description of the product system.
        """
        return pulumi.get(self, "short_description")


@pulumi.output_type
class DeviceDetailsResponse(dict):
    """
    Device details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managementResourceId":
            suggest = "management_resource_id"
        elif key == "managementResourceTenantId":
            suggest = "management_resource_tenant_id"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 management_resource_id: str,
                 management_resource_tenant_id: str,
                 serial_number: str):
        """
        Device details.
        :param str management_resource_id: Management Resource Id
        :param str management_resource_tenant_id: Management Resource Tenant ID
        :param str serial_number: device serial number
        """
        DeviceDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            management_resource_id=management_resource_id,
            management_resource_tenant_id=management_resource_tenant_id,
            serial_number=serial_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             management_resource_id: Optional[str] = None,
             management_resource_tenant_id: Optional[str] = None,
             serial_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if management_resource_id is None and 'managementResourceId' in kwargs:
            management_resource_id = kwargs['managementResourceId']
        if management_resource_id is None:
            raise TypeError("Missing 'management_resource_id' argument")
        if management_resource_tenant_id is None and 'managementResourceTenantId' in kwargs:
            management_resource_tenant_id = kwargs['managementResourceTenantId']
        if management_resource_tenant_id is None:
            raise TypeError("Missing 'management_resource_tenant_id' argument")
        if serial_number is None and 'serialNumber' in kwargs:
            serial_number = kwargs['serialNumber']
        if serial_number is None:
            raise TypeError("Missing 'serial_number' argument")

        _setter("management_resource_id", management_resource_id)
        _setter("management_resource_tenant_id", management_resource_tenant_id)
        _setter("serial_number", serial_number)

    @property
    @pulumi.getter(name="managementResourceId")
    def management_resource_id(self) -> str:
        """
        Management Resource Id
        """
        return pulumi.get(self, "management_resource_id")

    @property
    @pulumi.getter(name="managementResourceTenantId")
    def management_resource_tenant_id(self) -> str:
        """
        Management Resource Tenant ID
        """
        return pulumi.get(self, "management_resource_tenant_id")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        device serial number
        """
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class DimensionsResponse(dict):
    """
    Dimensions of a configuration.
    """
    def __init__(__self__, *,
                 depth: float,
                 height: float,
                 length: float,
                 length_height_unit: str,
                 weight: float,
                 weight_unit: str,
                 width: float):
        """
        Dimensions of a configuration.
        :param float depth: Depth of the device.
        :param float height: Height of the device.
        :param float length: Length of the device.
        :param str length_height_unit: Unit for the dimensions of length, height and width.
        :param float weight: Weight of the device.
        :param str weight_unit: Unit for the dimensions of weight.
        :param float width: Width of the device.
        """
        DimensionsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            depth=depth,
            height=height,
            length=length,
            length_height_unit=length_height_unit,
            weight=weight,
            weight_unit=weight_unit,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             depth: Optional[float] = None,
             height: Optional[float] = None,
             length: Optional[float] = None,
             length_height_unit: Optional[str] = None,
             weight: Optional[float] = None,
             weight_unit: Optional[str] = None,
             width: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if depth is None:
            raise TypeError("Missing 'depth' argument")
        if height is None:
            raise TypeError("Missing 'height' argument")
        if length is None:
            raise TypeError("Missing 'length' argument")
        if length_height_unit is None and 'lengthHeightUnit' in kwargs:
            length_height_unit = kwargs['lengthHeightUnit']
        if length_height_unit is None:
            raise TypeError("Missing 'length_height_unit' argument")
        if weight is None:
            raise TypeError("Missing 'weight' argument")
        if weight_unit is None and 'weightUnit' in kwargs:
            weight_unit = kwargs['weightUnit']
        if weight_unit is None:
            raise TypeError("Missing 'weight_unit' argument")
        if width is None:
            raise TypeError("Missing 'width' argument")

        _setter("depth", depth)
        _setter("height", height)
        _setter("length", length)
        _setter("length_height_unit", length_height_unit)
        _setter("weight", weight)
        _setter("weight_unit", weight_unit)
        _setter("width", width)

    @property
    @pulumi.getter
    def depth(self) -> float:
        """
        Depth of the device.
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter
    def height(self) -> float:
        """
        Height of the device.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def length(self) -> float:
        """
        Length of the device.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="lengthHeightUnit")
    def length_height_unit(self) -> str:
        """
        Unit for the dimensions of length, height and width.
        """
        return pulumi.get(self, "length_height_unit")

    @property
    @pulumi.getter
    def weight(self) -> float:
        """
        Weight of the device.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> str:
        """
        Unit for the dimensions of weight.
        """
        return pulumi.get(self, "weight_unit")

    @property
    @pulumi.getter
    def width(self) -> float:
        """
        Width of the device.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class DisplayInfoResponse(dict):
    """
    Describes product display information
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationDisplayName":
            suggest = "configuration_display_name"
        elif key == "productFamilyDisplayName":
            suggest = "product_family_display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DisplayInfoResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DisplayInfoResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DisplayInfoResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_display_name: str,
                 product_family_display_name: str):
        """
        Describes product display information
        :param str configuration_display_name: Configuration display name
        :param str product_family_display_name: Product family display name
        """
        DisplayInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_display_name=configuration_display_name,
            product_family_display_name=product_family_display_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_display_name: Optional[str] = None,
             product_family_display_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if configuration_display_name is None and 'configurationDisplayName' in kwargs:
            configuration_display_name = kwargs['configurationDisplayName']
        if configuration_display_name is None:
            raise TypeError("Missing 'configuration_display_name' argument")
        if product_family_display_name is None and 'productFamilyDisplayName' in kwargs:
            product_family_display_name = kwargs['productFamilyDisplayName']
        if product_family_display_name is None:
            raise TypeError("Missing 'product_family_display_name' argument")

        _setter("configuration_display_name", configuration_display_name)
        _setter("product_family_display_name", product_family_display_name)

    @property
    @pulumi.getter(name="configurationDisplayName")
    def configuration_display_name(self) -> str:
        """
        Configuration display name
        """
        return pulumi.get(self, "configuration_display_name")

    @property
    @pulumi.getter(name="productFamilyDisplayName")
    def product_family_display_name(self) -> str:
        """
        Product family display name
        """
        return pulumi.get(self, "product_family_display_name")


@pulumi.output_type
class EncryptionPreferencesResponse(dict):
    """
    Preferences related to the double encryption
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "doubleEncryptionStatus":
            suggest = "double_encryption_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 double_encryption_status: Optional[str] = None):
        """
        Preferences related to the double encryption
        :param str double_encryption_status: Double encryption status as entered by the customer. It is compulsory to give this parameter if the 'Deny' or 'Disabled' policy is configured.
        """
        EncryptionPreferencesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            double_encryption_status=double_encryption_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             double_encryption_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if double_encryption_status is None and 'doubleEncryptionStatus' in kwargs:
            double_encryption_status = kwargs['doubleEncryptionStatus']

        if double_encryption_status is not None:
            _setter("double_encryption_status", double_encryption_status)

    @property
    @pulumi.getter(name="doubleEncryptionStatus")
    def double_encryption_status(self) -> Optional[str]:
        """
        Double encryption status as entered by the customer. It is compulsory to give this parameter if the 'Deny' or 'Disabled' policy is configured.
        """
        return pulumi.get(self, "double_encryption_status")


@pulumi.output_type
class ErrorAdditionalInfoResponse(dict):
    """
    The resource management error additional info.
    """
    def __init__(__self__, *,
                 info: Any,
                 type: str):
        """
        The resource management error additional info.
        :param Any info: The additional info.
        :param str type: The additional info type.
        """
        ErrorAdditionalInfoResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info=info,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info: Optional[Any] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if info is None:
            raise TypeError("Missing 'info' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("info", info)
        _setter("type", type)

    @property
    @pulumi.getter
    def info(self) -> Any:
        """
        The additional info.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The additional info type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ErrorDetailResponse(dict):
    """
    The error detail.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInfo":
            suggest = "additional_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ErrorDetailResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ErrorDetailResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_info: Sequence['outputs.ErrorAdditionalInfoResponse'],
                 code: str,
                 details: Sequence['outputs.ErrorDetailResponse'],
                 message: str,
                 target: str):
        """
        The error detail.
        :param Sequence['ErrorAdditionalInfoResponse'] additional_info: The error additional info.
        :param str code: The error code.
        :param Sequence['ErrorDetailResponse'] details: The error details.
        :param str message: The error message.
        :param str target: The error target.
        """
        ErrorDetailResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_info=additional_info,
            code=code,
            details=details,
            message=message,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_info: Optional[Sequence['outputs.ErrorAdditionalInfoResponse']] = None,
             code: Optional[str] = None,
             details: Optional[Sequence['outputs.ErrorDetailResponse']] = None,
             message: Optional[str] = None,
             target: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if additional_info is None and 'additionalInfo' in kwargs:
            additional_info = kwargs['additionalInfo']
        if additional_info is None:
            raise TypeError("Missing 'additional_info' argument")
        if code is None:
            raise TypeError("Missing 'code' argument")
        if details is None:
            raise TypeError("Missing 'details' argument")
        if message is None:
            raise TypeError("Missing 'message' argument")
        if target is None:
            raise TypeError("Missing 'target' argument")

        _setter("additional_info", additional_info)
        _setter("code", code)
        _setter("details", details)
        _setter("message", message)
        _setter("target", target)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Sequence['outputs.ErrorAdditionalInfoResponse']:
        """
        The error additional info.
        """
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.ErrorDetailResponse']:
        """
        The error details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The error target.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class FilterablePropertyResponse(dict):
    """
    Different types of filters supported and its values.
    """
    def __init__(__self__, *,
                 supported_values: Sequence[str],
                 type: str):
        """
        Different types of filters supported and its values.
        :param Sequence[str] supported_values: Values to be filtered.
        :param str type: Type of product filter.
        """
        FilterablePropertyResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            supported_values=supported_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             supported_values: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if supported_values is None and 'supportedValues' in kwargs:
            supported_values = kwargs['supportedValues']
        if supported_values is None:
            raise TypeError("Missing 'supported_values' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("supported_values", supported_values)
        _setter("type", type)

    @property
    @pulumi.getter(name="supportedValues")
    def supported_values(self) -> Sequence[str]:
        """
        Values to be filtered.
        """
        return pulumi.get(self, "supported_values")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of product filter.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ForwardShippingDetailsResponse(dict):
    """
    Forward shipment details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "carrierDisplayName":
            suggest = "carrier_display_name"
        elif key == "carrierName":
            suggest = "carrier_name"
        elif key == "trackingId":
            suggest = "tracking_id"
        elif key == "trackingUrl":
            suggest = "tracking_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardShippingDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardShippingDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardShippingDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 carrier_display_name: str,
                 carrier_name: str,
                 tracking_id: str,
                 tracking_url: str):
        """
        Forward shipment details.
        :param str carrier_display_name: Carrier Name for display purpose. Not to be used for any processing.
        :param str carrier_name: Name of the carrier.
        :param str tracking_id: TrackingId of the package
        :param str tracking_url: TrackingUrl of the package.
        """
        ForwardShippingDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            carrier_display_name=carrier_display_name,
            carrier_name=carrier_name,
            tracking_id=tracking_id,
            tracking_url=tracking_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             carrier_display_name: Optional[str] = None,
             carrier_name: Optional[str] = None,
             tracking_id: Optional[str] = None,
             tracking_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if carrier_display_name is None and 'carrierDisplayName' in kwargs:
            carrier_display_name = kwargs['carrierDisplayName']
        if carrier_display_name is None:
            raise TypeError("Missing 'carrier_display_name' argument")
        if carrier_name is None and 'carrierName' in kwargs:
            carrier_name = kwargs['carrierName']
        if carrier_name is None:
            raise TypeError("Missing 'carrier_name' argument")
        if tracking_id is None and 'trackingId' in kwargs:
            tracking_id = kwargs['trackingId']
        if tracking_id is None:
            raise TypeError("Missing 'tracking_id' argument")
        if tracking_url is None and 'trackingUrl' in kwargs:
            tracking_url = kwargs['trackingUrl']
        if tracking_url is None:
            raise TypeError("Missing 'tracking_url' argument")

        _setter("carrier_display_name", carrier_display_name)
        _setter("carrier_name", carrier_name)
        _setter("tracking_id", tracking_id)
        _setter("tracking_url", tracking_url)

    @property
    @pulumi.getter(name="carrierDisplayName")
    def carrier_display_name(self) -> str:
        """
        Carrier Name for display purpose. Not to be used for any processing.
        """
        return pulumi.get(self, "carrier_display_name")

    @property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> str:
        """
        Name of the carrier.
        """
        return pulumi.get(self, "carrier_name")

    @property
    @pulumi.getter(name="trackingId")
    def tracking_id(self) -> str:
        """
        TrackingId of the package
        """
        return pulumi.get(self, "tracking_id")

    @property
    @pulumi.getter(name="trackingUrl")
    def tracking_url(self) -> str:
        """
        TrackingUrl of the package.
        """
        return pulumi.get(self, "tracking_url")


@pulumi.output_type
class GroupedChildConfigurationsResponse(dict):
    """
    Grouped child configuration object.
    """
    def __init__(__self__, *,
                 category_information: 'outputs.CategoryInformationResponse',
                 child_configurations: Sequence['outputs.ChildConfigurationResponse']):
        """
        Grouped child configuration object.
        :param 'CategoryInformationResponse' category_information: Category information.
        :param Sequence['ChildConfigurationResponse'] child_configurations: List of child configurations.
        """
        GroupedChildConfigurationsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_information=category_information,
            child_configurations=child_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_information: Optional['outputs.CategoryInformationResponse'] = None,
             child_configurations: Optional[Sequence['outputs.ChildConfigurationResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category_information is None and 'categoryInformation' in kwargs:
            category_information = kwargs['categoryInformation']
        if category_information is None:
            raise TypeError("Missing 'category_information' argument")
        if child_configurations is None and 'childConfigurations' in kwargs:
            child_configurations = kwargs['childConfigurations']
        if child_configurations is None:
            raise TypeError("Missing 'child_configurations' argument")

        _setter("category_information", category_information)
        _setter("child_configurations", child_configurations)

    @property
    @pulumi.getter(name="categoryInformation")
    def category_information(self) -> 'outputs.CategoryInformationResponse':
        """
        Category information.
        """
        return pulumi.get(self, "category_information")

    @property
    @pulumi.getter(name="childConfigurations")
    def child_configurations(self) -> Sequence['outputs.ChildConfigurationResponse']:
        """
        List of child configurations.
        """
        return pulumi.get(self, "child_configurations")


@pulumi.output_type
class HierarchyInformationResponse(dict):
    """
    Holds details about product hierarchy information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationName":
            suggest = "configuration_name"
        elif key == "productFamilyName":
            suggest = "product_family_name"
        elif key == "productLineName":
            suggest = "product_line_name"
        elif key == "productName":
            suggest = "product_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyInformationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyInformationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyInformationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_name: Optional[str] = None,
                 product_family_name: Optional[str] = None,
                 product_line_name: Optional[str] = None,
                 product_name: Optional[str] = None):
        """
        Holds details about product hierarchy information.
        :param str configuration_name: Represents configuration name that uniquely identifies configuration.
        :param str product_family_name: Represents product family name that uniquely identifies product family.
        :param str product_line_name: Represents product line name that uniquely identifies product line.
        :param str product_name: Represents product name that uniquely identifies product.
        """
        HierarchyInformationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_name=configuration_name,
            product_family_name=product_family_name,
            product_line_name=product_line_name,
            product_name=product_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_name: Optional[str] = None,
             product_family_name: Optional[str] = None,
             product_line_name: Optional[str] = None,
             product_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if configuration_name is None and 'configurationName' in kwargs:
            configuration_name = kwargs['configurationName']
        if product_family_name is None and 'productFamilyName' in kwargs:
            product_family_name = kwargs['productFamilyName']
        if product_line_name is None and 'productLineName' in kwargs:
            product_line_name = kwargs['productLineName']
        if product_name is None and 'productName' in kwargs:
            product_name = kwargs['productName']

        if configuration_name is not None:
            _setter("configuration_name", configuration_name)
        if product_family_name is not None:
            _setter("product_family_name", product_family_name)
        if product_line_name is not None:
            _setter("product_line_name", product_line_name)
        if product_name is not None:
            _setter("product_name", product_name)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[str]:
        """
        Represents configuration name that uniquely identifies configuration.
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="productFamilyName")
    def product_family_name(self) -> Optional[str]:
        """
        Represents product family name that uniquely identifies product family.
        """
        return pulumi.get(self, "product_family_name")

    @property
    @pulumi.getter(name="productLineName")
    def product_line_name(self) -> Optional[str]:
        """
        Represents product line name that uniquely identifies product line.
        """
        return pulumi.get(self, "product_line_name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        Represents product name that uniquely identifies product.
        """
        return pulumi.get(self, "product_name")


@pulumi.output_type
class ImageInformationResponse(dict):
    """
    Image for the product.
    """
    def __init__(__self__, *,
                 image_type: str,
                 image_url: str):
        """
        Image for the product.
        :param str image_type: Type of the image.
        :param str image_url: Url of the image.
        """
        ImageInformationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_type=image_type,
            image_url=image_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_type: Optional[str] = None,
             image_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if image_type is None and 'imageType' in kwargs:
            image_type = kwargs['imageType']
        if image_type is None:
            raise TypeError("Missing 'image_type' argument")
        if image_url is None and 'imageUrl' in kwargs:
            image_url = kwargs['imageUrl']
        if image_url is None:
            raise TypeError("Missing 'image_url' argument")

        _setter("image_type", image_type)
        _setter("image_url", image_url)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        """
        Type of the image.
        """
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        """
        Url of the image.
        """
        return pulumi.get(self, "image_url")


@pulumi.output_type
class LinkResponse(dict):
    """
    Returns link related to the product.
    """
    def __init__(__self__, *,
                 link_type: str,
                 link_url: str):
        """
        Returns link related to the product.
        :param str link_type: Type of link.
        :param str link_url: Url of the link.
        """
        LinkResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            link_type=link_type,
            link_url=link_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             link_type: Optional[str] = None,
             link_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if link_type is None and 'linkType' in kwargs:
            link_type = kwargs['linkType']
        if link_type is None:
            raise TypeError("Missing 'link_type' argument")
        if link_url is None and 'linkUrl' in kwargs:
            link_url = kwargs['linkUrl']
        if link_url is None:
            raise TypeError("Missing 'link_url' argument")

        _setter("link_type", link_type)
        _setter("link_url", link_url)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> str:
        """
        Type of link.
        """
        return pulumi.get(self, "link_type")

    @property
    @pulumi.getter(name="linkUrl")
    def link_url(self) -> str:
        """
        Url of the link.
        """
        return pulumi.get(self, "link_url")


@pulumi.output_type
class ManagementResourcePreferencesResponse(dict):
    """
    Management resource preference to link device
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredManagementResourceId":
            suggest = "preferred_management_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementResourcePreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementResourcePreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementResourcePreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_management_resource_id: Optional[str] = None):
        """
        Management resource preference to link device
        :param str preferred_management_resource_id: Customer preferred Management resource ARM ID
        """
        ManagementResourcePreferencesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            preferred_management_resource_id=preferred_management_resource_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             preferred_management_resource_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if preferred_management_resource_id is None and 'preferredManagementResourceId' in kwargs:
            preferred_management_resource_id = kwargs['preferredManagementResourceId']

        if preferred_management_resource_id is not None:
            _setter("preferred_management_resource_id", preferred_management_resource_id)

    @property
    @pulumi.getter(name="preferredManagementResourceId")
    def preferred_management_resource_id(self) -> Optional[str]:
        """
        Customer preferred Management resource ARM ID
        """
        return pulumi.get(self, "preferred_management_resource_id")


@pulumi.output_type
class NotificationPreferenceResponse(dict):
    """
    Notification preference for a job stage.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendNotification":
            suggest = "send_notification"
        elif key == "stageName":
            suggest = "stage_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationPreferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationPreferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationPreferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 send_notification: bool,
                 stage_name: str):
        """
        Notification preference for a job stage.
        :param bool send_notification: Notification is required or not.
        :param str stage_name: Name of the stage.
        """
        NotificationPreferenceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            send_notification=send_notification,
            stage_name=stage_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             send_notification: Optional[bool] = None,
             stage_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if send_notification is None and 'sendNotification' in kwargs:
            send_notification = kwargs['sendNotification']
        if send_notification is None:
            raise TypeError("Missing 'send_notification' argument")
        if stage_name is None and 'stageName' in kwargs:
            stage_name = kwargs['stageName']
        if stage_name is None:
            raise TypeError("Missing 'stage_name' argument")

        _setter("send_notification", send_notification)
        _setter("stage_name", stage_name)

    @property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> bool:
        """
        Notification is required or not.
        """
        return pulumi.get(self, "send_notification")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        """
        Name of the stage.
        """
        return pulumi.get(self, "stage_name")


@pulumi.output_type
class OrderItemDetailsResponse(dict):
    """
    Order item details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cancellationReason":
            suggest = "cancellation_reason"
        elif key == "cancellationStatus":
            suggest = "cancellation_status"
        elif key == "currentStage":
            suggest = "current_stage"
        elif key == "deletionStatus":
            suggest = "deletion_status"
        elif key == "forwardShippingDetails":
            suggest = "forward_shipping_details"
        elif key == "managementRpDetails":
            suggest = "management_rp_details"
        elif key == "managementRpDetailsList":
            suggest = "management_rp_details_list"
        elif key == "orderItemStageHistory":
            suggest = "order_item_stage_history"
        elif key == "orderItemType":
            suggest = "order_item_type"
        elif key == "productDetails":
            suggest = "product_details"
        elif key == "returnReason":
            suggest = "return_reason"
        elif key == "returnStatus":
            suggest = "return_status"
        elif key == "reverseShippingDetails":
            suggest = "reverse_shipping_details"
        elif key == "notificationEmailList":
            suggest = "notification_email_list"
        elif key == "orderItemMode":
            suggest = "order_item_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderItemDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderItemDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderItemDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cancellation_reason: str,
                 cancellation_status: str,
                 current_stage: 'outputs.StageDetailsResponse',
                 deletion_status: str,
                 error: 'outputs.ErrorDetailResponse',
                 forward_shipping_details: 'outputs.ForwardShippingDetailsResponse',
                 management_rp_details: 'outputs.ResourceProviderDetailsResponse',
                 management_rp_details_list: Sequence['outputs.ResourceProviderDetailsResponse'],
                 order_item_stage_history: Sequence['outputs.StageDetailsResponse'],
                 order_item_type: str,
                 product_details: 'outputs.ProductDetailsResponse',
                 return_reason: str,
                 return_status: str,
                 reverse_shipping_details: 'outputs.ReverseShippingDetailsResponse',
                 notification_email_list: Optional[Sequence[str]] = None,
                 order_item_mode: Optional[str] = None,
                 preferences: Optional['outputs.PreferencesResponse'] = None):
        """
        Order item details
        :param str cancellation_reason: Cancellation reason.
        :param str cancellation_status: Describes whether the order item is cancellable or not.
        :param 'StageDetailsResponse' current_stage: Current Order item Status
        :param str deletion_status: Describes whether the order item is deletable or not.
        :param 'ErrorDetailResponse' error: Top level error for the job.
        :param 'ForwardShippingDetailsResponse' forward_shipping_details: Forward Package Shipping details
        :param 'ResourceProviderDetailsResponse' management_rp_details: Parent RP details - this returns only the first or default parent RP from the entire list
        :param Sequence['ResourceProviderDetailsResponse'] management_rp_details_list: List of parent RP details supported for configuration.
        :param Sequence['StageDetailsResponse'] order_item_stage_history: Order item status history
        :param str order_item_type: Order item type.
        :param 'ProductDetailsResponse' product_details: Unique identifier for configuration.
        :param str return_reason: Return reason.
        :param str return_status: Describes whether the order item is returnable or not.
        :param 'ReverseShippingDetailsResponse' reverse_shipping_details: Reverse Package Shipping details
        :param Sequence[str] notification_email_list: Additional notification email list
        :param str order_item_mode: Defines the mode of the Order item.
        :param 'PreferencesResponse' preferences: Customer notification Preferences
        """
        OrderItemDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cancellation_reason=cancellation_reason,
            cancellation_status=cancellation_status,
            current_stage=current_stage,
            deletion_status=deletion_status,
            error=error,
            forward_shipping_details=forward_shipping_details,
            management_rp_details=management_rp_details,
            management_rp_details_list=management_rp_details_list,
            order_item_stage_history=order_item_stage_history,
            order_item_type=order_item_type,
            product_details=product_details,
            return_reason=return_reason,
            return_status=return_status,
            reverse_shipping_details=reverse_shipping_details,
            notification_email_list=notification_email_list,
            order_item_mode=order_item_mode,
            preferences=preferences,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cancellation_reason: Optional[str] = None,
             cancellation_status: Optional[str] = None,
             current_stage: Optional['outputs.StageDetailsResponse'] = None,
             deletion_status: Optional[str] = None,
             error: Optional['outputs.ErrorDetailResponse'] = None,
             forward_shipping_details: Optional['outputs.ForwardShippingDetailsResponse'] = None,
             management_rp_details: Optional['outputs.ResourceProviderDetailsResponse'] = None,
             management_rp_details_list: Optional[Sequence['outputs.ResourceProviderDetailsResponse']] = None,
             order_item_stage_history: Optional[Sequence['outputs.StageDetailsResponse']] = None,
             order_item_type: Optional[str] = None,
             product_details: Optional['outputs.ProductDetailsResponse'] = None,
             return_reason: Optional[str] = None,
             return_status: Optional[str] = None,
             reverse_shipping_details: Optional['outputs.ReverseShippingDetailsResponse'] = None,
             notification_email_list: Optional[Sequence[str]] = None,
             order_item_mode: Optional[str] = None,
             preferences: Optional['outputs.PreferencesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cancellation_reason is None and 'cancellationReason' in kwargs:
            cancellation_reason = kwargs['cancellationReason']
        if cancellation_reason is None:
            raise TypeError("Missing 'cancellation_reason' argument")
        if cancellation_status is None and 'cancellationStatus' in kwargs:
            cancellation_status = kwargs['cancellationStatus']
        if cancellation_status is None:
            raise TypeError("Missing 'cancellation_status' argument")
        if current_stage is None and 'currentStage' in kwargs:
            current_stage = kwargs['currentStage']
        if current_stage is None:
            raise TypeError("Missing 'current_stage' argument")
        if deletion_status is None and 'deletionStatus' in kwargs:
            deletion_status = kwargs['deletionStatus']
        if deletion_status is None:
            raise TypeError("Missing 'deletion_status' argument")
        if error is None:
            raise TypeError("Missing 'error' argument")
        if forward_shipping_details is None and 'forwardShippingDetails' in kwargs:
            forward_shipping_details = kwargs['forwardShippingDetails']
        if forward_shipping_details is None:
            raise TypeError("Missing 'forward_shipping_details' argument")
        if management_rp_details is None and 'managementRpDetails' in kwargs:
            management_rp_details = kwargs['managementRpDetails']
        if management_rp_details is None:
            raise TypeError("Missing 'management_rp_details' argument")
        if management_rp_details_list is None and 'managementRpDetailsList' in kwargs:
            management_rp_details_list = kwargs['managementRpDetailsList']
        if management_rp_details_list is None:
            raise TypeError("Missing 'management_rp_details_list' argument")
        if order_item_stage_history is None and 'orderItemStageHistory' in kwargs:
            order_item_stage_history = kwargs['orderItemStageHistory']
        if order_item_stage_history is None:
            raise TypeError("Missing 'order_item_stage_history' argument")
        if order_item_type is None and 'orderItemType' in kwargs:
            order_item_type = kwargs['orderItemType']
        if order_item_type is None:
            raise TypeError("Missing 'order_item_type' argument")
        if product_details is None and 'productDetails' in kwargs:
            product_details = kwargs['productDetails']
        if product_details is None:
            raise TypeError("Missing 'product_details' argument")
        if return_reason is None and 'returnReason' in kwargs:
            return_reason = kwargs['returnReason']
        if return_reason is None:
            raise TypeError("Missing 'return_reason' argument")
        if return_status is None and 'returnStatus' in kwargs:
            return_status = kwargs['returnStatus']
        if return_status is None:
            raise TypeError("Missing 'return_status' argument")
        if reverse_shipping_details is None and 'reverseShippingDetails' in kwargs:
            reverse_shipping_details = kwargs['reverseShippingDetails']
        if reverse_shipping_details is None:
            raise TypeError("Missing 'reverse_shipping_details' argument")
        if notification_email_list is None and 'notificationEmailList' in kwargs:
            notification_email_list = kwargs['notificationEmailList']
        if order_item_mode is None and 'orderItemMode' in kwargs:
            order_item_mode = kwargs['orderItemMode']

        _setter("cancellation_reason", cancellation_reason)
        _setter("cancellation_status", cancellation_status)
        _setter("current_stage", current_stage)
        _setter("deletion_status", deletion_status)
        _setter("error", error)
        _setter("forward_shipping_details", forward_shipping_details)
        _setter("management_rp_details", management_rp_details)
        _setter("management_rp_details_list", management_rp_details_list)
        _setter("order_item_stage_history", order_item_stage_history)
        _setter("order_item_type", order_item_type)
        _setter("product_details", product_details)
        _setter("return_reason", return_reason)
        _setter("return_status", return_status)
        _setter("reverse_shipping_details", reverse_shipping_details)
        if notification_email_list is not None:
            _setter("notification_email_list", notification_email_list)
        if order_item_mode is not None:
            _setter("order_item_mode", order_item_mode)
        if preferences is not None:
            _setter("preferences", preferences)

    @property
    @pulumi.getter(name="cancellationReason")
    def cancellation_reason(self) -> str:
        """
        Cancellation reason.
        """
        return pulumi.get(self, "cancellation_reason")

    @property
    @pulumi.getter(name="cancellationStatus")
    def cancellation_status(self) -> str:
        """
        Describes whether the order item is cancellable or not.
        """
        return pulumi.get(self, "cancellation_status")

    @property
    @pulumi.getter(name="currentStage")
    def current_stage(self) -> 'outputs.StageDetailsResponse':
        """
        Current Order item Status
        """
        return pulumi.get(self, "current_stage")

    @property
    @pulumi.getter(name="deletionStatus")
    def deletion_status(self) -> str:
        """
        Describes whether the order item is deletable or not.
        """
        return pulumi.get(self, "deletion_status")

    @property
    @pulumi.getter
    def error(self) -> 'outputs.ErrorDetailResponse':
        """
        Top level error for the job.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="forwardShippingDetails")
    def forward_shipping_details(self) -> 'outputs.ForwardShippingDetailsResponse':
        """
        Forward Package Shipping details
        """
        return pulumi.get(self, "forward_shipping_details")

    @property
    @pulumi.getter(name="managementRpDetails")
    def management_rp_details(self) -> 'outputs.ResourceProviderDetailsResponse':
        """
        Parent RP details - this returns only the first or default parent RP from the entire list
        """
        return pulumi.get(self, "management_rp_details")

    @property
    @pulumi.getter(name="managementRpDetailsList")
    def management_rp_details_list(self) -> Sequence['outputs.ResourceProviderDetailsResponse']:
        """
        List of parent RP details supported for configuration.
        """
        return pulumi.get(self, "management_rp_details_list")

    @property
    @pulumi.getter(name="orderItemStageHistory")
    def order_item_stage_history(self) -> Sequence['outputs.StageDetailsResponse']:
        """
        Order item status history
        """
        return pulumi.get(self, "order_item_stage_history")

    @property
    @pulumi.getter(name="orderItemType")
    def order_item_type(self) -> str:
        """
        Order item type.
        """
        return pulumi.get(self, "order_item_type")

    @property
    @pulumi.getter(name="productDetails")
    def product_details(self) -> 'outputs.ProductDetailsResponse':
        """
        Unique identifier for configuration.
        """
        return pulumi.get(self, "product_details")

    @property
    @pulumi.getter(name="returnReason")
    def return_reason(self) -> str:
        """
        Return reason.
        """
        return pulumi.get(self, "return_reason")

    @property
    @pulumi.getter(name="returnStatus")
    def return_status(self) -> str:
        """
        Describes whether the order item is returnable or not.
        """
        return pulumi.get(self, "return_status")

    @property
    @pulumi.getter(name="reverseShippingDetails")
    def reverse_shipping_details(self) -> 'outputs.ReverseShippingDetailsResponse':
        """
        Reverse Package Shipping details
        """
        return pulumi.get(self, "reverse_shipping_details")

    @property
    @pulumi.getter(name="notificationEmailList")
    def notification_email_list(self) -> Optional[Sequence[str]]:
        """
        Additional notification email list
        """
        return pulumi.get(self, "notification_email_list")

    @property
    @pulumi.getter(name="orderItemMode")
    def order_item_mode(self) -> Optional[str]:
        """
        Defines the mode of the Order item.
        """
        return pulumi.get(self, "order_item_mode")

    @property
    @pulumi.getter
    def preferences(self) -> Optional['outputs.PreferencesResponse']:
        """
        Customer notification Preferences
        """
        return pulumi.get(self, "preferences")


@pulumi.output_type
class Pav2MeterDetailsResponse(dict):
    """
    Billing type PAV2 meter details.
    """
    def __init__(__self__, *,
                 billing_type: str,
                 charging_type: str,
                 meter_guid: str,
                 multiplier: float):
        """
        Billing type PAV2 meter details.
        :param str billing_type: Represents billing type.
               Expected value is 'Pav2'.
        :param str charging_type: Charging type.
        :param str meter_guid: Validation status of requested data center and transport.
        :param float multiplier: Billing unit applicable for Pav2 billing.
        """
        Pav2MeterDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_type=billing_type,
            charging_type=charging_type,
            meter_guid=meter_guid,
            multiplier=multiplier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_type: Optional[str] = None,
             charging_type: Optional[str] = None,
             meter_guid: Optional[str] = None,
             multiplier: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if billing_type is None and 'billingType' in kwargs:
            billing_type = kwargs['billingType']
        if billing_type is None:
            raise TypeError("Missing 'billing_type' argument")
        if charging_type is None and 'chargingType' in kwargs:
            charging_type = kwargs['chargingType']
        if charging_type is None:
            raise TypeError("Missing 'charging_type' argument")
        if meter_guid is None and 'meterGuid' in kwargs:
            meter_guid = kwargs['meterGuid']
        if meter_guid is None:
            raise TypeError("Missing 'meter_guid' argument")
        if multiplier is None:
            raise TypeError("Missing 'multiplier' argument")

        _setter("billing_type", 'Pav2')
        _setter("charging_type", charging_type)
        _setter("meter_guid", meter_guid)
        _setter("multiplier", multiplier)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        Represents billing type.
        Expected value is 'Pav2'.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="chargingType")
    def charging_type(self) -> str:
        """
        Charging type.
        """
        return pulumi.get(self, "charging_type")

    @property
    @pulumi.getter(name="meterGuid")
    def meter_guid(self) -> str:
        """
        Validation status of requested data center and transport.
        """
        return pulumi.get(self, "meter_guid")

    @property
    @pulumi.getter
    def multiplier(self) -> float:
        """
        Billing unit applicable for Pav2 billing.
        """
        return pulumi.get(self, "multiplier")


@pulumi.output_type
class PreferencesResponse(dict):
    """
    Preferences related to the order
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionPreferences":
            suggest = "encryption_preferences"
        elif key == "managementResourcePreferences":
            suggest = "management_resource_preferences"
        elif key == "notificationPreferences":
            suggest = "notification_preferences"
        elif key == "transportPreferences":
            suggest = "transport_preferences"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_preferences: Optional['outputs.EncryptionPreferencesResponse'] = None,
                 management_resource_preferences: Optional['outputs.ManagementResourcePreferencesResponse'] = None,
                 notification_preferences: Optional[Sequence['outputs.NotificationPreferenceResponse']] = None,
                 transport_preferences: Optional['outputs.TransportPreferencesResponse'] = None):
        """
        Preferences related to the order
        :param 'EncryptionPreferencesResponse' encryption_preferences: Preferences related to the Encryption.
        :param 'ManagementResourcePreferencesResponse' management_resource_preferences: Preferences related to the Management resource.
        :param Sequence['NotificationPreferenceResponse'] notification_preferences: Notification preferences.
        :param 'TransportPreferencesResponse' transport_preferences: Preferences related to the shipment logistics of the order.
        """
        PreferencesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_preferences=encryption_preferences,
            management_resource_preferences=management_resource_preferences,
            notification_preferences=notification_preferences,
            transport_preferences=transport_preferences,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_preferences: Optional['outputs.EncryptionPreferencesResponse'] = None,
             management_resource_preferences: Optional['outputs.ManagementResourcePreferencesResponse'] = None,
             notification_preferences: Optional[Sequence['outputs.NotificationPreferenceResponse']] = None,
             transport_preferences: Optional['outputs.TransportPreferencesResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if encryption_preferences is None and 'encryptionPreferences' in kwargs:
            encryption_preferences = kwargs['encryptionPreferences']
        if management_resource_preferences is None and 'managementResourcePreferences' in kwargs:
            management_resource_preferences = kwargs['managementResourcePreferences']
        if notification_preferences is None and 'notificationPreferences' in kwargs:
            notification_preferences = kwargs['notificationPreferences']
        if transport_preferences is None and 'transportPreferences' in kwargs:
            transport_preferences = kwargs['transportPreferences']

        if encryption_preferences is not None:
            _setter("encryption_preferences", encryption_preferences)
        if management_resource_preferences is not None:
            _setter("management_resource_preferences", management_resource_preferences)
        if notification_preferences is not None:
            _setter("notification_preferences", notification_preferences)
        if transport_preferences is not None:
            _setter("transport_preferences", transport_preferences)

    @property
    @pulumi.getter(name="encryptionPreferences")
    def encryption_preferences(self) -> Optional['outputs.EncryptionPreferencesResponse']:
        """
        Preferences related to the Encryption.
        """
        return pulumi.get(self, "encryption_preferences")

    @property
    @pulumi.getter(name="managementResourcePreferences")
    def management_resource_preferences(self) -> Optional['outputs.ManagementResourcePreferencesResponse']:
        """
        Preferences related to the Management resource.
        """
        return pulumi.get(self, "management_resource_preferences")

    @property
    @pulumi.getter(name="notificationPreferences")
    def notification_preferences(self) -> Optional[Sequence['outputs.NotificationPreferenceResponse']]:
        """
        Notification preferences.
        """
        return pulumi.get(self, "notification_preferences")

    @property
    @pulumi.getter(name="transportPreferences")
    def transport_preferences(self) -> Optional['outputs.TransportPreferencesResponse']:
        """
        Preferences related to the shipment logistics of the order.
        """
        return pulumi.get(self, "transport_preferences")


@pulumi.output_type
class ProductDetailsResponse(dict):
    """
    Represents product details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceDetails":
            suggest = "device_details"
        elif key == "hierarchyInformation":
            suggest = "hierarchy_information"
        elif key == "productDoubleEncryptionStatus":
            suggest = "product_double_encryption_status"
        elif key == "childConfigurationDeviceDetails":
            suggest = "child_configuration_device_details"
        elif key == "displayInfo":
            suggest = "display_info"
        elif key == "identificationType":
            suggest = "identification_type"
        elif key == "optInAdditionalConfigurations":
            suggest = "opt_in_additional_configurations"
        elif key == "parentDeviceDetails":
            suggest = "parent_device_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 device_details: Sequence['outputs.DeviceDetailsResponse'],
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 product_double_encryption_status: str,
                 child_configuration_device_details: Optional[Sequence['outputs.ConfigurationDeviceDetailsResponse']] = None,
                 display_info: Optional['outputs.DisplayInfoResponse'] = None,
                 identification_type: Optional[str] = None,
                 opt_in_additional_configurations: Optional[Sequence['outputs.AdditionalConfigurationResponse']] = None,
                 parent_device_details: Optional['outputs.DeviceDetailsResponse'] = None):
        """
        Represents product details
        :param int count: Quantity of the product
        :param Sequence['DeviceDetailsResponse'] device_details: list of device details
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy of the product which uniquely identifies the product
        :param str product_double_encryption_status: Double encryption status of the configuration. Read-only field.
        :param Sequence['ConfigurationDeviceDetailsResponse'] child_configuration_device_details: Details of all child configurations that are part of the order item.
        :param 'DisplayInfoResponse' display_info: Display details of the product
        :param str identification_type: Identification type of the configuration.
        :param Sequence['AdditionalConfigurationResponse'] opt_in_additional_configurations: List of additional configurations customer wants in the order item apart from the ones included in the base configuration.
        :param 'DeviceDetailsResponse' parent_device_details: Device details of the parent configuration.
        """
        ProductDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            device_details=device_details,
            hierarchy_information=hierarchy_information,
            product_double_encryption_status=product_double_encryption_status,
            child_configuration_device_details=child_configuration_device_details,
            display_info=display_info,
            identification_type=identification_type,
            opt_in_additional_configurations=opt_in_additional_configurations,
            parent_device_details=parent_device_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[int] = None,
             device_details: Optional[Sequence['outputs.DeviceDetailsResponse']] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             product_double_encryption_status: Optional[str] = None,
             child_configuration_device_details: Optional[Sequence['outputs.ConfigurationDeviceDetailsResponse']] = None,
             display_info: Optional['outputs.DisplayInfoResponse'] = None,
             identification_type: Optional[str] = None,
             opt_in_additional_configurations: Optional[Sequence['outputs.AdditionalConfigurationResponse']] = None,
             parent_device_details: Optional['outputs.DeviceDetailsResponse'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if count is None:
            raise TypeError("Missing 'count' argument")
        if device_details is None and 'deviceDetails' in kwargs:
            device_details = kwargs['deviceDetails']
        if device_details is None:
            raise TypeError("Missing 'device_details' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if product_double_encryption_status is None and 'productDoubleEncryptionStatus' in kwargs:
            product_double_encryption_status = kwargs['productDoubleEncryptionStatus']
        if product_double_encryption_status is None:
            raise TypeError("Missing 'product_double_encryption_status' argument")
        if child_configuration_device_details is None and 'childConfigurationDeviceDetails' in kwargs:
            child_configuration_device_details = kwargs['childConfigurationDeviceDetails']
        if display_info is None and 'displayInfo' in kwargs:
            display_info = kwargs['displayInfo']
        if identification_type is None and 'identificationType' in kwargs:
            identification_type = kwargs['identificationType']
        if opt_in_additional_configurations is None and 'optInAdditionalConfigurations' in kwargs:
            opt_in_additional_configurations = kwargs['optInAdditionalConfigurations']
        if parent_device_details is None and 'parentDeviceDetails' in kwargs:
            parent_device_details = kwargs['parentDeviceDetails']

        _setter("count", count)
        _setter("device_details", device_details)
        _setter("hierarchy_information", hierarchy_information)
        _setter("product_double_encryption_status", product_double_encryption_status)
        if child_configuration_device_details is not None:
            _setter("child_configuration_device_details", child_configuration_device_details)
        if display_info is not None:
            _setter("display_info", display_info)
        if identification_type is not None:
            _setter("identification_type", identification_type)
        if opt_in_additional_configurations is not None:
            _setter("opt_in_additional_configurations", opt_in_additional_configurations)
        if parent_device_details is not None:
            _setter("parent_device_details", parent_device_details)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Quantity of the product
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="deviceDetails")
    def device_details(self) -> Sequence['outputs.DeviceDetailsResponse']:
        """
        list of device details
        """
        return pulumi.get(self, "device_details")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy of the product which uniquely identifies the product
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="productDoubleEncryptionStatus")
    def product_double_encryption_status(self) -> str:
        """
        Double encryption status of the configuration. Read-only field.
        """
        return pulumi.get(self, "product_double_encryption_status")

    @property
    @pulumi.getter(name="childConfigurationDeviceDetails")
    def child_configuration_device_details(self) -> Optional[Sequence['outputs.ConfigurationDeviceDetailsResponse']]:
        """
        Details of all child configurations that are part of the order item.
        """
        return pulumi.get(self, "child_configuration_device_details")

    @property
    @pulumi.getter(name="displayInfo")
    def display_info(self) -> Optional['outputs.DisplayInfoResponse']:
        """
        Display details of the product
        """
        return pulumi.get(self, "display_info")

    @property
    @pulumi.getter(name="identificationType")
    def identification_type(self) -> Optional[str]:
        """
        Identification type of the configuration.
        """
        return pulumi.get(self, "identification_type")

    @property
    @pulumi.getter(name="optInAdditionalConfigurations")
    def opt_in_additional_configurations(self) -> Optional[Sequence['outputs.AdditionalConfigurationResponse']]:
        """
        List of additional configurations customer wants in the order item apart from the ones included in the base configuration.
        """
        return pulumi.get(self, "opt_in_additional_configurations")

    @property
    @pulumi.getter(name="parentDeviceDetails")
    def parent_device_details(self) -> Optional['outputs.DeviceDetailsResponse']:
        """
        Device details of the parent configuration.
        """
        return pulumi.get(self, "parent_device_details")


@pulumi.output_type
class ProductFamilyResponse(dict):
    """
    Product Family.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: str,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 product_lines: Sequence['outputs.ProductLineResponse'],
                 resource_provider_details: Optional[Sequence['outputs.ResourceProviderDetailsResponse']] = None):
        """
        Product Family.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param Sequence['ProductLineResponse'] product_lines: List of product lines supported in the product family.
        :param Sequence['ResourceProviderDetailsResponse'] resource_provider_details: Contains details related to resource provider.
        """
        ProductFamilyResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_information=availability_information,
            cost_information=cost_information,
            description=description,
            display_name=display_name,
            filterable_properties=filterable_properties,
            fulfilled_by=fulfilled_by,
            hierarchy_information=hierarchy_information,
            image_information=image_information,
            product_lines=product_lines,
            resource_provider_details=resource_provider_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_information: Optional['outputs.AvailabilityInformationResponse'] = None,
             cost_information: Optional['outputs.CostInformationResponse'] = None,
             description: Optional['outputs.DescriptionResponse'] = None,
             display_name: Optional[str] = None,
             filterable_properties: Optional[Sequence['outputs.FilterablePropertyResponse']] = None,
             fulfilled_by: Optional[str] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             image_information: Optional[Sequence['outputs.ImageInformationResponse']] = None,
             product_lines: Optional[Sequence['outputs.ProductLineResponse']] = None,
             resource_provider_details: Optional[Sequence['outputs.ResourceProviderDetailsResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_information is None and 'availabilityInformation' in kwargs:
            availability_information = kwargs['availabilityInformation']
        if availability_information is None:
            raise TypeError("Missing 'availability_information' argument")
        if cost_information is None and 'costInformation' in kwargs:
            cost_information = kwargs['costInformation']
        if cost_information is None:
            raise TypeError("Missing 'cost_information' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if filterable_properties is None and 'filterableProperties' in kwargs:
            filterable_properties = kwargs['filterableProperties']
        if filterable_properties is None:
            raise TypeError("Missing 'filterable_properties' argument")
        if fulfilled_by is None and 'fulfilledBy' in kwargs:
            fulfilled_by = kwargs['fulfilledBy']
        if fulfilled_by is None:
            raise TypeError("Missing 'fulfilled_by' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if image_information is None and 'imageInformation' in kwargs:
            image_information = kwargs['imageInformation']
        if image_information is None:
            raise TypeError("Missing 'image_information' argument")
        if product_lines is None and 'productLines' in kwargs:
            product_lines = kwargs['productLines']
        if product_lines is None:
            raise TypeError("Missing 'product_lines' argument")
        if resource_provider_details is None and 'resourceProviderDetails' in kwargs:
            resource_provider_details = kwargs['resourceProviderDetails']

        _setter("availability_information", availability_information)
        _setter("cost_information", cost_information)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("filterable_properties", filterable_properties)
        _setter("fulfilled_by", fulfilled_by)
        _setter("hierarchy_information", hierarchy_information)
        _setter("image_information", image_information)
        _setter("product_lines", product_lines)
        if resource_provider_details is not None:
            _setter("resource_provider_details", resource_provider_details)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter(name="productLines")
    def product_lines(self) -> Sequence['outputs.ProductLineResponse']:
        """
        List of product lines supported in the product family.
        """
        return pulumi.get(self, "product_lines")

    @property
    @pulumi.getter(name="resourceProviderDetails")
    def resource_provider_details(self) -> Optional[Sequence['outputs.ResourceProviderDetailsResponse']]:
        """
        Contains details related to resource provider.
        """
        return pulumi.get(self, "resource_provider_details")


@pulumi.output_type
class ProductLineResponse(dict):
    """
    Product line.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: str,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse'],
                 products: Sequence['outputs.ProductResponse']):
        """
        Product line.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        :param Sequence['ProductResponse'] products: List of products in the product line.
        """
        ProductLineResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_information=availability_information,
            cost_information=cost_information,
            description=description,
            display_name=display_name,
            filterable_properties=filterable_properties,
            fulfilled_by=fulfilled_by,
            hierarchy_information=hierarchy_information,
            image_information=image_information,
            products=products,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_information: Optional['outputs.AvailabilityInformationResponse'] = None,
             cost_information: Optional['outputs.CostInformationResponse'] = None,
             description: Optional['outputs.DescriptionResponse'] = None,
             display_name: Optional[str] = None,
             filterable_properties: Optional[Sequence['outputs.FilterablePropertyResponse']] = None,
             fulfilled_by: Optional[str] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             image_information: Optional[Sequence['outputs.ImageInformationResponse']] = None,
             products: Optional[Sequence['outputs.ProductResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_information is None and 'availabilityInformation' in kwargs:
            availability_information = kwargs['availabilityInformation']
        if availability_information is None:
            raise TypeError("Missing 'availability_information' argument")
        if cost_information is None and 'costInformation' in kwargs:
            cost_information = kwargs['costInformation']
        if cost_information is None:
            raise TypeError("Missing 'cost_information' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if filterable_properties is None and 'filterableProperties' in kwargs:
            filterable_properties = kwargs['filterableProperties']
        if filterable_properties is None:
            raise TypeError("Missing 'filterable_properties' argument")
        if fulfilled_by is None and 'fulfilledBy' in kwargs:
            fulfilled_by = kwargs['fulfilledBy']
        if fulfilled_by is None:
            raise TypeError("Missing 'fulfilled_by' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if image_information is None and 'imageInformation' in kwargs:
            image_information = kwargs['imageInformation']
        if image_information is None:
            raise TypeError("Missing 'image_information' argument")
        if products is None:
            raise TypeError("Missing 'products' argument")

        _setter("availability_information", availability_information)
        _setter("cost_information", cost_information)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("filterable_properties", filterable_properties)
        _setter("fulfilled_by", fulfilled_by)
        _setter("hierarchy_information", hierarchy_information)
        _setter("image_information", image_information)
        _setter("products", products)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.ProductResponse']:
        """
        List of products in the product line.
        """
        return pulumi.get(self, "products")


@pulumi.output_type
class ProductResponse(dict):
    """
    Represents a product.
    """
    def __init__(__self__, *,
                 availability_information: 'outputs.AvailabilityInformationResponse',
                 configurations: Sequence['outputs.ConfigurationResponse'],
                 cost_information: 'outputs.CostInformationResponse',
                 description: 'outputs.DescriptionResponse',
                 display_name: str,
                 filterable_properties: Sequence['outputs.FilterablePropertyResponse'],
                 fulfilled_by: str,
                 hierarchy_information: 'outputs.HierarchyInformationResponse',
                 image_information: Sequence['outputs.ImageInformationResponse']):
        """
        Represents a product.
        :param 'AvailabilityInformationResponse' availability_information: Availability information of the product system.
        :param Sequence['ConfigurationResponse'] configurations: List of configurations for the product.
        :param 'CostInformationResponse' cost_information: Cost information for the product system.
        :param 'DescriptionResponse' description: Description related to the product system.
        :param str display_name: Display Name for the product system.
        :param Sequence['FilterablePropertyResponse'] filterable_properties: List of filters supported for a product.
        :param str fulfilled_by: The entity responsible for fulfillment of the item at the given hierarchy level.
        :param 'HierarchyInformationResponse' hierarchy_information: Hierarchy information of a product.
        :param Sequence['ImageInformationResponse'] image_information: Image information for the product system.
        """
        ProductResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_information=availability_information,
            configurations=configurations,
            cost_information=cost_information,
            description=description,
            display_name=display_name,
            filterable_properties=filterable_properties,
            fulfilled_by=fulfilled_by,
            hierarchy_information=hierarchy_information,
            image_information=image_information,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_information: Optional['outputs.AvailabilityInformationResponse'] = None,
             configurations: Optional[Sequence['outputs.ConfigurationResponse']] = None,
             cost_information: Optional['outputs.CostInformationResponse'] = None,
             description: Optional['outputs.DescriptionResponse'] = None,
             display_name: Optional[str] = None,
             filterable_properties: Optional[Sequence['outputs.FilterablePropertyResponse']] = None,
             fulfilled_by: Optional[str] = None,
             hierarchy_information: Optional['outputs.HierarchyInformationResponse'] = None,
             image_information: Optional[Sequence['outputs.ImageInformationResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_information is None and 'availabilityInformation' in kwargs:
            availability_information = kwargs['availabilityInformation']
        if availability_information is None:
            raise TypeError("Missing 'availability_information' argument")
        if configurations is None:
            raise TypeError("Missing 'configurations' argument")
        if cost_information is None and 'costInformation' in kwargs:
            cost_information = kwargs['costInformation']
        if cost_information is None:
            raise TypeError("Missing 'cost_information' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if filterable_properties is None and 'filterableProperties' in kwargs:
            filterable_properties = kwargs['filterableProperties']
        if filterable_properties is None:
            raise TypeError("Missing 'filterable_properties' argument")
        if fulfilled_by is None and 'fulfilledBy' in kwargs:
            fulfilled_by = kwargs['fulfilledBy']
        if fulfilled_by is None:
            raise TypeError("Missing 'fulfilled_by' argument")
        if hierarchy_information is None and 'hierarchyInformation' in kwargs:
            hierarchy_information = kwargs['hierarchyInformation']
        if hierarchy_information is None:
            raise TypeError("Missing 'hierarchy_information' argument")
        if image_information is None and 'imageInformation' in kwargs:
            image_information = kwargs['imageInformation']
        if image_information is None:
            raise TypeError("Missing 'image_information' argument")

        _setter("availability_information", availability_information)
        _setter("configurations", configurations)
        _setter("cost_information", cost_information)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("filterable_properties", filterable_properties)
        _setter("fulfilled_by", fulfilled_by)
        _setter("hierarchy_information", hierarchy_information)
        _setter("image_information", image_information)

    @property
    @pulumi.getter(name="availabilityInformation")
    def availability_information(self) -> 'outputs.AvailabilityInformationResponse':
        """
        Availability information of the product system.
        """
        return pulumi.get(self, "availability_information")

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.ConfigurationResponse']:
        """
        List of configurations for the product.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="costInformation")
    def cost_information(self) -> 'outputs.CostInformationResponse':
        """
        Cost information for the product system.
        """
        return pulumi.get(self, "cost_information")

    @property
    @pulumi.getter
    def description(self) -> 'outputs.DescriptionResponse':
        """
        Description related to the product system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display Name for the product system.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterableProperties")
    def filterable_properties(self) -> Sequence['outputs.FilterablePropertyResponse']:
        """
        List of filters supported for a product.
        """
        return pulumi.get(self, "filterable_properties")

    @property
    @pulumi.getter(name="fulfilledBy")
    def fulfilled_by(self) -> str:
        """
        The entity responsible for fulfillment of the item at the given hierarchy level.
        """
        return pulumi.get(self, "fulfilled_by")

    @property
    @pulumi.getter(name="hierarchyInformation")
    def hierarchy_information(self) -> 'outputs.HierarchyInformationResponse':
        """
        Hierarchy information of a product.
        """
        return pulumi.get(self, "hierarchy_information")

    @property
    @pulumi.getter(name="imageInformation")
    def image_information(self) -> Sequence['outputs.ImageInformationResponse']:
        """
        Image information for the product system.
        """
        return pulumi.get(self, "image_information")


@pulumi.output_type
class PurchaseMeterDetailsResponse(dict):
    """
    Billing type Purchase meter details.
    """
    def __init__(__self__, *,
                 billing_type: str,
                 charging_type: str,
                 multiplier: float,
                 product_id: str,
                 sku_id: str,
                 term_id: str):
        """
        Billing type Purchase meter details.
        :param str billing_type: Represents billing type.
               Expected value is 'Purchase'.
        :param str charging_type: Charging type.
        :param float multiplier: Billing unit applicable for Pav2 billing.
        :param str product_id: Product Id.
        :param str sku_id: Sku Id.
        :param str term_id: Term Id.
        """
        PurchaseMeterDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            billing_type=billing_type,
            charging_type=charging_type,
            multiplier=multiplier,
            product_id=product_id,
            sku_id=sku_id,
            term_id=term_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             billing_type: Optional[str] = None,
             charging_type: Optional[str] = None,
             multiplier: Optional[float] = None,
             product_id: Optional[str] = None,
             sku_id: Optional[str] = None,
             term_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if billing_type is None and 'billingType' in kwargs:
            billing_type = kwargs['billingType']
        if billing_type is None:
            raise TypeError("Missing 'billing_type' argument")
        if charging_type is None and 'chargingType' in kwargs:
            charging_type = kwargs['chargingType']
        if charging_type is None:
            raise TypeError("Missing 'charging_type' argument")
        if multiplier is None:
            raise TypeError("Missing 'multiplier' argument")
        if product_id is None and 'productId' in kwargs:
            product_id = kwargs['productId']
        if product_id is None:
            raise TypeError("Missing 'product_id' argument")
        if sku_id is None and 'skuId' in kwargs:
            sku_id = kwargs['skuId']
        if sku_id is None:
            raise TypeError("Missing 'sku_id' argument")
        if term_id is None and 'termId' in kwargs:
            term_id = kwargs['termId']
        if term_id is None:
            raise TypeError("Missing 'term_id' argument")

        _setter("billing_type", 'Purchase')
        _setter("charging_type", charging_type)
        _setter("multiplier", multiplier)
        _setter("product_id", product_id)
        _setter("sku_id", sku_id)
        _setter("term_id", term_id)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        Represents billing type.
        Expected value is 'Purchase'.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="chargingType")
    def charging_type(self) -> str:
        """
        Charging type.
        """
        return pulumi.get(self, "charging_type")

    @property
    @pulumi.getter
    def multiplier(self) -> float:
        """
        Billing unit applicable for Pav2 billing.
        """
        return pulumi.get(self, "multiplier")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Product Id.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="skuId")
    def sku_id(self) -> str:
        """
        Sku Id.
        """
        return pulumi.get(self, "sku_id")

    @property
    @pulumi.getter(name="termId")
    def term_id(self) -> str:
        """
        Term Id.
        """
        return pulumi.get(self, "term_id")


@pulumi.output_type
class ResourceProviderDetailsResponse(dict):
    """
    Management RP details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceProviderNamespace":
            suggest = "resource_provider_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceProviderDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceProviderDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceProviderDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_provider_namespace: str):
        """
        Management RP details.
        :param str resource_provider_namespace: Resource provider namespace.
        """
        ResourceProviderDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_provider_namespace=resource_provider_namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_provider_namespace: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_provider_namespace is None and 'resourceProviderNamespace' in kwargs:
            resource_provider_namespace = kwargs['resourceProviderNamespace']
        if resource_provider_namespace is None:
            raise TypeError("Missing 'resource_provider_namespace' argument")

        _setter("resource_provider_namespace", resource_provider_namespace)

    @property
    @pulumi.getter(name="resourceProviderNamespace")
    def resource_provider_namespace(self) -> str:
        """
        Resource provider namespace.
        """
        return pulumi.get(self, "resource_provider_namespace")


@pulumi.output_type
class ReverseShippingDetailsResponse(dict):
    """
    Reverse shipment details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "carrierDisplayName":
            suggest = "carrier_display_name"
        elif key == "carrierName":
            suggest = "carrier_name"
        elif key == "sasKeyForLabel":
            suggest = "sas_key_for_label"
        elif key == "trackingId":
            suggest = "tracking_id"
        elif key == "trackingUrl":
            suggest = "tracking_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReverseShippingDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReverseShippingDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReverseShippingDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 carrier_display_name: str,
                 carrier_name: str,
                 sas_key_for_label: str,
                 tracking_id: str,
                 tracking_url: str):
        """
        Reverse shipment details.
        :param str carrier_display_name: Carrier Name for display purpose. Not to be used for any processing.
        :param str carrier_name: Name of the carrier.
        :param str sas_key_for_label: SAS key to download the reverse shipment label of the package.
        :param str tracking_id: TrackingId of the package
        :param str tracking_url: TrackingUrl of the package.
        """
        ReverseShippingDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            carrier_display_name=carrier_display_name,
            carrier_name=carrier_name,
            sas_key_for_label=sas_key_for_label,
            tracking_id=tracking_id,
            tracking_url=tracking_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             carrier_display_name: Optional[str] = None,
             carrier_name: Optional[str] = None,
             sas_key_for_label: Optional[str] = None,
             tracking_id: Optional[str] = None,
             tracking_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if carrier_display_name is None and 'carrierDisplayName' in kwargs:
            carrier_display_name = kwargs['carrierDisplayName']
        if carrier_display_name is None:
            raise TypeError("Missing 'carrier_display_name' argument")
        if carrier_name is None and 'carrierName' in kwargs:
            carrier_name = kwargs['carrierName']
        if carrier_name is None:
            raise TypeError("Missing 'carrier_name' argument")
        if sas_key_for_label is None and 'sasKeyForLabel' in kwargs:
            sas_key_for_label = kwargs['sasKeyForLabel']
        if sas_key_for_label is None:
            raise TypeError("Missing 'sas_key_for_label' argument")
        if tracking_id is None and 'trackingId' in kwargs:
            tracking_id = kwargs['trackingId']
        if tracking_id is None:
            raise TypeError("Missing 'tracking_id' argument")
        if tracking_url is None and 'trackingUrl' in kwargs:
            tracking_url = kwargs['trackingUrl']
        if tracking_url is None:
            raise TypeError("Missing 'tracking_url' argument")

        _setter("carrier_display_name", carrier_display_name)
        _setter("carrier_name", carrier_name)
        _setter("sas_key_for_label", sas_key_for_label)
        _setter("tracking_id", tracking_id)
        _setter("tracking_url", tracking_url)

    @property
    @pulumi.getter(name="carrierDisplayName")
    def carrier_display_name(self) -> str:
        """
        Carrier Name for display purpose. Not to be used for any processing.
        """
        return pulumi.get(self, "carrier_display_name")

    @property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> str:
        """
        Name of the carrier.
        """
        return pulumi.get(self, "carrier_name")

    @property
    @pulumi.getter(name="sasKeyForLabel")
    def sas_key_for_label(self) -> str:
        """
        SAS key to download the reverse shipment label of the package.
        """
        return pulumi.get(self, "sas_key_for_label")

    @property
    @pulumi.getter(name="trackingId")
    def tracking_id(self) -> str:
        """
        TrackingId of the package
        """
        return pulumi.get(self, "tracking_id")

    @property
    @pulumi.getter(name="trackingUrl")
    def tracking_url(self) -> str:
        """
        TrackingUrl of the package.
        """
        return pulumi.get(self, "tracking_url")


@pulumi.output_type
class ShippingAddressResponse(dict):
    """
    Shipping address where customer wishes to receive the device.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streetAddress1":
            suggest = "street_address1"
        elif key == "addressType":
            suggest = "address_type"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "stateOrProvince":
            suggest = "state_or_province"
        elif key == "streetAddress2":
            suggest = "street_address2"
        elif key == "streetAddress3":
            suggest = "street_address3"
        elif key == "zipExtendedCode":
            suggest = "zip_extended_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShippingAddressResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShippingAddressResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShippingAddressResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: str,
                 street_address1: str,
                 address_type: Optional[str] = None,
                 city: Optional[str] = None,
                 company_name: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 state_or_province: Optional[str] = None,
                 street_address2: Optional[str] = None,
                 street_address3: Optional[str] = None,
                 zip_extended_code: Optional[str] = None):
        """
        Shipping address where customer wishes to receive the device.
        :param str country: Name of the Country.
        :param str street_address1: Street Address line 1.
        :param str address_type: Type of address.
        :param str city: Name of the City.
        :param str company_name: Name of the company.
        :param str postal_code: Postal code.
        :param str state_or_province: Name of the State or Province.
        :param str street_address2: Street Address line 2.
        :param str street_address3: Street Address line 3.
        :param str zip_extended_code: Extended Zip Code.
        """
        ShippingAddressResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            street_address1=street_address1,
            address_type=address_type,
            city=city,
            company_name=company_name,
            postal_code=postal_code,
            state_or_province=state_or_province,
            street_address2=street_address2,
            street_address3=street_address3,
            zip_extended_code=zip_extended_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional[str] = None,
             street_address1: Optional[str] = None,
             address_type: Optional[str] = None,
             city: Optional[str] = None,
             company_name: Optional[str] = None,
             postal_code: Optional[str] = None,
             state_or_province: Optional[str] = None,
             street_address2: Optional[str] = None,
             street_address3: Optional[str] = None,
             zip_extended_code: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if country is None:
            raise TypeError("Missing 'country' argument")
        if street_address1 is None and 'streetAddress1' in kwargs:
            street_address1 = kwargs['streetAddress1']
        if street_address1 is None:
            raise TypeError("Missing 'street_address1' argument")
        if address_type is None and 'addressType' in kwargs:
            address_type = kwargs['addressType']
        if company_name is None and 'companyName' in kwargs:
            company_name = kwargs['companyName']
        if postal_code is None and 'postalCode' in kwargs:
            postal_code = kwargs['postalCode']
        if state_or_province is None and 'stateOrProvince' in kwargs:
            state_or_province = kwargs['stateOrProvince']
        if street_address2 is None and 'streetAddress2' in kwargs:
            street_address2 = kwargs['streetAddress2']
        if street_address3 is None and 'streetAddress3' in kwargs:
            street_address3 = kwargs['streetAddress3']
        if zip_extended_code is None and 'zipExtendedCode' in kwargs:
            zip_extended_code = kwargs['zipExtendedCode']

        _setter("country", country)
        _setter("street_address1", street_address1)
        if address_type is not None:
            _setter("address_type", address_type)
        if city is not None:
            _setter("city", city)
        if company_name is not None:
            _setter("company_name", company_name)
        if postal_code is not None:
            _setter("postal_code", postal_code)
        if state_or_province is not None:
            _setter("state_or_province", state_or_province)
        if street_address2 is not None:
            _setter("street_address2", street_address2)
        if street_address3 is not None:
            _setter("street_address3", street_address3)
        if zip_extended_code is not None:
            _setter("zip_extended_code", zip_extended_code)

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Name of the Country.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="streetAddress1")
    def street_address1(self) -> str:
        """
        Street Address line 1.
        """
        return pulumi.get(self, "street_address1")

    @property
    @pulumi.getter(name="addressType")
    def address_type(self) -> Optional[str]:
        """
        Type of address.
        """
        return pulumi.get(self, "address_type")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        """
        Name of the City.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        Name of the company.
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        Postal code.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[str]:
        """
        Name of the State or Province.
        """
        return pulumi.get(self, "state_or_province")

    @property
    @pulumi.getter(name="streetAddress2")
    def street_address2(self) -> Optional[str]:
        """
        Street Address line 2.
        """
        return pulumi.get(self, "street_address2")

    @property
    @pulumi.getter(name="streetAddress3")
    def street_address3(self) -> Optional[str]:
        """
        Street Address line 3.
        """
        return pulumi.get(self, "street_address3")

    @property
    @pulumi.getter(name="zipExtendedCode")
    def zip_extended_code(self) -> Optional[str]:
        """
        Extended Zip Code.
        """
        return pulumi.get(self, "zip_extended_code")


@pulumi.output_type
class SpecificationResponse(dict):
    """
    Specification of the configurations.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        Specification of the configurations.
        :param str name: Name of the specification.
        :param str value: Value of the specification.
        """
        SpecificationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the specification.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the specification.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StageDetailsResponse(dict):
    """
    Resource stage details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "stageName":
            suggest = "stage_name"
        elif key == "stageStatus":
            suggest = "stage_status"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StageDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StageDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StageDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 stage_name: str,
                 stage_status: str,
                 start_time: str):
        """
        Resource stage details.
        :param str display_name: Display name of the resource stage.
        :param str stage_name: Stage name
        :param str stage_status: Stage status.
        :param str start_time: Stage start time
        """
        StageDetailsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            stage_name=stage_name,
            stage_status=stage_status,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             stage_name: Optional[str] = None,
             stage_status: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if stage_name is None and 'stageName' in kwargs:
            stage_name = kwargs['stageName']
        if stage_name is None:
            raise TypeError("Missing 'stage_name' argument")
        if stage_status is None and 'stageStatus' in kwargs:
            stage_status = kwargs['stageStatus']
        if stage_status is None:
            raise TypeError("Missing 'stage_status' argument")
        if start_time is None and 'startTime' in kwargs:
            start_time = kwargs['startTime']
        if start_time is None:
            raise TypeError("Missing 'start_time' argument")

        _setter("display_name", display_name)
        _setter("stage_name", stage_name)
        _setter("stage_status", stage_status)
        _setter("start_time", start_time)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the resource stage.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="stageName")
    def stage_name(self) -> str:
        """
        Stage name
        """
        return pulumi.get(self, "stage_name")

    @property
    @pulumi.getter(name="stageStatus")
    def stage_status(self) -> str:
        """
        Stage status.
        """
        return pulumi.get(self, "stage_status")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Stage start time
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        SystemDataResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            created_by=created_by,
            created_by_type=created_by_type,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            last_modified_by_type=last_modified_by_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             created_by: Optional[str] = None,
             created_by_type: Optional[str] = None,
             last_modified_at: Optional[str] = None,
             last_modified_by: Optional[str] = None,
             last_modified_by_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if created_at is None and 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_type is None and 'createdByType' in kwargs:
            created_by_type = kwargs['createdByType']
        if last_modified_at is None and 'lastModifiedAt' in kwargs:
            last_modified_at = kwargs['lastModifiedAt']
        if last_modified_by is None and 'lastModifiedBy' in kwargs:
            last_modified_by = kwargs['lastModifiedBy']
        if last_modified_by_type is None and 'lastModifiedByType' in kwargs:
            last_modified_by_type = kwargs['lastModifiedByType']

        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_type is not None:
            _setter("created_by_type", created_by_type)
        if last_modified_at is not None:
            _setter("last_modified_at", last_modified_at)
        if last_modified_by is not None:
            _setter("last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            _setter("last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TransportPreferencesResponse(dict):
    """
    Preferences related to the shipment logistics of the sku
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredShipmentType":
            suggest = "preferred_shipment_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportPreferencesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportPreferencesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportPreferencesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_shipment_type: str):
        """
        Preferences related to the shipment logistics of the sku
        :param str preferred_shipment_type: Indicates Shipment Logistics type that the customer preferred.
        """
        TransportPreferencesResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            preferred_shipment_type=preferred_shipment_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             preferred_shipment_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if preferred_shipment_type is None and 'preferredShipmentType' in kwargs:
            preferred_shipment_type = kwargs['preferredShipmentType']
        if preferred_shipment_type is None:
            raise TypeError("Missing 'preferred_shipment_type' argument")

        _setter("preferred_shipment_type", preferred_shipment_type)

    @property
    @pulumi.getter(name="preferredShipmentType")
    def preferred_shipment_type(self) -> str:
        """
        Indicates Shipment Logistics type that the customer preferred.
        """
        return pulumi.get(self, "preferred_shipment_type")


