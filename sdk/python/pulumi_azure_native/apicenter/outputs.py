# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApiDefinitionPropertiesResponseSpecification',
    'ContactResponse',
    'DeploymentServerResponse',
    'EnvironmentServerResponse',
    'ExternalDocumentationResponse',
    'LicenseResponse',
    'ManagedServiceIdentityResponse',
    'MetadataAssignmentResponse',
    'OnboardingResponse',
    'SystemDataResponse',
    'TermsOfServiceResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class ApiDefinitionPropertiesResponseSpecification(dict):
    """
    API specification details.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        API specification details.
        :param str name: Specification name.
        :param str version: Specification version.
        """
        ApiDefinitionPropertiesResponseSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if name is not None:
            _setter("name", name)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specification name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Specification version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ContactResponse(dict):
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str email: Email address of the contact.
        :param str name: Name of the contact.
        :param str url: URL for the contact.
        """
        ContactResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            name=name,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: Optional[str] = None,
             name: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if email is not None:
            _setter("email", email)
        if name is not None:
            _setter("name", name)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email address of the contact.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the contact.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL for the contact.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class DeploymentServerResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runtimeUri":
            suggest = "runtime_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentServerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentServerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentServerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 runtime_uri: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] runtime_uri: Base runtime URLs for this deployment.
        """
        DeploymentServerResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            runtime_uri=runtime_uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             runtime_uri: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if runtime_uri is None and 'runtimeUri' in kwargs:
            runtime_uri = kwargs['runtimeUri']

        if runtime_uri is not None:
            _setter("runtime_uri", runtime_uri)

    @property
    @pulumi.getter(name="runtimeUri")
    def runtime_uri(self) -> Optional[Sequence[str]]:
        """
        Base runtime URLs for this deployment.
        """
        return pulumi.get(self, "runtime_uri")


@pulumi.output_type
class EnvironmentServerResponse(dict):
    """
    Server information of the environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managementPortalUri":
            suggest = "management_portal_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentServerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentServerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentServerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 management_portal_uri: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        Server information of the environment.
        :param str type: Type of the server that represents the environment.
        """
        EnvironmentServerResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            management_portal_uri=management_portal_uri,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             management_portal_uri: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if management_portal_uri is None and 'managementPortalUri' in kwargs:
            management_portal_uri = kwargs['managementPortalUri']

        if management_portal_uri is not None:
            _setter("management_portal_uri", management_portal_uri)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="managementPortalUri")
    def management_portal_uri(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "management_portal_uri")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the server that represents the environment.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExternalDocumentationResponse(dict):
    """
    Additional, external documentation for the API.
    """
    def __init__(__self__, *,
                 url: str,
                 description: Optional[str] = None,
                 title: Optional[str] = None):
        """
        Additional, external documentation for the API.
        :param str url: URL pointing to the documentation.
        :param str description: Description of the documentation.
        :param str title: Title of the documentation.
        """
        ExternalDocumentationResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            description=description,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[str] = None,
             description: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if url is None:
            raise TypeError("Missing 'url' argument")

        _setter("url", url)
        if description is not None:
            _setter("description", description)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL pointing to the documentation.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the documentation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title of the documentation.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class LicenseResponse(dict):
    """
    The license information for the API.
    """
    def __init__(__self__, *,
                 identifier: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        The license information for the API.
        :param str identifier: SPDX license information for the API. The identifier field is mutually exclusive of the URL field.
        :param str name: Name of the license.
        :param str url: URL pointing to the license details. The URL field is mutually exclusive of the identifier field.
        """
        LicenseResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier=identifier,
            name=name,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier: Optional[str] = None,
             name: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if identifier is not None:
            _setter("identifier", identifier)
        if name is not None:
            _setter("name", name)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        SPDX license information for the API. The identifier field is mutually exclusive of the URL field.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the license.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL pointing to the license details. The URL field is mutually exclusive of the identifier field.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        ManagedServiceIdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            principal_id=principal_id,
            tenant_id=tenant_id,
            type=type,
            user_assigned_identities=user_assigned_identities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             principal_id: Optional[str] = None,
             tenant_id: Optional[str] = None,
             type: Optional[str] = None,
             user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if principal_id is None and 'principalId' in kwargs:
            principal_id = kwargs['principalId']
        if principal_id is None:
            raise TypeError("Missing 'principal_id' argument")
        if tenant_id is None and 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if tenant_id is None:
            raise TypeError("Missing 'tenant_id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if user_assigned_identities is None and 'userAssignedIdentities' in kwargs:
            user_assigned_identities = kwargs['userAssignedIdentities']

        _setter("principal_id", principal_id)
        _setter("tenant_id", tenant_id)
        _setter("type", type)
        if user_assigned_identities is not None:
            _setter("user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class MetadataAssignmentResponse(dict):
    def __init__(__self__, *,
                 deprecated: Optional[bool] = None,
                 entity: Optional[str] = None,
                 required: Optional[bool] = None):
        """
        :param str entity: The entities this metadata schema component gets applied to.
        """
        MetadataAssignmentResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deprecated=deprecated,
            entity=entity,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deprecated: Optional[bool] = None,
             entity: Optional[str] = None,
             required: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if deprecated is not None:
            _setter("deprecated", deprecated)
        if entity is not None:
            _setter("entity", entity)
        if required is not None:
            _setter("required", required)

    @property
    @pulumi.getter
    def deprecated(self) -> Optional[bool]:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def entity(self) -> Optional[str]:
        """
        The entities this metadata schema component gets applied to.
        """
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class OnboardingResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "developerPortalUri":
            suggest = "developer_portal_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OnboardingResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OnboardingResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OnboardingResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 developer_portal_uri: Optional[Sequence[str]] = None,
                 instructions: Optional[str] = None):
        """
        :param str instructions: Onboarding guide.
        """
        OnboardingResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            developer_portal_uri=developer_portal_uri,
            instructions=instructions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             developer_portal_uri: Optional[Sequence[str]] = None,
             instructions: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if developer_portal_uri is None and 'developerPortalUri' in kwargs:
            developer_portal_uri = kwargs['developerPortalUri']

        if developer_portal_uri is not None:
            _setter("developer_portal_uri", developer_portal_uri)
        if instructions is not None:
            _setter("instructions", instructions)

    @property
    @pulumi.getter(name="developerPortalUri")
    def developer_portal_uri(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "developer_portal_uri")

    @property
    @pulumi.getter
    def instructions(self) -> Optional[str]:
        """
        Onboarding guide.
        """
        return pulumi.get(self, "instructions")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        SystemDataResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            created_by=created_by,
            created_by_type=created_by_type,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            last_modified_by_type=last_modified_by_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[str] = None,
             created_by: Optional[str] = None,
             created_by_type: Optional[str] = None,
             last_modified_at: Optional[str] = None,
             last_modified_by: Optional[str] = None,
             last_modified_by_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if created_at is None and 'createdAt' in kwargs:
            created_at = kwargs['createdAt']
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by_type is None and 'createdByType' in kwargs:
            created_by_type = kwargs['createdByType']
        if last_modified_at is None and 'lastModifiedAt' in kwargs:
            last_modified_at = kwargs['lastModifiedAt']
        if last_modified_by is None and 'lastModifiedBy' in kwargs:
            last_modified_by = kwargs['lastModifiedBy']
        if last_modified_by_type is None and 'lastModifiedByType' in kwargs:
            last_modified_by_type = kwargs['lastModifiedByType']

        if created_at is not None:
            _setter("created_at", created_at)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_type is not None:
            _setter("created_by_type", created_by_type)
        if last_modified_at is not None:
            _setter("last_modified_at", last_modified_at)
        if last_modified_by is not None:
            _setter("last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            _setter("last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TermsOfServiceResponse(dict):
    """
    Terms of service for the API.
    """
    def __init__(__self__, *,
                 url: str):
        """
        Terms of service for the API.
        :param str url: URL pointing to the terms of service.
        """
        TermsOfServiceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if url is None:
            raise TypeError("Missing 'url' argument")

        _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL pointing to the terms of service.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        UserAssignedIdentityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            principal_id=principal_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: Optional[str] = None,
             principal_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if client_id is None and 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if client_id is None:
            raise TypeError("Missing 'client_id' argument")
        if principal_id is None and 'principalId' in kwargs:
            principal_id = kwargs['principalId']
        if principal_id is None:
            raise TypeError("Missing 'principal_id' argument")

        _setter("client_id", client_id)
        _setter("principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


