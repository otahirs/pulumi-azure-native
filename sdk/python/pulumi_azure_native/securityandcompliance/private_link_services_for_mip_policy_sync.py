# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PrivateLinkServicesForMIPPolicySyncArgs', 'PrivateLinkServicesForMIPPolicySync']

@pulumi.input_type
class PrivateLinkServicesForMIPPolicySyncArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input['Kind'],
                 resource_group_name: pulumi.Input[str],
                 identity: Optional[pulumi.Input['ServicesResourceIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input['ServicesPropertiesArgs']] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a PrivateLinkServicesForMIPPolicySync resource.
        :param pulumi.Input['Kind'] kind: The kind of the service.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the service instance.
        :param pulumi.Input['ServicesResourceIdentityArgs'] identity: Setting indicating whether the service has a managed identity associated with it.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input['ServicesPropertiesArgs'] properties: The common properties of a service.
        :param pulumi.Input[str] resource_name: The name of the service instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The resource tags.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input['Kind']:
        """
        The kind of the service.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input['Kind']):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group that contains the service instance.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['ServicesResourceIdentityArgs']]:
        """
        Setting indicating whether the service has a managed identity associated with it.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['ServicesResourceIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['ServicesPropertiesArgs']]:
        """
        The common properties of a service.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['ServicesPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service instance.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class PrivateLinkServicesForMIPPolicySync(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ServicesResourceIdentityArgs']]] = None,
                 kind: Optional[pulumi.Input['Kind']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['ServicesPropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The description of the service.
        API Version: 2021-03-08.
        Previous API Version: 2021-03-08. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.

        ## Example Usage
        ### Create or Update a service with all parameters

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        private_link_services_for_mip_policy_sync = azure_native.securityandcompliance.PrivateLinkServicesForMIPPolicySync("privateLinkServicesForMIPPolicySync",
            identity=azure_native.securityandcompliance.ServicesResourceIdentityArgs(
                type="SystemAssigned",
            ),
            kind=azure_native.securityandcompliance.Kind.FHIR_R4,
            location="westus2",
            properties=azure_native.securityandcompliance.ServicesPropertiesResponseArgs(
                access_policies=[
                    azure_native.securityandcompliance.ServiceAccessPolicyEntryArgs(
                        object_id="c487e7d1-3210-41a3-8ccc-e9372b78da47",
                    ),
                    azure_native.securityandcompliance.ServiceAccessPolicyEntryArgs(
                        object_id="5b307da8-43d4-492b-8b66-b0294ade872f",
                    ),
                ],
                authentication_configuration=azure_native.securityandcompliance.ServiceAuthenticationConfigurationInfoArgs(
                    audience="https://azurehealthcareapis.com",
                    authority="https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc",
                    smart_proxy_enabled=True,
                ),
                cors_configuration=azure_native.securityandcompliance.ServiceCorsConfigurationInfoArgs(
                    allow_credentials=False,
                    headers=["*"],
                    max_age=1440,
                    methods=[
                        "DELETE",
                        "GET",
                        "OPTIONS",
                        "PATCH",
                        "POST",
                        "PUT",
                    ],
                    origins=["*"],
                ),
                cosmos_db_configuration=azure_native.securityandcompliance.ServiceCosmosDbConfigurationInfoArgs(
                    key_vault_key_uri="https://my-vault.vault.azure.net/keys/my-key",
                    offer_throughput=1000,
                ),
                export_configuration=azure_native.securityandcompliance.ServiceExportConfigurationInfoArgs(
                    storage_account_name="existingStorageAccount",
                ),
                private_endpoint_connections=[],
                public_network_access="Disabled",
            ),
            resource_group_name="rg1",
            resource_name_="service1",
            tags={})

        ```
        ### Create or Update a service with minimum parameters

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        private_link_services_for_mip_policy_sync = azure_native.securityandcompliance.PrivateLinkServicesForMIPPolicySync("privateLinkServicesForMIPPolicySync",
            kind=azure_native.securityandcompliance.Kind.FHIR_R4,
            location="westus2",
            properties=azure_native.securityandcompliance.ServicesPropertiesArgs(
                access_policies=[azure_native.securityandcompliance.ServiceAccessPolicyEntryArgs(
                    object_id="c487e7d1-3210-41a3-8ccc-e9372b78da47",
                )],
            ),
            resource_group_name="rg1",
            resource_name_="service2",
            tags={})

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:securityandcompliance:privateLinkServicesForMIPPolicySync service2 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service2 
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ServicesResourceIdentityArgs']] identity: Setting indicating whether the service has a managed identity associated with it.
        :param pulumi.Input['Kind'] kind: The kind of the service.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[pulumi.InputType['ServicesPropertiesArgs']] properties: The common properties of a service.
        :param pulumi.Input[str] resource_group_name: The name of the resource group that contains the service instance.
        :param pulumi.Input[str] resource_name_: The name of the service instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateLinkServicesForMIPPolicySyncArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The description of the service.
        API Version: 2021-03-08.
        Previous API Version: 2021-03-08. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.

        ## Example Usage
        ### Create or Update a service with all parameters

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        private_link_services_for_mip_policy_sync = azure_native.securityandcompliance.PrivateLinkServicesForMIPPolicySync("privateLinkServicesForMIPPolicySync",
            identity=azure_native.securityandcompliance.ServicesResourceIdentityArgs(
                type="SystemAssigned",
            ),
            kind=azure_native.securityandcompliance.Kind.FHIR_R4,
            location="westus2",
            properties=azure_native.securityandcompliance.ServicesPropertiesResponseArgs(
                access_policies=[
                    azure_native.securityandcompliance.ServiceAccessPolicyEntryArgs(
                        object_id="c487e7d1-3210-41a3-8ccc-e9372b78da47",
                    ),
                    azure_native.securityandcompliance.ServiceAccessPolicyEntryArgs(
                        object_id="5b307da8-43d4-492b-8b66-b0294ade872f",
                    ),
                ],
                authentication_configuration=azure_native.securityandcompliance.ServiceAuthenticationConfigurationInfoArgs(
                    audience="https://azurehealthcareapis.com",
                    authority="https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc",
                    smart_proxy_enabled=True,
                ),
                cors_configuration=azure_native.securityandcompliance.ServiceCorsConfigurationInfoArgs(
                    allow_credentials=False,
                    headers=["*"],
                    max_age=1440,
                    methods=[
                        "DELETE",
                        "GET",
                        "OPTIONS",
                        "PATCH",
                        "POST",
                        "PUT",
                    ],
                    origins=["*"],
                ),
                cosmos_db_configuration=azure_native.securityandcompliance.ServiceCosmosDbConfigurationInfoArgs(
                    key_vault_key_uri="https://my-vault.vault.azure.net/keys/my-key",
                    offer_throughput=1000,
                ),
                export_configuration=azure_native.securityandcompliance.ServiceExportConfigurationInfoArgs(
                    storage_account_name="existingStorageAccount",
                ),
                private_endpoint_connections=[],
                public_network_access="Disabled",
            ),
            resource_group_name="rg1",
            resource_name_="service1",
            tags={})

        ```
        ### Create or Update a service with minimum parameters

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        private_link_services_for_mip_policy_sync = azure_native.securityandcompliance.PrivateLinkServicesForMIPPolicySync("privateLinkServicesForMIPPolicySync",
            kind=azure_native.securityandcompliance.Kind.FHIR_R4,
            location="westus2",
            properties=azure_native.securityandcompliance.ServicesPropertiesArgs(
                access_policies=[azure_native.securityandcompliance.ServiceAccessPolicyEntryArgs(
                    object_id="c487e7d1-3210-41a3-8ccc-e9372b78da47",
                )],
            ),
            resource_group_name="rg1",
            resource_name_="service2",
            tags={})

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:securityandcompliance:privateLinkServicesForMIPPolicySync service2 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service2 
        ```

        :param str resource_name: The name of the resource.
        :param PrivateLinkServicesForMIPPolicySyncArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateLinkServicesForMIPPolicySyncArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identity: Optional[pulumi.Input[pulumi.InputType['ServicesResourceIdentityArgs']]] = None,
                 kind: Optional[pulumi.Input['Kind']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['ServicesPropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateLinkServicesForMIPPolicySyncArgs.__new__(PrivateLinkServicesForMIPPolicySyncArgs)

            __props__.__dict__["identity"] = identity
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["location"] = location
            __props__.__dict__["properties"] = properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["resource_name"] = resource_name_
            __props__.__dict__["tags"] = tags
            __props__.__dict__["etag"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:securityandcompliance/v20210308:privateLinkServicesForMIPPolicySync")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(PrivateLinkServicesForMIPPolicySync, __self__).__init__(
            'azure-native:securityandcompliance:privateLinkServicesForMIPPolicySync',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PrivateLinkServicesForMIPPolicySync':
        """
        Get an existing PrivateLinkServicesForMIPPolicySync resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PrivateLinkServicesForMIPPolicySyncArgs.__new__(PrivateLinkServicesForMIPPolicySyncArgs)

        __props__.__dict__["etag"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return PrivateLinkServicesForMIPPolicySync(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[Optional[str]]:
        """
        An etag associated with the resource, used for optimistic concurrency when editing it.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.ServicesResourceResponseIdentity']]:
        """
        Setting indicating whether the service has a managed identity associated with it.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        The kind of the service.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.ServicesPropertiesResponse']:
        """
        The common properties of a service.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Required property for system data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

