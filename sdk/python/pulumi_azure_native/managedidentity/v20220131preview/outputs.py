# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'AzureResourceResponse',
]

@pulumi.output_type
class AzureResourceResponse(dict):
    """
    Describes an Azure resource that is attached to an identity.
    """
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 resource_group: str,
                 subscription_display_name: str,
                 subscription_id: str,
                 type: str):
        """
        Describes an Azure resource that is attached to an identity.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param str resource_group: The name of the resource group this resource belongs to.
        :param str subscription_display_name: The name of the subscription this resource belongs to.
        :param str subscription_id: The ID of the subscription this resource belongs to.
        :param str type: The type of this resource.
        """
        AzureResourceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            resource_group=resource_group,
            subscription_display_name=subscription_display_name,
            subscription_id=subscription_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             name: Optional[str] = None,
             resource_group: Optional[str] = None,
             subscription_display_name: Optional[str] = None,
             subscription_id: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if resource_group is None and 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if resource_group is None:
            raise TypeError("Missing 'resource_group' argument")
        if subscription_display_name is None and 'subscriptionDisplayName' in kwargs:
            subscription_display_name = kwargs['subscriptionDisplayName']
        if subscription_display_name is None:
            raise TypeError("Missing 'subscription_display_name' argument")
        if subscription_id is None and 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if subscription_id is None:
            raise TypeError("Missing 'subscription_id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("id", id)
        _setter("name", name)
        _setter("resource_group", resource_group)
        _setter("subscription_display_name", subscription_display_name)
        _setter("subscription_id", subscription_id)
        _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        The name of the resource group this resource belongs to.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subscriptionDisplayName")
    def subscription_display_name(self) -> str:
        """
        The name of the subscription this resource belongs to.
        """
        return pulumi.get(self, "subscription_display_name")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The ID of the subscription this resource belongs to.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of this resource.
        """
        return pulumi.get(self, "type")


