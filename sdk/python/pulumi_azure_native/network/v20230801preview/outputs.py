# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'PerimeterBasedAccessRuleResponse',
    'SubResourceResponse',
    'SubscriptionIdResponse',
]

@pulumi.output_type
class PerimeterBasedAccessRuleResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perimeterGuid":
            suggest = "perimeter_guid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PerimeterBasedAccessRuleResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PerimeterBasedAccessRuleResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PerimeterBasedAccessRuleResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 location: str,
                 perimeter_guid: str):
        """
        :param str id: NSP id in the ARM id format.
        :param str location: Location of the NSP supplied.
        :param str perimeter_guid: Resource guid of the NSP supplied.
        """
        PerimeterBasedAccessRuleResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            location=location,
            perimeter_guid=perimeter_guid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             location: Optional[str] = None,
             perimeter_guid: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if location is None:
            raise TypeError("Missing 'location' argument")
        if perimeter_guid is None and 'perimeterGuid' in kwargs:
            perimeter_guid = kwargs['perimeterGuid']
        if perimeter_guid is None:
            raise TypeError("Missing 'perimeter_guid' argument")

        _setter("id", id)
        _setter("location", location)
        _setter("perimeter_guid", perimeter_guid)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        NSP id in the ARM id format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the NSP supplied.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="perimeterGuid")
    def perimeter_guid(self) -> str:
        """
        Resource guid of the NSP supplied.
        """
        return pulumi.get(self, "perimeter_guid")


@pulumi.output_type
class SubResourceResponse(dict):
    """
    Reference to another subresource.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        Reference to another subresource.
        :param str id: Resource ID.
        """
        SubResourceResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SubscriptionIdResponse(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Subscription id in the ARM id format.
        """
        SubscriptionIdResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Subscription id in the ARM id format.
        """
        return pulumi.get(self, "id")


