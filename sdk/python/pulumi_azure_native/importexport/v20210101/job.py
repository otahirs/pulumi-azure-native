# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['JobArgs', 'Job']

@pulumi.input_type
class JobArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 job_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input['JobDetailsArgs']] = None,
                 tags: Optional[Any] = None):
        """
        The set of arguments for constructing a Job resource.
        :param pulumi.Input[str] resource_group_name: The resource group name uniquely identifies the resource group within the user subscription.
        :param pulumi.Input[str] job_name: The name of the import/export job.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the job should be created
        :param pulumi.Input['JobDetailsArgs'] properties: Specifies the job properties
        :param Any tags: Specifies the tags that will be assigned to the job.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The resource group name uniquely identifies the resource group within the user subscription.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the import/export job.
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the supported Azure location where the job should be created
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['JobDetailsArgs']]:
        """
        Specifies the job properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['JobDetailsArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        """
        Specifies the tags that will be assigned to the job.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Any]):
        pulumi.set(self, "tags", value)


class Job(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 job_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['JobDetailsArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[Any] = None,
                 __props__=None):
        """
        Contains the job information.

        ## Example Usage
        ### Create export job

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.importexport.v20210101.Job("job",
            job_name="myExportJob",
            location="West US",
            properties=azure_native.importexport.v20210101.JobDetailsResponseArgs(
                backup_drive_manifest=True,
                diagnostics_path="waimportexport",
                export=azure_native.importexport.v20210101.ExportArgs(
                    blob_path_prefix=["/"],
                ),
                job_type="Export",
                log_level="Verbose",
                return_address=azure_native.importexport.v20210101.ReturnAddressArgs(
                    city="Redmond",
                    country_or_region="USA",
                    email="Test@contoso.com",
                    phone="4250000000",
                    postal_code="98007",
                    recipient_name="Test",
                    state_or_province="wa",
                    street_address1="Street1",
                    street_address2="street2",
                ),
                return_shipping=azure_native.importexport.v20210101.ReturnShippingArgs(
                    carrier_account_number="989ffff",
                    carrier_name="FedEx",
                ),
                storage_account_id="/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test",
            ),
            resource_group_name="myResourceGroup")

        ```
        ### Create import job

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.importexport.v20210101.Job("job",
            job_name="myJob",
            location="West US",
            properties=azure_native.importexport.v20210101.JobDetailsResponseArgs(
                backup_drive_manifest=True,
                diagnostics_path="waimportexport",
                drive_list=[azure_native.importexport.v20210101.DriveStatusArgs(
                    bit_locker_key="238810-662376-448998-450120-652806-203390-606320-483076",
                    drive_header_hash="0:1048576:FB6B6ED500D49DA6E0D723C98D42C657F2881CC13357C28DCECA6A524F1292501571A321238540E621AB5BD9C9A32637615919A75593E6CB5C1515DAE341CABF;135266304:143360:C957A189AFC38C4E80731252301EB91427CE55E61448FA3C73C6FDDE70ABBC197947EC8D0249A2C639BB10B95957D5820A4BE8DFBBF76FFFA688AE5CE0D42EC3",
                    drive_id="9CA995BB",
                    manifest_file="\\\\8a0c23f7-14b7-470a-9633-fcd46590a1bc.manifest",
                    manifest_hash="4228EC5D8E048CB9B515338C789314BE8D0B2FDBC7C7A0308E1C826242CDE74E",
                )],
                job_type="Import",
                log_level="Verbose",
                return_address=azure_native.importexport.v20210101.ReturnAddressArgs(
                    city="Redmond",
                    country_or_region="USA",
                    email="Test@contoso.com",
                    phone="4250000000",
                    postal_code="98007",
                    recipient_name="Test",
                    state_or_province="wa",
                    street_address1="Street1",
                    street_address2="street2",
                ),
                return_shipping=azure_native.importexport.v20210101.ReturnShippingArgs(
                    carrier_account_number="989ffff",
                    carrier_name="FedEx",
                ),
                storage_account_id="/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test",
            ),
            resource_group_name="myResourceGroup")

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:importexport/v20210101:Job myJob /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myJob 
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] job_name: The name of the import/export job.
        :param pulumi.Input[str] location: Specifies the supported Azure location where the job should be created
        :param pulumi.Input[pulumi.InputType['JobDetailsArgs']] properties: Specifies the job properties
        :param pulumi.Input[str] resource_group_name: The resource group name uniquely identifies the resource group within the user subscription.
        :param Any tags: Specifies the tags that will be assigned to the job.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Contains the job information.

        ## Example Usage
        ### Create export job

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.importexport.v20210101.Job("job",
            job_name="myExportJob",
            location="West US",
            properties=azure_native.importexport.v20210101.JobDetailsResponseArgs(
                backup_drive_manifest=True,
                diagnostics_path="waimportexport",
                export=azure_native.importexport.v20210101.ExportArgs(
                    blob_path_prefix=["/"],
                ),
                job_type="Export",
                log_level="Verbose",
                return_address=azure_native.importexport.v20210101.ReturnAddressArgs(
                    city="Redmond",
                    country_or_region="USA",
                    email="Test@contoso.com",
                    phone="4250000000",
                    postal_code="98007",
                    recipient_name="Test",
                    state_or_province="wa",
                    street_address1="Street1",
                    street_address2="street2",
                ),
                return_shipping=azure_native.importexport.v20210101.ReturnShippingArgs(
                    carrier_account_number="989ffff",
                    carrier_name="FedEx",
                ),
                storage_account_id="/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test",
            ),
            resource_group_name="myResourceGroup")

        ```
        ### Create import job

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        job = azure_native.importexport.v20210101.Job("job",
            job_name="myJob",
            location="West US",
            properties=azure_native.importexport.v20210101.JobDetailsResponseArgs(
                backup_drive_manifest=True,
                diagnostics_path="waimportexport",
                drive_list=[azure_native.importexport.v20210101.DriveStatusArgs(
                    bit_locker_key="238810-662376-448998-450120-652806-203390-606320-483076",
                    drive_header_hash="0:1048576:FB6B6ED500D49DA6E0D723C98D42C657F2881CC13357C28DCECA6A524F1292501571A321238540E621AB5BD9C9A32637615919A75593E6CB5C1515DAE341CABF;135266304:143360:C957A189AFC38C4E80731252301EB91427CE55E61448FA3C73C6FDDE70ABBC197947EC8D0249A2C639BB10B95957D5820A4BE8DFBBF76FFFA688AE5CE0D42EC3",
                    drive_id="9CA995BB",
                    manifest_file="\\\\8a0c23f7-14b7-470a-9633-fcd46590a1bc.manifest",
                    manifest_hash="4228EC5D8E048CB9B515338C789314BE8D0B2FDBC7C7A0308E1C826242CDE74E",
                )],
                job_type="Import",
                log_level="Verbose",
                return_address=azure_native.importexport.v20210101.ReturnAddressArgs(
                    city="Redmond",
                    country_or_region="USA",
                    email="Test@contoso.com",
                    phone="4250000000",
                    postal_code="98007",
                    recipient_name="Test",
                    state_or_province="wa",
                    street_address1="Street1",
                    street_address2="street2",
                ),
                return_shipping=azure_native.importexport.v20210101.ReturnShippingArgs(
                    carrier_account_number="989ffff",
                    carrier_name="FedEx",
                ),
                storage_account_id="/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test",
            ),
            resource_group_name="myResourceGroup")

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:importexport/v20210101:Job myJob /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myJob 
        ```

        :param str resource_name: The name of the resource.
        :param JobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 job_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['JobDetailsArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[Any] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobArgs.__new__(JobArgs)

            __props__.__dict__["job_name"] = job_name
            __props__.__dict__["location"] = location
            __props__.__dict__["properties"] = properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["identity"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:importexport:Job"), pulumi.Alias(type_="azure-native:importexport/v20161101:Job"), pulumi.Alias(type_="azure-native:importexport/v20200801:Job")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Job, __self__).__init__(
            'azure-native:importexport/v20210101:Job',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Job':
        """
        Get an existing Job resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = JobArgs.__new__(JobArgs)

        __props__.__dict__["identity"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return Job(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.IdentityDetailsResponse']]:
        """
        Specifies the job identity details
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the Azure location where the job is created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the name of the job.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.JobDetailsResponse']:
        """
        Specifies the job properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        SystemData of ImportExport Jobs.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Any]]:
        """
        Specifies the tags that are assigned to the job.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Specifies the type of the job resource.
        """
        return pulumi.get(self, "type")

