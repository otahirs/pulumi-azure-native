// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry.V20190401
{
    /// <summary>
    /// The task that has the ARM resource and task properties.
    /// The task will have all information to schedule a run against it.
    /// 
    /// ## Example Usage
    /// ### Tasks_Create
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var task = new AzureNative.ContainerRegistry.V20190401.Task("task", new()
    ///     {
    ///         AgentConfiguration = new AzureNative.ContainerRegistry.V20190401.Inputs.AgentPropertiesArgs
    ///         {
    ///             Cpu = 2,
    ///         },
    ///         Identity = new AzureNative.ContainerRegistry.V20190401.Inputs.IdentityPropertiesArgs
    ///         {
    ///             Type = AzureNative.ContainerRegistry.V20190401.ResourceIdentityType.SystemAssigned,
    ///         },
    ///         Location = "eastus",
    ///         Platform = new AzureNative.ContainerRegistry.V20190401.Inputs.PlatformPropertiesArgs
    ///         {
    ///             Architecture = "amd64",
    ///             Os = "Linux",
    ///         },
    ///         RegistryName = "myRegistry",
    ///         ResourceGroupName = "myResourceGroup",
    ///         Status = "Enabled",
    ///         Step = new AzureNative.ContainerRegistry.V20190401.Inputs.DockerBuildStepArgs
    ///         {
    ///             Arguments = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = false,
    ///                     Name = "mytestargument",
    ///                     Value = "mytestvalue",
    ///                 },
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = true,
    ///                     Name = "mysecrettestargument",
    ///                     Value = "mysecrettestvalue",
    ///                 },
    ///             },
    ///             ContextPath = "src",
    ///             DockerFilePath = "src/DockerFile",
    ///             ImageNames = new[]
    ///             {
    ///                 "azurerest:testtag",
    ///             },
    ///             IsPushEnabled = true,
    ///             NoCache = false,
    ///             Type = "Docker",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "testkey", "value" },
    ///         },
    ///         TaskName = "mytTask",
    ///         Trigger = new AzureNative.ContainerRegistry.V20190401.Inputs.TriggerPropertiesArgs
    ///         {
    ///             BaseImageTrigger = new AzureNative.ContainerRegistry.V20190401.Inputs.BaseImageTriggerArgs
    ///             {
    ///                 BaseImageTriggerType = "Runtime",
    ///                 Name = "myBaseImageTrigger",
    ///             },
    ///             SourceTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.SourceTriggerArgs
    ///                 {
    ///                     Name = "mySourceTrigger",
    ///                     SourceRepository = new AzureNative.ContainerRegistry.V20190401.Inputs.SourcePropertiesArgs
    ///                     {
    ///                         Branch = "master",
    ///                         RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
    ///                         SourceControlAuthProperties = new AzureNative.ContainerRegistry.V20190401.Inputs.AuthInfoArgs
    ///                         {
    ///                             Token = "xxxxx",
    ///                             TokenType = "PAT",
    ///                         },
    ///                         SourceControlType = "Github",
    ///                     },
    ///                     SourceTriggerEvents = new[]
    ///                     {
    ///                         "commit",
    ///                     },
    ///                 },
    ///             },
    ///             TimerTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.TimerTriggerArgs
    ///                 {
    ///                     Name = "myTimerTrigger",
    ///                     Schedule = "30 9 * * 1-5",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Tasks_Create_WithSystemAndUserIdentities
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var task = new AzureNative.ContainerRegistry.V20190401.Task("task", new()
    ///     {
    ///         AgentConfiguration = new AzureNative.ContainerRegistry.V20190401.Inputs.AgentPropertiesArgs
    ///         {
    ///             Cpu = 2,
    ///         },
    ///         Identity = new AzureNative.ContainerRegistry.V20190401.Inputs.IdentityPropertiesArgs
    ///         {
    ///             Type = AzureNative.ContainerRegistry.V20190401.ResourceIdentityType.SystemAssigned_UserAssigned,
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2", null },
    ///             },
    ///         },
    ///         Location = "eastus",
    ///         Platform = new AzureNative.ContainerRegistry.V20190401.Inputs.PlatformPropertiesArgs
    ///         {
    ///             Architecture = "amd64",
    ///             Os = "Linux",
    ///         },
    ///         RegistryName = "myRegistry",
    ///         ResourceGroupName = "myResourceGroup",
    ///         Status = "Enabled",
    ///         Step = new AzureNative.ContainerRegistry.V20190401.Inputs.DockerBuildStepArgs
    ///         {
    ///             Arguments = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = false,
    ///                     Name = "mytestargument",
    ///                     Value = "mytestvalue",
    ///                 },
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = true,
    ///                     Name = "mysecrettestargument",
    ///                     Value = "mysecrettestvalue",
    ///                 },
    ///             },
    ///             ContextPath = "src",
    ///             DockerFilePath = "src/DockerFile",
    ///             ImageNames = new[]
    ///             {
    ///                 "azurerest:testtag",
    ///             },
    ///             IsPushEnabled = true,
    ///             NoCache = false,
    ///             Type = "Docker",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "testkey", "value" },
    ///         },
    ///         TaskName = "mytTask",
    ///         Trigger = new AzureNative.ContainerRegistry.V20190401.Inputs.TriggerPropertiesArgs
    ///         {
    ///             BaseImageTrigger = new AzureNative.ContainerRegistry.V20190401.Inputs.BaseImageTriggerArgs
    ///             {
    ///                 BaseImageTriggerType = "Runtime",
    ///                 Name = "myBaseImageTrigger",
    ///             },
    ///             SourceTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.SourceTriggerArgs
    ///                 {
    ///                     Name = "mySourceTrigger",
    ///                     SourceRepository = new AzureNative.ContainerRegistry.V20190401.Inputs.SourcePropertiesArgs
    ///                     {
    ///                         Branch = "master",
    ///                         RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
    ///                         SourceControlAuthProperties = new AzureNative.ContainerRegistry.V20190401.Inputs.AuthInfoArgs
    ///                         {
    ///                             Token = "xxxxx",
    ///                             TokenType = "PAT",
    ///                         },
    ///                         SourceControlType = "Github",
    ///                     },
    ///                     SourceTriggerEvents = new[]
    ///                     {
    ///                         "commit",
    ///                     },
    ///                 },
    ///             },
    ///             TimerTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.TimerTriggerArgs
    ///                 {
    ///                     Name = "myTimerTrigger",
    ///                     Schedule = "30 9 * * 1-5",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Tasks_Create_WithUserIdentities
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var task = new AzureNative.ContainerRegistry.V20190401.Task("task", new()
    ///     {
    ///         AgentConfiguration = new AzureNative.ContainerRegistry.V20190401.Inputs.AgentPropertiesArgs
    ///         {
    ///             Cpu = 2,
    ///         },
    ///         Identity = new AzureNative.ContainerRegistry.V20190401.Inputs.IdentityPropertiesArgs
    ///         {
    ///             Type = AzureNative.ContainerRegistry.V20190401.ResourceIdentityType.UserAssigned,
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1", null },
    ///                 { "/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2", null },
    ///             },
    ///         },
    ///         Location = "eastus",
    ///         Platform = new AzureNative.ContainerRegistry.V20190401.Inputs.PlatformPropertiesArgs
    ///         {
    ///             Architecture = "amd64",
    ///             Os = "Linux",
    ///         },
    ///         RegistryName = "myRegistry",
    ///         ResourceGroupName = "myResourceGroup",
    ///         Status = "Enabled",
    ///         Step = new AzureNative.ContainerRegistry.V20190401.Inputs.DockerBuildStepArgs
    ///         {
    ///             Arguments = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = false,
    ///                     Name = "mytestargument",
    ///                     Value = "mytestvalue",
    ///                 },
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = true,
    ///                     Name = "mysecrettestargument",
    ///                     Value = "mysecrettestvalue",
    ///                 },
    ///             },
    ///             ContextPath = "src",
    ///             DockerFilePath = "src/DockerFile",
    ///             ImageNames = new[]
    ///             {
    ///                 "azurerest:testtag",
    ///             },
    ///             IsPushEnabled = true,
    ///             NoCache = false,
    ///             Type = "Docker",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "testkey", "value" },
    ///         },
    ///         TaskName = "mytTask",
    ///         Trigger = new AzureNative.ContainerRegistry.V20190401.Inputs.TriggerPropertiesArgs
    ///         {
    ///             BaseImageTrigger = new AzureNative.ContainerRegistry.V20190401.Inputs.BaseImageTriggerArgs
    ///             {
    ///                 BaseImageTriggerType = "Runtime",
    ///                 Name = "myBaseImageTrigger",
    ///             },
    ///             SourceTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.SourceTriggerArgs
    ///                 {
    ///                     Name = "mySourceTrigger",
    ///                     SourceRepository = new AzureNative.ContainerRegistry.V20190401.Inputs.SourcePropertiesArgs
    ///                     {
    ///                         Branch = "master",
    ///                         RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
    ///                         SourceControlAuthProperties = new AzureNative.ContainerRegistry.V20190401.Inputs.AuthInfoArgs
    ///                         {
    ///                             Token = "xxxxx",
    ///                             TokenType = "PAT",
    ///                         },
    ///                         SourceControlType = "Github",
    ///                     },
    ///                     SourceTriggerEvents = new[]
    ///                     {
    ///                         "commit",
    ///                     },
    ///                 },
    ///             },
    ///             TimerTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.TimerTriggerArgs
    ///                 {
    ///                     Name = "myTimerTrigger",
    ///                     Schedule = "30 9 * * 1-5",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Tasks_Create_WithUserIdentities_WithSystemIdentity
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var task = new AzureNative.ContainerRegistry.V20190401.Task("task", new()
    ///     {
    ///         AgentConfiguration = new AzureNative.ContainerRegistry.V20190401.Inputs.AgentPropertiesArgs
    ///         {
    ///             Cpu = 2,
    ///         },
    ///         Identity = new AzureNative.ContainerRegistry.V20190401.Inputs.IdentityPropertiesArgs
    ///         {
    ///             Type = AzureNative.ContainerRegistry.V20190401.ResourceIdentityType.SystemAssigned,
    ///         },
    ///         Location = "eastus",
    ///         Platform = new AzureNative.ContainerRegistry.V20190401.Inputs.PlatformPropertiesArgs
    ///         {
    ///             Architecture = "amd64",
    ///             Os = "Linux",
    ///         },
    ///         RegistryName = "myRegistry",
    ///         ResourceGroupName = "myResourceGroup",
    ///         Status = "Enabled",
    ///         Step = new AzureNative.ContainerRegistry.V20190401.Inputs.DockerBuildStepArgs
    ///         {
    ///             Arguments = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = false,
    ///                     Name = "mytestargument",
    ///                     Value = "mytestvalue",
    ///                 },
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.ArgumentArgs
    ///                 {
    ///                     IsSecret = true,
    ///                     Name = "mysecrettestargument",
    ///                     Value = "mysecrettestvalue",
    ///                 },
    ///             },
    ///             ContextPath = "src",
    ///             DockerFilePath = "src/DockerFile",
    ///             ImageNames = new[]
    ///             {
    ///                 "azurerest:testtag",
    ///             },
    ///             IsPushEnabled = true,
    ///             NoCache = false,
    ///             Type = "Docker",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "testkey", "value" },
    ///         },
    ///         TaskName = "mytTask",
    ///         Trigger = new AzureNative.ContainerRegistry.V20190401.Inputs.TriggerPropertiesArgs
    ///         {
    ///             BaseImageTrigger = new AzureNative.ContainerRegistry.V20190401.Inputs.BaseImageTriggerArgs
    ///             {
    ///                 BaseImageTriggerType = "Runtime",
    ///                 Name = "myBaseImageTrigger",
    ///             },
    ///             SourceTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.SourceTriggerArgs
    ///                 {
    ///                     Name = "mySourceTrigger",
    ///                     SourceRepository = new AzureNative.ContainerRegistry.V20190401.Inputs.SourcePropertiesArgs
    ///                     {
    ///                         Branch = "master",
    ///                         RepositoryUrl = "https://github.com/Azure/azure-rest-api-specs",
    ///                         SourceControlAuthProperties = new AzureNative.ContainerRegistry.V20190401.Inputs.AuthInfoArgs
    ///                         {
    ///                             Token = "xxxxx",
    ///                             TokenType = "PAT",
    ///                         },
    ///                         SourceControlType = "Github",
    ///                     },
    ///                     SourceTriggerEvents = new[]
    ///                     {
    ///                         "commit",
    ///                     },
    ///                 },
    ///             },
    ///             TimerTriggers = new[]
    ///             {
    ///                 new AzureNative.ContainerRegistry.V20190401.Inputs.TimerTriggerArgs
    ///                 {
    ///                     Name = "myTimerTrigger",
    ///                     Schedule = "30 9 * * 1-5",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:containerregistry/v20190401:Task myTask /subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tasks/myTask 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:containerregistry/v20190401:Task")]
    public partial class Task : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The machine configuration of the run agent.
        /// </summary>
        [Output("agentConfiguration")]
        public Output<Outputs.AgentPropertiesResponse?> AgentConfiguration { get; private set; } = null!;

        /// <summary>
        /// The creation date of task.
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// The properties that describes a set of credentials that will be used when this run is invoked.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.CredentialsResponse?> Credentials { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityPropertiesResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The location of the resource. This cannot be changed after the resource is created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The platform properties against which the run has to happen.
        /// </summary>
        [Output("platform")]
        public Output<Outputs.PlatformPropertiesResponse> Platform { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the task.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The current status of task.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The properties of a task step.
        /// </summary>
        [Output("step")]
        public Output<object> Step { get; private set; } = null!;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Run timeout in seconds.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// The properties that describe all triggers for the task.
        /// </summary>
        [Output("trigger")]
        public Output<Outputs.TriggerPropertiesResponse?> Trigger { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Task resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Task(string name, TaskArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerregistry/v20190401:Task", name, args ?? new TaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Task(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerregistry/v20190401:Task", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry:Task"},
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20180201preview:Task"},
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20180901:Task"},
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20190601preview:Task"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Task resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Task Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Task(name, id, options);
        }
    }

    public sealed class TaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The machine configuration of the run agent.
        /// </summary>
        [Input("agentConfiguration")]
        public Input<Inputs.AgentPropertiesArgs>? AgentConfiguration { get; set; }

        /// <summary>
        /// The properties that describes a set of credentials that will be used when this run is invoked.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.CredentialsArgs>? Credentials { get; set; }

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityPropertiesArgs>? Identity { get; set; }

        /// <summary>
        /// The location of the resource. This cannot be changed after the resource is created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The platform properties against which the run has to happen.
        /// </summary>
        [Input("platform", required: true)]
        public Input<Inputs.PlatformPropertiesArgs> Platform { get; set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The current status of task.
        /// </summary>
        [Input("status")]
        public InputUnion<string, Pulumi.AzureNative.ContainerRegistry.V20190401.TaskStatus>? Status { get; set; }

        /// <summary>
        /// The properties of a task step.
        /// </summary>
        [Input("step", required: true)]
        public object Step { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the container registry task.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        /// <summary>
        /// Run timeout in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The properties that describe all triggers for the task.
        /// </summary>
        [Input("trigger")]
        public Input<Inputs.TriggerPropertiesArgs>? Trigger { get; set; }

        public TaskArgs()
        {
            Timeout = 3600;
        }
        public static new TaskArgs Empty => new TaskArgs();
    }
}
