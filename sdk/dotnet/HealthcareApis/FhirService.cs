// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HealthcareApis
{
    /// <summary>
    /// The description of Fhir Service
    /// API Version: 2022-12-01.
    /// Previous API Version: 2022-05-15. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Create or update a Fhir Service
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fhirService = new AzureNative.HealthcareApis.FhirService("fhirService", new()
    ///     {
    ///         AccessPolicies = new[]
    ///         {
    ///             new AzureNative.HealthcareApis.Inputs.FhirServiceAccessPolicyEntryArgs
    ///             {
    ///                 ObjectId = "c487e7d1-3210-41a3-8ccc-e9372b78da47",
    ///             },
    ///             new AzureNative.HealthcareApis.Inputs.FhirServiceAccessPolicyEntryArgs
    ///             {
    ///                 ObjectId = "5b307da8-43d4-492b-8b66-b0294ade872f",
    ///             },
    ///         },
    ///         AcrConfiguration = new AzureNative.HealthcareApis.Inputs.FhirServiceAcrConfigurationArgs
    ///         {
    ///             LoginServers = new[]
    ///             {
    ///                 "test1.azurecr.io",
    ///             },
    ///         },
    ///         AuthenticationConfiguration = new AzureNative.HealthcareApis.Inputs.FhirServiceAuthenticationConfigurationArgs
    ///         {
    ///             Audience = "https://azurehealthcareapis.com",
    ///             Authority = "https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc",
    ///             SmartProxyEnabled = true,
    ///         },
    ///         CorsConfiguration = new AzureNative.HealthcareApis.Inputs.FhirServiceCorsConfigurationArgs
    ///         {
    ///             AllowCredentials = false,
    ///             Headers = new[]
    ///             {
    ///                 "*",
    ///             },
    ///             MaxAge = 1440,
    ///             Methods = new[]
    ///             {
    ///                 "DELETE",
    ///                 "GET",
    ///                 "OPTIONS",
    ///                 "PATCH",
    ///                 "POST",
    ///                 "PUT",
    ///             },
    ///             Origins = new[]
    ///             {
    ///                 "*",
    ///             },
    ///         },
    ///         ExportConfiguration = new AzureNative.HealthcareApis.Inputs.FhirServiceExportConfigurationArgs
    ///         {
    ///             StorageAccountName = "existingStorageAccount",
    ///         },
    ///         FhirServiceName = "fhirservice1",
    ///         Identity = new AzureNative.HealthcareApis.Inputs.ServiceManagedIdentityIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         ImplementationGuidesConfiguration = new AzureNative.HealthcareApis.Inputs.ImplementationGuidesConfigurationArgs
    ///         {
    ///             UsCoreMissingData = false,
    ///         },
    ///         ImportConfiguration = new AzureNative.HealthcareApis.Inputs.FhirServiceImportConfigurationArgs
    ///         {
    ///             Enabled = false,
    ///             InitialImportMode = false,
    ///             IntegrationDataStore = "existingStorageAccount",
    ///         },
    ///         Kind = "fhir-R4",
    ///         Location = "westus",
    ///         ResourceGroupName = "testRG",
    ///         Tags = 
    ///         {
    ///             { "additionalProp1", "string" },
    ///             { "additionalProp2", "string" },
    ///             { "additionalProp3", "string" },
    ///         },
    ///         WorkspaceName = "workspace1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:healthcareapis:FhirService fhirservice1 /subscriptions/subid/resourceGroups/testRG/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirservices/fhirservice1 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:healthcareapis:FhirService")]
    public partial class FhirService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Fhir Service access policies.
        /// </summary>
        [Output("accessPolicies")]
        public Output<ImmutableArray<Outputs.FhirServiceAccessPolicyEntryResponse>> AccessPolicies { get; private set; } = null!;

        /// <summary>
        /// Fhir Service Azure container registry configuration.
        /// </summary>
        [Output("acrConfiguration")]
        public Output<Outputs.FhirServiceAcrConfigurationResponse?> AcrConfiguration { get; private set; } = null!;

        /// <summary>
        /// Fhir Service authentication configuration.
        /// </summary>
        [Output("authenticationConfiguration")]
        public Output<Outputs.FhirServiceAuthenticationConfigurationResponse?> AuthenticationConfiguration { get; private set; } = null!;

        /// <summary>
        /// Fhir Service Cors configuration.
        /// </summary>
        [Output("corsConfiguration")]
        public Output<Outputs.FhirServiceCorsConfigurationResponse?> CorsConfiguration { get; private set; } = null!;

        /// <summary>
        /// An etag associated with the resource, used for optimistic concurrency when editing it.
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// Fhir Service event support status.
        /// </summary>
        [Output("eventState")]
        public Output<string> EventState { get; private set; } = null!;

        /// <summary>
        /// Fhir Service export configuration.
        /// </summary>
        [Output("exportConfiguration")]
        public Output<Outputs.FhirServiceExportConfigurationResponse?> ExportConfiguration { get; private set; } = null!;

        /// <summary>
        /// Setting indicating whether the service has a managed identity associated with it.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ServiceManagedIdentityResponseIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Implementation Guides configuration.
        /// </summary>
        [Output("implementationGuidesConfiguration")]
        public Output<Outputs.ImplementationGuidesConfigurationResponse?> ImplementationGuidesConfiguration { get; private set; } = null!;

        /// <summary>
        /// Fhir Service import configuration.
        /// </summary>
        [Output("importConfiguration")]
        public Output<Outputs.FhirServiceImportConfigurationResponse?> ImportConfiguration { get; private set; } = null!;

        /// <summary>
        /// The kind of the service.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of private endpoint connections that are set up for this resource.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// The provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Control permission for data plane traffic coming from public networks while private endpoint is enabled.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Determines tracking of history for resources.
        /// </summary>
        [Output("resourceVersionPolicyConfiguration")]
        public Output<Outputs.ResourceVersionPolicyConfigurationResponse?> ResourceVersionPolicyConfiguration { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a FhirService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FhirService(string name, FhirServiceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:healthcareapis:FhirService", name, args ?? new FhirServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FhirService(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:healthcareapis:FhirService", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20210601preview:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20211101:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20220131preview:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20220515:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20220601:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20221001preview:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20221201:FhirService"},
                    new global::Pulumi.Alias { Type = "azure-native:healthcareapis/v20230228:FhirService"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FhirService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FhirService Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new FhirService(name, id, options);
        }
    }

    public sealed class FhirServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.FhirServiceAccessPolicyEntryArgs>? _accessPolicies;

        /// <summary>
        /// Fhir Service access policies.
        /// </summary>
        public InputList<Inputs.FhirServiceAccessPolicyEntryArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.FhirServiceAccessPolicyEntryArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// Fhir Service Azure container registry configuration.
        /// </summary>
        [Input("acrConfiguration")]
        public Input<Inputs.FhirServiceAcrConfigurationArgs>? AcrConfiguration { get; set; }

        /// <summary>
        /// Fhir Service authentication configuration.
        /// </summary>
        [Input("authenticationConfiguration")]
        public Input<Inputs.FhirServiceAuthenticationConfigurationArgs>? AuthenticationConfiguration { get; set; }

        /// <summary>
        /// Fhir Service Cors configuration.
        /// </summary>
        [Input("corsConfiguration")]
        public Input<Inputs.FhirServiceCorsConfigurationArgs>? CorsConfiguration { get; set; }

        /// <summary>
        /// Fhir Service export configuration.
        /// </summary>
        [Input("exportConfiguration")]
        public Input<Inputs.FhirServiceExportConfigurationArgs>? ExportConfiguration { get; set; }

        /// <summary>
        /// The name of FHIR Service resource.
        /// </summary>
        [Input("fhirServiceName")]
        public Input<string>? FhirServiceName { get; set; }

        /// <summary>
        /// Setting indicating whether the service has a managed identity associated with it.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ServiceManagedIdentityIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Implementation Guides configuration.
        /// </summary>
        [Input("implementationGuidesConfiguration")]
        public Input<Inputs.ImplementationGuidesConfigurationArgs>? ImplementationGuidesConfiguration { get; set; }

        /// <summary>
        /// Fhir Service import configuration.
        /// </summary>
        [Input("importConfiguration")]
        public Input<Inputs.FhirServiceImportConfigurationArgs>? ImportConfiguration { get; set; }

        /// <summary>
        /// The kind of the service.
        /// </summary>
        [Input("kind")]
        public InputUnion<string, Pulumi.AzureNative.HealthcareApis.FhirServiceKind>? Kind { get; set; }

        /// <summary>
        /// The resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Determines tracking of history for resources.
        /// </summary>
        [Input("resourceVersionPolicyConfiguration")]
        public Input<Inputs.ResourceVersionPolicyConfigurationArgs>? ResourceVersionPolicyConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public FhirServiceArgs()
        {
        }
        public static new FhirServiceArgs Empty => new FhirServiceArgs();
    }
}
