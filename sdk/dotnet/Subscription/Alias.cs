// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Subscription
{
    /// <summary>
    /// Subscription Information with the alias.
    /// API Version: 2021-10-01.
    /// Previous API Version: 2020-09-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### CreateAlias
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @alias = new AzureNative.Subscription.Alias("alias", new()
    ///     {
    ///         AliasName = "aliasForNewSub",
    ///         Properties = new AzureNative.Subscription.Inputs.PutAliasRequestPropertiesArgs
    ///         {
    ///             AdditionalProperties = new AzureNative.Subscription.Inputs.PutAliasRequestAdditionalPropertiesArgs
    ///             {
    ///                 SubscriptionOwnerId = "f09b39eb-c496-482c-9ab9-afd799572f4c",
    ///                 SubscriptionTenantId = "66f6e4d6-07dc-4aea-94ea-e12d3026a3c8",
    ///                 Tags = 
    ///                 {
    ///                     { "tag1", "Messi" },
    ///                     { "tag2", "Ronaldo" },
    ///                     { "tag3", "Lebron" },
    ///                 },
    ///             },
    ///             BillingScope = "/billingAccounts/af6231a7-7f8d-4fcc-a993-dd8466108d07:c663dac6-a9a5-405a-8938-cd903e12ab5b_2019_05_31/billingProfiles/QWDQ-QWHI-AUW-SJDO-DJH/invoiceSections/FEUF-EUHE-ISJ-SKDW-DJH",
    ///             DisplayName = "Test Subscription",
    ///             Workload = "Production",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:subscription:Alias string string 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:subscription:Alias")]
    public partial class Alias : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Alias ID.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Subscription Alias response properties.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.SubscriptionAliasResponsePropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource type, Microsoft.Subscription/aliases.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Alias resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alias(string name, AliasArgs? args = null, CustomResourceOptions? options = null)
            : base("azure-native:subscription:Alias", name, args ?? new AliasArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alias(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:subscription:Alias", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:subscription/v20191001preview:Alias"},
                    new global::Pulumi.Alias { Type = "azure-native:subscription/v20200901:Alias"},
                    new global::Pulumi.Alias { Type = "azure-native:subscription/v20211001:Alias"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alias resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alias Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Alias(name, id, options);
        }
    }

    public sealed class AliasArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AliasName is the name for the subscription creation request. Note that this is not the same as subscription name and this doesnâ€™t have any other lifecycle need beyond the request for subscription creation.
        /// </summary>
        [Input("aliasName")]
        public Input<string>? AliasName { get; set; }

        /// <summary>
        /// Put alias request properties.
        /// </summary>
        [Input("properties")]
        public Input<Inputs.PutAliasRequestPropertiesArgs>? Properties { get; set; }

        public AliasArgs()
        {
        }
        public static new AliasArgs Empty => new AliasArgs();
    }
}
