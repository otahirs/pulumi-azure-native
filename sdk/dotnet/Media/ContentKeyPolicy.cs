// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Media
{
    /// <summary>
    /// A Content Key Policy resource.
    /// API Version: 2022-08-01.
    /// Previous API Version: 2020-05-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Creates a Content Key Policy with ClearKey option and Token Restriction
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contentKeyPolicy = new AzureNative.Media.ContentKeyPolicy("contentKeyPolicy", new()
    ///     {
    ///         AccountName = "contosomedia",
    ///         ContentKeyPolicyName = "PolicyWithClearKeyOptionAndSwtTokenRestriction",
    ///         Description = "ArmPolicyDescription",
    ///         Options = new[]
    ///         {
    ///             new AzureNative.Media.Inputs.ContentKeyPolicyOptionArgs
    ///             {
    ///                 Configuration = new AzureNative.Media.Inputs.ContentKeyPolicyClearKeyConfigurationArgs
    ///                 {
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
    ///                 },
    ///                 Name = "ClearKeyOption",
    ///                 Restriction = new AzureNative.Media.Inputs.ContentKeyPolicyTokenRestrictionArgs
    ///                 {
    ///                     Audience = "urn:audience",
    ///                     Issuer = "urn:issuer",
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
    ///                     PrimaryVerificationKey = new AzureNative.Media.Inputs.ContentKeyPolicySymmetricTokenKeyArgs
    ///                     {
    ///                         KeyValue = "AAAAAAAAAAAAAAAAAAAAAA==",
    ///                         OdataType = "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
    ///                     },
    ///                     RestrictionTokenType = "Swt",
    ///                 },
    ///             },
    ///         },
    ///         ResourceGroupName = "contosorg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates a Content Key Policy with PlayReady option and Open Restriction
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contentKeyPolicy = new AzureNative.Media.ContentKeyPolicy("contentKeyPolicy", new()
    ///     {
    ///         AccountName = "contosomedia",
    ///         ContentKeyPolicyName = "PolicyWithPlayReadyOptionAndOpenRestriction",
    ///         Description = "ArmPolicyDescription",
    ///         Options = new[]
    ///         {
    ///             new AzureNative.Media.Inputs.ContentKeyPolicyOptionArgs
    ///             {
    ///                 Configuration = new AzureNative.Media.Inputs.ContentKeyPolicyPlayReadyConfigurationArgs
    ///                 {
    ///                     Licenses = new[]
    ///                     {
    ///                         new AzureNative.Media.Inputs.ContentKeyPolicyPlayReadyLicenseArgs
    ///                         {
    ///                             AllowTestDevices = true,
    ///                             BeginDate = "2017-10-16T18:22:53.46Z",
    ///                             ContentKeyLocation = new AzureNative.Media.Inputs.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs
    ///                             {
    ///                                 OdataType = "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
    ///                             },
    ///                             ContentType = "UltraVioletDownload",
    ///                             LicenseType = "Persistent",
    ///                             PlayRight = new AzureNative.Media.Inputs.ContentKeyPolicyPlayReadyPlayRightArgs
    ///                             {
    ///                                 AllowPassingVideoContentToUnknownOutput = "NotAllowed",
    ///                                 DigitalVideoOnlyContentRestriction = false,
    ///                                 ImageConstraintForAnalogComponentVideoRestriction = true,
    ///                                 ImageConstraintForAnalogComputerMonitorRestriction = false,
    ///                                 ScmsRestriction = 2,
    ///                             },
    ///                             SecurityLevel = "SL150",
    ///                         },
    ///                     },
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration",
    ///                 },
    ///                 Name = "ArmPolicyOptionName",
    ///                 Restriction = new AzureNative.Media.Inputs.ContentKeyPolicyOpenRestrictionArgs
    ///                 {
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
    ///                 },
    ///             },
    ///         },
    ///         ResourceGroupName = "contosorg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates a Content Key Policy with Widevine option and Token Restriction
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contentKeyPolicy = new AzureNative.Media.ContentKeyPolicy("contentKeyPolicy", new()
    ///     {
    ///         AccountName = "contosomedia",
    ///         ContentKeyPolicyName = "PolicyWithWidevineOptionAndJwtTokenRestriction",
    ///         Description = "ArmPolicyDescription",
    ///         Options = new[]
    ///         {
    ///             new AzureNative.Media.Inputs.ContentKeyPolicyOptionArgs
    ///             {
    ///                 Configuration = new AzureNative.Media.Inputs.ContentKeyPolicyWidevineConfigurationArgs
    ///                 {
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
    ///                     WidevineTemplate = "{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}",
    ///                 },
    ///                 Name = "widevineoption",
    ///                 Restriction = new AzureNative.Media.Inputs.ContentKeyPolicyTokenRestrictionArgs
    ///                 {
    ///                     AlternateVerificationKeys = new[]
    ///                     {
    ///                         new AzureNative.Media.Inputs.ContentKeyPolicySymmetricTokenKeyArgs
    ///                         {
    ///                             KeyValue = "AAAAAAAAAAAAAAAAAAAAAA==",
    ///                             OdataType = "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
    ///                         },
    ///                     },
    ///                     Audience = "urn:audience",
    ///                     Issuer = "urn:issuer",
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
    ///                     PrimaryVerificationKey = new AzureNative.Media.Inputs.ContentKeyPolicyRsaTokenKeyArgs
    ///                     {
    ///                         Exponent = "AQAB",
    ///                         Modulus = "AQAD",
    ///                         OdataType = "#Microsoft.Media.ContentKeyPolicyRsaTokenKey",
    ///                     },
    ///                     RestrictionTokenType = "Jwt",
    ///                 },
    ///             },
    ///         },
    ///         ResourceGroupName = "contosorg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates a Content Key Policy with multiple options
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contentKeyPolicy = new AzureNative.Media.ContentKeyPolicy("contentKeyPolicy", new()
    ///     {
    ///         AccountName = "contosomedia",
    ///         ContentKeyPolicyName = "PolicyCreatedWithMultipleOptions",
    ///         Description = "ArmPolicyDescription",
    ///         Options = new[]
    ///         {
    ///             new AzureNative.Media.Inputs.ContentKeyPolicyOptionArgs
    ///             {
    ///                 Configuration = new AzureNative.Media.Inputs.ContentKeyPolicyClearKeyConfigurationArgs
    ///                 {
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
    ///                 },
    ///                 Name = "ClearKeyOption",
    ///                 Restriction = new AzureNative.Media.Inputs.ContentKeyPolicyTokenRestrictionArgs
    ///                 {
    ///                     Audience = "urn:audience",
    ///                     Issuer = "urn:issuer",
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
    ///                     PrimaryVerificationKey = new AzureNative.Media.Inputs.ContentKeyPolicySymmetricTokenKeyArgs
    ///                     {
    ///                         KeyValue = "AAAAAAAAAAAAAAAAAAAAAA==",
    ///                         OdataType = "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
    ///                     },
    ///                     RestrictionTokenType = "Swt",
    ///                 },
    ///             },
    ///             new AzureNative.Media.Inputs.ContentKeyPolicyOptionArgs
    ///             {
    ///                 Configuration = new AzureNative.Media.Inputs.ContentKeyPolicyWidevineConfigurationArgs
    ///                 {
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
    ///                     WidevineTemplate = "{\"allowed_track_types\":\"SD_HD\",\"content_key_specs\":[{\"track_type\":\"SD\",\"security_level\":1,\"required_output_protection\":{\"hdcp\":\"HDCP_V2\"}}],\"policy_overrides\":{\"can_play\":true,\"can_persist\":true,\"can_renew\":false}}",
    ///                 },
    ///                 Name = "widevineoption",
    ///                 Restriction = new AzureNative.Media.Inputs.ContentKeyPolicyOpenRestrictionArgs
    ///                 {
    ///                     OdataType = "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
    ///                 },
    ///             },
    ///         },
    ///         ResourceGroupName = "contosorg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:media:ContentKeyPolicy PolicyCreatedWithMultipleOptions /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosorg/providers/Microsoft.Media/mediaservices/contosomedia/contentKeyPolicies/PolicyCreatedWithMultipleOptions 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:media:ContentKeyPolicy")]
    public partial class ContentKeyPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation date of the Policy
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// A description for the Policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The last modified date of the Policy
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Key Policy options.
        /// </summary>
        [Output("options")]
        public Output<ImmutableArray<Outputs.ContentKeyPolicyOptionResponse>> Options { get; private set; } = null!;

        /// <summary>
        /// The legacy Policy ID.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ContentKeyPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContentKeyPolicy(string name, ContentKeyPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure-native:media:ContentKeyPolicy", name, args ?? new ContentKeyPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContentKeyPolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:media:ContentKeyPolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:media/v20180330preview:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20180601preview:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20180701:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20200501:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20210601:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20211101:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20220801:ContentKeyPolicy"},
                    new global::Pulumi.Alias { Type = "azure-native:media/v20230101:ContentKeyPolicy"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContentKeyPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContentKeyPolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ContentKeyPolicy(name, id, options);
        }
    }

    public sealed class ContentKeyPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The Content Key Policy name.
        /// </summary>
        [Input("contentKeyPolicyName")]
        public Input<string>? ContentKeyPolicyName { get; set; }

        /// <summary>
        /// A description for the Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("options", required: true)]
        private InputList<Inputs.ContentKeyPolicyOptionArgs>? _options;

        /// <summary>
        /// The Key Policy options.
        /// </summary>
        public InputList<Inputs.ContentKeyPolicyOptionArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.ContentKeyPolicyOptionArgs>());
            set => _options = value;
        }

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ContentKeyPolicyArgs()
        {
        }
        public static new ContentKeyPolicyArgs Empty => new ContentKeyPolicyArgs();
    }
}
