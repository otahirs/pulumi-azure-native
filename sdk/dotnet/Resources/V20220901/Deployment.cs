// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Resources.V20220901
{
    /// <summary>
    /// Deployment information.
    /// 
    /// ## Example Usage
    /// ### Create a deployment that will deploy a template with a uri and queryString
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deployment = new AzureNative.Resources.V20220901.Deployment("deployment", new()
    ///     {
    ///         DeploymentName = "my-deployment",
    ///         Properties = new AzureNative.Resources.V20220901.Inputs.DeploymentPropertiesArgs
    ///         {
    ///             Mode = AzureNative.Resources.V20220901.DeploymentMode.Incremental,
    ///             Parameters = null,
    ///             TemplateLink = new AzureNative.Resources.V20220901.Inputs.TemplateLinkArgs
    ///             {
    ///                 QueryString = "sv=2019-02-02&amp;st=2019-04-29T22%3A18%3A26Z&amp;se=2019-04-30T02%3A23%3A26Z&amp;sr=b&amp;sp=rw&amp;sip=168.1.5.60-168.1.5.70&amp;spr=https&amp;sig=xxxxxxxx0xxxxxxxxxxxxx%2bxxxxxxxxxxxxxxxxxxxx%3d",
    ///                 Uri = "https://example.com/exampleTemplate.json",
    ///             },
    ///         },
    ///         ResourceGroupName = "my-resource-group",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a deployment that will deploy a templateSpec with the given resourceId
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deployment = new AzureNative.Resources.V20220901.Deployment("deployment", new()
    ///     {
    ///         DeploymentName = "my-deployment",
    ///         Properties = new AzureNative.Resources.V20220901.Inputs.DeploymentPropertiesArgs
    ///         {
    ///             Mode = AzureNative.Resources.V20220901.DeploymentMode.Incremental,
    ///             Parameters = null,
    ///             TemplateLink = new AzureNative.Resources.V20220901.Inputs.TemplateLinkArgs
    ///             {
    ///                 Id = "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/TemplateSpecs/TemplateSpec-Name/versions/v1",
    ///             },
    ///         },
    ///         ResourceGroupName = "my-resource-group",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a deployment that will redeploy another deployment on failure
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deployment = new AzureNative.Resources.V20220901.Deployment("deployment", new()
    ///     {
    ///         DeploymentName = "my-deployment",
    ///         Properties = new AzureNative.Resources.V20220901.Inputs.DeploymentPropertiesArgs
    ///         {
    ///             Mode = AzureNative.Resources.V20220901.DeploymentMode.Complete,
    ///             OnErrorDeployment = new AzureNative.Resources.V20220901.Inputs.OnErrorDeploymentArgs
    ///             {
    ///                 DeploymentName = "name-of-deployment-to-use",
    ///                 Type = AzureNative.Resources.V20220901.OnErrorDeploymentType.SpecificDeployment,
    ///             },
    ///             Parameters = null,
    ///             TemplateLink = new AzureNative.Resources.V20220901.Inputs.TemplateLinkArgs
    ///             {
    ///                 Uri = "https://example.com/exampleTemplate.json",
    ///             },
    ///         },
    ///         ResourceGroupName = "my-resource-group",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a deployment that will redeploy the last successful deployment on failure
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var deployment = new AzureNative.Resources.V20220901.Deployment("deployment", new()
    ///     {
    ///         DeploymentName = "my-deployment",
    ///         Properties = new AzureNative.Resources.V20220901.Inputs.DeploymentPropertiesArgs
    ///         {
    ///             Mode = AzureNative.Resources.V20220901.DeploymentMode.Complete,
    ///             OnErrorDeployment = new AzureNative.Resources.V20220901.Inputs.OnErrorDeploymentArgs
    ///             {
    ///                 Type = AzureNative.Resources.V20220901.OnErrorDeploymentType.LastSuccessful,
    ///             },
    ///             Parameters = null,
    ///             TemplateLink = new AzureNative.Resources.V20220901.Inputs.TemplateLinkArgs
    ///             {
    ///                 Uri = "https://example.com/exampleTemplate.json",
    ///             },
    ///         },
    ///         ResourceGroupName = "my-resource-group",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:resources/v20220901:Deployment my-deployment /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/my-resource-group/providers/Microsoft.Resources/deployments/my-deployment 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:resources/v20220901:Deployment")]
    public partial class Deployment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the location of the deployment.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the deployment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Deployment properties.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.DeploymentPropertiesExtendedResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Deployment tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the deployment.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Deployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Deployment(string name, DeploymentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:resources/v20220901:Deployment", name, args ?? new DeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Deployment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:resources/v20220901:Deployment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:resources:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20151101:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20160201:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20160701:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20160901:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20170510:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20180201:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20180501:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20190301:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20190501:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20190510:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20190701:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20190801:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20191001:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20200601:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20200801:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20201001:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20210101:Deployment"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20210401:Deployment"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Deployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Deployment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Deployment(name, id, options);
        }
    }

    public sealed class DeploymentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the deployment.
        /// </summary>
        [Input("deploymentName")]
        public Input<string>? DeploymentName { get; set; }

        /// <summary>
        /// The location to store the deployment data.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The deployment properties.
        /// </summary>
        [Input("properties", required: true)]
        public Input<Inputs.DeploymentPropertiesArgs> Properties { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Deployment tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DeploymentArgs()
        {
        }
        public static new DeploymentArgs Empty => new DeploymentArgs();
    }
}
