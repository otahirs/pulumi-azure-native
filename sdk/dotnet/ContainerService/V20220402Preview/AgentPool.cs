// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20220402Preview
{
    /// <summary>
    /// Agent Pool.
    /// 
    /// ## Example Usage
    /// ### Associate Agent Pool with Capacity Reservation Group
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         CapacityReservationGroupID = "/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/CapacityReservationGroups/crg1",
    ///         Count = 3,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool using an agent pool snapshot
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         CreationData = new AzureNative.ContainerService.V20220402Preview.Inputs.CreationDataArgs
    ///         {
    ///             SourceResourceId = "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1",
    ///         },
    ///         EnableFIPS = true,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with CustomCATrust enabled
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         EnableCustomCATrust = true,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with Dedicated Host Group
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         HostGroupID = "/subscriptions/subid1/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1",
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with EncryptionAtHost enabled
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         EnableEncryptionAtHost = true,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with Ephemeral OS Disk
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         OrchestratorVersion = "",
    ///         OsDiskSizeGB = 64,
    ///         OsDiskType = "Ephemeral",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with FIPS enabled OS
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         EnableFIPS = true,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with GPUMIG
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         GpuInstanceProfile = "MIG2g",
    ///         KubeletConfig = new AzureNative.ContainerService.V20220402Preview.Inputs.KubeletConfigArgs
    ///         {
    ///             AllowedUnsafeSysctls = new[]
    ///             {
    ///                 "kernel.msg*",
    ///                 "net.core.somaxconn",
    ///             },
    ///             CpuCfsQuota = true,
    ///             CpuCfsQuotaPeriod = "200ms",
    ///             CpuManagerPolicy = "static",
    ///             FailSwapOn = false,
    ///             ImageGcHighThreshold = 90,
    ///             ImageGcLowThreshold = 70,
    ///             TopologyManagerPolicy = "best-effort",
    ///         },
    ///         LinuxOSConfig = new AzureNative.ContainerService.V20220402Preview.Inputs.LinuxOSConfigArgs
    ///         {
    ///             SwapFileSizeMB = 1500,
    ///             Sysctls = new AzureNative.ContainerService.V20220402Preview.Inputs.SysctlConfigArgs
    ///             {
    ///                 KernelThreadsMax = 99999,
    ///                 NetCoreWmemDefault = 12345,
    ///                 NetIpv4IpLocalPortRange = "20000 60000",
    ///                 NetIpv4TcpTwReuse = true,
    ///             },
    ///             TransparentHugePageDefrag = "madvise",
    ///             TransparentHugePageEnabled = "always",
    ///         },
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_ND96asr_v4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with Krustlet and the WASI runtime
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         Mode = "User",
    ///         OrchestratorVersion = "",
    ///         OsDiskSizeGB = 64,
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///         WorkloadRuntime = "WasmWasi",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with KubeletConfig and LinuxOSConfig
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         KubeletConfig = new AzureNative.ContainerService.V20220402Preview.Inputs.KubeletConfigArgs
    ///         {
    ///             AllowedUnsafeSysctls = new[]
    ///             {
    ///                 "kernel.msg*",
    ///                 "net.core.somaxconn",
    ///             },
    ///             CpuCfsQuota = true,
    ///             CpuCfsQuotaPeriod = "200ms",
    ///             CpuManagerPolicy = "static",
    ///             FailSwapOn = false,
    ///             ImageGcHighThreshold = 90,
    ///             ImageGcLowThreshold = 70,
    ///             TopologyManagerPolicy = "best-effort",
    ///         },
    ///         LinuxOSConfig = new AzureNative.ContainerService.V20220402Preview.Inputs.LinuxOSConfigArgs
    ///         {
    ///             SwapFileSizeMB = 1500,
    ///             Sysctls = new AzureNative.ContainerService.V20220402Preview.Inputs.SysctlConfigArgs
    ///             {
    ///                 KernelThreadsMax = 99999,
    ///                 NetCoreWmemDefault = 12345,
    ///                 NetIpv4IpLocalPortRange = "20000 60000",
    ///                 NetIpv4TcpTwReuse = true,
    ///             },
    ///             TransparentHugePageDefrag = "madvise",
    ///             TransparentHugePageEnabled = "always",
    ///         },
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with Message of the Day
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         MessageOfTheDay = "Zm9vCg==",
    ///         Mode = "User",
    ///         OrchestratorVersion = "",
    ///         OsDiskSizeGB = 64,
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with OSSKU
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         KubeletConfig = new AzureNative.ContainerService.V20220402Preview.Inputs.KubeletConfigArgs
    ///         {
    ///             AllowedUnsafeSysctls = new[]
    ///             {
    ///                 "kernel.msg*",
    ///                 "net.core.somaxconn",
    ///             },
    ///             CpuCfsQuota = true,
    ///             CpuCfsQuotaPeriod = "200ms",
    ///             CpuManagerPolicy = "static",
    ///             FailSwapOn = false,
    ///             ImageGcHighThreshold = 90,
    ///             ImageGcLowThreshold = 70,
    ///             TopologyManagerPolicy = "best-effort",
    ///         },
    ///         LinuxOSConfig = new AzureNative.ContainerService.V20220402Preview.Inputs.LinuxOSConfigArgs
    ///         {
    ///             SwapFileSizeMB = 1500,
    ///             Sysctls = new AzureNative.ContainerService.V20220402Preview.Inputs.SysctlConfigArgs
    ///             {
    ///                 KernelThreadsMax = 99999,
    ///                 NetCoreWmemDefault = 12345,
    ///                 NetIpv4IpLocalPortRange = "20000 60000",
    ///                 NetIpv4TcpTwReuse = true,
    ///             },
    ///             TransparentHugePageDefrag = "madvise",
    ///             TransparentHugePageEnabled = "always",
    ///         },
    ///         OrchestratorVersion = "",
    ///         OsSKU = "CBLMariner",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with PPG
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ProximityPlacementGroupID = "/subscriptions/subid1/resourcegroups/rg1/providers//Microsoft.Compute/proximityPlacementGroups/ppg1",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with UltraSSD enabled
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         EnableUltraSSD = true,
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_DS2_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Agent Pool with Windows OSSKU
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "wnp2",
    ///         Count = 3,
    ///         OrchestratorVersion = "1.23.3",
    ///         OsSKU = "Windows2022",
    ///         OsType = "Windows",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         VmSize = "Standard_D4s_v3",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create Spot Agent Pool
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         NodeLabels = 
    ///         {
    ///             { "key1", "val1" },
    ///         },
    ///         NodeTaints = new[]
    ///         {
    ///             "Key1=Value1:NoSchedule",
    ///         },
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         ScaleSetEvictionPolicy = "Delete",
    ///         ScaleSetPriority = "Spot",
    ///         Tags = 
    ///         {
    ///             { "name1", "val1" },
    ///         },
    ///         VmSize = "Standard_DS1_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create/Update Agent Pool
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         Mode = "User",
    ///         NodeLabels = 
    ///         {
    ///             { "key1", "val1" },
    ///         },
    ///         NodeTaints = new[]
    ///         {
    ///             "Key1=Value1:NoSchedule",
    ///         },
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         ScaleSetEvictionPolicy = "Delete",
    ///         ScaleSetPriority = "Spot",
    ///         Tags = 
    ///         {
    ///             { "name1", "val1" },
    ///         },
    ///         VmSize = "Standard_DS1_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Start Agent Pool
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         PowerState = new AzureNative.ContainerService.V20220402Preview.Inputs.PowerStateArgs
    ///         {
    ///             Code = "Running",
    ///         },
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Stop Agent Pool
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         PowerState = new AzureNative.ContainerService.V20220402Preview.Inputs.PowerStateArgs
    ///         {
    ///             Code = "Stopped",
    ///         },
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Update Agent Pool
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agentPool = new AzureNative.ContainerService.V20220402Preview.AgentPool("agentPool", new()
    ///     {
    ///         AgentPoolName = "agentpool1",
    ///         Count = 3,
    ///         EnableAutoScaling = true,
    ///         MaxCount = 2,
    ///         MinCount = 2,
    ///         NodeTaints = new[]
    ///         {
    ///             "Key1=Value1:NoSchedule",
    ///         },
    ///         OrchestratorVersion = "",
    ///         OsType = "Linux",
    ///         ResourceGroupName = "rg1",
    ///         ResourceName = "clustername1",
    ///         ScaleSetEvictionPolicy = "Delete",
    ///         ScaleSetPriority = "Spot",
    ///         VmSize = "Standard_DS1_v2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:containerservice/v20220402preview:AgentPool agentpool1 /subscriptions/subid1/resourcegroups/rg1/providers/Microsoft.ContainerService/managedClusters/clustername1/agentPools/agentpool1 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:containerservice/v20220402preview:AgentPool")]
    public partial class AgentPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
        /// </summary>
        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        /// <summary>
        /// AKS will associate the specified agent pool with the Capacity Reservation Group.
        /// </summary>
        [Output("capacityReservationGroupID")]
        public Output<string?> CapacityReservationGroupID { get; private set; } = null!;

        /// <summary>
        /// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
        /// </summary>
        [Output("count")]
        public Output<int?> Count { get; private set; } = null!;

        /// <summary>
        /// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
        /// </summary>
        [Output("creationData")]
        public Output<Outputs.CreationDataResponse?> CreationData { get; private set; } = null!;

        /// <summary>
        /// If orchestratorVersion was a fully specified version &lt;major.minor.patch&gt;, this field will be exactly equal to it. If orchestratorVersion was &lt;major.minor&gt;, this field will contain the full &lt;major.minor.patch&gt; version being used.
        /// </summary>
        [Output("currentOrchestratorVersion")]
        public Output<string?> CurrentOrchestratorVersion { get; private set; } = null!;

        /// <summary>
        /// Whether to enable auto-scaler
        /// </summary>
        [Output("enableAutoScaling")]
        public Output<bool?> EnableAutoScaling { get; private set; } = null!;

        /// <summary>
        /// When set to true, AKS deploys a daemonset and host services to sync custom certificate authorities from a user-provided config map into node trust stores. Defaults to false.
        /// </summary>
        [Output("enableCustomCATrust")]
        public Output<bool?> EnableCustomCATrust { get; private set; } = null!;

        /// <summary>
        /// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
        /// </summary>
        [Output("enableEncryptionAtHost")]
        public Output<bool?> EnableEncryptionAtHost { get; private set; } = null!;

        /// <summary>
        /// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
        /// </summary>
        [Output("enableFIPS")]
        public Output<bool?> EnableFIPS { get; private set; } = null!;

        /// <summary>
        /// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
        /// </summary>
        [Output("enableNodePublicIP")]
        public Output<bool?> EnableNodePublicIP { get; private set; } = null!;

        /// <summary>
        /// Whether to enable UltraSSD
        /// </summary>
        [Output("enableUltraSSD")]
        public Output<bool?> EnableUltraSSD { get; private set; } = null!;

        /// <summary>
        /// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
        /// </summary>
        [Output("gpuInstanceProfile")]
        public Output<string?> GpuInstanceProfile { get; private set; } = null!;

        /// <summary>
        /// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
        /// </summary>
        [Output("hostGroupID")]
        public Output<string?> HostGroupID { get; private set; } = null!;

        /// <summary>
        /// The Kubelet configuration on the agent pool nodes.
        /// </summary>
        [Output("kubeletConfig")]
        public Output<Outputs.KubeletConfigResponse?> KubeletConfig { get; private set; } = null!;

        /// <summary>
        /// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
        /// </summary>
        [Output("kubeletDiskType")]
        public Output<string?> KubeletDiskType { get; private set; } = null!;

        /// <summary>
        /// The OS configuration of Linux agent nodes.
        /// </summary>
        [Output("linuxOSConfig")]
        public Output<Outputs.LinuxOSConfigResponse?> LinuxOSConfig { get; private set; } = null!;

        /// <summary>
        /// The maximum number of nodes for auto-scaling
        /// </summary>
        [Output("maxCount")]
        public Output<int?> MaxCount { get; private set; } = null!;

        /// <summary>
        /// The maximum number of pods that can run on a node.
        /// </summary>
        [Output("maxPods")]
        public Output<int?> MaxPods { get; private set; } = null!;

        /// <summary>
        /// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
        /// </summary>
        [Output("messageOfTheDay")]
        public Output<string?> MessageOfTheDay { get; private set; } = null!;

        /// <summary>
        /// The minimum number of nodes for auto-scaling
        /// </summary>
        [Output("minCount")]
        public Output<int?> MinCount { get; private set; } = null!;

        /// <summary>
        /// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The version of node image
        /// </summary>
        [Output("nodeImageVersion")]
        public Output<string> NodeImageVersion { get; private set; } = null!;

        /// <summary>
        /// The node labels to be persisted across all nodes in agent pool.
        /// </summary>
        [Output("nodeLabels")]
        public Output<ImmutableDictionary<string, string>?> NodeLabels { get; private set; } = null!;

        /// <summary>
        /// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
        /// </summary>
        [Output("nodePublicIPPrefixID")]
        public Output<string?> NodePublicIPPrefixID { get; private set; } = null!;

        /// <summary>
        /// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        /// </summary>
        [Output("nodeTaints")]
        public Output<ImmutableArray<string>> NodeTaints { get; private set; } = null!;

        /// <summary>
        /// Both patch version &lt;major.minor.patch&gt; and &lt;major.minor&gt; are supported. When &lt;major.minor&gt; is specified, the latest supported patch version is chosen automatically. Updating the agent pool with the same &lt;major.minor&gt; once it has been created will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
        /// </summary>
        [Output("orchestratorVersion")]
        public Output<string?> OrchestratorVersion { get; private set; } = null!;

        /// <summary>
        /// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
        /// </summary>
        [Output("osDiskSizeGB")]
        public Output<int?> OsDiskSizeGB { get; private set; } = null!;

        /// <summary>
        /// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
        /// </summary>
        [Output("osDiskType")]
        public Output<string?> OsDiskType { get; private set; } = null!;

        /// <summary>
        /// Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after Windows2019 is deprecated.
        /// </summary>
        [Output("osSKU")]
        public Output<string?> OsSKU { get; private set; } = null!;

        /// <summary>
        /// The operating system type. The default is Linux.
        /// </summary>
        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        /// <summary>
        /// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </summary>
        [Output("podSubnetID")]
        public Output<string?> PodSubnetID { get; private set; } = null!;

        /// <summary>
        /// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
        /// </summary>
        [Output("powerState")]
        public Output<Outputs.PowerStateResponse?> PowerState { get; private set; } = null!;

        /// <summary>
        /// The current deployment or provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The ID for Proximity Placement Group.
        /// </summary>
        [Output("proximityPlacementGroupID")]
        public Output<string?> ProximityPlacementGroupID { get; private set; } = null!;

        /// <summary>
        /// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
        /// </summary>
        [Output("scaleDownMode")]
        public Output<string?> ScaleDownMode { get; private set; } = null!;

        /// <summary>
        /// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
        /// </summary>
        [Output("scaleSetEvictionPolicy")]
        public Output<string?> ScaleSetEvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
        /// </summary>
        [Output("scaleSetPriority")]
        public Output<string?> ScaleSetPriority { get; private set; } = null!;

        /// <summary>
        /// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
        /// </summary>
        [Output("spotMaxPrice")]
        public Output<double?> SpotMaxPrice { get; private set; } = null!;

        /// <summary>
        /// The tags to be persisted on the agent pool virtual machine scale set.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Settings for upgrading the agentpool
        /// </summary>
        [Output("upgradeSettings")]
        public Output<Outputs.AgentPoolUpgradeSettingsResponse?> UpgradeSettings { get; private set; } = null!;

        /// <summary>
        /// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
        /// </summary>
        [Output("vmSize")]
        public Output<string?> VmSize { get; private set; } = null!;

        /// <summary>
        /// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </summary>
        [Output("vnetSubnetID")]
        public Output<string?> VnetSubnetID { get; private set; } = null!;

        /// <summary>
        /// Determines the type of workload a node can run.
        /// </summary>
        [Output("workloadRuntime")]
        public Output<string?> WorkloadRuntime { get; private set; } = null!;


        /// <summary>
        /// Create a AgentPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentPool(string name, AgentPoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerservice/v20220402preview:AgentPool", name, args ?? new AgentPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentPool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerservice/v20220402preview:AgentPool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerservice:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20190201:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20190401:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20190601:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20190801:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20191001:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20191101:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200101:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200201:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200301:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200401:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200601:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200701:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20200901:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20201101:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20201201:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20210201:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20210301:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20210501:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20210701:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20210801:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20210901:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20211001:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20211101preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220101:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220102preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220201:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220202preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220301:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220302preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220401:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220502preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220601:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220602preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220701:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220702preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220802preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220803preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220901:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220902preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20221002preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20221101:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20221102preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20230101:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20230102preview:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20230201:AgentPool"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20230202preview:AgentPool"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentPool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AgentPool(name, id, options);
        }
    }

    public sealed class AgentPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the agent pool.
        /// </summary>
        [Input("agentPoolName")]
        public Input<string>? AgentPoolName { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        /// <summary>
        /// AKS will associate the specified agent pool with the Capacity Reservation Group.
        /// </summary>
        [Input("capacityReservationGroupID")]
        public Input<string>? CapacityReservationGroupID { get; set; }

        /// <summary>
        /// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
        /// </summary>
        [Input("creationData")]
        public Input<Inputs.CreationDataArgs>? CreationData { get; set; }

        /// <summary>
        /// If orchestratorVersion was a fully specified version &lt;major.minor.patch&gt;, this field will be exactly equal to it. If orchestratorVersion was &lt;major.minor&gt;, this field will contain the full &lt;major.minor.patch&gt; version being used.
        /// </summary>
        [Input("currentOrchestratorVersion")]
        public Input<string>? CurrentOrchestratorVersion { get; set; }

        /// <summary>
        /// Whether to enable auto-scaler
        /// </summary>
        [Input("enableAutoScaling")]
        public Input<bool>? EnableAutoScaling { get; set; }

        /// <summary>
        /// When set to true, AKS deploys a daemonset and host services to sync custom certificate authorities from a user-provided config map into node trust stores. Defaults to false.
        /// </summary>
        [Input("enableCustomCATrust")]
        public Input<bool>? EnableCustomCATrust { get; set; }

        /// <summary>
        /// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
        /// </summary>
        [Input("enableEncryptionAtHost")]
        public Input<bool>? EnableEncryptionAtHost { get; set; }

        /// <summary>
        /// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
        /// </summary>
        [Input("enableFIPS")]
        public Input<bool>? EnableFIPS { get; set; }

        /// <summary>
        /// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
        /// </summary>
        [Input("enableNodePublicIP")]
        public Input<bool>? EnableNodePublicIP { get; set; }

        /// <summary>
        /// Whether to enable UltraSSD
        /// </summary>
        [Input("enableUltraSSD")]
        public Input<bool>? EnableUltraSSD { get; set; }

        /// <summary>
        /// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
        /// </summary>
        [Input("gpuInstanceProfile")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.GPUInstanceProfile>? GpuInstanceProfile { get; set; }

        /// <summary>
        /// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
        /// </summary>
        [Input("hostGroupID")]
        public Input<string>? HostGroupID { get; set; }

        /// <summary>
        /// The Kubelet configuration on the agent pool nodes.
        /// </summary>
        [Input("kubeletConfig")]
        public Input<Inputs.KubeletConfigArgs>? KubeletConfig { get; set; }

        /// <summary>
        /// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
        /// </summary>
        [Input("kubeletDiskType")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.KubeletDiskType>? KubeletDiskType { get; set; }

        /// <summary>
        /// The OS configuration of Linux agent nodes.
        /// </summary>
        [Input("linuxOSConfig")]
        public Input<Inputs.LinuxOSConfigArgs>? LinuxOSConfig { get; set; }

        /// <summary>
        /// The maximum number of nodes for auto-scaling
        /// </summary>
        [Input("maxCount")]
        public Input<int>? MaxCount { get; set; }

        /// <summary>
        /// The maximum number of pods that can run on a node.
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        /// <summary>
        /// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
        /// </summary>
        [Input("messageOfTheDay")]
        public Input<string>? MessageOfTheDay { get; set; }

        /// <summary>
        /// The minimum number of nodes for auto-scaling
        /// </summary>
        [Input("minCount")]
        public Input<int>? MinCount { get; set; }

        /// <summary>
        /// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
        /// </summary>
        [Input("mode")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.AgentPoolMode>? Mode { get; set; }

        [Input("nodeLabels")]
        private InputMap<string>? _nodeLabels;

        /// <summary>
        /// The node labels to be persisted across all nodes in agent pool.
        /// </summary>
        public InputMap<string> NodeLabels
        {
            get => _nodeLabels ?? (_nodeLabels = new InputMap<string>());
            set => _nodeLabels = value;
        }

        /// <summary>
        /// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
        /// </summary>
        [Input("nodePublicIPPrefixID")]
        public Input<string>? NodePublicIPPrefixID { get; set; }

        [Input("nodeTaints")]
        private InputList<string>? _nodeTaints;

        /// <summary>
        /// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        /// </summary>
        public InputList<string> NodeTaints
        {
            get => _nodeTaints ?? (_nodeTaints = new InputList<string>());
            set => _nodeTaints = value;
        }

        /// <summary>
        /// Both patch version &lt;major.minor.patch&gt; and &lt;major.minor&gt; are supported. When &lt;major.minor&gt; is specified, the latest supported patch version is chosen automatically. Updating the agent pool with the same &lt;major.minor&gt; once it has been created will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
        /// </summary>
        [Input("orchestratorVersion")]
        public Input<string>? OrchestratorVersion { get; set; }

        /// <summary>
        /// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
        /// </summary>
        [Input("osDiskSizeGB")]
        public Input<int>? OsDiskSizeGB { get; set; }

        /// <summary>
        /// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
        /// </summary>
        [Input("osDiskType")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.OSDiskType>? OsDiskType { get; set; }

        /// <summary>
        /// Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after Windows2019 is deprecated.
        /// </summary>
        [Input("osSKU")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.OSSKU>? OsSKU { get; set; }

        /// <summary>
        /// The operating system type. The default is Linux.
        /// </summary>
        [Input("osType")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.OSType>? OsType { get; set; }

        /// <summary>
        /// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </summary>
        [Input("podSubnetID")]
        public Input<string>? PodSubnetID { get; set; }

        /// <summary>
        /// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
        /// </summary>
        [Input("powerState")]
        public Input<Inputs.PowerStateArgs>? PowerState { get; set; }

        /// <summary>
        /// The ID for Proximity Placement Group.
        /// </summary>
        [Input("proximityPlacementGroupID")]
        public Input<string>? ProximityPlacementGroupID { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the managed cluster resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        /// <summary>
        /// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
        /// </summary>
        [Input("scaleDownMode")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.ScaleDownMode>? ScaleDownMode { get; set; }

        /// <summary>
        /// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
        /// </summary>
        [Input("scaleSetEvictionPolicy")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.ScaleSetEvictionPolicy>? ScaleSetEvictionPolicy { get; set; }

        /// <summary>
        /// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
        /// </summary>
        [Input("scaleSetPriority")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.ScaleSetPriority>? ScaleSetPriority { get; set; }

        /// <summary>
        /// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
        /// </summary>
        [Input("spotMaxPrice")]
        public Input<double>? SpotMaxPrice { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags to be persisted on the agent pool virtual machine scale set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of Agent Pool.
        /// </summary>
        [Input("type")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.AgentPoolType>? Type { get; set; }

        /// <summary>
        /// Settings for upgrading the agentpool
        /// </summary>
        [Input("upgradeSettings")]
        public Input<Inputs.AgentPoolUpgradeSettingsArgs>? UpgradeSettings { get; set; }

        /// <summary>
        /// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        /// <summary>
        /// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </summary>
        [Input("vnetSubnetID")]
        public Input<string>? VnetSubnetID { get; set; }

        /// <summary>
        /// Determines the type of workload a node can run.
        /// </summary>
        [Input("workloadRuntime")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20220402Preview.WorkloadRuntime>? WorkloadRuntime { get; set; }

        public AgentPoolArgs()
        {
        }
        public static new AgentPoolArgs Empty => new AgentPoolArgs();
    }
}
