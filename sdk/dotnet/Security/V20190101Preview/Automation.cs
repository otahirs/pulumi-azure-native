// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20190101Preview
{
    /// <summary>
    /// The security automation resource.
    /// 
    /// ## Example Usage
    /// ### Create or update a security automation for all assessments (including all severities)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var automation = new AzureNative.Security.V20190101Preview.Automation("automation", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationActionLogicAppArgs
    ///             {
    ///                 ActionType = "LogicApp",
    ///                 LogicAppResourceId = "/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1",
    ///                 Uri = "https://exampleTriggerUri1.com",
    ///             },
    ///         },
    ///         AutomationName = "exampleAutomation",
    ///         Description = "An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment",
    ///         IsEnabled = true,
    ///         Location = "Central US",
    ///         ResourceGroupName = "exampleResourceGroup",
    ///         Scopes = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationScopeArgs
    ///             {
    ///                 Description = "A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5",
    ///                 ScopePath = "/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup",
    ///             },
    ///         },
    ///         Sources = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationSourceArgs
    ///             {
    ///                 EventSource = "Assessments",
    ///             },
    ///         },
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a security automation for all high severity assessments
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var automation = new AzureNative.Security.V20190101Preview.Automation("automation", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationActionLogicAppArgs
    ///             {
    ///                 ActionType = "LogicApp",
    ///                 LogicAppResourceId = "/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1",
    ///                 Uri = "https://exampleTriggerUri1.com",
    ///             },
    ///         },
    ///         AutomationName = "exampleAutomation",
    ///         Description = "An example of a security automation that triggers one LogicApp resource (myTest1) on any high severity security assessment",
    ///         IsEnabled = true,
    ///         Location = "Central US",
    ///         ResourceGroupName = "exampleResourceGroup",
    ///         Scopes = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationScopeArgs
    ///             {
    ///                 Description = "A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5",
    ///                 ScopePath = "/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup",
    ///             },
    ///         },
    ///         Sources = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationSourceArgs
    ///             {
    ///                 EventSource = "Assessments",
    ///                 RuleSets = new[]
    ///                 {
    ///                     new AzureNative.Security.V20190101Preview.Inputs.AutomationRuleSetArgs
    ///                     {
    ///                         Rules = new[]
    ///                         {
    ///                             new AzureNative.Security.V20190101Preview.Inputs.AutomationTriggeringRuleArgs
    ///                             {
    ///                                 ExpectedValue = "High",
    ///                                 Operator = "Equals",
    ///                                 PropertyJPath = "properties.metadata.severity",
    ///                                 PropertyType = "String",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Disable or enable a security automation
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var automation = new AzureNative.Security.V20190101Preview.Automation("automation", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationActionLogicAppArgs
    ///             {
    ///                 ActionType = "LogicApp",
    ///                 LogicAppResourceId = "/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1",
    ///                 Uri = "https://exampleTriggerUri1.com",
    ///             },
    ///         },
    ///         AutomationName = "exampleAutomation",
    ///         Description = "An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment",
    ///         IsEnabled = false,
    ///         Location = "Central US",
    ///         ResourceGroupName = "exampleResourceGroup",
    ///         Scopes = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationScopeArgs
    ///             {
    ///                 Description = "A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5",
    ///                 ScopePath = "/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup",
    ///             },
    ///         },
    ///         Sources = new[]
    ///         {
    ///             new AzureNative.Security.V20190101Preview.Inputs.AutomationSourceArgs
    ///             {
    ///                 EventSource = "Assessments",
    ///                 RuleSets = new[]
    ///                 {
    ///                     new AzureNative.Security.V20190101Preview.Inputs.AutomationRuleSetArgs
    ///                     {
    ///                         Rules = new[]
    ///                         {
    ///                             new AzureNative.Security.V20190101Preview.Inputs.AutomationTriggeringRuleArgs
    ///                             {
    ///                                 ExpectedValue = "customAssessment",
    ///                                 Operator = "Equals",
    ///                                 PropertyJPath = "$.Entity.AssessmentType",
    ///                                 PropertyType = "String",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:security/v20190101preview:Automation exampleAutomation /subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:security/v20190101preview:Automation")]
    public partial class Automation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<object>> Actions { get; private set; } = null!;

        /// <summary>
        /// The security automation description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Entity tag is used for comparing two or more entities from the same requested resource.
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the security automation is enabled.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// Kind of the resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<Outputs.AutomationScopeResponse>> Scopes { get; private set; } = null!;

        /// <summary>
        /// A collection of the source event types which evaluate the security automation set of rules.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.AutomationSourceResponse>> Sources { get; private set; } = null!;

        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Automation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Automation(string name, AutomationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:security/v20190101preview:Automation", name, args ?? new AutomationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Automation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:security/v20190101preview:Automation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Automation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Automation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Automation(name, id, options);
        }
    }

    public sealed class AutomationArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<object>? _actions;

        /// <summary>
        /// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
        /// </summary>
        public InputList<object> Actions
        {
            get => _actions ?? (_actions = new InputList<object>());
            set => _actions = value;
        }

        /// <summary>
        /// The security automation name.
        /// </summary>
        [Input("automationName")]
        public Input<string>? AutomationName { get; set; }

        /// <summary>
        /// The security automation description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether the security automation is enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Kind of the resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("scopes")]
        private InputList<Inputs.AutomationScopeArgs>? _scopes;

        /// <summary>
        /// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
        /// </summary>
        public InputList<Inputs.AutomationScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.AutomationScopeArgs>());
            set => _scopes = value;
        }

        [Input("sources")]
        private InputList<Inputs.AutomationSourceArgs>? _sources;

        /// <summary>
        /// A collection of the source event types which evaluate the security automation set of rules.
        /// </summary>
        public InputList<Inputs.AutomationSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.AutomationSourceArgs>());
            set => _sources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AutomationArgs()
        {
        }
        public static new AutomationArgs Empty => new AutomationArgs();
    }
}
