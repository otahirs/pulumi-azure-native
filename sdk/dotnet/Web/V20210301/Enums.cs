// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Web.V20210301
{
    /// <summary>
    /// Predefined action to be taken.
    /// </summary>
    [EnumType]
    public readonly struct AutoHealActionType : IEquatable<AutoHealActionType>
    {
        private readonly string _value;

        private AutoHealActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoHealActionType Recycle { get; } = new AutoHealActionType("Recycle");
        public static AutoHealActionType LogEvent { get; } = new AutoHealActionType("LogEvent");
        public static AutoHealActionType CustomAction { get; } = new AutoHealActionType("CustomAction");

        public static bool operator ==(AutoHealActionType left, AutoHealActionType right) => left.Equals(right);
        public static bool operator !=(AutoHealActionType left, AutoHealActionType right) => !left.Equals(right);

        public static explicit operator string(AutoHealActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoHealActionType other && Equals(other);
        public bool Equals(AutoHealActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of storage.
    /// </summary>
    [EnumType]
    public readonly struct AzureStorageType : IEquatable<AzureStorageType>
    {
        private readonly string _value;

        private AzureStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureStorageType AzureFiles { get; } = new AzureStorageType("AzureFiles");
        public static AzureStorageType AzureBlob { get; } = new AzureStorageType("AzureBlob");

        public static bool operator ==(AzureStorageType left, AzureStorageType right) => left.Equals(right);
        public static bool operator !=(AzureStorageType left, AzureStorageType right) => !left.Equals(right);

        public static explicit operator string(AzureStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureStorageType other && Equals(other);
        public bool Equals(AzureStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This composes with ClientCertEnabled setting.
    /// - ClientCertEnabled: false means ClientCert is ignored.
    /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
    /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
    /// </summary>
    [EnumType]
    public readonly struct ClientCertMode : IEquatable<ClientCertMode>
    {
        private readonly string _value;

        private ClientCertMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClientCertMode Required { get; } = new ClientCertMode("Required");
        public static ClientCertMode Optional { get; } = new ClientCertMode("Optional");
        public static ClientCertMode OptionalInteractiveUser { get; } = new ClientCertMode("OptionalInteractiveUser");

        public static bool operator ==(ClientCertMode left, ClientCertMode right) => left.Equals(right);
        public static bool operator !=(ClientCertMode left, ClientCertMode right) => !left.Equals(right);

        public static explicit operator string(ClientCertMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClientCertMode other && Equals(other);
        public bool Equals(ClientCertMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of database.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionStringType : IEquatable<ConnectionStringType>
    {
        private readonly string _value;

        private ConnectionStringType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionStringType MySql { get; } = new ConnectionStringType("MySql");
        public static ConnectionStringType SQLServer { get; } = new ConnectionStringType("SQLServer");
        public static ConnectionStringType SQLAzure { get; } = new ConnectionStringType("SQLAzure");
        public static ConnectionStringType Custom { get; } = new ConnectionStringType("Custom");
        public static ConnectionStringType NotificationHub { get; } = new ConnectionStringType("NotificationHub");
        public static ConnectionStringType ServiceBus { get; } = new ConnectionStringType("ServiceBus");
        public static ConnectionStringType EventHub { get; } = new ConnectionStringType("EventHub");
        public static ConnectionStringType ApiHub { get; } = new ConnectionStringType("ApiHub");
        public static ConnectionStringType DocDb { get; } = new ConnectionStringType("DocDb");
        public static ConnectionStringType RedisCache { get; } = new ConnectionStringType("RedisCache");
        public static ConnectionStringType PostgreSQL { get; } = new ConnectionStringType("PostgreSQL");

        public static bool operator ==(ConnectionStringType left, ConnectionStringType right) => left.Equals(right);
        public static bool operator !=(ConnectionStringType left, ConnectionStringType right) => !left.Equals(right);

        public static explicit operator string(ConnectionStringType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionStringType other && Equals(other);
        public bool Equals(ConnectionStringType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State indicating the status of the enterprise grade CDN serving traffic to the static web app.
    /// </summary>
    [EnumType]
    public readonly struct EnterpriseGradeCdnStatus : IEquatable<EnterpriseGradeCdnStatus>
    {
        private readonly string _value;

        private EnterpriseGradeCdnStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnterpriseGradeCdnStatus Enabled { get; } = new EnterpriseGradeCdnStatus("Enabled");
        public static EnterpriseGradeCdnStatus Enabling { get; } = new EnterpriseGradeCdnStatus("Enabling");
        public static EnterpriseGradeCdnStatus Disabled { get; } = new EnterpriseGradeCdnStatus("Disabled");
        public static EnterpriseGradeCdnStatus Disabling { get; } = new EnterpriseGradeCdnStatus("Disabling");

        public static bool operator ==(EnterpriseGradeCdnStatus left, EnterpriseGradeCdnStatus right) => left.Equals(right);
        public static bool operator !=(EnterpriseGradeCdnStatus left, EnterpriseGradeCdnStatus right) => !left.Equals(right);

        public static explicit operator string(EnterpriseGradeCdnStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnterpriseGradeCdnStatus other && Equals(other);
        public bool Equals(EnterpriseGradeCdnStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of FTP / FTPS service
    /// </summary>
    [EnumType]
    public readonly struct FtpsState : IEquatable<FtpsState>
    {
        private readonly string _value;

        private FtpsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FtpsState AllAllowed { get; } = new FtpsState("AllAllowed");
        public static FtpsState FtpsOnly { get; } = new FtpsState("FtpsOnly");
        public static FtpsState Disabled { get; } = new FtpsState("Disabled");

        public static bool operator ==(FtpsState left, FtpsState right) => left.Equals(right);
        public static bool operator !=(FtpsState left, FtpsState right) => !left.Equals(right);

        public static explicit operator string(FtpsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FtpsState other && Equals(other);
        public bool Equals(FtpsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the hostname is a standard or repository hostname.
    /// </summary>
    [EnumType]
    public readonly struct HostType : IEquatable<HostType>
    {
        private readonly string _value;

        private HostType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostType Standard { get; } = new HostType("Standard");
        public static HostType Repository { get; } = new HostType("Repository");

        public static bool operator ==(HostType left, HostType right) => left.Equals(right);
        public static bool operator !=(HostType left, HostType right) => !left.Equals(right);

        public static explicit operator string(HostType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostType other && Equals(other);
        public bool Equals(HostType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
    /// </summary>
    [EnumType]
    public readonly struct IpFilterTag : IEquatable<IpFilterTag>
    {
        private readonly string _value;

        private IpFilterTag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpFilterTag Default { get; } = new IpFilterTag("Default");
        public static IpFilterTag XffProxy { get; } = new IpFilterTag("XffProxy");
        public static IpFilterTag ServiceTag { get; } = new IpFilterTag("ServiceTag");

        public static bool operator ==(IpFilterTag left, IpFilterTag right) => left.Equals(right);
        public static bool operator !=(IpFilterTag left, IpFilterTag right) => !left.Equals(right);

        public static explicit operator string(IpFilterTag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpFilterTag other && Equals(other);
        public bool Equals(IpFilterTag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Managed pipeline mode.
    /// </summary>
    [EnumType]
    public readonly struct ManagedPipelineMode : IEquatable<ManagedPipelineMode>
    {
        private readonly string _value;

        private ManagedPipelineMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedPipelineMode Integrated { get; } = new ManagedPipelineMode("Integrated");
        public static ManagedPipelineMode Classic { get; } = new ManagedPipelineMode("Classic");

        public static bool operator ==(ManagedPipelineMode left, ManagedPipelineMode right) => left.Equals(right);
        public static bool operator !=(ManagedPipelineMode left, ManagedPipelineMode right) => !left.Equals(right);

        public static explicit operator string(ManagedPipelineMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedPipelineMode other && Equals(other);
        public bool Equals(ManagedPipelineMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity.
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned, UserAssigned");
        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Public Certificate Location
    /// </summary>
    [EnumType]
    public readonly struct PublicCertificateLocation : IEquatable<PublicCertificateLocation>
    {
        private readonly string _value;

        private PublicCertificateLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicCertificateLocation CurrentUserMy { get; } = new PublicCertificateLocation("CurrentUserMy");
        public static PublicCertificateLocation LocalMachineMy { get; } = new PublicCertificateLocation("LocalMachineMy");
        public static PublicCertificateLocation Unknown { get; } = new PublicCertificateLocation("Unknown");

        public static bool operator ==(PublicCertificateLocation left, PublicCertificateLocation right) => left.Equals(right);
        public static bool operator !=(PublicCertificateLocation left, PublicCertificateLocation right) => !left.Equals(right);

        public static explicit operator string(PublicCertificateLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicCertificateLocation other && Equals(other);
        public bool Equals(PublicCertificateLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Site redundancy mode
    /// </summary>
    [EnumType]
    public readonly struct RedundancyMode : IEquatable<RedundancyMode>
    {
        private readonly string _value;

        private RedundancyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedundancyMode None { get; } = new RedundancyMode("None");
        public static RedundancyMode Manual { get; } = new RedundancyMode("Manual");
        public static RedundancyMode Failover { get; } = new RedundancyMode("Failover");
        public static RedundancyMode ActiveActive { get; } = new RedundancyMode("ActiveActive");
        public static RedundancyMode GeoRedundant { get; } = new RedundancyMode("GeoRedundant");

        public static bool operator ==(RedundancyMode left, RedundancyMode right) => left.Equals(right);
        public static bool operator !=(RedundancyMode left, RedundancyMode right) => !left.Equals(right);

        public static explicit operator string(RedundancyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedundancyMode other && Equals(other);
        public bool Equals(RedundancyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SCM type.
    /// </summary>
    [EnumType]
    public readonly struct ScmType : IEquatable<ScmType>
    {
        private readonly string _value;

        private ScmType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScmType None { get; } = new ScmType("None");
        public static ScmType Dropbox { get; } = new ScmType("Dropbox");
        public static ScmType Tfs { get; } = new ScmType("Tfs");
        public static ScmType LocalGit { get; } = new ScmType("LocalGit");
        public static ScmType GitHub { get; } = new ScmType("GitHub");
        public static ScmType CodePlexGit { get; } = new ScmType("CodePlexGit");
        public static ScmType CodePlexHg { get; } = new ScmType("CodePlexHg");
        public static ScmType BitbucketGit { get; } = new ScmType("BitbucketGit");
        public static ScmType BitbucketHg { get; } = new ScmType("BitbucketHg");
        public static ScmType ExternalGit { get; } = new ScmType("ExternalGit");
        public static ScmType ExternalHg { get; } = new ScmType("ExternalHg");
        public static ScmType OneDrive { get; } = new ScmType("OneDrive");
        public static ScmType VSO { get; } = new ScmType("VSO");
        public static ScmType VSTSRM { get; } = new ScmType("VSTSRM");

        public static bool operator ==(ScmType left, ScmType right) => left.Equals(right);
        public static bool operator !=(ScmType left, ScmType right) => !left.Equals(right);

        public static explicit operator string(ScmType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScmType other && Equals(other);
        public bool Equals(ScmType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Site load balancing.
    /// </summary>
    [EnumType]
    public readonly struct SiteLoadBalancing : IEquatable<SiteLoadBalancing>
    {
        private readonly string _value;

        private SiteLoadBalancing(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SiteLoadBalancing WeightedRoundRobin { get; } = new SiteLoadBalancing("WeightedRoundRobin");
        public static SiteLoadBalancing LeastRequests { get; } = new SiteLoadBalancing("LeastRequests");
        public static SiteLoadBalancing LeastResponseTime { get; } = new SiteLoadBalancing("LeastResponseTime");
        public static SiteLoadBalancing WeightedTotalTraffic { get; } = new SiteLoadBalancing("WeightedTotalTraffic");
        public static SiteLoadBalancing RequestHash { get; } = new SiteLoadBalancing("RequestHash");
        public static SiteLoadBalancing PerSiteRoundRobin { get; } = new SiteLoadBalancing("PerSiteRoundRobin");

        public static bool operator ==(SiteLoadBalancing left, SiteLoadBalancing right) => left.Equals(right);
        public static bool operator !=(SiteLoadBalancing left, SiteLoadBalancing right) => !left.Equals(right);

        public static explicit operator string(SiteLoadBalancing value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SiteLoadBalancing other && Equals(other);
        public bool Equals(SiteLoadBalancing other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SSL type.
    /// </summary>
    [EnumType]
    public readonly struct SslState : IEquatable<SslState>
    {
        private readonly string _value;

        private SslState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslState Disabled { get; } = new SslState("Disabled");
        public static SslState SniEnabled { get; } = new SslState("SniEnabled");
        public static SslState IpBasedEnabled { get; } = new SslState("IpBasedEnabled");

        public static bool operator ==(SslState left, SslState right) => left.Equals(right);
        public static bool operator !=(SslState left, SslState right) => !left.Equals(right);

        public static explicit operator string(SslState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslState other && Equals(other);
        public bool Equals(SslState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State indicating whether staging environments are allowed or not allowed for a static web app.
    /// </summary>
    [EnumType]
    public readonly struct StagingEnvironmentPolicy : IEquatable<StagingEnvironmentPolicy>
    {
        private readonly string _value;

        private StagingEnvironmentPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StagingEnvironmentPolicy Enabled { get; } = new StagingEnvironmentPolicy("Enabled");
        public static StagingEnvironmentPolicy Disabled { get; } = new StagingEnvironmentPolicy("Disabled");

        public static bool operator ==(StagingEnvironmentPolicy left, StagingEnvironmentPolicy right) => left.Equals(right);
        public static bool operator !=(StagingEnvironmentPolicy left, StagingEnvironmentPolicy right) => !left.Equals(right);

        public static explicit operator string(StagingEnvironmentPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StagingEnvironmentPolicy other && Equals(other);
        public bool Equals(StagingEnvironmentPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
    /// </summary>
    [EnumType]
    public readonly struct SupportedTlsVersions : IEquatable<SupportedTlsVersions>
    {
        private readonly string _value;

        private SupportedTlsVersions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportedTlsVersions SupportedTlsVersions_1_0 { get; } = new SupportedTlsVersions("1.0");
        public static SupportedTlsVersions SupportedTlsVersions_1_1 { get; } = new SupportedTlsVersions("1.1");
        public static SupportedTlsVersions SupportedTlsVersions_1_2 { get; } = new SupportedTlsVersions("1.2");

        public static bool operator ==(SupportedTlsVersions left, SupportedTlsVersions right) => left.Equals(right);
        public static bool operator !=(SupportedTlsVersions left, SupportedTlsVersions right) => !left.Equals(right);

        public static explicit operator string(SupportedTlsVersions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportedTlsVersions other && Equals(other);
        public bool Equals(SupportedTlsVersions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
