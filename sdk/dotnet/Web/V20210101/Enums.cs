// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Web.V20210101
{
    /// <summary>
    /// Database type (e.g. SqlAzure / MySql).
    /// </summary>
    [EnumType]
    public readonly struct DatabaseType : IEquatable<DatabaseType>
    {
        private readonly string _value;

        private DatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseType SqlAzure { get; } = new DatabaseType("SqlAzure");
        public static DatabaseType MySql { get; } = new DatabaseType("MySql");
        public static DatabaseType LocalMySql { get; } = new DatabaseType("LocalMySql");
        public static DatabaseType PostgreSql { get; } = new DatabaseType("PostgreSql");

        public static bool operator ==(DatabaseType left, DatabaseType right) => left.Equals(right);
        public static bool operator !=(DatabaseType left, DatabaseType right) => !left.Equals(right);

        public static explicit operator string(DatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseType other && Equals(other);
        public bool Equals(DatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
    /// </summary>
    [EnumType]
    public readonly struct FrequencyUnit : IEquatable<FrequencyUnit>
    {
        private readonly string _value;

        private FrequencyUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrequencyUnit Day { get; } = new FrequencyUnit("Day");
        public static FrequencyUnit Hour { get; } = new FrequencyUnit("Hour");

        public static bool operator ==(FrequencyUnit left, FrequencyUnit right) => left.Equals(right);
        public static bool operator !=(FrequencyUnit left, FrequencyUnit right) => !left.Equals(right);

        public static explicit operator string(FrequencyUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrequencyUnit other && Equals(other);
        public bool Equals(FrequencyUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FrontEndServiceType : IEquatable<FrontEndServiceType>
    {
        private readonly string _value;

        private FrontEndServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontEndServiceType NodePort { get; } = new FrontEndServiceType("NodePort");
        public static FrontEndServiceType LoadBalancer { get; } = new FrontEndServiceType("LoadBalancer");

        public static bool operator ==(FrontEndServiceType left, FrontEndServiceType right) => left.Equals(right);
        public static bool operator !=(FrontEndServiceType left, FrontEndServiceType right) => !left.Equals(right);

        public static explicit operator string(FrontEndServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontEndServiceType other && Equals(other);
        public bool Equals(FrontEndServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType LocalNode { get; } = new StorageType("LocalNode");
        public static StorageType NetworkFileSystem { get; } = new StorageType("NetworkFileSystem");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
