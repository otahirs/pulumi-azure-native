// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridNetwork
{
    /// <summary>
    /// Sku sub resource.
    /// API Version: 2021-05-01.
    /// Previous API Version: 2020-01-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Create or update the sku of vendor resource
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vendorSkus = new AzureNative.HybridNetwork.VendorSkus("vendorSkus", new()
    ///     {
    ///         DeploymentMode = "PrivateEdgeZone",
    ///         ManagedApplicationTemplate = null,
    ///         NetworkFunctionTemplate = new AzureNative.HybridNetwork.Inputs.NetworkFunctionTemplateArgs
    ///         {
    ///             NetworkFunctionRoleConfigurations = new[]
    ///             {
    ///                 new AzureNative.HybridNetwork.Inputs.NetworkFunctionRoleConfigurationArgs
    ///                 {
    ///                     CustomProfile = new AzureNative.HybridNetwork.Inputs.CustomProfileArgs
    ///                     {
    ///                         MetadataConfigurationPath = "/var/logs/network.cfg",
    ///                     },
    ///                     NetworkInterfaces = new[]
    ///                     {
    ///                         new AzureNative.HybridNetwork.Inputs.NetworkInterfaceArgs
    ///                         {
    ///                             IpConfigurations = new[]
    ///                             {
    ///                                 new AzureNative.HybridNetwork.Inputs.NetworkInterfaceIPConfigurationArgs
    ///                                 {
    ///                                     Gateway = "",
    ///                                     IpAddress = "",
    ///                                     IpAllocationMethod = "Dynamic",
    ///                                     IpVersion = "IPv4",
    ///                                     Subnet = "",
    ///                                 },
    ///                             },
    ///                             MacAddress = "",
    ///                             NetworkInterfaceName = "nic1",
    ///                             VmSwitchType = "Wan",
    ///                         },
    ///                         new AzureNative.HybridNetwork.Inputs.NetworkInterfaceArgs
    ///                         {
    ///                             IpConfigurations = new[]
    ///                             {
    ///                                 new AzureNative.HybridNetwork.Inputs.NetworkInterfaceIPConfigurationArgs
    ///                                 {
    ///                                     Gateway = "",
    ///                                     IpAddress = "",
    ///                                     IpAllocationMethod = "Dynamic",
    ///                                     IpVersion = "IPv4",
    ///                                     Subnet = "",
    ///                                 },
    ///                             },
    ///                             MacAddress = "",
    ///                             NetworkInterfaceName = "nic2",
    ///                             VmSwitchType = "Management",
    ///                         },
    ///                     },
    ///                     OsProfile = new AzureNative.HybridNetwork.Inputs.OsProfileArgs
    ///                     {
    ///                         AdminUsername = "dummyuser",
    ///                         CustomData = "base-64 encoded string of custom data",
    ///                         LinuxConfiguration = new AzureNative.HybridNetwork.Inputs.LinuxConfigurationArgs
    ///                         {
    ///                             Ssh = new AzureNative.HybridNetwork.Inputs.SshConfigurationArgs
    ///                             {
    ///                                 PublicKeys = new[]
    ///                                 {
    ///                                     new AzureNative.HybridNetwork.Inputs.SshPublicKeyArgs
    ///                                     {
    ///                                         KeyData = "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAwrr66r8n6B8Y0zMF3dOpXEapIQD9DiYQ6D6/zwor9o39jSkHNiMMER/GETBbzP83LOcekm02aRjo55ArO7gPPVvCXbrirJu9pkm4AC4BBre5xSLS= user@constoso-DSH",
    ///                                         Path = "home/user/.ssh/authorized_keys",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     RoleName = "test",
    ///                     RoleType = "VirtualMachine",
    ///                     StorageProfile = new AzureNative.HybridNetwork.Inputs.StorageProfileArgs
    ///                     {
    ///                         DataDisks = new[]
    ///                         {
    ///                             new AzureNative.HybridNetwork.Inputs.DataDiskArgs
    ///                             {
    ///                                 CreateOption = "Empty",
    ///                                 DiskSizeGB = 10,
    ///                                 Name = "DataDisk1",
    ///                             },
    ///                         },
    ///                         ImageReference = new AzureNative.HybridNetwork.Inputs.ImageReferenceArgs
    ///                         {
    ///                             Offer = "UbuntuServer",
    ///                             Publisher = "Canonical",
    ///                             Sku = "18.04-LTS",
    ///                             Version = "18.04.201804262",
    ///                         },
    ///                         OsDisk = new AzureNative.HybridNetwork.Inputs.OsDiskArgs
    ///                         {
    ///                             DiskSizeGB = 30,
    ///                             Name = "vhdName",
    ///                             OsType = "Linux",
    ///                             Vhd = new AzureNative.HybridNetwork.Inputs.VirtualHardDiskArgs
    ///                             {
    ///                                 Uri = "https://contoso.net/link/vnd.vhd?sp=rl&amp;st=2020-10-08T20:38:19Z&amp;se=2020-12-09T19:38:00Z&amp;sv=2019-12-12&amp;sr=b&amp;sig=7BM2f4yOw%3D",
    ///                             },
    ///                         },
    ///                     },
    ///                     VirtualMachineSize = "Standard_D3_v2",
    ///                 },
    ///             },
    ///         },
    ///         Preview = true,
    ///         SkuName = "TestSku",
    ///         VendorName = "TestVendor",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:hybridnetwork:VendorSkus TestSku /subscriptions/subid/providers/Microsoft.HybridNetwork/vendors/TestVendor/vendorskus/TestSku 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:hybridnetwork:VendorSkus")]
    public partial class VendorSkus : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The sku deployment mode.
        /// </summary>
        [Output("deploymentMode")]
        public Output<string?> DeploymentMode { get; private set; } = null!;

        /// <summary>
        /// The parameters for the managed application to be supplied by the vendor.
        /// </summary>
        [Output("managedApplicationParameters")]
        public Output<object?> ManagedApplicationParameters { get; private set; } = null!;

        /// <summary>
        /// The template for the managed application deployment.
        /// </summary>
        [Output("managedApplicationTemplate")]
        public Output<object?> ManagedApplicationTemplate { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The template definition of the network function.
        /// </summary>
        [Output("networkFunctionTemplate")]
        public Output<Outputs.NetworkFunctionTemplateResponse?> NetworkFunctionTemplate { get; private set; } = null!;

        /// <summary>
        /// The network function type.
        /// </summary>
        [Output("networkFunctionType")]
        public Output<string?> NetworkFunctionType { get; private set; } = null!;

        /// <summary>
        /// Indicates if the vendor sku is in preview mode.
        /// </summary>
        [Output("preview")]
        public Output<bool?> Preview { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the vendor sku sub resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The sku type.
        /// </summary>
        [Output("skuType")]
        public Output<string?> SkuType { get; private set; } = null!;

        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a VendorSkus resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VendorSkus(string name, VendorSkusArgs args, CustomResourceOptions? options = null)
            : base("azure-native:hybridnetwork:VendorSkus", name, args ?? new VendorSkusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VendorSkus(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:hybridnetwork:VendorSkus", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:hybridnetwork/v20200101preview:VendorSkus"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridnetwork/v20210501:VendorSkus"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridnetwork/v20220101preview:VendorSkus"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VendorSkus resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VendorSkus Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VendorSkus(name, id, options);
        }
    }

    public sealed class VendorSkusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The sku deployment mode.
        /// </summary>
        [Input("deploymentMode")]
        public InputUnion<string, Pulumi.AzureNative.HybridNetwork.SkuDeploymentMode>? DeploymentMode { get; set; }

        /// <summary>
        /// The parameters for the managed application to be supplied by the vendor.
        /// </summary>
        [Input("managedApplicationParameters")]
        public Input<object>? ManagedApplicationParameters { get; set; }

        /// <summary>
        /// The template for the managed application deployment.
        /// </summary>
        [Input("managedApplicationTemplate")]
        public Input<object>? ManagedApplicationTemplate { get; set; }

        /// <summary>
        /// The template definition of the network function.
        /// </summary>
        [Input("networkFunctionTemplate")]
        public Input<Inputs.NetworkFunctionTemplateArgs>? NetworkFunctionTemplate { get; set; }

        /// <summary>
        /// The network function type.
        /// </summary>
        [Input("networkFunctionType")]
        public InputUnion<string, Pulumi.AzureNative.HybridNetwork.NetworkFunctionType>? NetworkFunctionType { get; set; }

        /// <summary>
        /// Indicates if the vendor sku is in preview mode.
        /// </summary>
        [Input("preview")]
        public Input<bool>? Preview { get; set; }

        /// <summary>
        /// The name of the sku.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// The sku type.
        /// </summary>
        [Input("skuType")]
        public InputUnion<string, Pulumi.AzureNative.HybridNetwork.SkuType>? SkuType { get; set; }

        /// <summary>
        /// The name of the vendor.
        /// </summary>
        [Input("vendorName", required: true)]
        public Input<string> VendorName { get; set; } = null!;

        public VendorSkusArgs()
        {
        }
        public static new VendorSkusArgs Empty => new VendorSkusArgs();
    }
}
