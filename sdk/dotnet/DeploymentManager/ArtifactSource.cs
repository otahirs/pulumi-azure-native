// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeploymentManager
{
    /// <summary>
    /// The resource that defines the source location where the artifacts are located.
    /// API Version: 2019-11-01-preview.
    /// Previous API Version: 2019-11-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Create artifact source
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var artifactSource = new AzureNative.DeploymentManager.ArtifactSource("artifactSource", new()
    ///     {
    ///         ArtifactSourceName = "myArtifactSource",
    ///         Authentication = new AzureNative.DeploymentManager.Inputs.SasAuthenticationArgs
    ///         {
    ///             SasUri = "https://mystorageaccount.blob.core.windows.net/myartifactsource?st=2018-07-07T14%3A10%3A00Z&amp;se=2019-12-31T15%3A10%3A00Z&amp;sp=rl&amp;sv=2017-04-17&amp;sr=c&amp;sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D",
    ///             Type = "Sas",
    ///         },
    ///         Location = "centralus",
    ///         ResourceGroupName = "myResourceGroup",
    ///         SourceType = "AzureStorage",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create artifact source with artifact root, an offset into the storage container
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var artifactSource = new AzureNative.DeploymentManager.ArtifactSource("artifactSource", new()
    ///     {
    ///         ArtifactRoot = "1.0.0.0",
    ///         ArtifactSourceName = "myArtifactSource",
    ///         Authentication = new AzureNative.DeploymentManager.Inputs.SasAuthenticationArgs
    ///         {
    ///             SasUri = "https://mystorageaccount.blob.core.windows.net/myartifactsource?st=2018-07-07T14%3A10%3A00Z&amp;se=2019-12-31T15%3A10%3A00Z&amp;sp=rl&amp;sv=2017-04-17&amp;sr=c&amp;sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D",
    ///             Type = "Sas",
    ///         },
    ///         Location = "centralus",
    ///         ResourceGroupName = "myResourceGroup",
    ///         SourceType = "AzureStorage",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:deploymentmanager:ArtifactSource myArtifactSource /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName} 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:deploymentmanager:ArtifactSource")]
    public partial class ArtifactSource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
        /// </summary>
        [Output("artifactRoot")]
        public Output<string?> ArtifactRoot { get; private set; } = null!;

        /// <summary>
        /// The authentication method to use to access the artifact source.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.SasAuthenticationResponse> Authentication { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of artifact source used.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ArtifactSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ArtifactSource(string name, ArtifactSourceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:deploymentmanager:ArtifactSource", name, args ?? new ArtifactSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ArtifactSource(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:deploymentmanager:ArtifactSource", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:deploymentmanager/v20180901preview:ArtifactSource"},
                    new global::Pulumi.Alias { Type = "azure-native:deploymentmanager/v20191101preview:ArtifactSource"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ArtifactSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ArtifactSource Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ArtifactSource(name, id, options);
        }
    }

    public sealed class ArtifactSourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
        /// </summary>
        [Input("artifactRoot")]
        public Input<string>? ArtifactRoot { get; set; }

        /// <summary>
        /// The name of the artifact source.
        /// </summary>
        [Input("artifactSourceName")]
        public Input<string>? ArtifactSourceName { get; set; }

        /// <summary>
        /// The authentication method to use to access the artifact source.
        /// </summary>
        [Input("authentication", required: true)]
        public Input<Inputs.SasAuthenticationArgs> Authentication { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The type of artifact source used.
        /// </summary>
        [Input("sourceType", required: true)]
        public Input<string> SourceType { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ArtifactSourceArgs()
        {
        }
        public static new ArtifactSourceArgs Empty => new ArtifactSourceArgs();
    }
}
