// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeploymentManager
{
    /// <summary>
    /// The resource representation of a rollout step.
    /// API Version: 2019-11-01-preview.
    /// Previous API Version: 2019-11-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Create health check step
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var step = new AzureNative.DeploymentManager.Step("step", new()
    ///     {
    ///         Location = "centralus",
    ///         Properties = new AzureNative.DeploymentManager.Inputs.HealthCheckStepPropertiesArgs
    ///         {
    ///             Attributes = new AzureNative.DeploymentManager.Inputs.RestHealthCheckStepAttributesArgs
    ///             {
    ///                 HealthChecks = new[]
    ///                 {
    ///                     new AzureNative.DeploymentManager.Inputs.RestHealthCheckArgs
    ///                     {
    ///                         Name = "appHealth",
    ///                         Request = new AzureNative.DeploymentManager.Inputs.RestRequestArgs
    ///                         {
    ///                             Authentication = new AzureNative.DeploymentManager.Inputs.ApiKeyAuthenticationArgs
    ///                             {
    ///                                 In = AzureNative.DeploymentManager.RestAuthLocation.Query,
    ///                                 Name = "Code",
    ///                                 Type = "ApiKey",
    ///                                 Value = "NBCapiMOBQyAAbCkeytoPadnvO0eGHmidwFz5rXpappznKp3Jt7LLg==",
    ///                             },
    ///                             Method = AzureNative.DeploymentManager.RestRequestMethod.GET,
    ///                             Uri = "https://resthealth.healthservice.com/api/applications/contosoApp/healthStatus",
    ///                         },
    ///                         Response = new AzureNative.DeploymentManager.Inputs.RestResponseArgs
    ///                         {
    ///                             Regex = new AzureNative.DeploymentManager.Inputs.RestResponseRegexArgs
    ///                             {
    ///                                 MatchQuantifier = AzureNative.DeploymentManager.RestMatchQuantifier.All,
    ///                                 Matches = new[]
    ///                                 {
    ///                                     "(?i)Contoso-App",
    ///                                     @"(?i)""health_status"":((.|
    /// )*)""(green|yellow)""",
    ///                                     "(?mi)^(\"application_host\": 94781052)$",
    ///                                 },
    ///                             },
    ///                             SuccessStatusCodes = new[]
    ///                             {
    ///                                 "OK",
    ///                             },
    ///                         },
    ///                     },
    ///                     new AzureNative.DeploymentManager.Inputs.RestHealthCheckArgs
    ///                     {
    ///                         Name = "serviceHealth",
    ///                         Request = new AzureNative.DeploymentManager.Inputs.RestRequestArgs
    ///                         {
    ///                             Authentication = new AzureNative.DeploymentManager.Inputs.ApiKeyAuthenticationArgs
    ///                             {
    ///                                 In = AzureNative.DeploymentManager.RestAuthLocation.Header,
    ///                                 Name = "code",
    ///                                 Type = "ApiKey",
    ///                                 Value = "NBCapiMOBQyAAbCkeytoPadnvO0eGHmidwFz5rXpappznKp3Jt7LLg==",
    ///                             },
    ///                             Method = AzureNative.DeploymentManager.RestRequestMethod.GET,
    ///                             Uri = "https://resthealth.healthservice.com/api/services/contosoService/healthStatus",
    ///                         },
    ///                         Response = new AzureNative.DeploymentManager.Inputs.RestResponseArgs
    ///                         {
    ///                             Regex = new AzureNative.DeploymentManager.Inputs.RestResponseRegexArgs
    ///                             {
    ///                                 MatchQuantifier = AzureNative.DeploymentManager.RestMatchQuantifier.All,
    ///                                 Matches = new[]
    ///                                 {
    ///                                     "(?i)Contoso-Service-EndToEnd",
    ///                                     @"(?i)""health_status"":((.|
    /// )*)""(green)""",
    ///                                 },
    ///                             },
    ///                             SuccessStatusCodes = new[]
    ///                             {
    ///                                 "OK",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 HealthyStateDuration = "PT2H",
    ///                 MaxElasticDuration = "PT30M",
    ///                 Type = "REST",
    ///                 WaitDuration = "PT15M",
    ///             },
    ///             StepType = "HealthCheck",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///         StepName = "healthCheckStep",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create wait step
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var step = new AzureNative.DeploymentManager.Step("step", new()
    ///     {
    ///         Location = "centralus",
    ///         Properties = new AzureNative.DeploymentManager.Inputs.WaitStepPropertiesArgs
    ///         {
    ///             Attributes = new AzureNative.DeploymentManager.Inputs.WaitStepAttributesArgs
    ///             {
    ///                 Duration = "PT20M",
    ///             },
    ///             StepType = "Wait",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///         StepName = "waitStep",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:deploymentmanager:Step waitStep /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName} 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:deploymentmanager:Step")]
    public partial class Step : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The properties that define the step.
        /// </summary>
        [Output("properties")]
        public Output<Union<Outputs.HealthCheckStepPropertiesResponse, Outputs.WaitStepPropertiesResponse>> Properties { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Step resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Step(string name, StepArgs args, CustomResourceOptions? options = null)
            : base("azure-native:deploymentmanager:Step", name, args ?? new StepArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Step(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:deploymentmanager:Step", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:deploymentmanager/v20180901preview:Step"},
                    new global::Pulumi.Alias { Type = "azure-native:deploymentmanager/v20191101preview:Step"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Step resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Step Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Step(name, id, options);
        }
    }

    public sealed class StepArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The properties that define the step.
        /// </summary>
        [Input("properties", required: true)]
        public InputUnion<Inputs.HealthCheckStepPropertiesArgs, Inputs.WaitStepPropertiesArgs> Properties { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the deployment step.
        /// </summary>
        [Input("stepName")]
        public Input<string>? StepName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public StepArgs()
        {
        }
        public static new StepArgs Empty => new StepArgs();
    }
}
