// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeploymentManager
{
    /// <summary>
    /// Defines the PUT rollout request body.
    /// API Version: 2019-11-01-preview.
    /// Previous API Version: 2019-11-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Create or update rollout
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rollout = new AzureNative.DeploymentManager.Rollout("rollout", new()
    ///     {
    ///         ArtifactSourceId = "/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/myArtifactSource",
    ///         BuildVersion = "1.0.0.1",
    ///         Identity = new AzureNative.DeploymentManager.Inputs.IdentityArgs
    ///         {
    ///             IdentityIds = new[]
    ///             {
    ///                 "/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity",
    ///             },
    ///             Type = "userAssigned",
    ///         },
    ///         Location = "centralus",
    ///         ResourceGroupName = "myResourceGroup",
    ///         RolloutName = "myRollout",
    ///         StepGroups = new[]
    ///         {
    ///             new AzureNative.DeploymentManager.Inputs.StepGroupArgs
    ///             {
    ///                 DeploymentTargetId = "Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit1'",
    ///                 Name = "FirstRegion",
    ///                 PostDeploymentSteps = new[]
    ///                 {
    ///                     new AzureNative.DeploymentManager.Inputs.PrePostStepArgs
    ///                     {
    ///                         StepId = "Microsoft.DeploymentManager/steps/postDeployStep1",
    ///                     },
    ///                 },
    ///                 PreDeploymentSteps = new[]
    ///                 {
    ///                     new AzureNative.DeploymentManager.Inputs.PrePostStepArgs
    ///                     {
    ///                         StepId = "Microsoft.DeploymentManager/steps/preDeployStep1",
    ///                     },
    ///                     new AzureNative.DeploymentManager.Inputs.PrePostStepArgs
    ///                     {
    ///                         StepId = "Microsoft.DeploymentManager/steps/preDeployStep2",
    ///                     },
    ///                 },
    ///             },
    ///             new AzureNative.DeploymentManager.Inputs.StepGroupArgs
    ///             {
    ///                 DependsOnStepGroups = new[]
    ///                 {
    ///                     "FirstRegion",
    ///                 },
    ///                 DeploymentTargetId = "Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit2'",
    ///                 Name = "SecondRegion",
    ///                 PostDeploymentSteps = new[]
    ///                 {
    ///                     new AzureNative.DeploymentManager.Inputs.PrePostStepArgs
    ///                     {
    ///                         StepId = "Microsoft.DeploymentManager/steps/postDeployStep5",
    ///                     },
    ///                 },
    ///                 PreDeploymentSteps = new[]
    ///                 {
    ///                     new AzureNative.DeploymentManager.Inputs.PrePostStepArgs
    ///                     {
    ///                         StepId = "Microsoft.DeploymentManager/steps/preDeployStep3",
    ///                     },
    ///                     new AzureNative.DeploymentManager.Inputs.PrePostStepArgs
    ///                     {
    ///                         StepId = "Microsoft.DeploymentManager/steps/preDeployStep4",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tags = null,
    ///         TargetServiceTopologyId = "/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:deploymentmanager:Rollout myRollout /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName} 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:deploymentmanager:Rollout")]
    public partial class Rollout : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The reference to the artifact source resource Id where the payload is located.
        /// </summary>
        [Output("artifactSourceId")]
        public Output<string?> ArtifactSourceId { get; private set; } = null!;

        /// <summary>
        /// The version of the build being deployed.
        /// </summary>
        [Output("buildVersion")]
        public Output<string> BuildVersion { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of step groups that define the orchestration.
        /// </summary>
        [Output("stepGroups")]
        public Output<ImmutableArray<Outputs.StepGroupResponse>> StepGroups { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
        /// </summary>
        [Output("targetServiceTopologyId")]
        public Output<string> TargetServiceTopologyId { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Rollout resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rollout(string name, RolloutArgs args, CustomResourceOptions? options = null)
            : base("azure-native:deploymentmanager:Rollout", name, args ?? new RolloutArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rollout(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:deploymentmanager:Rollout", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:deploymentmanager/v20180901preview:Rollout"},
                    new global::Pulumi.Alias { Type = "azure-native:deploymentmanager/v20191101preview:Rollout"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rollout resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rollout Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Rollout(name, id, options);
        }
    }

    public sealed class RolloutArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The reference to the artifact source resource Id where the payload is located.
        /// </summary>
        [Input("artifactSourceId")]
        public Input<string>? ArtifactSourceId { get; set; }

        /// <summary>
        /// The version of the build being deployed.
        /// </summary>
        [Input("buildVersion", required: true)]
        public Input<string> BuildVersion { get; set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity", required: true)]
        public Input<Inputs.IdentityArgs> Identity { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The rollout name.
        /// </summary>
        [Input("rolloutName")]
        public Input<string>? RolloutName { get; set; }

        [Input("stepGroups", required: true)]
        private InputList<Inputs.StepGroupArgs>? _stepGroups;

        /// <summary>
        /// The list of step groups that define the orchestration.
        /// </summary>
        public InputList<Inputs.StepGroupArgs> StepGroups
        {
            get => _stepGroups ?? (_stepGroups = new InputList<Inputs.StepGroupArgs>());
            set => _stepGroups = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
        /// </summary>
        [Input("targetServiceTopologyId", required: true)]
        public Input<string> TargetServiceTopologyId { get; set; } = null!;

        public RolloutArgs()
        {
        }
        public static new RolloutArgs Empty => new RolloutArgs();
    }
}
