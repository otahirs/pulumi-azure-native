// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DataBoxEdge.V20200501Preview
{
    /// <summary>
    /// The status of the Data Box Edge/Gateway device.
    /// </summary>
    [EnumType]
    public readonly struct DataBoxEdgeDeviceStatus : IEquatable<DataBoxEdgeDeviceStatus>
    {
        private readonly string _value;

        private DataBoxEdgeDeviceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataBoxEdgeDeviceStatus ReadyToSetup { get; } = new DataBoxEdgeDeviceStatus("ReadyToSetup");
        public static DataBoxEdgeDeviceStatus Online { get; } = new DataBoxEdgeDeviceStatus("Online");
        public static DataBoxEdgeDeviceStatus Offline { get; } = new DataBoxEdgeDeviceStatus("Offline");
        public static DataBoxEdgeDeviceStatus NeedsAttention { get; } = new DataBoxEdgeDeviceStatus("NeedsAttention");
        public static DataBoxEdgeDeviceStatus Disconnected { get; } = new DataBoxEdgeDeviceStatus("Disconnected");
        public static DataBoxEdgeDeviceStatus PartiallyDisconnected { get; } = new DataBoxEdgeDeviceStatus("PartiallyDisconnected");
        public static DataBoxEdgeDeviceStatus Maintenance { get; } = new DataBoxEdgeDeviceStatus("Maintenance");

        public static bool operator ==(DataBoxEdgeDeviceStatus left, DataBoxEdgeDeviceStatus right) => left.Equals(right);
        public static bool operator !=(DataBoxEdgeDeviceStatus left, DataBoxEdgeDeviceStatus right) => !left.Equals(right);

        public static explicit operator string(DataBoxEdgeDeviceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataBoxEdgeDeviceStatus other && Equals(other);
        public bool Equals(DataBoxEdgeDeviceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data policy of the storage Account.
    /// </summary>
    [EnumType]
    public readonly struct DataPolicy : IEquatable<DataPolicy>
    {
        private readonly string _value;

        private DataPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataPolicy Cloud { get; } = new DataPolicy("Cloud");
        public static DataPolicy Local { get; } = new DataPolicy("Local");

        public static bool operator ==(DataPolicy left, DataPolicy right) => left.Equals(right);
        public static bool operator !=(DataPolicy left, DataPolicy right) => !left.Equals(right);

        public static explicit operator string(DataPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataPolicy other && Equals(other);
        public bool Equals(DataPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The algorithm used to encrypt "Value".
    /// </summary>
    [EnumType]
    public readonly struct EncryptionAlgorithm : IEquatable<EncryptionAlgorithm>
    {
        private readonly string _value;

        private EncryptionAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionAlgorithm None { get; } = new EncryptionAlgorithm("None");
        public static EncryptionAlgorithm AES256 { get; } = new EncryptionAlgorithm("AES256");
        public static EncryptionAlgorithm RSAES_PKCS1_v_1_5 { get; } = new EncryptionAlgorithm("RSAES_PKCS1_v_1_5");

        public static bool operator ==(EncryptionAlgorithm left, EncryptionAlgorithm right) => left.Equals(right);
        public static bool operator !=(EncryptionAlgorithm left, EncryptionAlgorithm right) => !left.Equals(right);

        public static explicit operator string(EncryptionAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionAlgorithm other && Equals(other);
        public bool Equals(EncryptionAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the order as per the allowed status types.
    /// </summary>
    [EnumType]
    public readonly struct OrderState : IEquatable<OrderState>
    {
        private readonly string _value;

        private OrderState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrderState Untracked { get; } = new OrderState("Untracked");
        public static OrderState AwaitingFulfilment { get; } = new OrderState("AwaitingFulfilment");
        public static OrderState AwaitingPreparation { get; } = new OrderState("AwaitingPreparation");
        public static OrderState AwaitingShipment { get; } = new OrderState("AwaitingShipment");
        public static OrderState Shipped { get; } = new OrderState("Shipped");
        public static OrderState Arriving { get; } = new OrderState("Arriving");
        public static OrderState Delivered { get; } = new OrderState("Delivered");
        public static OrderState ReplacementRequested { get; } = new OrderState("ReplacementRequested");
        public static OrderState LostDevice { get; } = new OrderState("LostDevice");
        public static OrderState Declined { get; } = new OrderState("Declined");
        public static OrderState ReturnInitiated { get; } = new OrderState("ReturnInitiated");
        public static OrderState AwaitingReturnShipment { get; } = new OrderState("AwaitingReturnShipment");
        public static OrderState ShippedBack { get; } = new OrderState("ShippedBack");
        public static OrderState CollectedAtMicrosoft { get; } = new OrderState("CollectedAtMicrosoft");

        public static bool operator ==(OrderState left, OrderState right) => left.Equals(right);
        public static bool operator !=(OrderState left, OrderState right) => !left.Equals(right);

        public static explicit operator string(OrderState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrderState other && Equals(other);
        public bool Equals(OrderState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Host OS supported by the IoT role.
    /// </summary>
    [EnumType]
    public readonly struct PlatformType : IEquatable<PlatformType>
    {
        private readonly string _value;

        private PlatformType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlatformType Windows { get; } = new PlatformType("Windows");
        public static PlatformType Linux { get; } = new PlatformType("Linux");

        public static bool operator ==(PlatformType left, PlatformType right) => left.Equals(right);
        public static bool operator !=(PlatformType left, PlatformType right) => !left.Equals(right);

        public static explicit operator string(PlatformType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlatformType other && Equals(other);
        public bool Equals(PlatformType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Role status.
    /// </summary>
    [EnumType]
    public readonly struct RoleStatus : IEquatable<RoleStatus>
    {
        private readonly string _value;

        private RoleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleStatus Enabled { get; } = new RoleStatus("Enabled");
        public static RoleStatus Disabled { get; } = new RoleStatus("Disabled");

        public static bool operator ==(RoleStatus left, RoleStatus right) => left.Equals(right);
        public static bool operator !=(RoleStatus left, RoleStatus right) => !left.Equals(right);

        public static explicit operator string(RoleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleStatus other && Equals(other);
        public bool Equals(RoleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Role type.
    /// </summary>
    [EnumType]
    public readonly struct RoleTypes : IEquatable<RoleTypes>
    {
        private readonly string _value;

        private RoleTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleTypes IOT { get; } = new RoleTypes("IOT");
        public static RoleTypes ASA { get; } = new RoleTypes("ASA");
        public static RoleTypes Functions { get; } = new RoleTypes("Functions");
        public static RoleTypes Cognitive { get; } = new RoleTypes("Cognitive");

        public static bool operator ==(RoleTypes left, RoleTypes right) => left.Equals(right);
        public static bool operator !=(RoleTypes left, RoleTypes right) => !left.Equals(right);

        public static explicit operator string(RoleTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleTypes other && Equals(other);
        public bool Equals(RoleTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU name.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Gateway { get; } = new SkuName("Gateway");
        public static SkuName Edge { get; } = new SkuName("Edge");
        public static SkuName TEA_1Node { get; } = new SkuName("TEA_1Node");
        public static SkuName TEA_1Node_UPS { get; } = new SkuName("TEA_1Node_UPS");
        public static SkuName TEA_1Node_Heater { get; } = new SkuName("TEA_1Node_Heater");
        public static SkuName TEA_1Node_UPS_Heater { get; } = new SkuName("TEA_1Node_UPS_Heater");
        public static SkuName TEA_4Node_Heater { get; } = new SkuName("TEA_4Node_Heater");
        public static SkuName TEA_4Node_UPS_Heater { get; } = new SkuName("TEA_4Node_UPS_Heater");
        public static SkuName TMA { get; } = new SkuName("TMA");
        public static SkuName TDC { get; } = new SkuName("TDC");
        public static SkuName TCA_Large { get; } = new SkuName("TCA_Large");
        public static SkuName TCA_Small { get; } = new SkuName("TCA_Small");
        public static SkuName GPU { get; } = new SkuName("GPU");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SKU tier. This is based on the SKU name.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Standard { get; } = new SkuTier("Standard");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current status of the storage account
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountStatus : IEquatable<StorageAccountStatus>
    {
        private readonly string _value;

        private StorageAccountStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAccountStatus OK { get; } = new StorageAccountStatus("OK");
        public static StorageAccountStatus Offline { get; } = new StorageAccountStatus("Offline");
        public static StorageAccountStatus Unknown { get; } = new StorageAccountStatus("Unknown");
        public static StorageAccountStatus Updating { get; } = new StorageAccountStatus("Updating");
        public static StorageAccountStatus NeedsAttention { get; } = new StorageAccountStatus("NeedsAttention");

        public static bool operator ==(StorageAccountStatus left, StorageAccountStatus right) => left.Equals(right);
        public static bool operator !=(StorageAccountStatus left, StorageAccountStatus right) => !left.Equals(right);

        public static explicit operator string(StorageAccountStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountStatus other && Equals(other);
        public bool Equals(StorageAccountStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Trigger Kind.
    /// </summary>
    [EnumType]
    public readonly struct TriggerEventType : IEquatable<TriggerEventType>
    {
        private readonly string _value;

        private TriggerEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerEventType FileEvent { get; } = new TriggerEventType("FileEvent");
        public static TriggerEventType PeriodicTimerEvent { get; } = new TriggerEventType("PeriodicTimerEvent");

        public static bool operator ==(TriggerEventType left, TriggerEventType right) => left.Equals(right);
        public static bool operator !=(TriggerEventType left, TriggerEventType right) => !left.Equals(right);

        public static explicit operator string(TriggerEventType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerEventType other && Equals(other);
        public bool Equals(TriggerEventType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
