// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ImportExport.V20210101
{
    /// <summary>
    /// Contains the job information.
    /// 
    /// ## Example Usage
    /// ### Create export job
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var job = new AzureNative.ImportExport.V20210101.Job("job", new()
    ///     {
    ///         JobName = "myExportJob",
    ///         Location = "West US",
    ///         Properties = new AzureNative.ImportExport.V20210101.Inputs.JobDetailsArgs
    ///         {
    ///             BackupDriveManifest = true,
    ///             DiagnosticsPath = "waimportexport",
    ///             Export = new AzureNative.ImportExport.V20210101.Inputs.ExportArgs
    ///             {
    ///                 BlobPathPrefix = new[]
    ///                 {
    ///                     "/",
    ///                 },
    ///             },
    ///             JobType = "Export",
    ///             LogLevel = "Verbose",
    ///             ReturnAddress = new AzureNative.ImportExport.V20210101.Inputs.ReturnAddressArgs
    ///             {
    ///                 City = "Redmond",
    ///                 CountryOrRegion = "USA",
    ///                 Email = "Test@contoso.com",
    ///                 Phone = "4250000000",
    ///                 PostalCode = "98007",
    ///                 RecipientName = "Test",
    ///                 StateOrProvince = "wa",
    ///                 StreetAddress1 = "Street1",
    ///                 StreetAddress2 = "street2",
    ///             },
    ///             ReturnShipping = new AzureNative.ImportExport.V20210101.Inputs.ReturnShippingArgs
    ///             {
    ///                 CarrierAccountNumber = "989ffff",
    ///                 CarrierName = "FedEx",
    ///             },
    ///             StorageAccountId = "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create import job
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var job = new AzureNative.ImportExport.V20210101.Job("job", new()
    ///     {
    ///         JobName = "myJob",
    ///         Location = "West US",
    ///         Properties = new AzureNative.ImportExport.V20210101.Inputs.JobDetailsArgs
    ///         {
    ///             BackupDriveManifest = true,
    ///             DiagnosticsPath = "waimportexport",
    ///             DriveList = new[]
    ///             {
    ///                 new AzureNative.ImportExport.V20210101.Inputs.DriveStatusArgs
    ///                 {
    ///                     BitLockerKey = "238810-662376-448998-450120-652806-203390-606320-483076",
    ///                     DriveHeaderHash = "0:1048576:FB6B6ED500D49DA6E0D723C98D42C657F2881CC13357C28DCECA6A524F1292501571A321238540E621AB5BD9C9A32637615919A75593E6CB5C1515DAE341CABF;135266304:143360:C957A189AFC38C4E80731252301EB91427CE55E61448FA3C73C6FDDE70ABBC197947EC8D0249A2C639BB10B95957D5820A4BE8DFBBF76FFFA688AE5CE0D42EC3",
    ///                     DriveId = "9CA995BB",
    ///                     ManifestFile = "\\8a0c23f7-14b7-470a-9633-fcd46590a1bc.manifest",
    ///                     ManifestHash = "4228EC5D8E048CB9B515338C789314BE8D0B2FDBC7C7A0308E1C826242CDE74E",
    ///                 },
    ///             },
    ///             JobType = "Import",
    ///             LogLevel = "Verbose",
    ///             ReturnAddress = new AzureNative.ImportExport.V20210101.Inputs.ReturnAddressArgs
    ///             {
    ///                 City = "Redmond",
    ///                 CountryOrRegion = "USA",
    ///                 Email = "Test@contoso.com",
    ///                 Phone = "4250000000",
    ///                 PostalCode = "98007",
    ///                 RecipientName = "Test",
    ///                 StateOrProvince = "wa",
    ///                 StreetAddress1 = "Street1",
    ///                 StreetAddress2 = "street2",
    ///             },
    ///             ReturnShipping = new AzureNative.ImportExport.V20210101.Inputs.ReturnShippingArgs
    ///             {
    ///                 CarrierAccountNumber = "989ffff",
    ///                 CarrierName = "FedEx",
    ///             },
    ///             StorageAccountId = "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ClassicStorage/storageAccounts/test",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:importexport/v20210101:Job myJob /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.ImportExport/jobs/myJob 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:importexport/v20210101:Job")]
    public partial class Job : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the job identity details
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityDetailsResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure location where the job is created.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the job.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the job properties
        /// </summary>
        [Output("properties")]
        public Output<Outputs.JobDetailsResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// SystemData of ImportExport Jobs.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Specifies the tags that are assigned to the job.
        /// </summary>
        [Output("tags")]
        public Output<object?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the job resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("azure-native:importexport/v20210101:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:importexport/v20210101:Job", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:importexport:Job"},
                    new global::Pulumi.Alias { Type = "azure-native:importexport/v20161101:Job"},
                    new global::Pulumi.Alias { Type = "azure-native:importexport/v20200801:Job"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Job(name, id, options);
        }
    }

    public sealed class JobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the import/export job.
        /// </summary>
        [Input("jobName")]
        public Input<string>? JobName { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the job should be created
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the job properties
        /// </summary>
        [Input("properties")]
        public Input<Inputs.JobDetailsArgs>? Properties { get; set; }

        /// <summary>
        /// The resource group name uniquely identifies the resource group within the user subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the tags that will be assigned to the job.
        /// </summary>
        [Input("tags")]
        public Input<object>? Tags { get; set; }

        public JobArgs()
        {
        }
        public static new JobArgs Empty => new JobArgs();
    }
}
