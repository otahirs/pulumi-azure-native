// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20230101Preview
{
    /// <summary>
    /// Service resource
    /// 
    /// ## Example Usage
    /// ### Services_CreateOrUpdate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var service = new AzureNative.AppPlatform.V20230101Preview.Service("service", new()
    ///     {
    ///         Location = "eastus",
    ///         Properties = null,
    ///         ResourceGroupName = "myResourceGroup",
    ///         ServiceName = "myservice",
    ///         Sku = new AzureNative.AppPlatform.V20230101Preview.Inputs.SkuArgs
    ///         {
    ///             Name = "S0",
    ///             Tier = "Standard",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key1", "value1" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Services_CreateOrUpdate_Consumption
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var service = new AzureNative.AppPlatform.V20230101Preview.Service("service", new()
    ///     {
    ///         Location = "eastus",
    ///         Properties = new AzureNative.AppPlatform.V20230101Preview.Inputs.ClusterResourcePropertiesArgs
    ///         {
    ///             ManagedEnvironmentId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.App/managedEnvironments/myenvironment",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///         ServiceName = "myservice",
    ///         Sku = new AzureNative.AppPlatform.V20230101Preview.Inputs.SkuArgs
    ///         {
    ///             Name = "S0",
    ///             Tier = "StandardGen2",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key1", "value1" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Services_CreateOrUpdate_Enterprise
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var service = new AzureNative.AppPlatform.V20230101Preview.Service("service", new()
    ///     {
    ///         Location = "eastus",
    ///         Properties = new AzureNative.AppPlatform.V20230101Preview.Inputs.ClusterResourcePropertiesArgs
    ///         {
    ///             MarketplaceResource = new AzureNative.AppPlatform.V20230101Preview.Inputs.MarketplaceResourceArgs
    ///             {
    ///                 Plan = "tanzu-asc-ent-mtr",
    ///                 Product = "azure-spring-cloud-vmware-tanzu-2",
    ///                 Publisher = "vmware-inc",
    ///             },
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///         ServiceName = "myservice",
    ///         Sku = new AzureNative.AppPlatform.V20230101Preview.Inputs.SkuArgs
    ///         {
    ///             Name = "E0",
    ///             Tier = "Enterprise",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key1", "value1" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Services_CreateOrUpdate_VNetInjection
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var service = new AzureNative.AppPlatform.V20230101Preview.Service("service", new()
    ///     {
    ///         Location = "eastus",
    ///         Properties = new AzureNative.AppPlatform.V20230101Preview.Inputs.ClusterResourcePropertiesArgs
    ///         {
    ///             NetworkProfile = new AzureNative.AppPlatform.V20230101Preview.Inputs.NetworkProfileArgs
    ///             {
    ///                 AppNetworkResourceGroup = "my-app-network-rg",
    ///                 AppSubnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps",
    ///                 IngressConfig = new AzureNative.AppPlatform.V20230101Preview.Inputs.IngressConfigArgs
    ///                 {
    ///                     ReadTimeoutInSeconds = 300,
    ///                 },
    ///                 ServiceCidr = "10.8.0.0/16,10.244.0.0/16,10.245.0.1/16",
    ///                 ServiceRuntimeNetworkResourceGroup = "my-service-runtime-network-rg",
    ///                 ServiceRuntimeSubnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime",
    ///             },
    ///             VnetAddons = new AzureNative.AppPlatform.V20230101Preview.Inputs.ServiceVNetAddonsArgs
    ///             {
    ///                 LogStreamPublicEndpoint = true,
    ///             },
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///         ServiceName = "myservice",
    ///         Sku = new AzureNative.AppPlatform.V20230101Preview.Inputs.SkuArgs
    ///         {
    ///             Name = "S0",
    ///             Tier = "Standard",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key1", "value1" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:appplatform/v20230101preview:Service myservice /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:appplatform/v20230101preview:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The GEO location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Properties of the Service resource
        /// </summary>
        [Output("properties")]
        public Output<Outputs.ClusterResourcePropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Sku of the Service resource
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:appplatform/v20230101preview:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:appplatform/v20230101preview:Service", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:appplatform:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20200701:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20201101preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20210601preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20210901preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20220101preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20220301preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20220401:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20220501preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20220901preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20221101preview:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20221201:Service"},
                    new global::Pulumi.Alias { Type = "azure-native:appplatform/v20230301preview:Service"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Service(name, id, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GEO location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Properties of the Service resource
        /// </summary>
        [Input("properties")]
        public Input<Inputs.ClusterResourcePropertiesArgs>? Properties { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Service resource.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Sku of the Service resource
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }
}
