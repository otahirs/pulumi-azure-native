// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20220201Preview
{
    /// <summary>
    /// Azure Resource Manager resource envelope.
    /// 
    /// ## Example Usage
    /// ### CreateOrUpdate datastore (Azure Data Lake Gen1 w/ ServicePrincipal).
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datastore = new AzureNative.MachineLearningServices.V20220201Preview.Datastore("datastore", new()
    ///     {
    ///         DatastoreDetails = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AzureDataLakeGen1DatastoreArgs
    ///         {
    ///             Credentials = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.ServicePrincipalDatastoreCredentialsArgs
    ///             {
    ///                 AuthorityUrl = "string",
    ///                 ClientId = "00000000-1111-2222-3333-444444444444",
    ///                 CredentialsType = "ServicePrincipal",
    ///                 ResourceUrl = "string",
    ///                 Secrets = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.ServicePrincipalDatastoreSecretsArgs
    ///                 {
    ///                     ClientSecret = "string",
    ///                     SecretsType = "ServicePrincipal",
    ///                 },
    ///                 TenantId = "00000000-1111-2222-3333-444444444444",
    ///             },
    ///             DatastoreType = "AzureDataLakeGen1",
    ///             Description = "string",
    ///             StoreName = "string",
    ///             Tags = 
    ///             {
    ///                 { "string", "string" },
    ///             },
    ///         },
    ///         Name = "string",
    ///         ResourceGroupName = "test-rg",
    ///         SkipValidation = false,
    ///         WorkspaceName = "my-aml-workspace",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreateOrUpdate datastore (Azure Data Lake Gen2 w/ Service Principal).
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datastore = new AzureNative.MachineLearningServices.V20220201Preview.Datastore("datastore", new()
    ///     {
    ///         DatastoreDetails = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AzureDataLakeGen2DatastoreArgs
    ///         {
    ///             AccountName = "string",
    ///             Credentials = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.ServicePrincipalDatastoreCredentialsArgs
    ///             {
    ///                 AuthorityUrl = "string",
    ///                 ClientId = "00000000-1111-2222-3333-444444444444",
    ///                 CredentialsType = "ServicePrincipal",
    ///                 ResourceUrl = "string",
    ///                 Secrets = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.ServicePrincipalDatastoreSecretsArgs
    ///                 {
    ///                     ClientSecret = "string",
    ///                     SecretsType = "ServicePrincipal",
    ///                 },
    ///                 TenantId = "00000000-1111-2222-3333-444444444444",
    ///             },
    ///             DatastoreType = "AzureDataLakeGen2",
    ///             Description = "string",
    ///             Endpoint = "string",
    ///             Filesystem = "string",
    ///             Protocol = "string",
    ///             Tags = 
    ///             {
    ///                 { "string", "string" },
    ///             },
    ///         },
    ///         Name = "string",
    ///         ResourceGroupName = "test-rg",
    ///         SkipValidation = false,
    ///         WorkspaceName = "my-aml-workspace",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreateOrUpdate datastore (Azure File store w/ AccountKey).
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datastore = new AzureNative.MachineLearningServices.V20220201Preview.Datastore("datastore", new()
    ///     {
    ///         DatastoreDetails = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AzureFileDatastoreArgs
    ///         {
    ///             AccountName = "string",
    ///             Credentials = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AccountKeyDatastoreCredentialsArgs
    ///             {
    ///                 CredentialsType = "AccountKey",
    ///                 Secrets = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AccountKeyDatastoreSecretsArgs
    ///                 {
    ///                     Key = "string",
    ///                     SecretsType = "AccountKey",
    ///                 },
    ///             },
    ///             DatastoreType = "AzureFile",
    ///             Description = "string",
    ///             Endpoint = "string",
    ///             FileShareName = "string",
    ///             Protocol = "string",
    ///             Tags = 
    ///             {
    ///                 { "string", "string" },
    ///             },
    ///         },
    ///         Name = "string",
    ///         ResourceGroupName = "test-rg",
    ///         SkipValidation = false,
    ///         WorkspaceName = "my-aml-workspace",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreateOrUpdate datastore (AzureBlob w/ AccountKey).
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var datastore = new AzureNative.MachineLearningServices.V20220201Preview.Datastore("datastore", new()
    ///     {
    ///         DatastoreDetails = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AzureBlobDatastoreArgs
    ///         {
    ///             AccountName = "string",
    ///             ContainerName = "string",
    ///             Credentials = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AccountKeyDatastoreCredentialsArgs
    ///             {
    ///                 CredentialsType = "AccountKey",
    ///                 Secrets = new AzureNative.MachineLearningServices.V20220201Preview.Inputs.AccountKeyDatastoreSecretsArgs
    ///                 {
    ///                     Key = "string",
    ///                     SecretsType = "AccountKey",
    ///                 },
    ///             },
    ///             DatastoreType = "AzureBlob",
    ///             Description = "string",
    ///             Endpoint = "core.windows.net",
    ///             Protocol = "https",
    ///             Tags = 
    ///             {
    ///                 { "string", "string" },
    ///             },
    ///         },
    ///         Name = "string",
    ///         ResourceGroupName = "test-rg",
    ///         SkipValidation = false,
    ///         WorkspaceName = "my-aml-workspace",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:machinelearningservices/v20220201preview:Datastore string string 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:machinelearningservices/v20220201preview:Datastore")]
    public partial class Datastore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [Required] Additional attributes of the entity.
        /// </summary>
        [Output("datastoreDetails")]
        public Output<object> DatastoreDetails { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Datastore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Datastore(string name, DatastoreArgs args, CustomResourceOptions? options = null)
            : base("azure-native:machinelearningservices/v20220201preview:Datastore", name, args ?? new DatastoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Datastore(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:machinelearningservices/v20220201preview:Datastore", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20200501preview:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20210301preview:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20220501:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20220601preview:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20221001:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20221001preview:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20221201preview:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20230201preview:Datastore"},
                    new global::Pulumi.Alias { Type = "azure-native:machinelearningservices/v20230401preview:Datastore"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Datastore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Datastore Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Datastore(name, id, options);
        }
    }

    public sealed class DatastoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [Required] Additional attributes of the entity.
        /// </summary>
        [Input("datastoreDetails", required: true)]
        public object DatastoreDetails { get; set; } = null!;

        /// <summary>
        /// Datastore name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Flag to skip validation.
        /// </summary>
        [Input("skipValidation")]
        public Input<bool>? SkipValidation { get; set; }

        /// <summary>
        /// Name of Azure Machine Learning workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public DatastoreArgs()
        {
        }
        public static new DatastoreArgs Empty => new DatastoreArgs();
    }
}
