// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureArcData
{
    /// <summary>
    /// Arc Sql Server Availability Group
    /// API Version: 2023-03-15-preview.
    /// 
    /// ## Example Usage
    /// ### Create a Arc Sql Server availability group replica.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlAvailabilityGroupReplica = new AzureNative.AzureArcData.SqlAvailabilityGroupReplica("sqlAvailabilityGroupReplica", new()
    ///     {
    ///         Location = "southeastasia",
    ///         Properties = new AzureNative.AzureArcData.Inputs.SqlAvailabilityGroupReplicaResourcePropertiesArgs
    ///         {
    ///             Configure = new AzureNative.AzureArcData.Inputs.AvailabilityGroupConfigureArgs
    ///             {
    ///                 AvailabilityModeDesc = "SYNCHRONOUS_COMMIT",
    ///                 BackupPriority = 50,
    ///                 EndpointUrl = "TCP://mytest60-0.mytest60-svc:5022",
    ///                 FailoverModeDesc = "EXTERNAL",
    ///                 PrimaryRoleAllowConnectionsDesc = "ALL",
    ///                 SecondaryRoleAllowConnectionsDesc = "ALL",
    ///                 SeedingModeDesc = "AUTOMATIC",
    ///                 SessionTimeout = 10,
    ///             },
    ///             ReplicaId = "00000000-1111-2222-3333-444444444444",
    ///             ReplicaName = "testSqlServerInstance",
    ///             State = new AzureNative.AzureArcData.Inputs.AvailabilityGroupStateArgs
    ///             {
    ///                 AvailabilityGroupReplicaRole = "SECONDARY",
    ///                 ConnectedStateDesc = "CONNECTED",
    ///                 LastConnectErrorDescription = "",
    ///                 LastConnectErrorTimestamp = "2022-05-05T16:26:33.883Z",
    ///                 OperationalStateDesc = "ONLINE",
    ///                 RecoveryHealthDesc = "ONLINE_IN_PROGRESS",
    ///                 SynchronizationHealthDesc = "HEALTHY",
    ///             },
    ///         },
    ///         ResourceGroupName = "testrg",
    ///         SqlAvailabilityGroupName = "testAG",
    ///         SqlServerInstanceName = "testSqlServerInstance",
    ///         Tags = 
    ///         {
    ///             { "mytag", "myval" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:azurearcdata:SqlAvailabilityGroupReplica testSqlServerInstance /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/testsAG/sqlServerInstances/testSqlServerInstance 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:azurearcdata:SqlAvailabilityGroupReplica")]
    public partial class SqlAvailabilityGroupReplica : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Properties of Arc Sql Availability Group Replica
        /// </summary>
        [Output("properties")]
        public Output<Outputs.SqlAvailabilityGroupReplicaResourcePropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SqlAvailabilityGroupReplica resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlAvailabilityGroupReplica(string name, SqlAvailabilityGroupReplicaArgs args, CustomResourceOptions? options = null)
            : base("azure-native:azurearcdata:SqlAvailabilityGroupReplica", name, args ?? new SqlAvailabilityGroupReplicaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlAvailabilityGroupReplica(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:azurearcdata:SqlAvailabilityGroupReplica", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:azurearcdata/v20230315preview:SqlAvailabilityGroupReplica"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlAvailabilityGroupReplica resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlAvailabilityGroupReplica Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SqlAvailabilityGroupReplica(name, id, options);
        }
    }

    public sealed class SqlAvailabilityGroupReplicaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Properties of Arc Sql Availability Group Replica
        /// </summary>
        [Input("properties", required: true)]
        public Input<Inputs.SqlAvailabilityGroupReplicaResourcePropertiesArgs> Properties { get; set; } = null!;

        /// <summary>
        /// The name of the Azure resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of SQL Availability Group
        /// </summary>
        [Input("sqlAvailabilityGroupName", required: true)]
        public Input<string> SqlAvailabilityGroupName { get; set; } = null!;

        /// <summary>
        /// Name of SQL Server Instance
        /// </summary>
        [Input("sqlServerInstanceName")]
        public Input<string>? SqlServerInstanceName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SqlAvailabilityGroupReplicaArgs()
        {
        }
        public static new SqlAvailabilityGroupReplicaArgs Empty => new SqlAvailabilityGroupReplicaArgs();
    }
}
