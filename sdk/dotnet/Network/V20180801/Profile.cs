// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20180801
{
    /// <summary>
    /// Class representing a Traffic Manager profile.
    /// 
    /// ## Example Usage
    /// ### Profile-PUT-MultiValue
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var profile = new AzureNative.Network.V20180801.Profile("profile", new()
    ///     {
    ///         DnsConfig = new AzureNative.Network.V20180801.Inputs.DnsConfigArgs
    ///         {
    ///             RelativeName = "azsmnet6386",
    ///             Ttl = 35,
    ///         },
    ///         Location = "global",
    ///         MaxReturn = 2,
    ///         MonitorConfig = new AzureNative.Network.V20180801.Inputs.MonitorConfigArgs
    ///         {
    ///             Path = "/testpath.aspx",
    ///             Port = 80,
    ///             Protocol = "HTTP",
    ///         },
    ///         ProfileName = "azsmnet6386",
    ///         ProfileStatus = "Enabled",
    ///         ResourceGroupName = "azuresdkfornetautoresttrafficmanager1421",
    ///         TrafficRoutingMethod = "MultiValue",
    ///         TrafficViewEnrollmentStatus = "Disabled",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Profile-PUT-NoEndpoints
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var profile = new AzureNative.Network.V20180801.Profile("profile", new()
    ///     {
    ///         DnsConfig = new AzureNative.Network.V20180801.Inputs.DnsConfigArgs
    ///         {
    ///             RelativeName = "azsmnet6386",
    ///             Ttl = 35,
    ///         },
    ///         Location = "global",
    ///         MonitorConfig = new AzureNative.Network.V20180801.Inputs.MonitorConfigArgs
    ///         {
    ///             Path = "/testpath.aspx",
    ///             Port = 80,
    ///             Protocol = "HTTP",
    ///         },
    ///         ProfileName = "azsmnet6386",
    ///         ProfileStatus = "Enabled",
    ///         ResourceGroupName = "azuresdkfornetautoresttrafficmanager1421",
    ///         TrafficRoutingMethod = "Performance",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Profile-PUT-WithAliasing
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var profile = new AzureNative.Network.V20180801.Profile("profile", new()
    ///     {
    ///         AllowedEndpointRecordTypes = new[]
    ///         {
    ///             "DomainName",
    ///         },
    ///         DnsConfig = new AzureNative.Network.V20180801.Inputs.DnsConfigArgs
    ///         {
    ///             RelativeName = "azuresdkfornetautoresttrafficmanager6192",
    ///             Ttl = 35,
    ///         },
    ///         Endpoints = new[]
    ///         {
    ///             new AzureNative.Network.V20180801.Inputs.EndpointArgs
    ///             {
    ///                 EndpointLocation = "North Europe",
    ///                 EndpointStatus = "Enabled",
    ///                 Name = "My external endpoint",
    ///                 Target = "foobar.contoso.com",
    ///                 Type = "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
    ///             },
    ///         },
    ///         Location = "global",
    ///         MonitorConfig = new AzureNative.Network.V20180801.Inputs.MonitorConfigArgs
    ///         {
    ///             IntervalInSeconds = 10,
    ///             Path = "/testpath.aspx",
    ///             Port = 80,
    ///             Protocol = "HTTP",
    ///             TimeoutInSeconds = 5,
    ///             ToleratedNumberOfFailures = 2,
    ///         },
    ///         ProfileName = "azuresdkfornetautoresttrafficmanager6192",
    ///         ProfileStatus = "Enabled",
    ///         ResourceGroupName = "azuresdkfornetautoresttrafficmanager2583",
    ///         TrafficRoutingMethod = "Performance",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Profile-PUT-WithCustomHeaders
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var profile = new AzureNative.Network.V20180801.Profile("profile", new()
    ///     {
    ///         DnsConfig = new AzureNative.Network.V20180801.Inputs.DnsConfigArgs
    ///         {
    ///             RelativeName = "azuresdkfornetautoresttrafficmanager6192",
    ///             Ttl = 35,
    ///         },
    ///         Endpoints = new[]
    ///         {
    ///             new AzureNative.Network.V20180801.Inputs.EndpointArgs
    ///             {
    ///                 CustomHeaders = new[]
    ///                 {
    ///                     new AzureNative.Network.V20180801.Inputs.EndpointPropertiesCustomHeadersArgs
    ///                     {
    ///                         Name = "header-2",
    ///                         Value = "value-2-overridden",
    ///                     },
    ///                 },
    ///                 EndpointLocation = "North Europe",
    ///                 EndpointStatus = "Enabled",
    ///                 Name = "My external endpoint",
    ///                 Target = "foobar.contoso.com",
    ///                 Type = "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
    ///             },
    ///         },
    ///         Location = "global",
    ///         MonitorConfig = new AzureNative.Network.V20180801.Inputs.MonitorConfigArgs
    ///         {
    ///             CustomHeaders = new[]
    ///             {
    ///                 new AzureNative.Network.V20180801.Inputs.MonitorConfigCustomHeadersArgs
    ///                 {
    ///                     Name = "header-1",
    ///                     Value = "value-1",
    ///                 },
    ///                 new AzureNative.Network.V20180801.Inputs.MonitorConfigCustomHeadersArgs
    ///                 {
    ///                     Name = "header-2",
    ///                     Value = "value-2",
    ///                 },
    ///             },
    ///             ExpectedStatusCodeRanges = new[]
    ///             {
    ///                 new AzureNative.Network.V20180801.Inputs.MonitorConfigExpectedStatusCodeRangesArgs
    ///                 {
    ///                     Max = 205,
    ///                     Min = 200,
    ///                 },
    ///                 new AzureNative.Network.V20180801.Inputs.MonitorConfigExpectedStatusCodeRangesArgs
    ///                 {
    ///                     Max = 410,
    ///                     Min = 400,
    ///                 },
    ///             },
    ///             IntervalInSeconds = 10,
    ///             Path = "/testpath.aspx",
    ///             Port = 80,
    ///             Protocol = "HTTP",
    ///             TimeoutInSeconds = 5,
    ///             ToleratedNumberOfFailures = 2,
    ///         },
    ///         ProfileName = "azuresdkfornetautoresttrafficmanager6192",
    ///         ProfileStatus = "Enabled",
    ///         ResourceGroupName = "azuresdkfornetautoresttrafficmanager2583",
    ///         TrafficRoutingMethod = "Performance",
    ///         TrafficViewEnrollmentStatus = "Disabled",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Profile-PUT-WithEndpoints
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var profile = new AzureNative.Network.V20180801.Profile("profile", new()
    ///     {
    ///         DnsConfig = new AzureNative.Network.V20180801.Inputs.DnsConfigArgs
    ///         {
    ///             RelativeName = "azuresdkfornetautoresttrafficmanager6192",
    ///             Ttl = 35,
    ///         },
    ///         Endpoints = new[]
    ///         {
    ///             new AzureNative.Network.V20180801.Inputs.EndpointArgs
    ///             {
    ///                 EndpointLocation = "North Europe",
    ///                 EndpointStatus = "Enabled",
    ///                 Name = "My external endpoint",
    ///                 Target = "foobar.contoso.com",
    ///                 Type = "Microsoft.network/TrafficManagerProfiles/ExternalEndpoints",
    ///             },
    ///         },
    ///         Location = "global",
    ///         MonitorConfig = new AzureNative.Network.V20180801.Inputs.MonitorConfigArgs
    ///         {
    ///             IntervalInSeconds = 10,
    ///             Path = "/testpath.aspx",
    ///             Port = 80,
    ///             Protocol = "HTTP",
    ///             TimeoutInSeconds = 5,
    ///             ToleratedNumberOfFailures = 2,
    ///         },
    ///         ProfileName = "azuresdkfornetautoresttrafficmanager6192",
    ///         ProfileStatus = "Enabled",
    ///         ResourceGroupName = "azuresdkfornetautoresttrafficmanager2583",
    ///         TrafficRoutingMethod = "Performance",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Profile-PUT-WithNestedEndpoints
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var profile = new AzureNative.Network.V20180801.Profile("profile", new()
    ///     {
    ///         DnsConfig = new AzureNative.Network.V20180801.Inputs.DnsConfigArgs
    ///         {
    ///             RelativeName = "parentprofile",
    ///             Ttl = 35,
    ///         },
    ///         Endpoints = new[]
    ///         {
    ///             new AzureNative.Network.V20180801.Inputs.EndpointArgs
    ///             {
    ///                 EndpointStatus = "Enabled",
    ///                 MinChildEndpoints = 2,
    ///                 MinChildEndpointsIPv4 = 1,
    ///                 MinChildEndpointsIPv6 = 2,
    ///                 Name = "MyFirstNestedEndpoint",
    ///                 Priority = 1,
    ///                 Target = "firstnestedprofile.tmpreview.watmtest.azure-test.net",
    ///                 Type = "Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
    ///                 Weight = 1,
    ///             },
    ///             new AzureNative.Network.V20180801.Inputs.EndpointArgs
    ///             {
    ///                 EndpointStatus = "Enabled",
    ///                 MinChildEndpoints = 2,
    ///                 MinChildEndpointsIPv4 = 2,
    ///                 MinChildEndpointsIPv6 = 1,
    ///                 Name = "MySecondNestedEndpoint",
    ///                 Priority = 2,
    ///                 Target = "secondnestedprofile.tmpreview.watmtest.azure-test.net",
    ///                 Type = "Microsoft.Network/trafficManagerProfiles/nestedEndpoints",
    ///                 Weight = 1,
    ///             },
    ///         },
    ///         Location = "global",
    ///         MonitorConfig = new AzureNative.Network.V20180801.Inputs.MonitorConfigArgs
    ///         {
    ///             IntervalInSeconds = 10,
    ///             Path = "/testpath.aspx",
    ///             Port = 80,
    ///             Protocol = "HTTP",
    ///             TimeoutInSeconds = 5,
    ///             ToleratedNumberOfFailures = 2,
    ///         },
    ///         ProfileName = "parentprofile",
    ///         ProfileStatus = "Enabled",
    ///         ResourceGroupName = "myresourcegroup",
    ///         TrafficRoutingMethod = "Priority",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:network/v20180801:Profile parentprofile /subscriptions/{subscription-id}/resourceGroups/myresourcegroup/providers/Microsoft.Network/trafficManagerProfiles/parentprofile 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:network/v20180801:Profile")]
    public partial class Profile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of allowed endpoint record types.
        /// </summary>
        [Output("allowedEndpointRecordTypes")]
        public Output<ImmutableArray<string>> AllowedEndpointRecordTypes { get; private set; } = null!;

        /// <summary>
        /// The DNS settings of the Traffic Manager profile.
        /// </summary>
        [Output("dnsConfig")]
        public Output<Outputs.DnsConfigResponse?> DnsConfig { get; private set; } = null!;

        /// <summary>
        /// The list of endpoints in the Traffic Manager profile.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.EndpointResponse>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Maximum number of endpoints to be returned for MultiValue routing type.
        /// </summary>
        [Output("maxReturn")]
        public Output<double?> MaxReturn { get; private set; } = null!;

        /// <summary>
        /// The endpoint monitoring settings of the Traffic Manager profile.
        /// </summary>
        [Output("monitorConfig")]
        public Output<Outputs.MonitorConfigResponse?> MonitorConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the Traffic Manager profile.
        /// </summary>
        [Output("profileStatus")]
        public Output<string?> ProfileStatus { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The traffic routing method of the Traffic Manager profile.
        /// </summary>
        [Output("trafficRoutingMethod")]
        public Output<string?> TrafficRoutingMethod { get; private set; } = null!;

        /// <summary>
        /// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
        /// </summary>
        [Output("trafficViewEnrollmentStatus")]
        public Output<string?> TrafficViewEnrollmentStatus { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Profile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Profile(string name, ProfileArgs args, CustomResourceOptions? options = null)
            : base("azure-native:network/v20180801:Profile", name, args ?? new ProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Profile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:network/v20180801:Profile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:network:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20151101:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20170301:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20170501:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20180201:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20180301:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20180401:Profile"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20220401preview:Profile"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Profile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Profile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Profile(name, id, options);
        }
    }

    public sealed class ProfileArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedEndpointRecordTypes")]
        private InputList<Union<string, Pulumi.AzureNative.Network.V20180801.AllowedEndpointRecordType>>? _allowedEndpointRecordTypes;

        /// <summary>
        /// The list of allowed endpoint record types.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.Network.V20180801.AllowedEndpointRecordType>> AllowedEndpointRecordTypes
        {
            get => _allowedEndpointRecordTypes ?? (_allowedEndpointRecordTypes = new InputList<Union<string, Pulumi.AzureNative.Network.V20180801.AllowedEndpointRecordType>>());
            set => _allowedEndpointRecordTypes = value;
        }

        /// <summary>
        /// The DNS settings of the Traffic Manager profile.
        /// </summary>
        [Input("dnsConfig")]
        public Input<Inputs.DnsConfigArgs>? DnsConfig { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.EndpointArgs>? _endpoints;

        /// <summary>
        /// The list of endpoints in the Traffic Manager profile.
        /// </summary>
        public InputList<Inputs.EndpointArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.EndpointArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The Azure Region where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maximum number of endpoints to be returned for MultiValue routing type.
        /// </summary>
        [Input("maxReturn")]
        public Input<double>? MaxReturn { get; set; }

        /// <summary>
        /// The endpoint monitoring settings of the Traffic Manager profile.
        /// </summary>
        [Input("monitorConfig")]
        public Input<Inputs.MonitorConfigArgs>? MonitorConfig { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Traffic Manager profile.
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// The status of the Traffic Manager profile.
        /// </summary>
        [Input("profileStatus")]
        public InputUnion<string, Pulumi.AzureNative.Network.V20180801.ProfileStatus>? ProfileStatus { get; set; }

        /// <summary>
        /// The name of the resource group containing the Traffic Manager profile.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The traffic routing method of the Traffic Manager profile.
        /// </summary>
        [Input("trafficRoutingMethod")]
        public InputUnion<string, Pulumi.AzureNative.Network.V20180801.TrafficRoutingMethod>? TrafficRoutingMethod { get; set; }

        /// <summary>
        /// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
        /// </summary>
        [Input("trafficViewEnrollmentStatus")]
        public InputUnion<string, Pulumi.AzureNative.Network.V20180801.TrafficViewEnrollmentStatus>? TrafficViewEnrollmentStatus { get; set; }

        /// <summary>
        /// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ProfileArgs()
        {
        }
        public static new ProfileArgs Empty => new ProfileArgs();
    }
}
