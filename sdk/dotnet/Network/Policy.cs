// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network
{
    /// <summary>
    /// Defines web application firewall policy.
    /// API Version: 2022-05-01.
    /// Previous API Version: 2020-11-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Creates specific policy
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policy = new AzureNative.Network.Policy("policy", new()
    ///     {
    ///         CustomRules = new AzureNative.Network.Inputs.CustomRuleListArgs
    ///         {
    ///             Rules = new[]
    ///             {
    ///                 new AzureNative.Network.Inputs.CustomRuleArgs
    ///                 {
    ///                     Action = "Block",
    ///                     MatchConditions = new[]
    ///                     {
    ///                         new AzureNative.Network.Inputs.FrontDoorMatchConditionArgs
    ///                         {
    ///                             MatchValue = new[]
    ///                             {
    ///                                 "192.168.1.0/24",
    ///                                 "10.0.0.0/24",
    ///                             },
    ///                             MatchVariable = "RemoteAddr",
    ///                             Operator = "IPMatch",
    ///                         },
    ///                     },
    ///                     Name = "Rule1",
    ///                     Priority = 1,
    ///                     RateLimitThreshold = 1000,
    ///                     RuleType = "RateLimitRule",
    ///                 },
    ///                 new AzureNative.Network.Inputs.CustomRuleArgs
    ///                 {
    ///                     Action = "Block",
    ///                     MatchConditions = new[]
    ///                     {
    ///                         new AzureNative.Network.Inputs.FrontDoorMatchConditionArgs
    ///                         {
    ///                             MatchValue = new[]
    ///                             {
    ///                                 "CH",
    ///                             },
    ///                             MatchVariable = "RemoteAddr",
    ///                             Operator = "GeoMatch",
    ///                         },
    ///                         new AzureNative.Network.Inputs.FrontDoorMatchConditionArgs
    ///                         {
    ///                             MatchValue = new[]
    ///                             {
    ///                                 "windows",
    ///                             },
    ///                             MatchVariable = "RequestHeader",
    ///                             Operator = "Contains",
    ///                             Selector = "UserAgent",
    ///                             Transforms = new[]
    ///                             {
    ///                                 "Lowercase",
    ///                             },
    ///                         },
    ///                     },
    ///                     Name = "Rule2",
    ///                     Priority = 2,
    ///                     RuleType = "MatchRule",
    ///                 },
    ///             },
    ///         },
    ///         ManagedRules = new AzureNative.Network.Inputs.ManagedRuleSetListArgs
    ///         {
    ///             ManagedRuleSets = new[]
    ///             {
    ///                 new AzureNative.Network.Inputs.FrontDoorManagedRuleSetArgs
    ///                 {
    ///                     Exclusions = new[]
    ///                     {
    ///                         new AzureNative.Network.Inputs.ManagedRuleExclusionArgs
    ///                         {
    ///                             MatchVariable = "RequestHeaderNames",
    ///                             Selector = "User-Agent",
    ///                             SelectorMatchOperator = "Equals",
    ///                         },
    ///                     },
    ///                     RuleGroupOverrides = new[]
    ///                     {
    ///                         new AzureNative.Network.Inputs.FrontDoorManagedRuleGroupOverrideArgs
    ///                         {
    ///                             Exclusions = new[]
    ///                             {
    ///                                 new AzureNative.Network.Inputs.ManagedRuleExclusionArgs
    ///                                 {
    ///                                     MatchVariable = "RequestCookieNames",
    ///                                     Selector = "token",
    ///                                     SelectorMatchOperator = "StartsWith",
    ///                                 },
    ///                             },
    ///                             RuleGroupName = "SQLI",
    ///                             Rules = new[]
    ///                             {
    ///                                 new AzureNative.Network.Inputs.FrontDoorManagedRuleOverrideArgs
    ///                                 {
    ///                                     Action = "Redirect",
    ///                                     EnabledState = "Enabled",
    ///                                     Exclusions = new[]
    ///                                     {
    ///                                         new AzureNative.Network.Inputs.ManagedRuleExclusionArgs
    ///                                         {
    ///                                             MatchVariable = "QueryStringArgNames",
    ///                                             Selector = "query",
    ///                                             SelectorMatchOperator = "Equals",
    ///                                         },
    ///                                     },
    ///                                     RuleId = "942100",
    ///                                 },
    ///                                 new AzureNative.Network.Inputs.FrontDoorManagedRuleOverrideArgs
    ///                                 {
    ///                                     EnabledState = "Disabled",
    ///                                     RuleId = "942110",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     RuleSetAction = "Block",
    ///                     RuleSetType = "DefaultRuleSet",
    ///                     RuleSetVersion = "1.0",
    ///                 },
    ///             },
    ///         },
    ///         PolicyName = "Policy1",
    ///         PolicySettings = new AzureNative.Network.Inputs.FrontDoorPolicySettingsArgs
    ///         {
    ///             CustomBlockResponseBody = "PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==",
    ///             CustomBlockResponseStatusCode = 499,
    ///             EnabledState = "Enabled",
    ///             Mode = "Prevention",
    ///             RedirectUrl = "http://www.bing.com",
    ///             RequestBodyCheck = "Disabled",
    ///         },
    ///         ResourceGroupName = "rg1",
    ///         Sku = new AzureNative.Network.Inputs.SkuArgs
    ///         {
    ///             Name = "Classic_AzureFrontDoor",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:network:Policy Policy1 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/Policy1 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:network:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Describes custom rules inside the policy.
        /// </summary>
        [Output("customRules")]
        public Output<Outputs.CustomRuleListResponse?> CustomRules { get; private set; } = null!;

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// Describes Frontend Endpoints associated with this Web Application Firewall policy.
        /// </summary>
        [Output("frontendEndpointLinks")]
        public Output<ImmutableArray<Outputs.FrontendEndpointLinkResponse>> FrontendEndpointLinks { get; private set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Describes managed rules inside the policy.
        /// </summary>
        [Output("managedRules")]
        public Output<Outputs.ManagedRuleSetListResponse?> ManagedRules { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Describes settings for the policy.
        /// </summary>
        [Output("policySettings")]
        public Output<Outputs.FrontDoorPolicySettingsResponse?> PolicySettings { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the policy.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        [Output("resourceState")]
        public Output<string> ResourceState { get; private set; } = null!;

        /// <summary>
        /// Describes Routing Rules associated with this Web Application Firewall policy.
        /// </summary>
        [Output("routingRuleLinks")]
        public Output<ImmutableArray<Outputs.RoutingRuleLinkResponse>> RoutingRuleLinks { get; private set; } = null!;

        /// <summary>
        /// Describes Security Policy associated with this Web Application Firewall policy.
        /// </summary>
        [Output("securityPolicyLinks")]
        public Output<ImmutableArray<Outputs.SecurityPolicyLinkResponse>> SecurityPolicyLinks { get; private set; } = null!;

        /// <summary>
        /// The pricing tier of web application firewall policy. Defaults to Classic_AzureFrontDoor if not specified.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("azure-native:network:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:network:Policy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:network/v20190301:Policy"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20191001:Policy"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20200401:Policy"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20201101:Policy"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20210601:Policy"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20220501:Policy"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes custom rules inside the policy.
        /// </summary>
        [Input("customRules")]
        public Input<Inputs.CustomRuleListArgs>? CustomRules { get; set; }

        /// <summary>
        /// Resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Describes managed rules inside the policy.
        /// </summary>
        [Input("managedRules")]
        public Input<Inputs.ManagedRuleSetListArgs>? ManagedRules { get; set; }

        /// <summary>
        /// The name of the Web Application Firewall Policy.
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// Describes settings for the policy.
        /// </summary>
        [Input("policySettings")]
        public Input<Inputs.FrontDoorPolicySettingsArgs>? PolicySettings { get; set; }

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The pricing tier of web application firewall policy. Defaults to Classic_AzureFrontDoor if not specified.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }
}
