// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Network.V20170901
{
    /// <summary>
    /// The access type of the rule. Valid values are: 'Allow', 'Deny'
    /// </summary>
    [EnumType]
    public readonly struct Access : IEquatable<Access>
    {
        private readonly string _value;

        private Access(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Access Allow { get; } = new Access("Allow");
        public static Access Deny { get; } = new Access("Deny");

        public static bool operator ==(Access left, Access right) => left.Equals(right);
        public static bool operator !=(Access left, Access right) => !left.Equals(right);

        public static explicit operator string(Access value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Access other && Equals(other);
        public bool Equals(Access other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteCircuitPeeringAdvertisedPublicPrefixState : IEquatable<ExpressRouteCircuitPeeringAdvertisedPublicPrefixState>
    {
        private readonly string _value;

        private ExpressRouteCircuitPeeringAdvertisedPublicPrefixState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteCircuitPeeringAdvertisedPublicPrefixState NotConfigured { get; } = new ExpressRouteCircuitPeeringAdvertisedPublicPrefixState("NotConfigured");
        public static ExpressRouteCircuitPeeringAdvertisedPublicPrefixState Configuring { get; } = new ExpressRouteCircuitPeeringAdvertisedPublicPrefixState("Configuring");
        public static ExpressRouteCircuitPeeringAdvertisedPublicPrefixState Configured { get; } = new ExpressRouteCircuitPeeringAdvertisedPublicPrefixState("Configured");
        public static ExpressRouteCircuitPeeringAdvertisedPublicPrefixState ValidationNeeded { get; } = new ExpressRouteCircuitPeeringAdvertisedPublicPrefixState("ValidationNeeded");

        public static bool operator ==(ExpressRouteCircuitPeeringAdvertisedPublicPrefixState left, ExpressRouteCircuitPeeringAdvertisedPublicPrefixState right) => left.Equals(right);
        public static bool operator !=(ExpressRouteCircuitPeeringAdvertisedPublicPrefixState left, ExpressRouteCircuitPeeringAdvertisedPublicPrefixState right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteCircuitPeeringAdvertisedPublicPrefixState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteCircuitPeeringAdvertisedPublicPrefixState other && Equals(other);
        public bool Equals(ExpressRouteCircuitPeeringAdvertisedPublicPrefixState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of peering. Possible values are: 'Disabled' and 'Enabled'
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteCircuitPeeringState : IEquatable<ExpressRouteCircuitPeeringState>
    {
        private readonly string _value;

        private ExpressRouteCircuitPeeringState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteCircuitPeeringState Disabled { get; } = new ExpressRouteCircuitPeeringState("Disabled");
        public static ExpressRouteCircuitPeeringState Enabled { get; } = new ExpressRouteCircuitPeeringState("Enabled");

        public static bool operator ==(ExpressRouteCircuitPeeringState left, ExpressRouteCircuitPeeringState right) => left.Equals(right);
        public static bool operator !=(ExpressRouteCircuitPeeringState left, ExpressRouteCircuitPeeringState right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteCircuitPeeringState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteCircuitPeeringState other && Equals(other);
        public bool Equals(ExpressRouteCircuitPeeringState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'.
    /// </summary>
    [EnumType]
    public readonly struct ExpressRouteCircuitPeeringType : IEquatable<ExpressRouteCircuitPeeringType>
    {
        private readonly string _value;

        private ExpressRouteCircuitPeeringType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExpressRouteCircuitPeeringType AzurePublicPeering { get; } = new ExpressRouteCircuitPeeringType("AzurePublicPeering");
        public static ExpressRouteCircuitPeeringType AzurePrivatePeering { get; } = new ExpressRouteCircuitPeeringType("AzurePrivatePeering");
        public static ExpressRouteCircuitPeeringType MicrosoftPeering { get; } = new ExpressRouteCircuitPeeringType("MicrosoftPeering");

        public static bool operator ==(ExpressRouteCircuitPeeringType left, ExpressRouteCircuitPeeringType right) => left.Equals(right);
        public static bool operator !=(ExpressRouteCircuitPeeringType left, ExpressRouteCircuitPeeringType right) => !left.Equals(right);

        public static explicit operator string(ExpressRouteCircuitPeeringType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExpressRouteCircuitPeeringType other && Equals(other);
        public bool Equals(ExpressRouteCircuitPeeringType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule type of the rule. Valid value is: 'Community'
    /// </summary>
    [EnumType]
    public readonly struct RouteFilterRuleType : IEquatable<RouteFilterRuleType>
    {
        private readonly string _value;

        private RouteFilterRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteFilterRuleType Community { get; } = new RouteFilterRuleType("Community");

        public static bool operator ==(RouteFilterRuleType left, RouteFilterRuleType right) => left.Equals(right);
        public static bool operator !=(RouteFilterRuleType left, RouteFilterRuleType right) => !left.Equals(right);

        public static explicit operator string(RouteFilterRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteFilterRuleType other && Equals(other);
        public bool Equals(RouteFilterRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
