// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Network.V20201101
{
    /// <summary>
    /// HubVirtualNetworkConnection Resource.
    /// 
    /// ## Example Usage
    /// ### HubVirtualNetworkConnectionPut
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var hubVirtualNetworkConnection = new AzureNative.Network.V20201101.HubVirtualNetworkConnection("hubVirtualNetworkConnection", new()
    ///     {
    ///         ConnectionName = "connection1",
    ///         EnableInternetSecurity = false,
    ///         RemoteVirtualNetwork = new AzureNative.Network.V20201101.Inputs.SubResourceArgs
    ///         {
    ///             Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1",
    ///         },
    ///         ResourceGroupName = "rg1",
    ///         RoutingConfiguration = new AzureNative.Network.V20201101.Inputs.RoutingConfigurationArgs
    ///         {
    ///             AssociatedRouteTable = new AzureNative.Network.V20201101.Inputs.SubResourceArgs
    ///             {
    ///                 Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
    ///             },
    ///             PropagatedRouteTables = new AzureNative.Network.V20201101.Inputs.PropagatedRouteTableArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     new AzureNative.Network.V20201101.Inputs.SubResourceArgs
    ///                     {
    ///                         Id = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
    ///                     },
    ///                 },
    ///                 Labels = new[]
    ///                 {
    ///                     "label1",
    ///                     "label2",
    ///                 },
    ///             },
    ///             VnetRoutes = new AzureNative.Network.V20201101.Inputs.VnetRouteArgs
    ///             {
    ///                 StaticRoutes = new[]
    ///                 {
    ///                     new AzureNative.Network.V20201101.Inputs.StaticRouteArgs
    ///                     {
    ///                         AddressPrefixes = new[]
    ///                         {
    ///                             "10.1.0.0/16",
    ///                             "10.2.0.0/16",
    ///                         },
    ///                         Name = "route1",
    ///                         NextHopIpAddress = "10.0.0.68",
    ///                     },
    ///                     new AzureNative.Network.V20201101.Inputs.StaticRouteArgs
    ///                     {
    ///                         AddressPrefixes = new[]
    ///                         {
    ///                             "10.3.0.0/16",
    ///                             "10.4.0.0/16",
    ///                         },
    ///                         Name = "route2",
    ///                         NextHopIpAddress = "10.0.0.65",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         VirtualHubName = "virtualHub1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:network/v20201101:HubVirtualNetworkConnection connection1 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/connection1 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:network/v20201101:HubVirtualNetworkConnection")]
    public partial class HubVirtualNetworkConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
        /// </summary>
        [Output("allowHubToRemoteVnetTransit")]
        public Output<bool?> AllowHubToRemoteVnetTransit { get; private set; } = null!;

        /// <summary>
        /// Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
        /// </summary>
        [Output("allowRemoteVnetToUseHubVnetGateways")]
        public Output<bool?> AllowRemoteVnetToUseHubVnetGateways { get; private set; } = null!;

        /// <summary>
        /// Enable internet security.
        /// </summary>
        [Output("enableInternetSecurity")]
        public Output<bool?> EnableInternetSecurity { get; private set; } = null!;

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the hub virtual network connection resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Reference to the remote virtual network.
        /// </summary>
        [Output("remoteVirtualNetwork")]
        public Output<Outputs.SubResourceResponse?> RemoteVirtualNetwork { get; private set; } = null!;

        /// <summary>
        /// The Routing Configuration indicating the associated and propagated route tables on this connection.
        /// </summary>
        [Output("routingConfiguration")]
        public Output<Outputs.RoutingConfigurationResponse?> RoutingConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a HubVirtualNetworkConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HubVirtualNetworkConnection(string name, HubVirtualNetworkConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:network/v20201101:HubVirtualNetworkConnection", name, args ?? new HubVirtualNetworkConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HubVirtualNetworkConnection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:network/v20201101:HubVirtualNetworkConnection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:network:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20200501:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20200601:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20200701:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20200801:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20210201:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20210301:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20210501:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20210801:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20220101:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20220501:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20220701:HubVirtualNetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:network/v20220901:HubVirtualNetworkConnection"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HubVirtualNetworkConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HubVirtualNetworkConnection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new HubVirtualNetworkConnection(name, id, options);
        }
    }

    public sealed class HubVirtualNetworkConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
        /// </summary>
        [Input("allowHubToRemoteVnetTransit")]
        public Input<bool>? AllowHubToRemoteVnetTransit { get; set; }

        /// <summary>
        /// Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
        /// </summary>
        [Input("allowRemoteVnetToUseHubVnetGateways")]
        public Input<bool>? AllowRemoteVnetToUseHubVnetGateways { get; set; }

        /// <summary>
        /// The name of the HubVirtualNetworkConnection.
        /// </summary>
        [Input("connectionName")]
        public Input<string>? ConnectionName { get; set; }

        /// <summary>
        /// Enable internet security.
        /// </summary>
        [Input("enableInternetSecurity")]
        public Input<bool>? EnableInternetSecurity { get; set; }

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Reference to the remote virtual network.
        /// </summary>
        [Input("remoteVirtualNetwork")]
        public Input<Inputs.SubResourceArgs>? RemoteVirtualNetwork { get; set; }

        /// <summary>
        /// The resource group name of the HubVirtualNetworkConnection.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Routing Configuration indicating the associated and propagated route tables on this connection.
        /// </summary>
        [Input("routingConfiguration")]
        public Input<Inputs.RoutingConfigurationArgs>? RoutingConfiguration { get; set; }

        /// <summary>
        /// The name of the VirtualHub.
        /// </summary>
        [Input("virtualHubName", required: true)]
        public Input<string> VirtualHubName { get; set; } = null!;

        public HubVirtualNetworkConnectionArgs()
        {
        }
        public static new HubVirtualNetworkConnectionArgs Empty => new HubVirtualNetworkConnectionArgs();
    }
}
