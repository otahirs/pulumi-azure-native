// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Batch.V20221001
{
    /// <summary>
    /// Contains information about a pool.
    /// 
    /// ## Example Usage
    /// ### CreatePool - Custom Image
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Id = "/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1",
    ///                 },
    ///                 NodeAgentSkuId = "batch.node.ubuntu 18.04",
    ///             },
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - Full CloudServiceConfiguration
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         ApplicationLicenses = new[]
    ///         {
    ///             "app-license0",
    ///             "app-license1",
    ///         },
    ///         ApplicationPackages = new[]
    ///         {
    ///             new AzureNative.Batch.V20221001.Inputs.ApplicationPackageReferenceArgs
    ///             {
    ///                 Id = "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/applications/app_1234",
    ///                 Version = "asdf",
    ///             },
    ///         },
    ///         Certificates = new[]
    ///         {
    ///             new AzureNative.Batch.V20221001.Inputs.CertificateReferenceArgs
    ///             {
    ///                 Id = "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool/certificates/sha1-1234567",
    ///                 StoreLocation = AzureNative.Batch.V20221001.CertificateStoreLocation.LocalMachine,
    ///                 StoreName = "MY",
    ///                 Visibility = new[]
    ///                 {
    ///                     AzureNative.Batch.V20221001.CertificateVisibility.RemoteUser,
    ///                 },
    ///             },
    ///         },
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             CloudServiceConfiguration = new AzureNative.Batch.V20221001.Inputs.CloudServiceConfigurationArgs
    ///             {
    ///                 OsFamily = "4",
    ///                 OsVersion = "WA-GUEST-OS-4.45_201708-01",
    ///             },
    ///         },
    ///         DisplayName = "my-pool-name",
    ///         InterNodeCommunication = AzureNative.Batch.V20221001.InterNodeCommunicationState.Enabled,
    ///         Metadata = new[]
    ///         {
    ///             new AzureNative.Batch.V20221001.Inputs.MetadataItemArgs
    ///             {
    ///                 Name = "metadata-1",
    ///                 Value = "value-1",
    ///             },
    ///             new AzureNative.Batch.V20221001.Inputs.MetadataItemArgs
    ///             {
    ///                 Name = "metadata-2",
    ///                 Value = "value-2",
    ///             },
    ///         },
    ///         NetworkConfiguration = new AzureNative.Batch.V20221001.Inputs.NetworkConfigurationArgs
    ///         {
    ///             PublicIPAddressConfiguration = new AzureNative.Batch.V20221001.Inputs.PublicIPAddressConfigurationArgs
    ///             {
    ///                 IpAddressIds = new[]
    ///                 {
    ///                     "/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135",
    ///                     "/subscriptions/subid2/resourceGroups/rg24/providers/Microsoft.Network/publicIPAddresses/ip268",
    ///                 },
    ///                 Provision = AzureNative.Batch.V20221001.IPAddressProvisioningType.UserManaged,
    ///             },
    ///             SubnetId = "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         ScaleSettings = new AzureNative.Batch.V20221001.Inputs.ScaleSettingsArgs
    ///         {
    ///             FixedScale = new AzureNative.Batch.V20221001.Inputs.FixedScaleSettingsArgs
    ///             {
    ///                 NodeDeallocationOption = AzureNative.Batch.V20221001.ComputeNodeDeallocationOption.TaskCompletion,
    ///                 ResizeTimeout = "PT8M",
    ///                 TargetDedicatedNodes = 6,
    ///                 TargetLowPriorityNodes = 28,
    ///             },
    ///         },
    ///         StartTask = new AzureNative.Batch.V20221001.Inputs.StartTaskArgs
    ///         {
    ///             CommandLine = "cmd /c SET",
    ///             EnvironmentSettings = new[]
    ///             {
    ///                 new AzureNative.Batch.V20221001.Inputs.EnvironmentSettingArgs
    ///                 {
    ///                     Name = "MYSET",
    ///                     Value = "1234",
    ///                 },
    ///             },
    ///             MaxTaskRetryCount = 6,
    ///             ResourceFiles = new[]
    ///             {
    ///                 new AzureNative.Batch.V20221001.Inputs.ResourceFileArgs
    ///                 {
    ///                     FileMode = "777",
    ///                     FilePath = "c:\\temp\\gohere",
    ///                     HttpUrl = "https://testaccount.blob.core.windows.net/example-blob-file",
    ///                 },
    ///             },
    ///             UserIdentity = new AzureNative.Batch.V20221001.Inputs.UserIdentityArgs
    ///             {
    ///                 AutoUser = new AzureNative.Batch.V20221001.Inputs.AutoUserSpecificationArgs
    ///                 {
    ///                     ElevationLevel = AzureNative.Batch.V20221001.ElevationLevel.Admin,
    ///                     Scope = AzureNative.Batch.V20221001.AutoUserScope.Pool,
    ///                 },
    ///             },
    ///             WaitForSuccess = true,
    ///         },
    ///         TaskSchedulingPolicy = new AzureNative.Batch.V20221001.Inputs.TaskSchedulingPolicyArgs
    ///         {
    ///             NodeFillType = AzureNative.Batch.V20221001.ComputeNodeFillType.Pack,
    ///         },
    ///         TaskSlotsPerNode = 13,
    ///         UserAccounts = new[]
    ///         {
    ///             new AzureNative.Batch.V20221001.Inputs.UserAccountArgs
    ///             {
    ///                 ElevationLevel = AzureNative.Batch.V20221001.ElevationLevel.Admin,
    ///                 LinuxUserConfiguration = new AzureNative.Batch.V20221001.Inputs.LinuxUserConfigurationArgs
    ///                 {
    ///                     Gid = 4567,
    ///                     SshPrivateKey = "sshprivatekeyvalue",
    ///                     Uid = 1234,
    ///                 },
    ///                 Name = "username1",
    ///                 Password = "&lt;ExamplePassword&gt;",
    ///             },
    ///         },
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - Full VirtualMachineConfiguration
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 DataDisks = new[]
    ///                 {
    ///                     new AzureNative.Batch.V20221001.Inputs.DataDiskArgs
    ///                     {
    ///                         Caching = AzureNative.Batch.V20221001.CachingType.ReadWrite,
    ///                         DiskSizeGB = 30,
    ///                         Lun = 0,
    ///                         StorageAccountType = AzureNative.Batch.V20221001.StorageAccountType.Premium_LRS,
    ///                     },
    ///                     new AzureNative.Batch.V20221001.Inputs.DataDiskArgs
    ///                     {
    ///                         Caching = AzureNative.Batch.V20221001.CachingType.None,
    ///                         DiskSizeGB = 200,
    ///                         Lun = 1,
    ///                         StorageAccountType = AzureNative.Batch.V20221001.StorageAccountType.Standard_LRS,
    ///                     },
    ///                 },
    ///                 DiskEncryptionConfiguration = new AzureNative.Batch.V20221001.Inputs.DiskEncryptionConfigurationArgs
    ///                 {
    ///                     Targets = new[]
    ///                     {
    ///                         AzureNative.Batch.V20221001.DiskEncryptionTarget.OsDisk,
    ///                         AzureNative.Batch.V20221001.DiskEncryptionTarget.TemporaryDisk,
    ///                     },
    ///                 },
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter-SmallDisk",
    ///                     Version = "latest",
    ///                 },
    ///                 LicenseType = "Windows_Server",
    ///                 NodeAgentSkuId = "batch.node.windows amd64",
    ///                 NodePlacementConfiguration = new AzureNative.Batch.V20221001.Inputs.NodePlacementConfigurationArgs
    ///                 {
    ///                     Policy = AzureNative.Batch.V20221001.NodePlacementPolicyType.Zonal,
    ///                 },
    ///                 OsDisk = new AzureNative.Batch.V20221001.Inputs.OSDiskArgs
    ///                 {
    ///                     EphemeralOSDiskSettings = new AzureNative.Batch.V20221001.Inputs.DiffDiskSettingsArgs
    ///                     {
    ///                         Placement = AzureNative.Batch.V20221001.DiffDiskPlacement.CacheDisk,
    ///                     },
    ///                 },
    ///                 WindowsConfiguration = new AzureNative.Batch.V20221001.Inputs.WindowsConfigurationArgs
    ///                 {
    ///                     EnableAutomaticUpdates = false,
    ///                 },
    ///             },
    ///         },
    ///         NetworkConfiguration = new AzureNative.Batch.V20221001.Inputs.NetworkConfigurationArgs
    ///         {
    ///             EndpointConfiguration = new AzureNative.Batch.V20221001.Inputs.PoolEndpointConfigurationArgs
    ///             {
    ///                 InboundNatPools = new[]
    ///                 {
    ///                     new AzureNative.Batch.V20221001.Inputs.InboundNatPoolArgs
    ///                     {
    ///                         BackendPort = 12001,
    ///                         FrontendPortRangeEnd = 15100,
    ///                         FrontendPortRangeStart = 15000,
    ///                         Name = "testnat",
    ///                         NetworkSecurityGroupRules = new[]
    ///                         {
    ///                             new AzureNative.Batch.V20221001.Inputs.NetworkSecurityGroupRuleArgs
    ///                             {
    ///                                 Access = AzureNative.Batch.V20221001.NetworkSecurityGroupRuleAccess.Allow,
    ///                                 Priority = 150,
    ///                                 SourceAddressPrefix = "192.100.12.45",
    ///                                 SourcePortRanges = new[]
    ///                                 {
    ///                                     "1",
    ///                                     "2",
    ///                                 },
    ///                             },
    ///                             new AzureNative.Batch.V20221001.Inputs.NetworkSecurityGroupRuleArgs
    ///                             {
    ///                                 Access = AzureNative.Batch.V20221001.NetworkSecurityGroupRuleAccess.Deny,
    ///                                 Priority = 3500,
    ///                                 SourceAddressPrefix = "*",
    ///                                 SourcePortRanges = new[]
    ///                                 {
    ///                                     "*",
    ///                                 },
    ///                             },
    ///                         },
    ///                         Protocol = AzureNative.Batch.V20221001.InboundEndpointProtocol.TCP,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         ScaleSettings = new AzureNative.Batch.V20221001.Inputs.ScaleSettingsArgs
    ///         {
    ///             AutoScale = new AzureNative.Batch.V20221001.Inputs.AutoScaleSettingsArgs
    ///             {
    ///                 EvaluationInterval = "PT5M",
    ///                 Formula = "$TargetDedicatedNodes=1",
    ///             },
    ///         },
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - Minimal CloudServiceConfiguration
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             CloudServiceConfiguration = new AzureNative.Batch.V20221001.Inputs.CloudServiceConfigurationArgs
    ///             {
    ///                 OsFamily = "5",
    ///             },
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         ScaleSettings = new AzureNative.Batch.V20221001.Inputs.ScaleSettingsArgs
    ///         {
    ///             FixedScale = new AzureNative.Batch.V20221001.Inputs.FixedScaleSettingsArgs
    ///             {
    ///                 TargetDedicatedNodes = 3,
    ///             },
    ///         },
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - Minimal VirtualMachineConfiguration
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "UbuntuServer",
    ///                     Publisher = "Canonical",
    ///                     Sku = "18.04-LTS",
    ///                     Version = "latest",
    ///                 },
    ///                 NodeAgentSkuId = "batch.node.ubuntu 18.04",
    ///             },
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         ScaleSettings = new AzureNative.Batch.V20221001.Inputs.ScaleSettingsArgs
    ///         {
    ///             AutoScale = new AzureNative.Batch.V20221001.Inputs.AutoScaleSettingsArgs
    ///             {
    ///                 EvaluationInterval = "PT5M",
    ///                 Formula = "$TargetDedicatedNodes=1",
    ///             },
    ///         },
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - No public IP
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Id = "/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1",
    ///                 },
    ///                 NodeAgentSkuId = "batch.node.ubuntu 18.04",
    ///             },
    ///         },
    ///         NetworkConfiguration = new AzureNative.Batch.V20221001.Inputs.NetworkConfigurationArgs
    ///         {
    ///             PublicIPAddressConfiguration = new AzureNative.Batch.V20221001.Inputs.PublicIPAddressConfigurationArgs
    ///             {
    ///                 Provision = AzureNative.Batch.V20221001.IPAddressProvisioningType.NoPublicIPAddresses,
    ///             },
    ///             SubnetId = "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - Public IPs
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Id = "/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1",
    ///                 },
    ///                 NodeAgentSkuId = "batch.node.ubuntu 18.04",
    ///             },
    ///         },
    ///         NetworkConfiguration = new AzureNative.Batch.V20221001.Inputs.NetworkConfigurationArgs
    ///         {
    ///             PublicIPAddressConfiguration = new AzureNative.Batch.V20221001.Inputs.PublicIPAddressConfigurationArgs
    ///             {
    ///                 IpAddressIds = new[]
    ///                 {
    ///                     "/subscriptions/subid1/resourceGroups/rg13/providers/Microsoft.Network/publicIPAddresses/ip135",
    ///                 },
    ///                 Provision = AzureNative.Batch.V20221001.IPAddressProvisioningType.UserManaged,
    ///             },
    ///             SubnetId = "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - UserAssignedIdentities
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "UbuntuServer",
    ///                     Publisher = "Canonical",
    ///                     Sku = "18.04-LTS",
    ///                     Version = "latest",
    ///                 },
    ///                 NodeAgentSkuId = "batch.node.ubuntu 18.04",
    ///             },
    ///         },
    ///         Identity = new AzureNative.Batch.V20221001.Inputs.BatchPoolIdentityArgs
    ///         {
    ///             Type = AzureNative.Batch.V20221001.PoolIdentityType.UserAssigned,
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1", null },
    ///                 { "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2", null },
    ///             },
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         ScaleSettings = new AzureNative.Batch.V20221001.Inputs.ScaleSettingsArgs
    ///         {
    ///             AutoScale = new AzureNative.Batch.V20221001.Inputs.AutoScaleSettingsArgs
    ///             {
    ///                 EvaluationInterval = "PT5M",
    ///                 Formula = "$TargetDedicatedNodes=1",
    ///             },
    ///         },
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### CreatePool - VirtualMachineConfiguration Extensions
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var pool = new AzureNative.Batch.V20221001.Pool("pool", new()
    ///     {
    ///         AccountName = "sampleacct",
    ///         DeploymentConfiguration = new AzureNative.Batch.V20221001.Inputs.DeploymentConfigurationArgs
    ///         {
    ///             VirtualMachineConfiguration = new AzureNative.Batch.V20221001.Inputs.VirtualMachineConfigurationArgs
    ///             {
    ///                 Extensions = new[]
    ///                 {
    ///                     new AzureNative.Batch.V20221001.Inputs.VMExtensionArgs
    ///                     {
    ///                         AutoUpgradeMinorVersion = true,
    ///                         Name = "batchextension1",
    ///                         ProtectedSettings = 
    ///                         {
    ///                             { "protectedSettingsKey", "protectedSettingsValue" },
    ///                         },
    ///                         Publisher = "Microsoft.Azure.Security.Monitoring",
    ///                         Settings = 
    ///                         {
    ///                             { "settingsKey", "settingsValue" },
    ///                         },
    ///                         Type = "SecurityMonitoringForLinux",
    ///                         TypeHandlerVersion = "1.0",
    ///                     },
    ///                 },
    ///                 ImageReference = new AzureNative.Batch.V20221001.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "0001-com-ubuntu-server-focal",
    ///                     Publisher = "Canonical",
    ///                     Sku = "20_04-lts",
    ///                 },
    ///                 NodeAgentSkuId = "batch.node.ubuntu 20.04",
    ///             },
    ///         },
    ///         PoolName = "testpool",
    ///         ResourceGroupName = "default-azurebatch-japaneast",
    ///         ScaleSettings = new AzureNative.Batch.V20221001.Inputs.ScaleSettingsArgs
    ///         {
    ///             AutoScale = new AzureNative.Batch.V20221001.Inputs.AutoScaleSettingsArgs
    ///             {
    ///                 EvaluationInterval = "PT5M",
    ///                 Formula = "$TargetDedicatedNodes=1",
    ///             },
    ///         },
    ///         TargetNodeCommunicationMode = AzureNative.Batch.V20221001.NodeCommunicationMode.Default,
    ///         VmSize = "STANDARD_D4",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:batch/v20221001:Pool testpool /subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Batch/batchAccounts/sampleacct/pools/testpool 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:batch/v20221001:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        [Output("allocationState")]
        public Output<string> AllocationState { get; private set; } = null!;

        [Output("allocationStateTransitionTime")]
        public Output<string> AllocationStateTransitionTime { get; private set; } = null!;

        /// <summary>
        /// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
        /// </summary>
        [Output("applicationLicenses")]
        public Output<ImmutableArray<string>> ApplicationLicenses { get; private set; } = null!;

        /// <summary>
        /// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
        /// </summary>
        [Output("applicationPackages")]
        public Output<ImmutableArray<Outputs.ApplicationPackageReferenceResponse>> ApplicationPackages { get; private set; } = null!;

        /// <summary>
        /// This property is set only if the pool automatically scales, i.e. autoScaleSettings are used.
        /// </summary>
        [Output("autoScaleRun")]
        public Output<Outputs.AutoScaleRunResponse> AutoScaleRun { get; private set; } = null!;

        /// <summary>
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
        /// 
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.CertificateReferenceResponse>> Certificates { get; private set; } = null!;

        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        [Output("currentDedicatedNodes")]
        public Output<int> CurrentDedicatedNodes { get; private set; } = null!;

        [Output("currentLowPriorityNodes")]
        public Output<int> CurrentLowPriorityNodes { get; private set; } = null!;

        [Output("currentNodeCommunicationMode")]
        public Output<string> CurrentNodeCommunicationMode { get; private set; } = null!;

        /// <summary>
        /// Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
        /// </summary>
        [Output("deploymentConfiguration")]
        public Output<Outputs.DeploymentConfigurationResponse?> DeploymentConfiguration { get; private set; } = null!;

        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The ETag of the resource, used for concurrency statements.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The type of identity used for the Batch Pool.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.BatchPoolIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        /// </summary>
        [Output("interNodeCommunication")]
        public Output<string?> InterNodeCommunication { get; private set; } = null!;

        /// <summary>
        /// This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableArray<Outputs.MetadataItemResponse>> Metadata { get; private set; } = null!;

        /// <summary>
        /// This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </summary>
        [Output("mountConfiguration")]
        public Output<ImmutableArray<Outputs.MountConfigurationResponse>> MountConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network configuration for a pool.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.NetworkConfigurationResponse?> NetworkConfiguration { get; private set; } = null!;

        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        [Output("provisioningStateTransitionTime")]
        public Output<string> ProvisioningStateTransitionTime { get; private set; } = null!;

        /// <summary>
        /// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
        /// </summary>
        [Output("resizeOperationStatus")]
        public Output<Outputs.ResizeOperationStatusResponse> ResizeOperationStatus { get; private set; } = null!;

        /// <summary>
        /// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
        /// </summary>
        [Output("scaleSettings")]
        public Output<Outputs.ScaleSettingsResponse?> ScaleSettings { get; private set; } = null!;

        /// <summary>
        /// In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
        /// </summary>
        [Output("startTask")]
        public Output<Outputs.StartTaskResponse?> StartTask { get; private set; } = null!;

        /// <summary>
        /// If omitted, the default value is Default.
        /// </summary>
        [Output("targetNodeCommunicationMode")]
        public Output<string?> TargetNodeCommunicationMode { get; private set; } = null!;

        /// <summary>
        /// If not specified, the default is spread.
        /// </summary>
        [Output("taskSchedulingPolicy")]
        public Output<Outputs.TaskSchedulingPolicyResponse?> TaskSchedulingPolicy { get; private set; } = null!;

        /// <summary>
        /// The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Output("taskSlotsPerNode")]
        public Output<int?> TaskSlotsPerNode { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("userAccounts")]
        public Output<ImmutableArray<Outputs.UserAccountResponse>> UserAccounts { get; private set; } = null!;

        /// <summary>
        /// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </summary>
        [Output("vmSize")]
        public Output<string?> VmSize { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:batch/v20221001:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:batch/v20221001:Pool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:batch:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20170901:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20181201:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20190401:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20190801:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20200301:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20200501:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20200901:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20210101:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20210601:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20220101:Pool"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20220601:Pool"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Batch account.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("applicationLicenses")]
        private InputList<string>? _applicationLicenses;

        /// <summary>
        /// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
        /// </summary>
        public InputList<string> ApplicationLicenses
        {
            get => _applicationLicenses ?? (_applicationLicenses = new InputList<string>());
            set => _applicationLicenses = value;
        }

        [Input("applicationPackages")]
        private InputList<Inputs.ApplicationPackageReferenceArgs>? _applicationPackages;

        /// <summary>
        /// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
        /// </summary>
        public InputList<Inputs.ApplicationPackageReferenceArgs> ApplicationPackages
        {
            get => _applicationPackages ?? (_applicationPackages = new InputList<Inputs.ApplicationPackageReferenceArgs>());
            set => _applicationPackages = value;
        }

        [Input("certificates")]
        private InputList<Inputs.CertificateReferenceArgs>? _certificates;

        /// <summary>
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
        /// 
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
        /// </summary>
        public InputList<Inputs.CertificateReferenceArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.CertificateReferenceArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
        /// </summary>
        [Input("deploymentConfiguration")]
        public Input<Inputs.DeploymentConfigurationArgs>? DeploymentConfiguration { get; set; }

        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The type of identity used for the Batch Pool.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.BatchPoolIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        /// </summary>
        [Input("interNodeCommunication")]
        public Input<Pulumi.AzureNative.Batch.V20221001.InterNodeCommunicationState>? InterNodeCommunication { get; set; }

        [Input("metadata")]
        private InputList<Inputs.MetadataItemArgs>? _metadata;

        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        public InputList<Inputs.MetadataItemArgs> Metadata
        {
            get => _metadata ?? (_metadata = new InputList<Inputs.MetadataItemArgs>());
            set => _metadata = value;
        }

        [Input("mountConfiguration")]
        private InputList<Inputs.MountConfigurationArgs>? _mountConfiguration;

        /// <summary>
        /// This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </summary>
        public InputList<Inputs.MountConfigurationArgs> MountConfiguration
        {
            get => _mountConfiguration ?? (_mountConfiguration = new InputList<Inputs.MountConfigurationArgs>());
            set => _mountConfiguration = value;
        }

        /// <summary>
        /// The network configuration for a pool.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.NetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// The pool name. This must be unique within the account.
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        /// <summary>
        /// The name of the resource group that contains the Batch account.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
        /// </summary>
        [Input("scaleSettings")]
        public Input<Inputs.ScaleSettingsArgs>? ScaleSettings { get; set; }

        /// <summary>
        /// In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
        /// </summary>
        [Input("startTask")]
        public Input<Inputs.StartTaskArgs>? StartTask { get; set; }

        /// <summary>
        /// If omitted, the default value is Default.
        /// </summary>
        [Input("targetNodeCommunicationMode")]
        public Input<Pulumi.AzureNative.Batch.V20221001.NodeCommunicationMode>? TargetNodeCommunicationMode { get; set; }

        /// <summary>
        /// If not specified, the default is spread.
        /// </summary>
        [Input("taskSchedulingPolicy")]
        public Input<Inputs.TaskSchedulingPolicyArgs>? TaskSchedulingPolicy { get; set; }

        /// <summary>
        /// The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Input("taskSlotsPerNode")]
        public Input<int>? TaskSlotsPerNode { get; set; }

        [Input("userAccounts")]
        private InputList<Inputs.UserAccountArgs>? _userAccounts;
        public InputList<Inputs.UserAccountArgs> UserAccounts
        {
            get => _userAccounts ?? (_userAccounts = new InputList<Inputs.UserAccountArgs>());
            set => _userAccounts = value;
        }

        /// <summary>
        /// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public PoolArgs()
        {
        }
        public static new PoolArgs Empty => new PoolArgs();
    }
}
