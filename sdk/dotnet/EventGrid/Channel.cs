// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid
{
    /// <summary>
    /// Channel info.
    /// API Version: 2022-06-15.
    /// Previous API Version: 2021-10-15-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Channels_CreateOrUpdate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var channel = new AzureNative.EventGrid.Channel("channel", new()
    ///     {
    ///         ChannelName = "exampleChannelName1",
    ///         ChannelType = "PartnerTopic",
    ///         ExpirationTimeIfNotActivatedUtc = "2021-10-21T22:50:25.410433Z",
    ///         MessageForActivation = "Example message to approver",
    ///         PartnerNamespaceName = "examplePartnerNamespaceName1",
    ///         PartnerTopicInfo = new AzureNative.EventGrid.Inputs.PartnerTopicInfoArgs
    ///         {
    ///             AzureSubscriptionId = "5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
    ///             Name = "examplePartnerTopic1",
    ///             ResourceGroupName = "examplerg2",
    ///             Source = "ContosoCorp.Accounts.User1",
    ///         },
    ///         ResourceGroupName = "examplerg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:eventgrid:Channel exampleChannelName1 /subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/partnerNamespaces/examplePartnerNamespaceName1/changes/exampleChannelName1 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:eventgrid:Channel")]
    public partial class Channel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of the event channel which represents the direction flow of events.
        /// </summary>
        [Output("channelType")]
        public Output<string?> ChannelType { get; private set; } = null!;

        /// <summary>
        /// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
        /// the channel and corresponding partner topic are deleted.
        /// </summary>
        [Output("expirationTimeIfNotActivatedUtc")]
        public Output<string?> ExpirationTimeIfNotActivatedUtc { get; private set; } = null!;

        /// <summary>
        /// Context or helpful message that can be used during the approval process by the subscriber.
        /// </summary>
        [Output("messageForActivation")]
        public Output<string?> MessageForActivation { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
        /// </summary>
        [Output("partnerTopicInfo")]
        public Output<Outputs.PartnerTopicInfoResponse?> PartnerTopicInfo { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the channel.
        /// </summary>
        [Output("provisioningState")]
        public Output<string?> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The readiness state of the corresponding partner topic.
        /// </summary>
        [Output("readinessState")]
        public Output<string?> ReadinessState { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to Channel resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Channel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Channel(string name, ChannelArgs args, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid:Channel", name, args ?? new ChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Channel(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid:Channel", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20211015preview:Channel"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20220615:Channel"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Channel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Channel Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Channel(name, id, options);
        }
    }

    public sealed class ChannelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the channel.
        /// </summary>
        [Input("channelName")]
        public Input<string>? ChannelName { get; set; }

        /// <summary>
        /// The type of the event channel which represents the direction flow of events.
        /// </summary>
        [Input("channelType")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.ChannelType>? ChannelType { get; set; }

        /// <summary>
        /// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
        /// the channel and corresponding partner topic are deleted.
        /// </summary>
        [Input("expirationTimeIfNotActivatedUtc")]
        public Input<string>? ExpirationTimeIfNotActivatedUtc { get; set; }

        /// <summary>
        /// Context or helpful message that can be used during the approval process by the subscriber.
        /// </summary>
        [Input("messageForActivation")]
        public Input<string>? MessageForActivation { get; set; }

        /// <summary>
        /// Name of the partner namespace.
        /// </summary>
        [Input("partnerNamespaceName", required: true)]
        public Input<string> PartnerNamespaceName { get; set; } = null!;

        /// <summary>
        /// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
        /// </summary>
        [Input("partnerTopicInfo")]
        public Input<Inputs.PartnerTopicInfoArgs>? PartnerTopicInfo { get; set; }

        /// <summary>
        /// Provisioning state of the channel.
        /// </summary>
        [Input("provisioningState")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.ChannelProvisioningState>? ProvisioningState { get; set; }

        /// <summary>
        /// The readiness state of the corresponding partner topic.
        /// </summary>
        [Input("readinessState")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.ReadinessState>? ReadinessState { get; set; }

        /// <summary>
        /// The name of the resource group within the partners subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ChannelArgs()
        {
        }
        public static new ChannelArgs Empty => new ChannelArgs();
    }
}
