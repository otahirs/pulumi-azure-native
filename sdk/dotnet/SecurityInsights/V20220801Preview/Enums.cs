// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.SecurityInsights.V20220801Preview
{
    /// <summary>
    /// Alert detail
    /// </summary>
    [EnumType]
    public readonly struct AlertDetail : IEquatable<AlertDetail>
    {
        private readonly string _value;

        private AlertDetail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Alert display name
        /// </summary>
        public static AlertDetail DisplayName { get; } = new AlertDetail("DisplayName");
        /// <summary>
        /// Alert severity
        /// </summary>
        public static AlertDetail Severity { get; } = new AlertDetail("Severity");

        public static bool operator ==(AlertDetail left, AlertDetail right) => left.Equals(right);
        public static bool operator !=(AlertDetail left, AlertDetail right) => !left.Equals(right);

        public static explicit operator string(AlertDetail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertDetail other && Equals(other);
        public bool Equals(AlertDetail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the alert rule
    /// </summary>
    [EnumType]
    public readonly struct AlertRuleKind : IEquatable<AlertRuleKind>
    {
        private readonly string _value;

        private AlertRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertRuleKind Scheduled { get; } = new AlertRuleKind("Scheduled");
        public static AlertRuleKind MicrosoftSecurityIncidentCreation { get; } = new AlertRuleKind("MicrosoftSecurityIncidentCreation");
        public static AlertRuleKind Fusion { get; } = new AlertRuleKind("Fusion");
        public static AlertRuleKind MLBehaviorAnalytics { get; } = new AlertRuleKind("MLBehaviorAnalytics");
        public static AlertRuleKind ThreatIntelligence { get; } = new AlertRuleKind("ThreatIntelligence");
        public static AlertRuleKind NRT { get; } = new AlertRuleKind("NRT");

        public static bool operator ==(AlertRuleKind left, AlertRuleKind right) => left.Equals(right);
        public static bool operator !=(AlertRuleKind left, AlertRuleKind right) => !left.Equals(right);

        public static explicit operator string(AlertRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertRuleKind other && Equals(other);
        public bool Equals(AlertRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity for alerts created by this alert rule.
    /// </summary>
    [EnumType]
    public readonly struct AlertSeverity : IEquatable<AlertSeverity>
    {
        private readonly string _value;

        private AlertSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// High severity
        /// </summary>
        public static AlertSeverity High { get; } = new AlertSeverity("High");
        /// <summary>
        /// Medium severity
        /// </summary>
        public static AlertSeverity Medium { get; } = new AlertSeverity("Medium");
        /// <summary>
        /// Low severity
        /// </summary>
        public static AlertSeverity Low { get; } = new AlertSeverity("Low");
        /// <summary>
        /// Informational severity
        /// </summary>
        public static AlertSeverity Informational { get; } = new AlertSeverity("Informational");

        public static bool operator ==(AlertSeverity left, AlertSeverity right) => left.Equals(right);
        public static bool operator !=(AlertSeverity left, AlertSeverity right) => !left.Equals(right);

        public static explicit operator string(AlertSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertSeverity other && Equals(other);
        public bool Equals(AlertSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity for alerts created by this alert rule.
    /// </summary>
    [EnumType]
    public readonly struct AttackTactic : IEquatable<AttackTactic>
    {
        private readonly string _value;

        private AttackTactic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AttackTactic Reconnaissance { get; } = new AttackTactic("Reconnaissance");
        public static AttackTactic ResourceDevelopment { get; } = new AttackTactic("ResourceDevelopment");
        public static AttackTactic InitialAccess { get; } = new AttackTactic("InitialAccess");
        public static AttackTactic Execution { get; } = new AttackTactic("Execution");
        public static AttackTactic Persistence { get; } = new AttackTactic("Persistence");
        public static AttackTactic PrivilegeEscalation { get; } = new AttackTactic("PrivilegeEscalation");
        public static AttackTactic DefenseEvasion { get; } = new AttackTactic("DefenseEvasion");
        public static AttackTactic CredentialAccess { get; } = new AttackTactic("CredentialAccess");
        public static AttackTactic Discovery { get; } = new AttackTactic("Discovery");
        public static AttackTactic LateralMovement { get; } = new AttackTactic("LateralMovement");
        public static AttackTactic Collection { get; } = new AttackTactic("Collection");
        public static AttackTactic Exfiltration { get; } = new AttackTactic("Exfiltration");
        public static AttackTactic CommandAndControl { get; } = new AttackTactic("CommandAndControl");
        public static AttackTactic Impact { get; } = new AttackTactic("Impact");
        public static AttackTactic PreAttack { get; } = new AttackTactic("PreAttack");
        public static AttackTactic ImpairProcessControl { get; } = new AttackTactic("ImpairProcessControl");
        public static AttackTactic InhibitResponseFunction { get; } = new AttackTactic("InhibitResponseFunction");

        public static bool operator ==(AttackTactic left, AttackTactic right) => left.Equals(right);
        public static bool operator !=(AttackTactic left, AttackTactic right) => !left.Equals(right);

        public static explicit operator string(AttackTactic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AttackTactic other && Equals(other);
        public bool Equals(AttackTactic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// type of connectivity
    /// </summary>
    [EnumType]
    public readonly struct ConnectivityType : IEquatable<ConnectivityType>
    {
        private readonly string _value;

        private ConnectivityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectivityType IsConnectedQuery { get; } = new ConnectivityType("IsConnectedQuery");

        public static bool operator ==(ConnectivityType left, ConnectivityType right) => left.Equals(right);
        public static bool operator !=(ConnectivityType left, ConnectivityType right) => !left.Equals(right);

        public static explicit operator string(ConnectivityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectivityType other && Equals(other);
        public bool Equals(ConnectivityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the entity query kind
    /// </summary>
    [EnumType]
    public readonly struct CustomEntityQueryKind : IEquatable<CustomEntityQueryKind>
    {
        private readonly string _value;

        private CustomEntityQueryKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomEntityQueryKind Activity { get; } = new CustomEntityQueryKind("Activity");

        public static bool operator ==(CustomEntityQueryKind left, CustomEntityQueryKind right) => left.Equals(right);
        public static bool operator !=(CustomEntityQueryKind left, CustomEntityQueryKind right) => !left.Equals(right);

        public static explicit operator string(CustomEntityQueryKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomEntityQueryKind other && Equals(other);
        public bool Equals(CustomEntityQueryKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data connector kind
    /// </summary>
    [EnumType]
    public readonly struct DataConnectorKind : IEquatable<DataConnectorKind>
    {
        private readonly string _value;

        private DataConnectorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataConnectorKind AzureActiveDirectory { get; } = new DataConnectorKind("AzureActiveDirectory");
        public static DataConnectorKind AzureSecurityCenter { get; } = new DataConnectorKind("AzureSecurityCenter");
        public static DataConnectorKind MicrosoftCloudAppSecurity { get; } = new DataConnectorKind("MicrosoftCloudAppSecurity");
        public static DataConnectorKind ThreatIntelligence { get; } = new DataConnectorKind("ThreatIntelligence");
        public static DataConnectorKind ThreatIntelligenceTaxii { get; } = new DataConnectorKind("ThreatIntelligenceTaxii");
        public static DataConnectorKind Office365 { get; } = new DataConnectorKind("Office365");
        public static DataConnectorKind OfficeATP { get; } = new DataConnectorKind("OfficeATP");
        public static DataConnectorKind OfficeIRM { get; } = new DataConnectorKind("OfficeIRM");
        public static DataConnectorKind Office365Project { get; } = new DataConnectorKind("Office365Project");
        public static DataConnectorKind OfficePowerBI { get; } = new DataConnectorKind("OfficePowerBI");
        public static DataConnectorKind AmazonWebServicesCloudTrail { get; } = new DataConnectorKind("AmazonWebServicesCloudTrail");
        public static DataConnectorKind AmazonWebServicesS3 { get; } = new DataConnectorKind("AmazonWebServicesS3");
        public static DataConnectorKind AzureAdvancedThreatProtection { get; } = new DataConnectorKind("AzureAdvancedThreatProtection");
        public static DataConnectorKind MicrosoftDefenderAdvancedThreatProtection { get; } = new DataConnectorKind("MicrosoftDefenderAdvancedThreatProtection");
        public static DataConnectorKind Dynamics365 { get; } = new DataConnectorKind("Dynamics365");
        public static DataConnectorKind MicrosoftThreatProtection { get; } = new DataConnectorKind("MicrosoftThreatProtection");
        public static DataConnectorKind MicrosoftThreatIntelligence { get; } = new DataConnectorKind("MicrosoftThreatIntelligence");
        public static DataConnectorKind GenericUI { get; } = new DataConnectorKind("GenericUI");
        public static DataConnectorKind APIPolling { get; } = new DataConnectorKind("APIPolling");
        public static DataConnectorKind IOT { get; } = new DataConnectorKind("IOT");

        public static bool operator ==(DataConnectorKind left, DataConnectorKind right) => left.Equals(right);
        public static bool operator !=(DataConnectorKind left, DataConnectorKind right) => !left.Equals(right);

        public static explicit operator string(DataConnectorKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataConnectorKind other && Equals(other);
        public bool Equals(DataConnectorKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describe whether this data type connection is enabled or not.
    /// </summary>
    [EnumType]
    public readonly struct DataTypeState : IEquatable<DataTypeState>
    {
        private readonly string _value;

        private DataTypeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataTypeState Enabled { get; } = new DataTypeState("Enabled");
        public static DataTypeState Disabled { get; } = new DataTypeState("Disabled");

        public static bool operator ==(DataTypeState left, DataTypeState right) => left.Equals(right);
        public static bool operator !=(DataTypeState left, DataTypeState right) => !left.Equals(right);

        public static explicit operator string(DataTypeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataTypeState other && Equals(other);
        public bool Equals(DataTypeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The V3 type of the mapped entity
    /// </summary>
    [EnumType]
    public readonly struct EntityMappingType : IEquatable<EntityMappingType>
    {
        private readonly string _value;

        private EntityMappingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User account entity type
        /// </summary>
        public static EntityMappingType Account { get; } = new EntityMappingType("Account");
        /// <summary>
        /// Host entity type
        /// </summary>
        public static EntityMappingType Host { get; } = new EntityMappingType("Host");
        /// <summary>
        /// IP address entity type
        /// </summary>
        public static EntityMappingType IP { get; } = new EntityMappingType("IP");
        /// <summary>
        /// Malware entity type
        /// </summary>
        public static EntityMappingType Malware { get; } = new EntityMappingType("Malware");
        /// <summary>
        /// System file entity type
        /// </summary>
        public static EntityMappingType File { get; } = new EntityMappingType("File");
        /// <summary>
        /// Process entity type
        /// </summary>
        public static EntityMappingType Process { get; } = new EntityMappingType("Process");
        /// <summary>
        /// Cloud app entity type
        /// </summary>
        public static EntityMappingType CloudApplication { get; } = new EntityMappingType("CloudApplication");
        /// <summary>
        /// DNS entity type
        /// </summary>
        public static EntityMappingType DNS { get; } = new EntityMappingType("DNS");
        /// <summary>
        /// Azure resource entity type
        /// </summary>
        public static EntityMappingType AzureResource { get; } = new EntityMappingType("AzureResource");
        /// <summary>
        /// File-hash entity type
        /// </summary>
        public static EntityMappingType FileHash { get; } = new EntityMappingType("FileHash");
        /// <summary>
        /// Registry key entity type
        /// </summary>
        public static EntityMappingType RegistryKey { get; } = new EntityMappingType("RegistryKey");
        /// <summary>
        /// Registry value entity type
        /// </summary>
        public static EntityMappingType RegistryValue { get; } = new EntityMappingType("RegistryValue");
        /// <summary>
        /// Security group entity type
        /// </summary>
        public static EntityMappingType SecurityGroup { get; } = new EntityMappingType("SecurityGroup");
        /// <summary>
        /// URL entity type
        /// </summary>
        public static EntityMappingType URL { get; } = new EntityMappingType("URL");
        /// <summary>
        /// Mailbox entity type
        /// </summary>
        public static EntityMappingType Mailbox { get; } = new EntityMappingType("Mailbox");
        /// <summary>
        /// Mail cluster entity type
        /// </summary>
        public static EntityMappingType MailCluster { get; } = new EntityMappingType("MailCluster");
        /// <summary>
        /// Mail message entity type
        /// </summary>
        public static EntityMappingType MailMessage { get; } = new EntityMappingType("MailMessage");
        /// <summary>
        /// Submission mail entity type
        /// </summary>
        public static EntityMappingType SubmissionMail { get; } = new EntityMappingType("SubmissionMail");

        public static bool operator ==(EntityMappingType left, EntityMappingType right) => left.Equals(right);
        public static bool operator !=(EntityMappingType left, EntityMappingType right) => !left.Equals(right);

        public static explicit operator string(EntityMappingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityMappingType other && Equals(other);
        public bool Equals(EntityMappingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entity provider that is synced.
    /// </summary>
    [EnumType]
    public readonly struct EntityProviders : IEquatable<EntityProviders>
    {
        private readonly string _value;

        private EntityProviders(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityProviders ActiveDirectory { get; } = new EntityProviders("ActiveDirectory");
        public static EntityProviders AzureActiveDirectory { get; } = new EntityProviders("AzureActiveDirectory");

        public static bool operator ==(EntityProviders left, EntityProviders right) => left.Equals(right);
        public static bool operator !=(EntityProviders left, EntityProviders right) => !left.Equals(right);

        public static explicit operator string(EntityProviders value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityProviders other && Equals(other);
        public bool Equals(EntityProviders other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entity query kind
    /// </summary>
    [EnumType]
    public readonly struct EntityTimelineKind : IEquatable<EntityTimelineKind>
    {
        private readonly string _value;

        private EntityTimelineKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// activity
        /// </summary>
        public static EntityTimelineKind Activity { get; } = new EntityTimelineKind("Activity");
        /// <summary>
        /// bookmarks
        /// </summary>
        public static EntityTimelineKind Bookmark { get; } = new EntityTimelineKind("Bookmark");
        /// <summary>
        /// security alerts
        /// </summary>
        public static EntityTimelineKind SecurityAlert { get; } = new EntityTimelineKind("SecurityAlert");
        /// <summary>
        /// anomaly
        /// </summary>
        public static EntityTimelineKind Anomaly { get; } = new EntityTimelineKind("Anomaly");

        public static bool operator ==(EntityTimelineKind left, EntityTimelineKind right) => left.Equals(right);
        public static bool operator !=(EntityTimelineKind left, EntityTimelineKind right) => !left.Equals(right);

        public static explicit operator string(EntityTimelineKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityTimelineKind other && Equals(other);
        public bool Equals(EntityTimelineKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the query's source entity
    /// </summary>
    [EnumType]
    public readonly struct EntityType : IEquatable<EntityType>
    {
        private readonly string _value;

        private EntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Entity represents account in the system.
        /// </summary>
        public static EntityType Account { get; } = new EntityType("Account");
        /// <summary>
        /// Entity represents host in the system.
        /// </summary>
        public static EntityType Host { get; } = new EntityType("Host");
        /// <summary>
        /// Entity represents file in the system.
        /// </summary>
        public static EntityType File { get; } = new EntityType("File");
        /// <summary>
        /// Entity represents azure resource in the system.
        /// </summary>
        public static EntityType AzureResource { get; } = new EntityType("AzureResource");
        /// <summary>
        /// Entity represents cloud application in the system.
        /// </summary>
        public static EntityType CloudApplication { get; } = new EntityType("CloudApplication");
        /// <summary>
        /// Entity represents dns in the system.
        /// </summary>
        public static EntityType DNS { get; } = new EntityType("DNS");
        /// <summary>
        /// Entity represents file hash in the system.
        /// </summary>
        public static EntityType FileHash { get; } = new EntityType("FileHash");
        /// <summary>
        /// Entity represents ip in the system.
        /// </summary>
        public static EntityType IP { get; } = new EntityType("IP");
        /// <summary>
        /// Entity represents malware in the system.
        /// </summary>
        public static EntityType Malware { get; } = new EntityType("Malware");
        /// <summary>
        /// Entity represents process in the system.
        /// </summary>
        public static EntityType Process { get; } = new EntityType("Process");
        /// <summary>
        /// Entity represents registry key in the system.
        /// </summary>
        public static EntityType RegistryKey { get; } = new EntityType("RegistryKey");
        /// <summary>
        /// Entity represents registry value in the system.
        /// </summary>
        public static EntityType RegistryValue { get; } = new EntityType("RegistryValue");
        /// <summary>
        /// Entity represents security group in the system.
        /// </summary>
        public static EntityType SecurityGroup { get; } = new EntityType("SecurityGroup");
        /// <summary>
        /// Entity represents url in the system.
        /// </summary>
        public static EntityType URL { get; } = new EntityType("URL");
        /// <summary>
        /// Entity represents IoT device in the system.
        /// </summary>
        public static EntityType IoTDevice { get; } = new EntityType("IoTDevice");
        /// <summary>
        /// Entity represents security alert in the system.
        /// </summary>
        public static EntityType SecurityAlert { get; } = new EntityType("SecurityAlert");
        /// <summary>
        /// Entity represents HuntingBookmark in the system.
        /// </summary>
        public static EntityType HuntingBookmark { get; } = new EntityType("HuntingBookmark");
        /// <summary>
        /// Entity represents mail cluster in the system.
        /// </summary>
        public static EntityType MailCluster { get; } = new EntityType("MailCluster");
        /// <summary>
        /// Entity represents mail message in the system.
        /// </summary>
        public static EntityType MailMessage { get; } = new EntityType("MailMessage");
        /// <summary>
        /// Entity represents mailbox in the system.
        /// </summary>
        public static EntityType Mailbox { get; } = new EntityType("Mailbox");
        /// <summary>
        /// Entity represents submission mail in the system.
        /// </summary>
        public static EntityType SubmissionMail { get; } = new EntityType("SubmissionMail");
        /// <summary>
        /// Entity represents network interface in the system.
        /// </summary>
        public static EntityType Nic { get; } = new EntityType("Nic");

        public static bool operator ==(EntityType left, EntityType right) => left.Equals(right);
        public static bool operator !=(EntityType left, EntityType right) => !left.Equals(right);

        public static explicit operator string(EntityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityType other && Equals(other);
        public bool Equals(EntityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The event grouping aggregation kinds
    /// </summary>
    [EnumType]
    public readonly struct EventGroupingAggregationKind : IEquatable<EventGroupingAggregationKind>
    {
        private readonly string _value;

        private EventGroupingAggregationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventGroupingAggregationKind SingleAlert { get; } = new EventGroupingAggregationKind("SingleAlert");
        public static EventGroupingAggregationKind AlertPerResult { get; } = new EventGroupingAggregationKind("AlertPerResult");

        public static bool operator ==(EventGroupingAggregationKind left, EventGroupingAggregationKind right) => left.Equals(right);
        public static bool operator !=(EventGroupingAggregationKind left, EventGroupingAggregationKind right) => !left.Equals(right);

        public static explicit operator string(EventGroupingAggregationKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventGroupingAggregationKind other && Equals(other);
        public bool Equals(EventGroupingAggregationKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
    /// </summary>
    [EnumType]
    public readonly struct MatchingMethod : IEquatable<MatchingMethod>
    {
        private readonly string _value;

        private MatchingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Grouping alerts into a single incident if all the entities match
        /// </summary>
        public static MatchingMethod AllEntities { get; } = new MatchingMethod("AllEntities");
        /// <summary>
        /// Grouping any alerts triggered by this rule into a single incident
        /// </summary>
        public static MatchingMethod AnyAlert { get; } = new MatchingMethod("AnyAlert");
        /// <summary>
        /// Grouping alerts into a single incident if the selected entities, custom details and alert details match
        /// </summary>
        public static MatchingMethod Selected { get; } = new MatchingMethod("Selected");

        public static bool operator ==(MatchingMethod left, MatchingMethod right) => left.Equals(right);
        public static bool operator !=(MatchingMethod left, MatchingMethod right) => !left.Equals(right);

        public static explicit operator string(MatchingMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchingMethod other && Equals(other);
        public bool Equals(MatchingMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The alerts' productName on which the cases will be generated
    /// </summary>
    [EnumType]
    public readonly struct MicrosoftSecurityProductName : IEquatable<MicrosoftSecurityProductName>
    {
        private readonly string _value;

        private MicrosoftSecurityProductName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MicrosoftSecurityProductName Microsoft_Cloud_App_Security { get; } = new MicrosoftSecurityProductName("Microsoft Cloud App Security");
        public static MicrosoftSecurityProductName Azure_Security_Center { get; } = new MicrosoftSecurityProductName("Azure Security Center");
        public static MicrosoftSecurityProductName Azure_Advanced_Threat_Protection { get; } = new MicrosoftSecurityProductName("Azure Advanced Threat Protection");
        public static MicrosoftSecurityProductName Azure_Active_Directory_Identity_Protection { get; } = new MicrosoftSecurityProductName("Azure Active Directory Identity Protection");
        public static MicrosoftSecurityProductName Azure_Security_Center_for_IoT { get; } = new MicrosoftSecurityProductName("Azure Security Center for IoT");
        public static MicrosoftSecurityProductName Office_365_Advanced_Threat_Protection { get; } = new MicrosoftSecurityProductName("Office 365 Advanced Threat Protection");
        public static MicrosoftSecurityProductName Microsoft_Defender_Advanced_Threat_Protection { get; } = new MicrosoftSecurityProductName("Microsoft Defender Advanced Threat Protection");

        public static bool operator ==(MicrosoftSecurityProductName left, MicrosoftSecurityProductName right) => left.Equals(right);
        public static bool operator !=(MicrosoftSecurityProductName left, MicrosoftSecurityProductName right) => !left.Equals(right);

        public static explicit operator string(MicrosoftSecurityProductName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MicrosoftSecurityProductName other && Equals(other);
        public bool Equals(MicrosoftSecurityProductName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Permission provider scope
    /// </summary>
    [EnumType]
    public readonly struct PermissionProviderScope : IEquatable<PermissionProviderScope>
    {
        private readonly string _value;

        private PermissionProviderScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PermissionProviderScope ResourceGroup { get; } = new PermissionProviderScope("ResourceGroup");
        public static PermissionProviderScope Subscription { get; } = new PermissionProviderScope("Subscription");
        public static PermissionProviderScope Workspace { get; } = new PermissionProviderScope("Workspace");

        public static bool operator ==(PermissionProviderScope left, PermissionProviderScope right) => left.Equals(right);
        public static bool operator !=(PermissionProviderScope left, PermissionProviderScope right) => !left.Equals(right);

        public static explicit operator string(PermissionProviderScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PermissionProviderScope other && Equals(other);
        public bool Equals(PermissionProviderScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The polling frequency for the TAXII server.
    /// </summary>
    [EnumType]
    public readonly struct PollingFrequency : IEquatable<PollingFrequency>
    {
        private readonly string _value;

        private PollingFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Once a minute
        /// </summary>
        public static PollingFrequency OnceAMinute { get; } = new PollingFrequency("OnceAMinute");
        /// <summary>
        /// Once an hour
        /// </summary>
        public static PollingFrequency OnceAnHour { get; } = new PollingFrequency("OnceAnHour");
        /// <summary>
        /// Once a day
        /// </summary>
        public static PollingFrequency OnceADay { get; } = new PollingFrequency("OnceADay");

        public static bool operator ==(PollingFrequency left, PollingFrequency right) => left.Equals(right);
        public static bool operator !=(PollingFrequency left, PollingFrequency right) => !left.Equals(right);

        public static explicit operator string(PollingFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PollingFrequency other && Equals(other);
        public bool Equals(PollingFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provider name
    /// </summary>
    [EnumType]
    public readonly struct ProviderName : IEquatable<ProviderName>
    {
        private readonly string _value;

        private ProviderName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderName Microsoft_OperationalInsights_solutions { get; } = new ProviderName("Microsoft.OperationalInsights/solutions");
        public static ProviderName Microsoft_OperationalInsights_workspaces { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces");
        public static ProviderName Microsoft_OperationalInsights_workspaces_datasources { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces/datasources");
        public static ProviderName Microsoft_aadiam_diagnosticSettings { get; } = new ProviderName("microsoft.aadiam/diagnosticSettings");
        public static ProviderName Microsoft_OperationalInsights_workspaces_sharedKeys { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces/sharedKeys");
        public static ProviderName Microsoft_Authorization_policyAssignments { get; } = new ProviderName("Microsoft.Authorization/policyAssignments");

        public static bool operator ==(ProviderName left, ProviderName right) => left.Equals(right);
        public static bool operator !=(ProviderName left, ProviderName right) => !left.Equals(right);

        public static explicit operator string(ProviderName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderName other && Equals(other);
        public bool Equals(ProviderName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of security ML Analytics Settings
    /// </summary>
    [EnumType]
    public readonly struct SecurityMLAnalyticsSettingsKind : IEquatable<SecurityMLAnalyticsSettingsKind>
    {
        private readonly string _value;

        private SecurityMLAnalyticsSettingsKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityMLAnalyticsSettingsKind Anomaly { get; } = new SecurityMLAnalyticsSettingsKind("Anomaly");

        public static bool operator ==(SecurityMLAnalyticsSettingsKind left, SecurityMLAnalyticsSettingsKind right) => left.Equals(right);
        public static bool operator !=(SecurityMLAnalyticsSettingsKind left, SecurityMLAnalyticsSettingsKind right) => !left.Equals(right);

        public static explicit operator string(SecurityMLAnalyticsSettingsKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityMLAnalyticsSettingsKind other && Equals(other);
        public bool Equals(SecurityMLAnalyticsSettingsKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the setting
    /// </summary>
    [EnumType]
    public readonly struct SettingKind : IEquatable<SettingKind>
    {
        private readonly string _value;

        private SettingKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SettingKind Anomalies { get; } = new SettingKind("Anomalies");
        public static SettingKind EyesOn { get; } = new SettingKind("EyesOn");
        public static SettingKind EntityAnalytics { get; } = new SettingKind("EntityAnalytics");
        public static SettingKind Ueba { get; } = new SettingKind("Ueba");

        public static bool operator ==(SettingKind left, SettingKind right) => left.Equals(right);
        public static bool operator !=(SettingKind left, SettingKind right) => !left.Equals(right);

        public static explicit operator string(SettingKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingKind other && Equals(other);
        public bool Equals(SettingKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the setting
    /// </summary>
    [EnumType]
    public readonly struct SettingType : IEquatable<SettingType>
    {
        private readonly string _value;

        private SettingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SettingType CopyableLabel { get; } = new SettingType("CopyableLabel");
        public static SettingType InstructionStepsGroup { get; } = new SettingType("InstructionStepsGroup");
        public static SettingType InfoMessage { get; } = new SettingType("InfoMessage");

        public static bool operator ==(SettingType left, SettingType right) => left.Equals(right);
        public static bool operator !=(SettingType left, SettingType right) => !left.Equals(right);

        public static explicit operator string(SettingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingType other && Equals(other);
        public bool Equals(SettingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The anomaly SecurityMLAnalyticsSettings status
    /// </summary>
    [EnumType]
    public readonly struct SettingsStatus : IEquatable<SettingsStatus>
    {
        private readonly string _value;

        private SettingsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Anomaly settings status in Production mode
        /// </summary>
        public static SettingsStatus Production { get; } = new SettingsStatus("Production");
        /// <summary>
        /// Anomaly settings status in Flighting mode
        /// </summary>
        public static SettingsStatus Flighting { get; } = new SettingsStatus("Flighting");

        public static bool operator ==(SettingsStatus left, SettingsStatus right) => left.Equals(right);
        public static bool operator !=(SettingsStatus left, SettingsStatus right) => !left.Equals(right);

        public static explicit operator string(SettingsStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingsStatus other && Equals(other);
        public bool Equals(SettingsStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation against the threshold that triggers alert rule.
    /// </summary>
    [EnumType]
    public readonly struct TriggerOperator : IEquatable<TriggerOperator>
    {
        private readonly string _value;

        private TriggerOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerOperator GreaterThan { get; } = new TriggerOperator("GreaterThan");
        public static TriggerOperator LessThan { get; } = new TriggerOperator("LessThan");
        public static TriggerOperator Equal { get; } = new TriggerOperator("Equal");
        public static TriggerOperator NotEqual { get; } = new TriggerOperator("NotEqual");

        public static bool operator ==(TriggerOperator left, TriggerOperator right) => left.Equals(right);
        public static bool operator !=(TriggerOperator left, TriggerOperator right) => !left.Equals(right);

        public static explicit operator string(TriggerOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerOperator other && Equals(other);
        public bool Equals(TriggerOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data source that enriched by ueba.
    /// </summary>
    [EnumType]
    public readonly struct UebaDataSources : IEquatable<UebaDataSources>
    {
        private readonly string _value;

        private UebaDataSources(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UebaDataSources AuditLogs { get; } = new UebaDataSources("AuditLogs");
        public static UebaDataSources AzureActivity { get; } = new UebaDataSources("AzureActivity");
        public static UebaDataSources SecurityEvent { get; } = new UebaDataSources("SecurityEvent");
        public static UebaDataSources SigninLogs { get; } = new UebaDataSources("SigninLogs");

        public static bool operator ==(UebaDataSources left, UebaDataSources right) => left.Equals(right);
        public static bool operator !=(UebaDataSources left, UebaDataSources right) => !left.Equals(right);

        public static explicit operator string(UebaDataSources value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UebaDataSources other && Equals(other);
        public bool Equals(UebaDataSources other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
