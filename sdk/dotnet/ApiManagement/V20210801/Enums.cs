// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiManagement.V20210801
{
    /// <summary>
    /// Type of API.
    /// </summary>
    [EnumType]
    public readonly struct ApiType : IEquatable<ApiType>
    {
        private readonly string _value;

        private ApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApiType Http { get; } = new ApiType("http");
        public static ApiType Soap { get; } = new ApiType("soap");
        public static ApiType Websocket { get; } = new ApiType("websocket");
        public static ApiType Graphql { get; } = new ApiType("graphql");

        public static bool operator ==(ApiType left, ApiType right) => left.Equals(right);
        public static bool operator !=(ApiType left, ApiType right) => !left.Equals(right);

        public static explicit operator string(ApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiType other && Equals(other);
        public bool Equals(ApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
    /// </summary>
    [EnumType]
    public readonly struct ApimIdentityType : IEquatable<ApimIdentityType>
    {
        private readonly string _value;

        private ApimIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApimIdentityType SystemAssigned { get; } = new ApimIdentityType("SystemAssigned");
        public static ApimIdentityType UserAssigned { get; } = new ApimIdentityType("UserAssigned");
        public static ApimIdentityType SystemAssigned_UserAssigned { get; } = new ApimIdentityType("SystemAssigned, UserAssigned");
        public static ApimIdentityType None { get; } = new ApimIdentityType("None");

        public static bool operator ==(ApimIdentityType left, ApimIdentityType right) => left.Equals(right);
        public static bool operator !=(ApimIdentityType left, ApimIdentityType right) => !left.Equals(right);

        public static explicit operator string(ApimIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApimIdentityType other && Equals(other);
        public bool Equals(ApimIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backend communication protocol.
    /// </summary>
    [EnumType]
    public readonly struct BackendProtocol : IEquatable<BackendProtocol>
    {
        private readonly string _value;

        private BackendProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Backend is a RESTful service.
        /// </summary>
        public static BackendProtocol Http { get; } = new BackendProtocol("http");
        /// <summary>
        /// The Backend is a SOAP service.
        /// </summary>
        public static BackendProtocol Soap { get; } = new BackendProtocol("soap");

        public static bool operator ==(BackendProtocol left, BackendProtocol right) => left.Equals(right);
        public static bool operator !=(BackendProtocol left, BackendProtocol right) => !left.Equals(right);

        public static explicit operator string(BackendProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendProtocol other && Equals(other);
        public bool Equals(BackendProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Form of an authorization grant, which the client uses to request the access token.
    /// </summary>
    [EnumType]
    public readonly struct BearerTokenSendingMethods : IEquatable<BearerTokenSendingMethods>
    {
        private readonly string _value;

        private BearerTokenSendingMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Access token will be transmitted in the Authorization header using Bearer schema
        /// </summary>
        public static BearerTokenSendingMethods AuthorizationHeader { get; } = new BearerTokenSendingMethods("authorizationHeader");
        /// <summary>
        /// Access token will be transmitted as query parameters.
        /// </summary>
        public static BearerTokenSendingMethods Query { get; } = new BearerTokenSendingMethods("query");

        public static bool operator ==(BearerTokenSendingMethods left, BearerTokenSendingMethods right) => left.Equals(right);
        public static bool operator !=(BearerTokenSendingMethods left, BearerTokenSendingMethods right) => !left.Equals(right);

        public static explicit operator string(BearerTokenSendingMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BearerTokenSendingMethods other && Equals(other);
        public bool Equals(BearerTokenSendingMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Certificate Source.
    /// </summary>
    [EnumType]
    public readonly struct CertificateSource : IEquatable<CertificateSource>
    {
        private readonly string _value;

        private CertificateSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateSource Managed { get; } = new CertificateSource("Managed");
        public static CertificateSource KeyVault { get; } = new CertificateSource("KeyVault");
        public static CertificateSource Custom { get; } = new CertificateSource("Custom");
        public static CertificateSource BuiltIn { get; } = new CertificateSource("BuiltIn");

        public static bool operator ==(CertificateSource left, CertificateSource right) => left.Equals(right);
        public static bool operator !=(CertificateSource left, CertificateSource right) => !left.Equals(right);

        public static explicit operator string(CertificateSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateSource other && Equals(other);
        public bool Equals(CertificateSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Certificate Status.
    /// </summary>
    [EnumType]
    public readonly struct CertificateStatus : IEquatable<CertificateStatus>
    {
        private readonly string _value;

        private CertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateStatus Completed { get; } = new CertificateStatus("Completed");
        public static CertificateStatus Failed { get; } = new CertificateStatus("Failed");
        public static CertificateStatus InProgress { get; } = new CertificateStatus("InProgress");

        public static bool operator ==(CertificateStatus left, CertificateStatus right) => left.Equals(right);
        public static bool operator !=(CertificateStatus left, CertificateStatus right) => !left.Equals(right);

        public static explicit operator string(CertificateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateStatus other && Equals(other);
        public bool Equals(CertificateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the Content in which the API is getting imported.
    /// </summary>
    [EnumType]
    public readonly struct ContentFormat : IEquatable<ContentFormat>
    {
        private readonly string _value;

        private ContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is a WADL document.
        /// </summary>
        public static ContentFormat Wadl_xml { get; } = new ContentFormat("wadl-xml");
        /// <summary>
        /// The WADL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wadl_link_json { get; } = new ContentFormat("wadl-link-json");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
        /// </summary>
        public static ContentFormat Swagger_json { get; } = new ContentFormat("swagger-json");
        /// <summary>
        /// The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Swagger_link_json { get; } = new ContentFormat("swagger-link-json");
        /// <summary>
        /// The contents are inline and the document is a WSDL/Soap document.
        /// </summary>
        public static ContentFormat Wsdl { get; } = new ContentFormat("wsdl");
        /// <summary>
        /// The WSDL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wsdl_link { get; } = new ContentFormat("wsdl-link");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
        /// </summary>
        public static ContentFormat Openapi { get; } = new ContentFormat("openapi");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
        /// </summary>
        public static ContentFormat Openapi_json { get; } = new ContentFormat("openapi+json");
        /// <summary>
        /// The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Openapi_link { get; } = new ContentFormat("openapi-link");
        /// <summary>
        /// The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Openapi_json_link { get; } = new ContentFormat("openapi+json-link");
        /// <summary>
        /// The GraphQL API endpoint hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Graphql_link { get; } = new ContentFormat("graphql-link");

        public static bool operator ==(ContentFormat left, ContentFormat right) => left.Equals(right);
        public static bool operator !=(ContentFormat left, ContentFormat right) => !left.Equals(right);

        public static explicit operator string(ContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentFormat other && Equals(other);
        public bool Equals(ContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Hostname type.
    /// </summary>
    [EnumType]
    public readonly struct HostnameType : IEquatable<HostnameType>
    {
        private readonly string _value;

        private HostnameType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostnameType Proxy { get; } = new HostnameType("Proxy");
        public static HostnameType Portal { get; } = new HostnameType("Portal");
        public static HostnameType Management { get; } = new HostnameType("Management");
        public static HostnameType Scm { get; } = new HostnameType("Scm");
        public static HostnameType DeveloperPortal { get; } = new HostnameType("DeveloperPortal");

        public static bool operator ==(HostnameType left, HostnameType right) => left.Equals(right);
        public static bool operator !=(HostnameType left, HostnameType right) => !left.Equals(right);

        public static explicit operator string(HostnameType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostnameType other && Equals(other);
        public bool Equals(HostnameType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol Http { get; } = new Protocol("http");
        public static Protocol Https { get; } = new Protocol("https");
        public static Protocol Ws { get; } = new Protocol("ws");
        public static Protocol Wss { get; } = new Protocol("wss");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the Sku.
    /// </summary>
    [EnumType]
    public readonly struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        private SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Developer SKU of Api Management.
        /// </summary>
        public static SkuType Developer { get; } = new SkuType("Developer");
        /// <summary>
        /// Standard SKU of Api Management.
        /// </summary>
        public static SkuType Standard { get; } = new SkuType("Standard");
        /// <summary>
        /// Premium SKU of Api Management.
        /// </summary>
        public static SkuType Premium { get; } = new SkuType("Premium");
        /// <summary>
        /// Basic SKU of Api Management.
        /// </summary>
        public static SkuType Basic { get; } = new SkuType("Basic");
        /// <summary>
        /// Consumption SKU of Api Management.
        /// </summary>
        public static SkuType Consumption { get; } = new SkuType("Consumption");
        /// <summary>
        /// Isolated SKU of Api Management.
        /// </summary>
        public static SkuType Isolated { get; } = new SkuType("Isolated");

        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);

        public static explicit operator string(SkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuType other && Equals(other);
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of API to create. 
    ///  * `http` creates a REST API 
    ///  * `soap` creates a SOAP pass-through API  
    ///  * `websocket` creates websocket API 
    ///  * `graphql` creates GraphQL API.
    /// </summary>
    [EnumType]
    public readonly struct SoapApiType : IEquatable<SoapApiType>
    {
        private readonly string _value;

        private SoapApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Imports a SOAP API having a RESTful front end.
        /// </summary>
        public static SoapApiType SoapToRest { get; } = new SoapApiType("http");
        /// <summary>
        /// Imports the SOAP API having a SOAP front end.
        /// </summary>
        public static SoapApiType SoapPassThrough { get; } = new SoapApiType("soap");
        /// <summary>
        /// Imports the API having a Websocket front end.
        /// </summary>
        public static SoapApiType WebSocket { get; } = new SoapApiType("websocket");
        /// <summary>
        /// Imports the API having a GraphQL front end.
        /// </summary>
        public static SoapApiType GraphQL { get; } = new SoapApiType("graphql");

        public static bool operator ==(SoapApiType left, SoapApiType right) => left.Equals(right);
        public static bool operator !=(SoapApiType left, SoapApiType right) => !left.Equals(right);

        public static explicit operator string(SoapApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoapApiType other && Equals(other);
        public bool Equals(SoapApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkType : IEquatable<VirtualNetworkType>
    {
        private readonly string _value;

        private VirtualNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The service is not part of any Virtual Network.
        /// </summary>
        public static VirtualNetworkType None { get; } = new VirtualNetworkType("None");
        /// <summary>
        /// The service is part of Virtual Network and it is accessible from Internet.
        /// </summary>
        public static VirtualNetworkType External { get; } = new VirtualNetworkType("External");
        /// <summary>
        /// The service is part of Virtual Network and it is only accessible from within the virtual network.
        /// </summary>
        public static VirtualNetworkType Internal { get; } = new VirtualNetworkType("Internal");

        public static bool operator ==(VirtualNetworkType left, VirtualNetworkType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkType left, VirtualNetworkType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkType other && Equals(other);
        public bool Equals(VirtualNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
