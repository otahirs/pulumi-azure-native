// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiManagement.V20191201Preview
{
    /// <summary>
    /// The Key to be used to generate token for user.
    /// </summary>
    [EnumType]
    public readonly struct KeyType : IEquatable<KeyType>
    {
        private readonly string _value;

        private KeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyType Primary { get; } = new KeyType("primary");
        public static KeyType Secondary { get; } = new KeyType("secondary");

        public static bool operator ==(KeyType left, KeyType right) => left.Equals(right);
        public static bool operator !=(KeyType left, KeyType right) => !left.Equals(right);

        public static explicit operator string(KeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyType other && Equals(other);
        public bool Equals(KeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Logger type.
    /// </summary>
    [EnumType]
    public readonly struct LoggerType : IEquatable<LoggerType>
    {
        private readonly string _value;

        private LoggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Event Hub as log destination.
        /// </summary>
        public static LoggerType AzureEventHub { get; } = new LoggerType("azureEventHub");
        /// <summary>
        /// Azure Application Insights as log destination.
        /// </summary>
        public static LoggerType ApplicationInsights { get; } = new LoggerType("applicationInsights");

        public static bool operator ==(LoggerType left, LoggerType right) => left.Equals(right);
        public static bool operator !=(LoggerType left, LoggerType right) => !left.Equals(right);

        public static explicit operator string(LoggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggerType other && Equals(other);
        public bool Equals(LoggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
