// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization
{
    /// <summary>
    /// The policy definition.
    /// API Version: 2021-06-01.
    /// Previous API Version: 2020-09-01. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Create or update a policy definition
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyDefinition = new AzureNative.Authorization.PolicyDefinition("policyDefinition", new()
    ///     {
    ///         Description = "Force resource names to begin with given 'prefix' and/or end with given 'suffix'",
    ///         DisplayName = "Enforce resource naming convention",
    ///         Metadata = 
    ///         {
    ///             { "category", "Naming" },
    ///         },
    ///         Mode = "All",
    ///         Parameters = 
    ///         {
    ///             { "prefix", new AzureNative.Authorization.Inputs.ParameterDefinitionsValueArgs
    ///             {
    ///                 Metadata = new AzureNative.Authorization.Inputs.ParameterDefinitionsValueMetadataArgs
    ///                 {
    ///                     Description = "Resource name prefix",
    ///                     DisplayName = "Prefix",
    ///                 },
    ///                 Type = "String",
    ///             } },
    ///             { "suffix", new AzureNative.Authorization.Inputs.ParameterDefinitionsValueArgs
    ///             {
    ///                 Metadata = new AzureNative.Authorization.Inputs.ParameterDefinitionsValueMetadataArgs
    ///                 {
    ///                     Description = "Resource name suffix",
    ///                     DisplayName = "Suffix",
    ///                 },
    ///                 Type = "String",
    ///             } },
    ///         },
    ///         PolicyDefinitionName = "ResourceNaming",
    ///         PolicyRule = 
    ///         {
    ///             { "if", 
    ///             {
    ///                 { "not", 
    ///                 {
    ///                     { "field", "name" },
    ///                     { "like", "[concat(parameters('prefix'), '*', parameters('suffix'))]" },
    ///                 } },
    ///             } },
    ///             { "then", 
    ///             {
    ///                 { "effect", "deny" },
    ///             } },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy definition with advanced parameters
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyDefinition = new AzureNative.Authorization.PolicyDefinition("policyDefinition", new()
    ///     {
    ///         Description = "Audit enabling of logs and retain them up to a year. This enables recreation of activity trails for investigation purposes when a security incident occurs or your network is compromised",
    ///         DisplayName = "Event Hubs should have diagnostic logging enabled",
    ///         Metadata = 
    ///         {
    ///             { "category", "Event Hub" },
    ///         },
    ///         Mode = "Indexed",
    ///         Parameters = 
    ///         {
    ///             { "requiredRetentionDays", new AzureNative.Authorization.Inputs.ParameterDefinitionsValueArgs
    ///             {
    ///                 AllowedValues = new[]
    ///                 {
    ///                     0,
    ///                     30,
    ///                     90,
    ///                     180,
    ///                     365,
    ///                 },
    ///                 DefaultValue = 365,
    ///                 Metadata = new AzureNative.Authorization.Inputs.ParameterDefinitionsValueMetadataArgs
    ///                 {
    ///                     Description = "The required diagnostic logs retention in days",
    ///                     DisplayName = "Required retention (days)",
    ///                 },
    ///                 Type = "Integer",
    ///             } },
    ///         },
    ///         PolicyDefinitionName = "EventHubDiagnosticLogs",
    ///         PolicyRule = 
    ///         {
    ///             { "if", 
    ///             {
    ///                 { "equals", "Microsoft.EventHub/namespaces" },
    ///                 { "field", "type" },
    ///             } },
    ///             { "then", 
    ///             {
    ///                 { "details", 
    ///                 {
    ///                     { "existenceCondition", 
    ///                     {
    ///                         { "allOf", new[]
    ///                         {
    ///                             
    ///                             {
    ///                                 { "equals", "true" },
    ///                                 { "field", "Microsoft.Insights/diagnosticSettings/logs[*].retentionPolicy.enabled" },
    ///                             },
    ///                             
    ///                             {
    ///                                 { "equals", "[parameters('requiredRetentionDays')]" },
    ///                                 { "field", "Microsoft.Insights/diagnosticSettings/logs[*].retentionPolicy.days" },
    ///                             },
    ///                         } },
    ///                     } },
    ///                     { "type", "Microsoft.Insights/diagnosticSettings" },
    ///                 } },
    ///                 { "effect", "AuditIfNotExists" },
    ///             } },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:authorization:PolicyDefinition ResourceNaming /subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:authorization:PolicyDefinition")]
    public partial class PolicyDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The policy definition description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the policy definition.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Output("metadata")]
        public Output<object?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, Outputs.ParameterDefinitionsValueResponse>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The policy rule.
        /// </summary>
        [Output("policyRule")]
        public Output<object?> PolicyRule { get; private set; } = null!;

        /// <summary>
        /// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
        /// </summary>
        [Output("policyType")]
        public Output<string?> PolicyType { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource (Microsoft.Authorization/policyDefinitions).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyDefinition(string name, PolicyDefinitionArgs? args = null, CustomResourceOptions? options = null)
            : base("azure-native:authorization:PolicyDefinition", name, args ?? new PolicyDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:authorization:PolicyDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20151001preview:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20160401:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20161201:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20180301:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20180501:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20190101:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20190601:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20190901:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200301:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200901:PolicyDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20210601:PolicyDefinition"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PolicyDefinition(name, id, options);
        }
    }

    public sealed class PolicyDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The policy definition description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the policy definition.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        /// <summary>
        /// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("parameters")]
        private InputMap<Inputs.ParameterDefinitionsValueArgs>? _parameters;

        /// <summary>
        /// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
        /// </summary>
        public InputMap<Inputs.ParameterDefinitionsValueArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.ParameterDefinitionsValueArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The name of the policy definition to create.
        /// </summary>
        [Input("policyDefinitionName")]
        public Input<string>? PolicyDefinitionName { get; set; }

        /// <summary>
        /// The policy rule.
        /// </summary>
        [Input("policyRule")]
        public Input<object>? PolicyRule { get; set; }

        /// <summary>
        /// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
        /// </summary>
        [Input("policyType")]
        public InputUnion<string, Pulumi.AzureNative.Authorization.PolicyType>? PolicyType { get; set; }

        public PolicyDefinitionArgs()
        {
            Mode = "Indexed";
        }
        public static new PolicyDefinitionArgs Empty => new PolicyDefinitionArgs();
    }
}
