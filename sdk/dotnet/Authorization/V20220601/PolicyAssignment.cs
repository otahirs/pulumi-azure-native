// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20220601
{
    /// <summary>
    /// The policy assignment.
    /// 
    /// ## Example Usage
    /// ### Create or update a policy assignment
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         Description = "Force resource names to begin with given DeptA and end with -LC",
    ///         DisplayName = "Enforce resource naming rules",
    ///         Metadata = 
    ///         {
    ///             { "assignedBy", "Special Someone" },
    ///         },
    ///         NonComplianceMessages = new[]
    ///         {
    ///             new AzureNative.Authorization.V20220601.Inputs.NonComplianceMessageArgs
    ///             {
    ///                 Message = "Resource names must start with 'DeptA' and end with '-LC'.",
    ///             },
    ///         },
    ///         Parameters = 
    ///         {
    ///             { "prefix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "DeptA",
    ///             } },
    ///             { "suffix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "-LC",
    ///             } },
    ///         },
    ///         PolicyAssignmentName = "EnforceNaming",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy assignment with a system assigned identity
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         Description = "Force resource names to begin with given DeptA and end with -LC",
    ///         DisplayName = "Enforce resource naming rules",
    ///         EnforcementMode = "Default",
    ///         Identity = new AzureNative.Authorization.V20220601.Inputs.IdentityArgs
    ///         {
    ///             Type = AzureNative.Authorization.V20220601.ResourceIdentityType.SystemAssigned,
    ///         },
    ///         Location = "eastus",
    ///         Metadata = 
    ///         {
    ///             { "assignedBy", "Foo Bar" },
    ///         },
    ///         Parameters = 
    ///         {
    ///             { "prefix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "DeptA",
    ///             } },
    ///             { "suffix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "-LC",
    ///             } },
    ///         },
    ///         PolicyAssignmentName = "EnforceNaming",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy assignment with a user assigned identity
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         Description = "Force resource names to begin with given DeptA and end with -LC",
    ///         DisplayName = "Enforce resource naming rules",
    ///         EnforcementMode = "Default",
    ///         Identity = new AzureNative.Authorization.V20220601.Inputs.IdentityArgs
    ///         {
    ///             Type = AzureNative.Authorization.V20220601.ResourceIdentityType.UserAssigned,
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/resourceGroups/testResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-identity", null },
    ///             },
    ///         },
    ///         Location = "eastus",
    ///         Metadata = 
    ///         {
    ///             { "assignedBy", "Foo Bar" },
    ///         },
    ///         Parameters = 
    ///         {
    ///             { "prefix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "DeptA",
    ///             } },
    ///             { "suffix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "-LC",
    ///             } },
    ///         },
    ///         PolicyAssignmentName = "EnforceNaming",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy assignment with multiple non-compliance messages
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         DisplayName = "Enforce security policies",
    ///         NonComplianceMessages = new[]
    ///         {
    ///             new AzureNative.Authorization.V20220601.Inputs.NonComplianceMessageArgs
    ///             {
    ///                 Message = "Resources must comply with all internal security policies. See &lt;internal site URL&gt; for more info.",
    ///             },
    ///             new AzureNative.Authorization.V20220601.Inputs.NonComplianceMessageArgs
    ///             {
    ///                 Message = "Resource names must start with 'DeptA' and end with '-LC'.",
    ///                 PolicyDefinitionReferenceId = "10420126870854049575",
    ///             },
    ///             new AzureNative.Authorization.V20220601.Inputs.NonComplianceMessageArgs
    ///             {
    ///                 Message = "Storage accounts must have firewall rules configured.",
    ///                 PolicyDefinitionReferenceId = "8572513655450389710",
    ///             },
    ///         },
    ///         PolicyAssignmentName = "securityInitAssignment",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policySetDefinitions/securityInitiative",
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy assignment with overrides
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         Description = "Limit the resource location and resource SKU",
    ///         DisplayName = "Limit the resource location and resource SKU",
    ///         Metadata = 
    ///         {
    ///             { "assignedBy", "Special Someone" },
    ///         },
    ///         Overrides = new[]
    ///         {
    ///             new AzureNative.Authorization.V20220601.Inputs.OverrideArgs
    ///             {
    ///                 Kind = "policyEffect",
    ///                 Selectors = new[]
    ///                 {
    ///                     new AzureNative.Authorization.V20220601.Inputs.SelectorArgs
    ///                     {
    ///                         In = new[]
    ///                         {
    ///                             "Limit_Skus",
    ///                             "Limit_Locations",
    ///                         },
    ///                         Kind = "policyDefinitionReferenceId",
    ///                     },
    ///                 },
    ///                 Value = "Audit",
    ///             },
    ///         },
    ///         PolicyAssignmentName = "CostManagement",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policySetDefinitions/CostManagement",
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy assignment with resource selectors
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         Description = "Limit the resource location and resource SKU",
    ///         DisplayName = "Limit the resource location and resource SKU",
    ///         Metadata = 
    ///         {
    ///             { "assignedBy", "Special Someone" },
    ///         },
    ///         PolicyAssignmentName = "CostManagement",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policySetDefinitions/CostManagement",
    ///         ResourceSelectors = new[]
    ///         {
    ///             new AzureNative.Authorization.V20220601.Inputs.ResourceSelectorArgs
    ///             {
    ///                 Name = "SDPRegions",
    ///                 Selectors = new[]
    ///                 {
    ///                     new AzureNative.Authorization.V20220601.Inputs.SelectorArgs
    ///                     {
    ///                         In = new[]
    ///                         {
    ///                             "eastus2euap",
    ///                             "centraluseuap",
    ///                         },
    ///                         Kind = "resourceLocation",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a policy assignment without enforcing policy effect during resource creation or update.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var policyAssignment = new AzureNative.Authorization.V20220601.PolicyAssignment("policyAssignment", new()
    ///     {
    ///         Description = "Force resource names to begin with given DeptA and end with -LC",
    ///         DisplayName = "Enforce resource naming rules",
    ///         EnforcementMode = "DoNotEnforce",
    ///         Metadata = 
    ///         {
    ///             { "assignedBy", "Special Someone" },
    ///         },
    ///         Parameters = 
    ///         {
    ///             { "prefix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "DeptA",
    ///             } },
    ///             { "suffix", new AzureNative.Authorization.V20220601.Inputs.ParameterValuesValueArgs
    ///             {
    ///                 Value = "-LC",
    ///             } },
    ///         },
    ///         PolicyAssignmentName = "EnforceNaming",
    ///         PolicyDefinitionId = "/subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyDefinitions/ResourceNaming",
    ///         Scope = "subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:authorization/v20220601:PolicyAssignment EnforceNaming /subscriptions/ae640e6b-ba3e-4256-9d62-2993eecfa6f2/providers/Microsoft.Authorization/policyAssignments/EnforceNaming 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:authorization/v20220601:PolicyAssignment")]
    public partial class PolicyAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This message will be part of response in case of policy violation.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the policy assignment.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
        /// </summary>
        [Output("enforcementMode")]
        public Output<string?> EnforcementMode { get; private set; } = null!;

        /// <summary>
        /// The managed identity associated with the policy assignment.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The location of the policy assignment. Only required when utilizing managed identity.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Output("metadata")]
        public Output<object?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the policy assignment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The messages that describe why a resource is non-compliant with the policy.
        /// </summary>
        [Output("nonComplianceMessages")]
        public Output<ImmutableArray<Outputs.NonComplianceMessageResponse>> NonComplianceMessages { get; private set; } = null!;

        /// <summary>
        /// The policy's excluded scopes.
        /// </summary>
        [Output("notScopes")]
        public Output<ImmutableArray<string>> NotScopes { get; private set; } = null!;

        /// <summary>
        /// The policy property value override.
        /// </summary>
        [Output("overrides")]
        public Output<ImmutableArray<Outputs.OverrideResponse>> Overrides { get; private set; } = null!;

        /// <summary>
        /// The parameter values for the assigned policy rule. The keys are the parameter names.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, Outputs.ParameterValuesValueResponse>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The ID of the policy definition or policy set definition being assigned.
        /// </summary>
        [Output("policyDefinitionId")]
        public Output<string?> PolicyDefinitionId { get; private set; } = null!;

        /// <summary>
        /// The resource selector list to filter policies by resource properties.
        /// </summary>
        [Output("resourceSelectors")]
        public Output<ImmutableArray<Outputs.ResourceSelectorResponse>> ResourceSelectors { get; private set; } = null!;

        /// <summary>
        /// The scope for the policy assignment.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the policy assignment.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyAssignment(string name, PolicyAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20220601:PolicyAssignment", name, args ?? new PolicyAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyAssignment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20220601:PolicyAssignment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:authorization:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20151001preview:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20160401:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20161201:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20170601preview:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20180301:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20180501:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20190101:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20190601:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20190901:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200301:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200901:PolicyAssignment"},
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20210601:PolicyAssignment"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyAssignment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PolicyAssignment(name, id, options);
        }
    }

    public sealed class PolicyAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This message will be part of response in case of policy violation.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the policy assignment.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
        /// </summary>
        [Input("enforcementMode")]
        public InputUnion<string, Pulumi.AzureNative.Authorization.V20220601.EnforcementMode>? EnforcementMode { get; set; }

        /// <summary>
        /// The managed identity associated with the policy assignment.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The location of the policy assignment. Only required when utilizing managed identity.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        [Input("nonComplianceMessages")]
        private InputList<Inputs.NonComplianceMessageArgs>? _nonComplianceMessages;

        /// <summary>
        /// The messages that describe why a resource is non-compliant with the policy.
        /// </summary>
        public InputList<Inputs.NonComplianceMessageArgs> NonComplianceMessages
        {
            get => _nonComplianceMessages ?? (_nonComplianceMessages = new InputList<Inputs.NonComplianceMessageArgs>());
            set => _nonComplianceMessages = value;
        }

        [Input("notScopes")]
        private InputList<string>? _notScopes;

        /// <summary>
        /// The policy's excluded scopes.
        /// </summary>
        public InputList<string> NotScopes
        {
            get => _notScopes ?? (_notScopes = new InputList<string>());
            set => _notScopes = value;
        }

        [Input("overrides")]
        private InputList<Inputs.OverrideArgs>? _overrides;

        /// <summary>
        /// The policy property value override.
        /// </summary>
        public InputList<Inputs.OverrideArgs> Overrides
        {
            get => _overrides ?? (_overrides = new InputList<Inputs.OverrideArgs>());
            set => _overrides = value;
        }

        [Input("parameters")]
        private InputMap<Inputs.ParameterValuesValueArgs>? _parameters;

        /// <summary>
        /// The parameter values for the assigned policy rule. The keys are the parameter names.
        /// </summary>
        public InputMap<Inputs.ParameterValuesValueArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.ParameterValuesValueArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The name of the policy assignment.
        /// </summary>
        [Input("policyAssignmentName")]
        public Input<string>? PolicyAssignmentName { get; set; }

        /// <summary>
        /// The ID of the policy definition or policy set definition being assigned.
        /// </summary>
        [Input("policyDefinitionId")]
        public Input<string>? PolicyDefinitionId { get; set; }

        [Input("resourceSelectors")]
        private InputList<Inputs.ResourceSelectorArgs>? _resourceSelectors;

        /// <summary>
        /// The resource selector list to filter policies by resource properties.
        /// </summary>
        public InputList<Inputs.ResourceSelectorArgs> ResourceSelectors
        {
            get => _resourceSelectors ?? (_resourceSelectors = new InputList<Inputs.ResourceSelectorArgs>());
            set => _resourceSelectors = value;
        }

        /// <summary>
        /// The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public PolicyAssignmentArgs()
        {
            EnforcementMode = "Default";
        }
        public static new PolicyAssignmentArgs Empty => new PolicyAssignmentArgs();
    }
}
