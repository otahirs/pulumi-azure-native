// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20220901Preview
{
    /// <summary>
    /// Represents a catalog.
    /// 
    /// ## Example Usage
    /// ### Catalogs_CreateOrUpdateAdo
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var catalog = new AzureNative.DevCenter.V20220901Preview.Catalog("catalog", new()
    ///     {
    ///         AdoGit = new AzureNative.DevCenter.V20220901Preview.Inputs.GitCatalogArgs
    ///         {
    ///             Branch = "main",
    ///             Path = "/templates",
    ///             SecretIdentifier = "https://contosokv.vault.azure.net/secrets/CentralRepoPat",
    ///             Uri = "https://contoso@dev.azure.com/contoso/contosoOrg/_git/centralrepo-fakecontoso",
    ///         },
    ///         CatalogName = "{catalogName}",
    ///         DevCenterName = "Contoso",
    ///         ResourceGroupName = "rg1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Catalogs_CreateOrUpdateGitHub
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var catalog = new AzureNative.DevCenter.V20220901Preview.Catalog("catalog", new()
    ///     {
    ///         CatalogName = "{catalogName}",
    ///         DevCenterName = "Contoso",
    ///         GitHub = new AzureNative.DevCenter.V20220901Preview.Inputs.GitCatalogArgs
    ///         {
    ///             Branch = "main",
    ///             Path = "/templates",
    ///             SecretIdentifier = "https://contosokv.vault.azure.net/secrets/CentralRepoPat",
    ///             Uri = "https://github.com/Contoso/centralrepo-fake.git",
    ///         },
    ///         ResourceGroupName = "rg1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:devcenter/v20220901preview:Catalog {catalogName} /subscriptions/{subscriptionId}/resourceGroups/rg1/providers/Microsoft.DevCenter/devcenters/Contoso/catalogs/{catalogName} 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:devcenter/v20220901preview:Catalog")]
    public partial class Catalog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Properties for an Azure DevOps catalog type.
        /// </summary>
        [Output("adoGit")]
        public Output<Outputs.GitCatalogResponse?> AdoGit { get; private set; } = null!;

        /// <summary>
        /// Properties for a GitHub catalog type.
        /// </summary>
        [Output("gitHub")]
        public Output<Outputs.GitCatalogResponse?> GitHub { get; private set; } = null!;

        /// <summary>
        /// When the catalog was last synced.
        /// </summary>
        [Output("lastSyncTime")]
        public Output<string> LastSyncTime { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Catalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Catalog(string name, CatalogArgs args, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20220901preview:Catalog", name, args ?? new CatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Catalog(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20220901preview:Catalog", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:devcenter:Catalog"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220801preview:Catalog"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221012preview:Catalog"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221111preview:Catalog"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230101preview:Catalog"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Catalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Catalog Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Catalog(name, id, options);
        }
    }

    public sealed class CatalogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties for an Azure DevOps catalog type.
        /// </summary>
        [Input("adoGit")]
        public Input<Inputs.GitCatalogArgs>? AdoGit { get; set; }

        /// <summary>
        /// The name of the Catalog.
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        /// <summary>
        /// The name of the devcenter.
        /// </summary>
        [Input("devCenterName", required: true)]
        public Input<string> DevCenterName { get; set; } = null!;

        /// <summary>
        /// Properties for a GitHub catalog type.
        /// </summary>
        [Input("gitHub")]
        public Input<Inputs.GitCatalogArgs>? GitHub { get; set; }

        /// <summary>
        /// Name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public CatalogArgs()
        {
        }
        public static new CatalogArgs Empty => new CatalogArgs();
    }
}
