// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Logic.V20160601
{
    /// <summary>
    /// The integration account map.
    /// 
    /// ## Example Usage
    /// ### Create or update a map
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var map = new AzureNative.Logic.V20160601.Map("map", new()
    ///     {
    ///         Content = @"&lt;?xml version=""1.0"" encoding=""UTF-16""?&gt;
    /// &lt;xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:msxsl=""urn:schemas-microsoft-com:xslt"" xmlns:var=""http://schemas.microsoft.com/BizTalk/2003/var"" exclude-result-prefixes=""msxsl var s0 userCSharp"" version=""1.0"" xmlns:ns0=""http://BizTalk_Server_Project4.StringFunctoidsDestinationSchema"" xmlns:s0=""http://BizTalk_Server_Project4.StringFunctoidsSourceSchema"" xmlns:userCSharp=""http://schemas.microsoft.com/BizTalk/2003/userCSharp""&gt;
    ///   &lt;xsl:import href=""http://btsfunctoids.blob.core.windows.net/functoids/functoids.xslt"" /&gt;
    ///   &lt;xsl:output omit-xml-declaration=""yes"" method=""xml"" version=""1.0"" /&gt;
    ///   &lt;xsl:template match=""/""&gt;
    ///     &lt;xsl:apply-templates select=""/s0:Root"" /&gt;
    ///   &lt;/xsl:template&gt;
    ///   &lt;xsl:template match=""/s0:Root""&gt;
    ///     &lt;xsl:variable name=""var:v1"" select=""userCSharp:StringFind(string(StringFindSource/text()) , &amp;quot;SearchString&amp;quot;)"" /&gt;
    ///     &lt;xsl:variable name=""var:v2"" select=""userCSharp:StringLeft(string(StringLeftSource/text()) , &amp;quot;2&amp;quot;)"" /&gt;
    ///     &lt;xsl:variable name=""var:v3"" select=""userCSharp:StringRight(string(StringRightSource/text()) , &amp;quot;2&amp;quot;)"" /&gt;
    ///     &lt;xsl:variable name=""var:v4"" select=""userCSharp:StringUpperCase(string(UppercaseSource/text()))"" /&gt;
    ///     &lt;xsl:variable name=""var:v5"" select=""userCSharp:StringLowerCase(string(LowercaseSource/text()))"" /&gt;
    ///     &lt;xsl:variable name=""var:v6"" select=""userCSharp:StringSize(string(SizeSource/text()))"" /&gt;
    ///     &lt;xsl:variable name=""var:v7"" select=""userCSharp:StringSubstring(string(StringExtractSource/text()) , &amp;quot;0&amp;quot; , &amp;quot;2&amp;quot;)"" /&gt;
    ///     &lt;xsl:variable name=""var:v8"" select=""userCSharp:StringConcat(string(StringConcatSource/text()))"" /&gt;
    ///     &lt;xsl:variable name=""var:v9"" select=""userCSharp:StringTrimLeft(string(StringLeftTrimSource/text()))"" /&gt;
    ///     &lt;xsl:variable name=""var:v10"" select=""userCSharp:StringTrimRight(string(StringRightTrimSource/text()))"" /&gt;
    ///     &lt;ns0:Root&gt;
    ///       &lt;StringFindDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v1"" /&gt;
    ///       &lt;/StringFindDestination&gt;
    ///       &lt;StringLeftDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v2"" /&gt;
    ///       &lt;/StringLeftDestination&gt;
    ///       &lt;StringRightDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v3"" /&gt;
    ///       &lt;/StringRightDestination&gt;
    ///       &lt;UppercaseDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v4"" /&gt;
    ///       &lt;/UppercaseDestination&gt;
    ///       &lt;LowercaseDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v5"" /&gt;
    ///       &lt;/LowercaseDestination&gt;
    ///       &lt;SizeDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v6"" /&gt;
    ///       &lt;/SizeDestination&gt;
    ///       &lt;StringExtractDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v7"" /&gt;
    ///       &lt;/StringExtractDestination&gt;
    ///       &lt;StringConcatDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v8"" /&gt;
    ///       &lt;/StringConcatDestination&gt;
    ///       &lt;StringLeftTrimDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v9"" /&gt;
    ///       &lt;/StringLeftTrimDestination&gt;
    ///       &lt;StringRightTrimDestination&gt;
    ///         &lt;xsl:value-of select=""$var:v10"" /&gt;
    ///       &lt;/StringRightTrimDestination&gt;
    ///     &lt;/ns0:Root&gt;
    ///   &lt;/xsl:template&gt;
    /// &lt;/xsl:stylesheet&gt;",
    ///         ContentType = "application/xml",
    ///         IntegrationAccountName = "testIntegrationAccount",
    ///         Location = "westus",
    ///         MapName = "testMap",
    ///         MapType = AzureNative.Logic.V20160601.MapType.Xslt,
    ///         Metadata = null,
    ///         ResourceGroupName = "testResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:logic/v20160601:Map IntegrationAccountMap291 /subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/&lt;resourceGroup&gt;/providers/Microsoft.Logic/integrationAccounts/&lt;IntegrationAccount&gt;/maps/testMap 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:logic/v20160601:Map")]
    public partial class Map : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The changed time.
        /// </summary>
        [Output("changedTime")]
        public Output<string> ChangedTime { get; private set; } = null!;

        /// <summary>
        /// The content.
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// The content link.
        /// </summary>
        [Output("contentLink")]
        public Output<Outputs.ContentLinkResponse> ContentLink { get; private set; } = null!;

        /// <summary>
        /// The content type.
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        /// <summary>
        /// The created time.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The map type.
        /// </summary>
        [Output("mapType")]
        public Output<string> MapType { get; private set; } = null!;

        /// <summary>
        /// The metadata.
        /// </summary>
        [Output("metadata")]
        public Output<object?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Gets the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parameters schema of integration account map.
        /// </summary>
        [Output("parametersSchema")]
        public Output<Outputs.IntegrationAccountMapPropertiesResponseParametersSchema?> ParametersSchema { get; private set; } = null!;

        /// <summary>
        /// The resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Map resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Map(string name, MapArgs args, CustomResourceOptions? options = null)
            : base("azure-native:logic/v20160601:Map", name, args ?? new MapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Map(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:logic/v20160601:Map", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:logic:Map"},
                    new global::Pulumi.Alias { Type = "azure-native:logic/v20150801preview:Map"},
                    new global::Pulumi.Alias { Type = "azure-native:logic/v20180701preview:Map"},
                    new global::Pulumi.Alias { Type = "azure-native:logic/v20190501:Map"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Map resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Map Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Map(name, id, options);
        }
    }

    public sealed class MapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The content type.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// The integration account name.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public Input<string> IntegrationAccountName { get; set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The integration account map name.
        /// </summary>
        [Input("mapName")]
        public Input<string>? MapName { get; set; }

        /// <summary>
        /// The map type.
        /// </summary>
        [Input("mapType", required: true)]
        public Input<Pulumi.AzureNative.Logic.V20160601.MapType> MapType { get; set; } = null!;

        /// <summary>
        /// The metadata.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        /// <summary>
        /// The parameters schema of integration account map.
        /// </summary>
        [Input("parametersSchema")]
        public Input<Inputs.IntegrationAccountMapPropertiesParametersSchemaArgs>? ParametersSchema { get; set; }

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public MapArgs()
        {
        }
        public static new MapArgs Empty => new MapArgs();
    }
}
