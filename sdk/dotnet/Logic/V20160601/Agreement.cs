// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Logic.V20160601
{
    /// <summary>
    /// The integration account agreement.
    /// 
    /// ## Example Usage
    /// ### Create or update an agreement
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var agreement = new AzureNative.Logic.V20160601.Agreement("agreement", new()
    ///     {
    ///         AgreementName = "testAgreement",
    ///         AgreementType = AzureNative.Logic.V20160601.AgreementType.AS2,
    ///         Content = new AzureNative.Logic.V20160601.Inputs.AgreementContentArgs
    ///         {
    ///             AS2 = new AzureNative.Logic.V20160601.Inputs.AS2AgreementContentArgs
    ///             {
    ///                 ReceiveAgreement = new AzureNative.Logic.V20160601.Inputs.AS2OneWayAgreementArgs
    ///                 {
    ///                     ProtocolSettings = new AzureNative.Logic.V20160601.Inputs.AS2ProtocolSettingsArgs
    ///                     {
    ///                         AcknowledgementConnectionSettings = new AzureNative.Logic.V20160601.Inputs.AS2AcknowledgementConnectionSettingsArgs
    ///                         {
    ///                             IgnoreCertificateNameMismatch = true,
    ///                             KeepHttpConnectionAlive = true,
    ///                             SupportHttpStatusCodeContinue = true,
    ///                             UnfoldHttpHeaders = true,
    ///                         },
    ///                         EnvelopeSettings = new AzureNative.Logic.V20160601.Inputs.AS2EnvelopeSettingsArgs
    ///                         {
    ///                             AutogenerateFileName = true,
    ///                             FileNameTemplate = "Test",
    ///                             MessageContentType = "text/plain",
    ///                             SuspendMessageOnFileNameGenerationError = true,
    ///                             TransmitFileNameInMimeHeader = true,
    ///                         },
    ///                         ErrorSettings = new AzureNative.Logic.V20160601.Inputs.AS2ErrorSettingsArgs
    ///                         {
    ///                             ResendIfMdnNotReceived = true,
    ///                             SuspendDuplicateMessage = true,
    ///                         },
    ///                         MdnSettings = new AzureNative.Logic.V20160601.Inputs.AS2MdnSettingsArgs
    ///                         {
    ///                             DispositionNotificationTo = "http://tempuri.org",
    ///                             MdnText = "Sample",
    ///                             MicHashingAlgorithm = AzureNative.Logic.V20160601.HashingAlgorithm.SHA1,
    ///                             NeedMdn = true,
    ///                             ReceiptDeliveryUrl = "http://tempuri.org",
    ///                             SendInboundMdnToMessageBox = true,
    ///                             SendMdnAsynchronously = true,
    ///                             SignMdn = true,
    ///                             SignOutboundMdnIfOptional = true,
    ///                         },
    ///                         MessageConnectionSettings = new AzureNative.Logic.V20160601.Inputs.AS2MessageConnectionSettingsArgs
    ///                         {
    ///                             IgnoreCertificateNameMismatch = true,
    ///                             KeepHttpConnectionAlive = true,
    ///                             SupportHttpStatusCodeContinue = true,
    ///                             UnfoldHttpHeaders = true,
    ///                         },
    ///                         SecuritySettings = new AzureNative.Logic.V20160601.Inputs.AS2SecuritySettingsArgs
    ///                         {
    ///                             EnableNrrForInboundDecodedMessages = true,
    ///                             EnableNrrForInboundEncodedMessages = true,
    ///                             EnableNrrForInboundMdn = true,
    ///                             EnableNrrForOutboundDecodedMessages = true,
    ///                             EnableNrrForOutboundEncodedMessages = true,
    ///                             EnableNrrForOutboundMdn = true,
    ///                             OverrideGroupSigningCertificate = false,
    ///                         },
    ///                         ValidationSettings = new AzureNative.Logic.V20160601.Inputs.AS2ValidationSettingsArgs
    ///                         {
    ///                             CheckCertificateRevocationListOnReceive = true,
    ///                             CheckCertificateRevocationListOnSend = true,
    ///                             CheckDuplicateMessage = true,
    ///                             CompressMessage = true,
    ///                             EncryptMessage = false,
    ///                             EncryptionAlgorithm = AzureNative.Logic.V20160601.EncryptionAlgorithm.AES128,
    ///                             InterchangeDuplicatesValidityDays = 100,
    ///                             OverrideMessageProperties = true,
    ///                             SignMessage = false,
    ///                         },
    ///                     },
    ///                     ReceiverBusinessIdentity = new AzureNative.Logic.V20160601.Inputs.BusinessIdentityArgs
    ///                     {
    ///                         Qualifier = "ZZ",
    ///                         Value = "ZZ",
    ///                     },
    ///                     SenderBusinessIdentity = new AzureNative.Logic.V20160601.Inputs.BusinessIdentityArgs
    ///                     {
    ///                         Qualifier = "AA",
    ///                         Value = "AA",
    ///                     },
    ///                 },
    ///                 SendAgreement = new AzureNative.Logic.V20160601.Inputs.AS2OneWayAgreementArgs
    ///                 {
    ///                     ProtocolSettings = new AzureNative.Logic.V20160601.Inputs.AS2ProtocolSettingsArgs
    ///                     {
    ///                         AcknowledgementConnectionSettings = new AzureNative.Logic.V20160601.Inputs.AS2AcknowledgementConnectionSettingsArgs
    ///                         {
    ///                             IgnoreCertificateNameMismatch = true,
    ///                             KeepHttpConnectionAlive = true,
    ///                             SupportHttpStatusCodeContinue = true,
    ///                             UnfoldHttpHeaders = true,
    ///                         },
    ///                         EnvelopeSettings = new AzureNative.Logic.V20160601.Inputs.AS2EnvelopeSettingsArgs
    ///                         {
    ///                             AutogenerateFileName = true,
    ///                             FileNameTemplate = "Test",
    ///                             MessageContentType = "text/plain",
    ///                             SuspendMessageOnFileNameGenerationError = true,
    ///                             TransmitFileNameInMimeHeader = true,
    ///                         },
    ///                         ErrorSettings = new AzureNative.Logic.V20160601.Inputs.AS2ErrorSettingsArgs
    ///                         {
    ///                             ResendIfMdnNotReceived = true,
    ///                             SuspendDuplicateMessage = true,
    ///                         },
    ///                         MdnSettings = new AzureNative.Logic.V20160601.Inputs.AS2MdnSettingsArgs
    ///                         {
    ///                             DispositionNotificationTo = "http://tempuri.org",
    ///                             MdnText = "Sample",
    ///                             MicHashingAlgorithm = AzureNative.Logic.V20160601.HashingAlgorithm.SHA1,
    ///                             NeedMdn = true,
    ///                             ReceiptDeliveryUrl = "http://tempuri.org",
    ///                             SendInboundMdnToMessageBox = true,
    ///                             SendMdnAsynchronously = true,
    ///                             SignMdn = true,
    ///                             SignOutboundMdnIfOptional = true,
    ///                         },
    ///                         MessageConnectionSettings = new AzureNative.Logic.V20160601.Inputs.AS2MessageConnectionSettingsArgs
    ///                         {
    ///                             IgnoreCertificateNameMismatch = true,
    ///                             KeepHttpConnectionAlive = true,
    ///                             SupportHttpStatusCodeContinue = true,
    ///                             UnfoldHttpHeaders = true,
    ///                         },
    ///                         SecuritySettings = new AzureNative.Logic.V20160601.Inputs.AS2SecuritySettingsArgs
    ///                         {
    ///                             EnableNrrForInboundDecodedMessages = true,
    ///                             EnableNrrForInboundEncodedMessages = true,
    ///                             EnableNrrForInboundMdn = true,
    ///                             EnableNrrForOutboundDecodedMessages = true,
    ///                             EnableNrrForOutboundEncodedMessages = true,
    ///                             EnableNrrForOutboundMdn = true,
    ///                             OverrideGroupSigningCertificate = false,
    ///                         },
    ///                         ValidationSettings = new AzureNative.Logic.V20160601.Inputs.AS2ValidationSettingsArgs
    ///                         {
    ///                             CheckCertificateRevocationListOnReceive = true,
    ///                             CheckCertificateRevocationListOnSend = true,
    ///                             CheckDuplicateMessage = true,
    ///                             CompressMessage = true,
    ///                             EncryptMessage = false,
    ///                             EncryptionAlgorithm = AzureNative.Logic.V20160601.EncryptionAlgorithm.AES128,
    ///                             InterchangeDuplicatesValidityDays = 100,
    ///                             OverrideMessageProperties = true,
    ///                             SignMessage = false,
    ///                         },
    ///                     },
    ///                     ReceiverBusinessIdentity = new AzureNative.Logic.V20160601.Inputs.BusinessIdentityArgs
    ///                     {
    ///                         Qualifier = "AA",
    ///                         Value = "AA",
    ///                     },
    ///                     SenderBusinessIdentity = new AzureNative.Logic.V20160601.Inputs.BusinessIdentityArgs
    ///                     {
    ///                         Qualifier = "ZZ",
    ///                         Value = "ZZ",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         GuestIdentity = new AzureNative.Logic.V20160601.Inputs.BusinessIdentityArgs
    ///         {
    ///             Qualifier = "AA",
    ///             Value = "AA",
    ///         },
    ///         GuestPartner = "GuestPartner",
    ///         HostIdentity = new AzureNative.Logic.V20160601.Inputs.BusinessIdentityArgs
    ///         {
    ///             Qualifier = "ZZ",
    ///             Value = "ZZ",
    ///         },
    ///         HostPartner = "HostPartner",
    ///         IntegrationAccountName = "testIntegrationAccount",
    ///         Location = "westus",
    ///         Metadata = null,
    ///         ResourceGroupName = "testResourceGroup",
    ///         Tags = 
    ///         {
    ///             { "IntegrationAccountAgreement", "&lt;IntegrationAccountAgreementName&gt;" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:logic/v20160601:Agreement &lt;IntegrationAccountAgreementName&gt; /subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/providers/Microsoft.Logic/integrationAccounts/IntegrationAccount4533/agreements/&lt;IntegrationAccountAgreementName&gt; 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:logic/v20160601:Agreement")]
    public partial class Agreement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The agreement type.
        /// </summary>
        [Output("agreementType")]
        public Output<string> AgreementType { get; private set; } = null!;

        /// <summary>
        /// The changed time.
        /// </summary>
        [Output("changedTime")]
        public Output<string> ChangedTime { get; private set; } = null!;

        /// <summary>
        /// The agreement content.
        /// </summary>
        [Output("content")]
        public Output<Outputs.AgreementContentResponse> Content { get; private set; } = null!;

        /// <summary>
        /// The created time.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// The business identity of the guest partner.
        /// </summary>
        [Output("guestIdentity")]
        public Output<Outputs.BusinessIdentityResponse> GuestIdentity { get; private set; } = null!;

        /// <summary>
        /// The integration account partner that is set as guest partner for this agreement.
        /// </summary>
        [Output("guestPartner")]
        public Output<string> GuestPartner { get; private set; } = null!;

        /// <summary>
        /// The business identity of the host partner.
        /// </summary>
        [Output("hostIdentity")]
        public Output<Outputs.BusinessIdentityResponse> HostIdentity { get; private set; } = null!;

        /// <summary>
        /// The integration account partner that is set as host partner for this agreement.
        /// </summary>
        [Output("hostPartner")]
        public Output<string> HostPartner { get; private set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The metadata.
        /// </summary>
        [Output("metadata")]
        public Output<object?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Gets the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Agreement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Agreement(string name, AgreementArgs args, CustomResourceOptions? options = null)
            : base("azure-native:logic/v20160601:Agreement", name, args ?? new AgreementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Agreement(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:logic/v20160601:Agreement", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:logic:Agreement"},
                    new global::Pulumi.Alias { Type = "azure-native:logic/v20150801preview:Agreement"},
                    new global::Pulumi.Alias { Type = "azure-native:logic/v20180701preview:Agreement"},
                    new global::Pulumi.Alias { Type = "azure-native:logic/v20190501:Agreement"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Agreement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Agreement Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Agreement(name, id, options);
        }
    }

    public sealed class AgreementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The integration account agreement name.
        /// </summary>
        [Input("agreementName")]
        public Input<string>? AgreementName { get; set; }

        /// <summary>
        /// The agreement type.
        /// </summary>
        [Input("agreementType", required: true)]
        public Input<Pulumi.AzureNative.Logic.V20160601.AgreementType> AgreementType { get; set; } = null!;

        /// <summary>
        /// The agreement content.
        /// </summary>
        [Input("content", required: true)]
        public Input<Inputs.AgreementContentArgs> Content { get; set; } = null!;

        /// <summary>
        /// The business identity of the guest partner.
        /// </summary>
        [Input("guestIdentity", required: true)]
        public Input<Inputs.BusinessIdentityArgs> GuestIdentity { get; set; } = null!;

        /// <summary>
        /// The integration account partner that is set as guest partner for this agreement.
        /// </summary>
        [Input("guestPartner", required: true)]
        public Input<string> GuestPartner { get; set; } = null!;

        /// <summary>
        /// The business identity of the host partner.
        /// </summary>
        [Input("hostIdentity", required: true)]
        public Input<Inputs.BusinessIdentityArgs> HostIdentity { get; set; } = null!;

        /// <summary>
        /// The integration account partner that is set as host partner for this agreement.
        /// </summary>
        [Input("hostPartner", required: true)]
        public Input<string> HostPartner { get; set; } = null!;

        /// <summary>
        /// The integration account name.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public Input<string> IntegrationAccountName { get; set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The metadata.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AgreementArgs()
        {
        }
        public static new AgreementArgs Empty => new AgreementArgs();
    }
}
