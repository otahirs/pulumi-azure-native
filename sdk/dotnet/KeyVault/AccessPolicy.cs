// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KeyVault
{
    /// <summary>
    /// Key Vault Access Policy for managing policies on existing vaults.
    /// </summary>
    [AzureNativeResourceType("azure-native:keyvault:AccessPolicy")]
    public partial class AccessPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        /// </summary>
        [Output("applicationId")]
        public Output<string?> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Permissions the identity has for certificates.
        /// </summary>
        [Output("certificatePermissions")]
        public Output<ImmutableArray<string>> CertificatePermissions { get; private set; } = null!;

        /// <summary>
        /// Permissions the identity has for keys.
        /// </summary>
        [Output("keyPermissions")]
        public Output<ImmutableArray<string>> KeyPermissions { get; private set; } = null!;

        /// <summary>
        /// Name of the Key Vault.
        /// </summary>
        [Output("keyVaultName")]
        public Output<string?> KeyVaultName { get; private set; } = null!;

        /// <summary>
        /// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        /// </summary>
        [Output("objectId")]
        public Output<string?> ObjectId { get; private set; } = null!;

        /// <summary>
        /// Name of the resource group that contains the vault.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string?> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Permissions the identity has for secrets.
        /// </summary>
        [Output("secretPermissions")]
        public Output<ImmutableArray<string>> SecretPermissions { get; private set; } = null!;

        /// <summary>
        /// Permissions the identity has for storage accounts.
        /// </summary>
        [Output("storagePermissions")]
        public Output<ImmutableArray<string>> StoragePermissions { get; private set; } = null!;

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessPolicy(string name, AccessPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("azure-native:keyvault:AccessPolicy", name, args ?? new AccessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessPolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:keyvault:AccessPolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessPolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AccessPolicy(name, id, options);
        }
    }

    public sealed class AccessPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("certificatePermissions")]
        private InputList<string>? _certificatePermissions;

        /// <summary>
        /// Permissions the identity has for certificates.
        /// </summary>
        public InputList<string> CertificatePermissions
        {
            get => _certificatePermissions ?? (_certificatePermissions = new InputList<string>());
            set => _certificatePermissions = value;
        }

        [Input("keyPermissions")]
        private InputList<string>? _keyPermissions;

        /// <summary>
        /// Permissions the identity has for keys.
        /// </summary>
        public InputList<string> KeyPermissions
        {
            get => _keyPermissions ?? (_keyPermissions = new InputList<string>());
            set => _keyPermissions = value;
        }

        /// <summary>
        /// Name of the Key Vault.
        /// </summary>
        [Input("keyVaultName")]
        public Input<string>? KeyVaultName { get; set; }

        /// <summary>
        /// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// Name of the resource group that contains the vault.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secretPermissions")]
        private InputList<string>? _secretPermissions;

        /// <summary>
        /// Permissions the identity has for secrets.
        /// </summary>
        public InputList<string> SecretPermissions
        {
            get => _secretPermissions ?? (_secretPermissions = new InputList<string>());
            set => _secretPermissions = value;
        }

        [Input("storagePermissions")]
        private InputList<string>? _storagePermissions;

        /// <summary>
        /// Permissions the identity has for storage accounts.
        /// </summary>
        public InputList<string> StoragePermissions
        {
            get => _storagePermissions ?? (_storagePermissions = new InputList<string>());
            set => _storagePermissions = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public AccessPolicyArgs()
        {
        }
        public static new AccessPolicyArgs Empty => new AccessPolicyArgs();
    }
}
