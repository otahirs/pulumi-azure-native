// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.WebPubSub.V20210401Preview
{
    /// <summary>
    /// A class represent a resource.
    /// 
    /// ## Example Usage
    /// ### WebPubSub_CreateOrUpdate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var webPubSub = new AzureNative.WebPubSub.V20210401Preview.WebPubSub("webPubSub", new()
    ///     {
    ///         EventHandler = new AzureNative.WebPubSub.V20210401Preview.Inputs.EventHandlerSettingsArgs
    ///         {
    ///             Items = 
    ///             {
    ///                 { "hub1", new[]
    ///                 {
    ///                     new AzureNative.WebPubSub.V20210401Preview.Inputs.EventHandlerTemplateArgs
    ///                     {
    ///                         UrlTemplate = "https://example.com/chat/api/hub1",
    ///                         UserEventPattern = "*",
    ///                     },
    ///                 } },
    ///                 { "hub2", new[]
    ///                 {
    ///                     new AzureNative.WebPubSub.V20210401Preview.Inputs.EventHandlerTemplateArgs
    ///                     {
    ///                         UrlTemplate = "https://example.com/chat/api/hub2/example1",
    ///                         UserEventPattern = "example1",
    ///                     },
    ///                     new AzureNative.WebPubSub.V20210401Preview.Inputs.EventHandlerTemplateArgs
    ///                     {
    ///                         UrlTemplate = "https://example.com/chat/api/hub2/example2",
    ///                         UserEventPattern = "example2",
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///         Features = new[]
    ///         {
    ///             new AzureNative.WebPubSub.V20210401Preview.Inputs.WebPubSubFeatureArgs
    ///             {
    ///                 Flag = "ServiceMode",
    ///                 Properties = null,
    ///                 Value = "Serverless",
    ///             },
    ///             new AzureNative.WebPubSub.V20210401Preview.Inputs.WebPubSubFeatureArgs
    ///             {
    ///                 Flag = "EnableConnectivityLogs",
    ///                 Properties = null,
    ///                 Value = "True",
    ///             },
    ///             new AzureNative.WebPubSub.V20210401Preview.Inputs.WebPubSubFeatureArgs
    ///             {
    ///                 Flag = "EnableMessagingLogs",
    ///                 Properties = null,
    ///                 Value = "False",
    ///             },
    ///             new AzureNative.WebPubSub.V20210401Preview.Inputs.WebPubSubFeatureArgs
    ///             {
    ///                 Flag = "EnableLiveTrace",
    ///                 Properties = null,
    ///                 Value = "False",
    ///             },
    ///         },
    ///         Identity = new AzureNative.WebPubSub.V20210401Preview.Inputs.ManagedIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Location = "eastus",
    ///         NetworkACLs = new AzureNative.WebPubSub.V20210401Preview.Inputs.WebPubSubNetworkACLsArgs
    ///         {
    ///             DefaultAction = "Deny",
    ///             PrivateEndpoints = new[]
    ///             {
    ///                 new AzureNative.WebPubSub.V20210401Preview.Inputs.PrivateEndpointACLArgs
    ///                 {
    ///                     Allow = new[]
    ///                     {
    ///                         "ServerConnection",
    ///                     },
    ///                     Name = "mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
    ///                 },
    ///             },
    ///             PublicNetwork = new AzureNative.WebPubSub.V20210401Preview.Inputs.NetworkACLArgs
    ///             {
    ///                 Allow = new[]
    ///                 {
    ///                     "ClientConnection",
    ///                 },
    ///             },
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///         ResourceName = "myWebPubSubService",
    ///         Sku = new AzureNative.WebPubSub.V20210401Preview.Inputs.ResourceSkuArgs
    ///         {
    ///             Capacity = 1,
    ///             Name = "Standard_S1",
    ///             Tier = "Standard",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key1", "value1" },
    ///         },
    ///         Tls = new AzureNative.WebPubSub.V20210401Preview.Inputs.WebPubSubTlsSettingsArgs
    ///         {
    ///             ClientCertEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:webpubsub/v20210401preview:WebPubSub myWebPubSubService /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/WebPubSub/myWebPubSubService 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:webpubsub/v20210401preview:WebPubSub")]
    public partial class WebPubSub : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The settings for event handler in webpubsub service.
        /// </summary>
        [Output("eventHandler")]
        public Output<Outputs.EventHandlerSettingsResponse?> EventHandler { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible IP of the resource.
        /// </summary>
        [Output("externalIP")]
        public Output<string> ExternalIP { get; private set; } = null!;

        /// <summary>
        /// List of the featureFlags.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<Outputs.WebPubSubFeatureResponse>> Features { get; private set; } = null!;

        /// <summary>
        /// FQDN of the service instance.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// The managed identity response
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network ACLs
        /// </summary>
        [Output("networkACLs")]
        public Output<Outputs.WebPubSubNetworkACLsResponse?> NetworkACLs { get; private set; } = null!;

        /// <summary>
        /// Private endpoint connections to the resource.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Output("publicPort")]
        public Output<int> PublicPort { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Output("serverPort")]
        public Output<int> ServerPort { get; private set; } = null!;

        /// <summary>
        /// The list of shared private link resources.
        /// </summary>
        [Output("sharedPrivateLinkResources")]
        public Output<ImmutableArray<Outputs.SharedPrivateLinkResourceResponse>> SharedPrivateLinkResources { get; private set; } = null!;

        /// <summary>
        /// The billing information of the resource.(e.g. Free, Standard)
        /// </summary>
        [Output("sku")]
        public Output<Outputs.ResourceSkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// TLS settings.
        /// </summary>
        [Output("tls")]
        public Output<Outputs.WebPubSubTlsSettingsResponse?> Tls { get; private set; } = null!;

        /// <summary>
        /// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a WebPubSub resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebPubSub(string name, WebPubSubArgs args, CustomResourceOptions? options = null)
            : base("azure-native:webpubsub/v20210401preview:WebPubSub", name, args ?? new WebPubSubArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebPubSub(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:webpubsub/v20210401preview:WebPubSub", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub:WebPubSub"},
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub/v20210601preview:WebPubSub"},
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub/v20210901preview:WebPubSub"},
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub/v20211001:WebPubSub"},
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub/v20220801preview:WebPubSub"},
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub/v20230201:WebPubSub"},
                    new global::Pulumi.Alias { Type = "azure-native:webpubsub/v20230301preview:WebPubSub"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebPubSub resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebPubSub Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WebPubSub(name, id, options);
        }
    }

    public sealed class WebPubSubArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The settings for event handler in webpubsub service.
        /// </summary>
        [Input("eventHandler")]
        public Input<Inputs.EventHandlerSettingsArgs>? EventHandler { get; set; }

        [Input("features")]
        private InputList<Inputs.WebPubSubFeatureArgs>? _features;

        /// <summary>
        /// List of the featureFlags.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        public InputList<Inputs.WebPubSubFeatureArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.WebPubSubFeatureArgs>());
            set => _features = value;
        }

        /// <summary>
        /// The managed identity response
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Network ACLs
        /// </summary>
        [Input("networkACLs")]
        public Input<Inputs.WebPubSubNetworkACLsArgs>? NetworkACLs { get; set; }

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// The billing information of the resource.(e.g. Free, Standard)
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ResourceSkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// TLS settings.
        /// </summary>
        [Input("tls")]
        public Input<Inputs.WebPubSubTlsSettingsArgs>? Tls { get; set; }

        public WebPubSubArgs()
        {
            PublicNetworkAccess = "Enabled";
        }
        public static new WebPubSubArgs Empty => new WebPubSubArgs();
    }
}
