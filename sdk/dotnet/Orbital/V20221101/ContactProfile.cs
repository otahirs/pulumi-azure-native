// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Orbital.V20221101
{
    /// <summary>
    /// Customer creates a Contact Profile Resource, which will contain all of the configurations required for scheduling a contact.
    /// 
    /// ## Example Usage
    /// ### Create a contact profile
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contactProfile = new AzureNative.Orbital.V20221101.ContactProfile("contactProfile", new()
    ///     {
    ///         AutoTrackingConfiguration = AzureNative.Orbital.V20221101.AutoTrackingConfiguration.Disabled,
    ///         ContactProfileName = "CONTOSO-CP",
    ///         EventHubUri = "/subscriptions/c1be1141-a7c9-4aac-9608-3c2e2f1152c3/resourceGroups/contoso-Rgp/providers/Microsoft.EventHub/namespaces/contosoHub/eventhubs/contosoHub",
    ///         Links = new[]
    ///         {
    ///             new AzureNative.Orbital.V20221101.Inputs.ContactProfileLinkArgs
    ///             {
    ///                 Channels = new[]
    ///                 {
    ///                     new AzureNative.Orbital.V20221101.Inputs.ContactProfileLinkChannelArgs
    ///                     {
    ///                         BandwidthMHz = 2,
    ///                         CenterFrequencyMHz = 2250,
    ///                         EndPoint = new AzureNative.Orbital.V20221101.Inputs.EndPointArgs
    ///                         {
    ///                             EndPointName = "ContosoTest_Uplink",
    ///                             IpAddress = "10.1.0.4",
    ///                             Port = "50000",
    ///                             Protocol = "TCP",
    ///                         },
    ///                         Name = "contoso-uplink-channel",
    ///                     },
    ///                 },
    ///                 Direction = "Uplink",
    ///                 EirpdBW = 45,
    ///                 GainOverTemperature = 0,
    ///                 Name = "contoso-uplink",
    ///                 Polarization = "LHCP",
    ///             },
    ///             new AzureNative.Orbital.V20221101.Inputs.ContactProfileLinkArgs
    ///             {
    ///                 Channels = new[]
    ///                 {
    ///                     new AzureNative.Orbital.V20221101.Inputs.ContactProfileLinkChannelArgs
    ///                     {
    ///                         BandwidthMHz = 15,
    ///                         CenterFrequencyMHz = 8160,
    ///                         EndPoint = new AzureNative.Orbital.V20221101.Inputs.EndPointArgs
    ///                         {
    ///                             EndPointName = "ContosoTest_Downlink",
    ///                             IpAddress = "10.1.0.5",
    ///                             Port = "50001",
    ///                             Protocol = "UDP",
    ///                         },
    ///                         Name = "contoso-downlink-channel",
    ///                     },
    ///                 },
    ///                 Direction = "Downlink",
    ///                 EirpdBW = 0,
    ///                 GainOverTemperature = 25,
    ///                 Name = "contoso-downlink",
    ///                 Polarization = "RHCP",
    ///             },
    ///         },
    ///         Location = "eastus2",
    ///         MinimumElevationDegrees = 5,
    ///         MinimumViableContactDuration = "PT1M",
    ///         NetworkConfiguration = new AzureNative.Orbital.V20221101.Inputs.ContactProfilesPropertiesNetworkConfigurationArgs
    ///         {
    ///             SubnetId = "/subscriptions/c1be1141-a7c9-4aac-9608-3c2e2f1152c3/resourceGroups/contoso-Rgp/providers/Microsoft.Network/virtualNetworks/contoso-vnet/subnets/orbital-delegated-subnet",
    ///         },
    ///         ResourceGroupName = "contoso-Rgp",
    ///         ThirdPartyConfigurations = new[]
    ///         {
    ///             new AzureNative.Orbital.V20221101.Inputs.ContactProfileThirdPartyConfigurationArgs
    ///             {
    ///                 MissionConfiguration = "Ksat_MissionConfiguration",
    ///                 ProviderName = "KSAT",
    ///             },
    ///             new AzureNative.Orbital.V20221101.Inputs.ContactProfileThirdPartyConfigurationArgs
    ///             {
    ///                 MissionConfiguration = "Viasat_Configuration",
    ///                 ProviderName = "VIASAT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:orbital/v20221101:ContactProfile CONTOSO-CP /subscriptions/c1be1141-a7c9-4aac-9608-3c2e2f1152c3/resourceGroups/contoso-Rgp/providers/Microsoft.Orbital/contactProfiles/CONTOSO-CP 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:orbital/v20221101:ContactProfile")]
    public partial class ContactProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Auto-tracking configuration.
        /// </summary>
        [Output("autoTrackingConfiguration")]
        public Output<string?> AutoTrackingConfiguration { get; private set; } = null!;

        /// <summary>
        /// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
        /// </summary>
        [Output("eventHubUri")]
        public Output<string?> EventHubUri { get; private set; } = null!;

        /// <summary>
        /// Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.ContactProfileLinkResponse>> Links { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station.
        /// </summary>
        [Output("minimumElevationDegrees")]
        public Output<double?> MinimumElevationDegrees { get; private set; } = null!;

        /// <summary>
        /// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
        /// </summary>
        [Output("minimumViableContactDuration")]
        public Output<string?> MinimumViableContactDuration { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network configuration of customer virtual network.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.ContactProfilesPropertiesResponseNetworkConfiguration> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Third-party mission configuration of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
        /// </summary>
        [Output("thirdPartyConfigurations")]
        public Output<ImmutableArray<Outputs.ContactProfileThirdPartyConfigurationResponse>> ThirdPartyConfigurations { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ContactProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContactProfile(string name, ContactProfileArgs args, CustomResourceOptions? options = null)
            : base("azure-native:orbital/v20221101:ContactProfile", name, args ?? new ContactProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContactProfile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:orbital/v20221101:ContactProfile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:orbital:ContactProfile"},
                    new global::Pulumi.Alias { Type = "azure-native:orbital/v20220301:ContactProfile"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContactProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContactProfile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ContactProfile(name, id, options);
        }
    }

    public sealed class ContactProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auto-tracking configuration.
        /// </summary>
        [Input("autoTrackingConfiguration")]
        public Input<Pulumi.AzureNative.Orbital.V20221101.AutoTrackingConfiguration>? AutoTrackingConfiguration { get; set; }

        /// <summary>
        /// Contact Profile name.
        /// </summary>
        [Input("contactProfileName")]
        public Input<string>? ContactProfileName { get; set; }

        /// <summary>
        /// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
        /// </summary>
        [Input("eventHubUri")]
        public Input<string>? EventHubUri { get; set; }

        [Input("links", required: true)]
        private InputList<Inputs.ContactProfileLinkArgs>? _links;

        /// <summary>
        /// Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
        /// </summary>
        public InputList<Inputs.ContactProfileLinkArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.ContactProfileLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station.
        /// </summary>
        [Input("minimumElevationDegrees")]
        public Input<double>? MinimumElevationDegrees { get; set; }

        /// <summary>
        /// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
        /// </summary>
        [Input("minimumViableContactDuration")]
        public Input<string>? MinimumViableContactDuration { get; set; }

        /// <summary>
        /// Network configuration of customer virtual network.
        /// </summary>
        [Input("networkConfiguration", required: true)]
        public Input<Inputs.ContactProfilesPropertiesNetworkConfigurationArgs> NetworkConfiguration { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("thirdPartyConfigurations")]
        private InputList<Inputs.ContactProfileThirdPartyConfigurationArgs>? _thirdPartyConfigurations;

        /// <summary>
        /// Third-party mission configuration of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
        /// </summary>
        public InputList<Inputs.ContactProfileThirdPartyConfigurationArgs> ThirdPartyConfigurations
        {
            get => _thirdPartyConfigurations ?? (_thirdPartyConfigurations = new InputList<Inputs.ContactProfileThirdPartyConfigurationArgs>());
            set => _thirdPartyConfigurations = value;
        }

        public ContactProfileArgs()
        {
        }
        public static new ContactProfileArgs Empty => new ContactProfileArgs();
    }
}
