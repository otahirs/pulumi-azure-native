// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Cdn.V20220501Preview
{
    /// <summary>
    /// Supported protocols for the customer's endpoint.
    /// </summary>
    [EnumType]
    public readonly struct AFDEndpointProtocols : IEquatable<AFDEndpointProtocols>
    {
        private readonly string _value;

        private AFDEndpointProtocols(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AFDEndpointProtocols Http { get; } = new AFDEndpointProtocols("Http");
        public static AFDEndpointProtocols Https { get; } = new AFDEndpointProtocols("Https");

        public static bool operator ==(AFDEndpointProtocols left, AFDEndpointProtocols right) => left.Equals(right);
        public static bool operator !=(AFDEndpointProtocols left, AFDEndpointProtocols right) => !left.Equals(right);

        public static explicit operator string(AFDEndpointProtocols value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AFDEndpointProtocols other && Equals(other);
        public bool Equals(AFDEndpointProtocols other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the source of the SSL certificate.
    /// </summary>
    [EnumType]
    public readonly struct AfdCertificateType : IEquatable<AfdCertificateType>
    {
        private readonly string _value;

        private AfdCertificateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AfdCertificateType CustomerCertificate { get; } = new AfdCertificateType("CustomerCertificate");
        public static AfdCertificateType ManagedCertificate { get; } = new AfdCertificateType("ManagedCertificate");
        public static AfdCertificateType AzureFirstPartyManagedCertificate { get; } = new AfdCertificateType("AzureFirstPartyManagedCertificate");

        public static bool operator ==(AfdCertificateType left, AfdCertificateType right) => left.Equals(right);
        public static bool operator !=(AfdCertificateType left, AfdCertificateType right) => !left.Equals(right);

        public static explicit operator string(AfdCertificateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AfdCertificateType other && Equals(other);
        public bool Equals(AfdCertificateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// TLS protocol version that will be used for Https
    /// </summary>
    [EnumType]
    public readonly struct AfdMinimumTlsVersion : IEquatable<AfdMinimumTlsVersion>
    {
        private readonly string _value;

        private AfdMinimumTlsVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AfdMinimumTlsVersion TLS10 { get; } = new AfdMinimumTlsVersion("TLS10");
        public static AfdMinimumTlsVersion TLS12 { get; } = new AfdMinimumTlsVersion("TLS12");

        public static bool operator ==(AfdMinimumTlsVersion left, AfdMinimumTlsVersion right) => left.Equals(right);
        public static bool operator !=(AfdMinimumTlsVersion left, AfdMinimumTlsVersion right) => !left.Equals(right);

        public static explicit operator string(AfdMinimumTlsVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AfdMinimumTlsVersion other && Equals(other);
        public bool Equals(AfdMinimumTlsVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.
    /// </summary>
    [EnumType]
    public readonly struct AfdQueryStringCachingBehavior : IEquatable<AfdQueryStringCachingBehavior>
    {
        private readonly string _value;

        private AfdQueryStringCachingBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AfdQueryStringCachingBehavior IgnoreQueryString { get; } = new AfdQueryStringCachingBehavior("IgnoreQueryString");
        public static AfdQueryStringCachingBehavior UseQueryString { get; } = new AfdQueryStringCachingBehavior("UseQueryString");
        public static AfdQueryStringCachingBehavior IgnoreSpecifiedQueryStrings { get; } = new AfdQueryStringCachingBehavior("IgnoreSpecifiedQueryStrings");
        public static AfdQueryStringCachingBehavior IncludeSpecifiedQueryStrings { get; } = new AfdQueryStringCachingBehavior("IncludeSpecifiedQueryStrings");

        public static bool operator ==(AfdQueryStringCachingBehavior left, AfdQueryStringCachingBehavior right) => left.Equals(right);
        public static bool operator !=(AfdQueryStringCachingBehavior left, AfdQueryStringCachingBehavior right) => !left.Equals(right);

        public static explicit operator string(AfdQueryStringCachingBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AfdQueryStringCachingBehavior other && Equals(other);
        public bool Equals(AfdQueryStringCachingBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Algorithm to use for URL signing
    /// </summary>
    [EnumType]
    public readonly struct Algorithm : IEquatable<Algorithm>
    {
        private readonly string _value;

        private Algorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Algorithm SHA256 { get; } = new Algorithm("SHA256");

        public static bool operator ==(Algorithm left, Algorithm right) => left.Equals(right);
        public static bool operator !=(Algorithm left, Algorithm right) => !left.Equals(right);

        public static explicit operator string(Algorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Algorithm other && Equals(other);
        public bool Equals(Algorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the endpoint name reuse scope. The default value is TenantReuse.
    /// </summary>
    [EnumType]
    public readonly struct AutoGeneratedDomainNameLabelScope : IEquatable<AutoGeneratedDomainNameLabelScope>
    {
        private readonly string _value;

        private AutoGeneratedDomainNameLabelScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoGeneratedDomainNameLabelScope TenantReuse { get; } = new AutoGeneratedDomainNameLabelScope("TenantReuse");
        public static AutoGeneratedDomainNameLabelScope SubscriptionReuse { get; } = new AutoGeneratedDomainNameLabelScope("SubscriptionReuse");
        public static AutoGeneratedDomainNameLabelScope ResourceGroupReuse { get; } = new AutoGeneratedDomainNameLabelScope("ResourceGroupReuse");
        public static AutoGeneratedDomainNameLabelScope NoReuse { get; } = new AutoGeneratedDomainNameLabelScope("NoReuse");

        public static bool operator ==(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => left.Equals(right);
        public static bool operator !=(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => !left.Equals(right);

        public static explicit operator string(AutoGeneratedDomainNameLabelScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoGeneratedDomainNameLabelScope other && Equals(other);
        public bool Equals(AutoGeneratedDomainNameLabelScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Caching behavior for the requests
    /// </summary>
    [EnumType]
    public readonly struct CacheBehavior : IEquatable<CacheBehavior>
    {
        private readonly string _value;

        private CacheBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CacheBehavior BypassCache { get; } = new CacheBehavior("BypassCache");
        public static CacheBehavior Override { get; } = new CacheBehavior("Override");
        public static CacheBehavior SetIfMissing { get; } = new CacheBehavior("SetIfMissing");

        public static bool operator ==(CacheBehavior left, CacheBehavior right) => left.Equals(right);
        public static bool operator !=(CacheBehavior left, CacheBehavior right) => !left.Equals(right);

        public static explicit operator string(CacheBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CacheBehavior other && Equals(other);
        public bool Equals(CacheBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level at which the content needs to be cached.
    /// </summary>
    [EnumType]
    public readonly struct CacheType : IEquatable<CacheType>
    {
        private readonly string _value;

        private CacheType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CacheType All { get; } = new CacheType("All");

        public static bool operator ==(CacheType left, CacheType right) => left.Equals(right);
        public static bool operator !=(CacheType left, CacheType right) => !left.Equals(right);

        public static explicit operator string(CacheType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CacheType other && Equals(other);
        public bool Equals(CacheType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct ClientPortOperator : IEquatable<ClientPortOperator>
    {
        private readonly string _value;

        private ClientPortOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClientPortOperator Any { get; } = new ClientPortOperator("Any");
        public static ClientPortOperator Equal { get; } = new ClientPortOperator("Equal");
        public static ClientPortOperator Contains { get; } = new ClientPortOperator("Contains");
        public static ClientPortOperator BeginsWith { get; } = new ClientPortOperator("BeginsWith");
        public static ClientPortOperator EndsWith { get; } = new ClientPortOperator("EndsWith");
        public static ClientPortOperator LessThan { get; } = new ClientPortOperator("LessThan");
        public static ClientPortOperator LessThanOrEqual { get; } = new ClientPortOperator("LessThanOrEqual");
        public static ClientPortOperator GreaterThan { get; } = new ClientPortOperator("GreaterThan");
        public static ClientPortOperator GreaterThanOrEqual { get; } = new ClientPortOperator("GreaterThanOrEqual");
        public static ClientPortOperator RegEx { get; } = new ClientPortOperator("RegEx");

        public static bool operator ==(ClientPortOperator left, ClientPortOperator right) => left.Equals(right);
        public static bool operator !=(ClientPortOperator left, ClientPortOperator right) => !left.Equals(right);

        public static explicit operator string(ClientPortOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClientPortOperator other && Equals(other);
        public bool Equals(ClientPortOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct CookiesOperator : IEquatable<CookiesOperator>
    {
        private readonly string _value;

        private CookiesOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CookiesOperator Any { get; } = new CookiesOperator("Any");
        public static CookiesOperator Equal { get; } = new CookiesOperator("Equal");
        public static CookiesOperator Contains { get; } = new CookiesOperator("Contains");
        public static CookiesOperator BeginsWith { get; } = new CookiesOperator("BeginsWith");
        public static CookiesOperator EndsWith { get; } = new CookiesOperator("EndsWith");
        public static CookiesOperator LessThan { get; } = new CookiesOperator("LessThan");
        public static CookiesOperator LessThanOrEqual { get; } = new CookiesOperator("LessThanOrEqual");
        public static CookiesOperator GreaterThan { get; } = new CookiesOperator("GreaterThan");
        public static CookiesOperator GreaterThanOrEqual { get; } = new CookiesOperator("GreaterThanOrEqual");
        public static CookiesOperator RegEx { get; } = new CookiesOperator("RegEx");

        public static bool operator ==(CookiesOperator left, CookiesOperator right) => left.Equals(right);
        public static bool operator !=(CookiesOperator left, CookiesOperator right) => !left.Equals(right);

        public static explicit operator string(CookiesOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CookiesOperator other && Equals(other);
        public bool Equals(CookiesOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the action for the delivery rule.
    /// </summary>
    [EnumType]
    public readonly struct DeliveryRuleAction : IEquatable<DeliveryRuleAction>
    {
        private readonly string _value;

        private DeliveryRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeliveryRuleAction CacheExpiration { get; } = new DeliveryRuleAction("CacheExpiration");
        public static DeliveryRuleAction CacheKeyQueryString { get; } = new DeliveryRuleAction("CacheKeyQueryString");
        public static DeliveryRuleAction ModifyRequestHeader { get; } = new DeliveryRuleAction("ModifyRequestHeader");
        public static DeliveryRuleAction ModifyResponseHeader { get; } = new DeliveryRuleAction("ModifyResponseHeader");
        public static DeliveryRuleAction UrlRedirect { get; } = new DeliveryRuleAction("UrlRedirect");
        public static DeliveryRuleAction UrlRewrite { get; } = new DeliveryRuleAction("UrlRewrite");
        public static DeliveryRuleAction UrlSigning { get; } = new DeliveryRuleAction("UrlSigning");
        public static DeliveryRuleAction OriginGroupOverride { get; } = new DeliveryRuleAction("OriginGroupOverride");
        public static DeliveryRuleAction RouteConfigurationOverride { get; } = new DeliveryRuleAction("RouteConfigurationOverride");

        public static bool operator ==(DeliveryRuleAction left, DeliveryRuleAction right) => left.Equals(right);
        public static bool operator !=(DeliveryRuleAction left, DeliveryRuleAction right) => !left.Equals(right);

        public static explicit operator string(DeliveryRuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeliveryRuleAction other && Equals(other);
        public bool Equals(DeliveryRuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to use for the redirect. The default value is MatchRequest
    /// </summary>
    [EnumType]
    public readonly struct DestinationProtocol : IEquatable<DestinationProtocol>
    {
        private readonly string _value;

        private DestinationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DestinationProtocol MatchRequest { get; } = new DestinationProtocol("MatchRequest");
        public static DestinationProtocol Http { get; } = new DestinationProtocol("Http");
        public static DestinationProtocol Https { get; } = new DestinationProtocol("Https");

        public static bool operator ==(DestinationProtocol left, DestinationProtocol right) => left.Equals(right);
        public static bool operator !=(DestinationProtocol left, DestinationProtocol right) => !left.Equals(right);

        public static explicit operator string(DestinationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationProtocol other && Equals(other);
        public bool Equals(DestinationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct EnabledState : IEquatable<EnabledState>
    {
        private readonly string _value;

        private EnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnabledState Enabled { get; } = new EnabledState("Enabled");
        public static EnabledState Disabled { get; } = new EnabledState("Disabled");

        public static bool operator ==(EnabledState left, EnabledState right) => left.Equals(right);
        public static bool operator !=(EnabledState left, EnabledState right) => !left.Equals(right);

        public static explicit operator string(EnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnabledState other && Equals(other);
        public bool Equals(EnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol this rule will use when forwarding traffic to backends.
    /// </summary>
    [EnumType]
    public readonly struct ForwardingProtocol : IEquatable<ForwardingProtocol>
    {
        private readonly string _value;

        private ForwardingProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ForwardingProtocol HttpOnly { get; } = new ForwardingProtocol("HttpOnly");
        public static ForwardingProtocol HttpsOnly { get; } = new ForwardingProtocol("HttpsOnly");
        public static ForwardingProtocol MatchRequest { get; } = new ForwardingProtocol("MatchRequest");

        public static bool operator ==(ForwardingProtocol left, ForwardingProtocol right) => left.Equals(right);
        public static bool operator !=(ForwardingProtocol left, ForwardingProtocol right) => !left.Equals(right);

        public static explicit operator string(ForwardingProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ForwardingProtocol other && Equals(other);
        public bool Equals(ForwardingProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to perform
    /// </summary>
    [EnumType]
    public readonly struct HeaderAction : IEquatable<HeaderAction>
    {
        private readonly string _value;

        private HeaderAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HeaderAction Append { get; } = new HeaderAction("Append");
        public static HeaderAction Overwrite { get; } = new HeaderAction("Overwrite");
        public static HeaderAction Delete { get; } = new HeaderAction("Delete");

        public static bool operator ==(HeaderAction left, HeaderAction right) => left.Equals(right);
        public static bool operator !=(HeaderAction left, HeaderAction right) => !left.Equals(right);

        public static explicit operator string(HeaderAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HeaderAction other && Equals(other);
        public bool Equals(HeaderAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of health probe request that is made.
    /// </summary>
    [EnumType]
    public readonly struct HealthProbeRequestType : IEquatable<HealthProbeRequestType>
    {
        private readonly string _value;

        private HealthProbeRequestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HealthProbeRequestType NotSet { get; } = new HealthProbeRequestType("NotSet");
        public static HealthProbeRequestType GET { get; } = new HealthProbeRequestType("GET");
        public static HealthProbeRequestType HEAD { get; } = new HealthProbeRequestType("HEAD");

        public static bool operator ==(HealthProbeRequestType left, HealthProbeRequestType right) => left.Equals(right);
        public static bool operator !=(HealthProbeRequestType left, HealthProbeRequestType right) => !left.Equals(right);

        public static explicit operator string(HealthProbeRequestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HealthProbeRequestType other && Equals(other);
        public bool Equals(HealthProbeRequestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct HostNameOperator : IEquatable<HostNameOperator>
    {
        private readonly string _value;

        private HostNameOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostNameOperator Any { get; } = new HostNameOperator("Any");
        public static HostNameOperator Equal { get; } = new HostNameOperator("Equal");
        public static HostNameOperator Contains { get; } = new HostNameOperator("Contains");
        public static HostNameOperator BeginsWith { get; } = new HostNameOperator("BeginsWith");
        public static HostNameOperator EndsWith { get; } = new HostNameOperator("EndsWith");
        public static HostNameOperator LessThan { get; } = new HostNameOperator("LessThan");
        public static HostNameOperator LessThanOrEqual { get; } = new HostNameOperator("LessThanOrEqual");
        public static HostNameOperator GreaterThan { get; } = new HostNameOperator("GreaterThan");
        public static HostNameOperator GreaterThanOrEqual { get; } = new HostNameOperator("GreaterThanOrEqual");
        public static HostNameOperator RegEx { get; } = new HostNameOperator("RegEx");

        public static bool operator ==(HostNameOperator left, HostNameOperator right) => left.Equals(right);
        public static bool operator !=(HostNameOperator left, HostNameOperator right) => !left.Equals(right);

        public static explicit operator string(HostNameOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostNameOperator other && Equals(other);
        public bool Equals(HostNameOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct HttpVersionOperator : IEquatable<HttpVersionOperator>
    {
        private readonly string _value;

        private HttpVersionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HttpVersionOperator Equal { get; } = new HttpVersionOperator("Equal");

        public static bool operator ==(HttpVersionOperator left, HttpVersionOperator right) => left.Equals(right);
        public static bool operator !=(HttpVersionOperator left, HttpVersionOperator right) => !left.Equals(right);

        public static explicit operator string(HttpVersionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpVersionOperator other && Equals(other);
        public bool Equals(HttpVersionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
    /// </summary>
    [EnumType]
    public readonly struct HttpsRedirect : IEquatable<HttpsRedirect>
    {
        private readonly string _value;

        private HttpsRedirect(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HttpsRedirect Enabled { get; } = new HttpsRedirect("Enabled");
        public static HttpsRedirect Disabled { get; } = new HttpsRedirect("Disabled");

        public static bool operator ==(HttpsRedirect left, HttpsRedirect right) => left.Equals(right);
        public static bool operator !=(HttpsRedirect left, HttpsRedirect right) => !left.Equals(right);

        public static explicit operator string(HttpsRedirect value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpsRedirect other && Equals(other);
        public bool Equals(HttpsRedirect other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct IsDeviceOperator : IEquatable<IsDeviceOperator>
    {
        private readonly string _value;

        private IsDeviceOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsDeviceOperator Equal { get; } = new IsDeviceOperator("Equal");

        public static bool operator ==(IsDeviceOperator left, IsDeviceOperator right) => left.Equals(right);
        public static bool operator !=(IsDeviceOperator left, IsDeviceOperator right) => !left.Equals(right);

        public static explicit operator string(IsDeviceOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsDeviceOperator other && Equals(other);
        public bool Equals(IsDeviceOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether this route will be linked to the default endpoint domain.
    /// </summary>
    [EnumType]
    public readonly struct LinkToDefaultDomain : IEquatable<LinkToDefaultDomain>
    {
        private readonly string _value;

        private LinkToDefaultDomain(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkToDefaultDomain Enabled { get; } = new LinkToDefaultDomain("Enabled");
        public static LinkToDefaultDomain Disabled { get; } = new LinkToDefaultDomain("Disabled");

        public static bool operator ==(LinkToDefaultDomain left, LinkToDefaultDomain right) => left.Equals(right);
        public static bool operator !=(LinkToDefaultDomain left, LinkToDefaultDomain right) => !left.Equals(right);

        public static explicit operator string(LinkToDefaultDomain value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkToDefaultDomain other && Equals(other);
        public bool Equals(LinkToDefaultDomain other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
    /// </summary>
    [EnumType]
    public readonly struct MatchProcessingBehavior : IEquatable<MatchProcessingBehavior>
    {
        private readonly string _value;

        private MatchProcessingBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MatchProcessingBehavior Continue { get; } = new MatchProcessingBehavior("Continue");
        public static MatchProcessingBehavior Stop { get; } = new MatchProcessingBehavior("Stop");

        public static bool operator ==(MatchProcessingBehavior left, MatchProcessingBehavior right) => left.Equals(right);
        public static bool operator !=(MatchProcessingBehavior left, MatchProcessingBehavior right) => !left.Equals(right);

        public static explicit operator string(MatchProcessingBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchProcessingBehavior other && Equals(other);
        public bool Equals(MatchProcessingBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the condition for the delivery rule.
    /// </summary>
    [EnumType]
    public readonly struct MatchVariable : IEquatable<MatchVariable>
    {
        private readonly string _value;

        private MatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MatchVariable RemoteAddress { get; } = new MatchVariable("RemoteAddress");
        public static MatchVariable RequestMethod { get; } = new MatchVariable("RequestMethod");
        public static MatchVariable QueryString { get; } = new MatchVariable("QueryString");
        public static MatchVariable PostArgs { get; } = new MatchVariable("PostArgs");
        public static MatchVariable RequestUri { get; } = new MatchVariable("RequestUri");
        public static MatchVariable RequestHeader { get; } = new MatchVariable("RequestHeader");
        public static MatchVariable RequestBody { get; } = new MatchVariable("RequestBody");
        public static MatchVariable RequestScheme { get; } = new MatchVariable("RequestScheme");
        public static MatchVariable UrlPath { get; } = new MatchVariable("UrlPath");
        public static MatchVariable UrlFileExtension { get; } = new MatchVariable("UrlFileExtension");
        public static MatchVariable UrlFileName { get; } = new MatchVariable("UrlFileName");
        public static MatchVariable HttpVersion { get; } = new MatchVariable("HttpVersion");
        public static MatchVariable Cookies { get; } = new MatchVariable("Cookies");
        public static MatchVariable IsDevice { get; } = new MatchVariable("IsDevice");
        public static MatchVariable SocketAddr { get; } = new MatchVariable("SocketAddr");
        public static MatchVariable ClientPort { get; } = new MatchVariable("ClientPort");
        public static MatchVariable ServerPort { get; } = new MatchVariable("ServerPort");
        public static MatchVariable HostName { get; } = new MatchVariable("HostName");
        public static MatchVariable SslProtocol { get; } = new MatchVariable("SslProtocol");

        public static bool operator ==(MatchVariable left, MatchVariable right) => left.Equals(right);
        public static bool operator !=(MatchVariable left, MatchVariable right) => !left.Equals(right);

        public static explicit operator string(MatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchVariable other && Equals(other);
        public bool Equals(MatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the purpose of the parameter
    /// </summary>
    [EnumType]
    public readonly struct ParamIndicator : IEquatable<ParamIndicator>
    {
        private readonly string _value;

        private ParamIndicator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ParamIndicator Expires { get; } = new ParamIndicator("Expires");
        public static ParamIndicator KeyId { get; } = new ParamIndicator("KeyId");
        public static ParamIndicator Signature { get; } = new ParamIndicator("Signature");

        public static bool operator ==(ParamIndicator left, ParamIndicator right) => left.Equals(right);
        public static bool operator !=(ParamIndicator left, ParamIndicator right) => !left.Equals(right);

        public static explicit operator string(ParamIndicator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ParamIndicator other && Equals(other);
        public bool Equals(ParamIndicator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct PostArgsOperator : IEquatable<PostArgsOperator>
    {
        private readonly string _value;

        private PostArgsOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostArgsOperator Any { get; } = new PostArgsOperator("Any");
        public static PostArgsOperator Equal { get; } = new PostArgsOperator("Equal");
        public static PostArgsOperator Contains { get; } = new PostArgsOperator("Contains");
        public static PostArgsOperator BeginsWith { get; } = new PostArgsOperator("BeginsWith");
        public static PostArgsOperator EndsWith { get; } = new PostArgsOperator("EndsWith");
        public static PostArgsOperator LessThan { get; } = new PostArgsOperator("LessThan");
        public static PostArgsOperator LessThanOrEqual { get; } = new PostArgsOperator("LessThanOrEqual");
        public static PostArgsOperator GreaterThan { get; } = new PostArgsOperator("GreaterThan");
        public static PostArgsOperator GreaterThanOrEqual { get; } = new PostArgsOperator("GreaterThanOrEqual");
        public static PostArgsOperator RegEx { get; } = new PostArgsOperator("RegEx");

        public static bool operator ==(PostArgsOperator left, PostArgsOperator right) => left.Equals(right);
        public static bool operator !=(PostArgsOperator left, PostArgsOperator right) => !left.Equals(right);

        public static explicit operator string(PostArgsOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostArgsOperator other && Equals(other);
        public bool Equals(PostArgsOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to use for health probe.
    /// </summary>
    [EnumType]
    public readonly struct ProbeProtocol : IEquatable<ProbeProtocol>
    {
        private readonly string _value;

        private ProbeProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProbeProtocol NotSet { get; } = new ProbeProtocol("NotSet");
        public static ProbeProtocol Http { get; } = new ProbeProtocol("Http");
        public static ProbeProtocol Https { get; } = new ProbeProtocol("Https");

        public static bool operator ==(ProbeProtocol left, ProbeProtocol right) => left.Equals(right);
        public static bool operator !=(ProbeProtocol left, ProbeProtocol right) => !left.Equals(right);

        public static explicit operator string(ProbeProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProbeProtocol other && Equals(other);
        public bool Equals(ProbeProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Caching behavior for the requests
    /// </summary>
    [EnumType]
    public readonly struct QueryStringBehavior : IEquatable<QueryStringBehavior>
    {
        private readonly string _value;

        private QueryStringBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryStringBehavior Include { get; } = new QueryStringBehavior("Include");
        public static QueryStringBehavior IncludeAll { get; } = new QueryStringBehavior("IncludeAll");
        public static QueryStringBehavior Exclude { get; } = new QueryStringBehavior("Exclude");
        public static QueryStringBehavior ExcludeAll { get; } = new QueryStringBehavior("ExcludeAll");

        public static bool operator ==(QueryStringBehavior left, QueryStringBehavior right) => left.Equals(right);
        public static bool operator !=(QueryStringBehavior left, QueryStringBehavior right) => !left.Equals(right);

        public static explicit operator string(QueryStringBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryStringBehavior other && Equals(other);
        public bool Equals(QueryStringBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct QueryStringOperator : IEquatable<QueryStringOperator>
    {
        private readonly string _value;

        private QueryStringOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryStringOperator Any { get; } = new QueryStringOperator("Any");
        public static QueryStringOperator Equal { get; } = new QueryStringOperator("Equal");
        public static QueryStringOperator Contains { get; } = new QueryStringOperator("Contains");
        public static QueryStringOperator BeginsWith { get; } = new QueryStringOperator("BeginsWith");
        public static QueryStringOperator EndsWith { get; } = new QueryStringOperator("EndsWith");
        public static QueryStringOperator LessThan { get; } = new QueryStringOperator("LessThan");
        public static QueryStringOperator LessThanOrEqual { get; } = new QueryStringOperator("LessThanOrEqual");
        public static QueryStringOperator GreaterThan { get; } = new QueryStringOperator("GreaterThan");
        public static QueryStringOperator GreaterThanOrEqual { get; } = new QueryStringOperator("GreaterThanOrEqual");
        public static QueryStringOperator RegEx { get; } = new QueryStringOperator("RegEx");

        public static bool operator ==(QueryStringOperator left, QueryStringOperator right) => left.Equals(right);
        public static bool operator !=(QueryStringOperator left, QueryStringOperator right) => !left.Equals(right);

        public static explicit operator string(QueryStringOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryStringOperator other && Equals(other);
        public bool Equals(QueryStringOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The redirect type the rule will use when redirecting traffic.
    /// </summary>
    [EnumType]
    public readonly struct RedirectType : IEquatable<RedirectType>
    {
        private readonly string _value;

        private RedirectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedirectType Moved { get; } = new RedirectType("Moved");
        public static RedirectType Found { get; } = new RedirectType("Found");
        public static RedirectType TemporaryRedirect { get; } = new RedirectType("TemporaryRedirect");
        public static RedirectType PermanentRedirect { get; } = new RedirectType("PermanentRedirect");

        public static bool operator ==(RedirectType left, RedirectType right) => left.Equals(right);
        public static bool operator !=(RedirectType left, RedirectType right) => !left.Equals(right);

        public static explicit operator string(RedirectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedirectType other && Equals(other);
        public bool Equals(RedirectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RemoteAddressOperator : IEquatable<RemoteAddressOperator>
    {
        private readonly string _value;

        private RemoteAddressOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RemoteAddressOperator Any { get; } = new RemoteAddressOperator("Any");
        public static RemoteAddressOperator IPMatch { get; } = new RemoteAddressOperator("IPMatch");
        public static RemoteAddressOperator GeoMatch { get; } = new RemoteAddressOperator("GeoMatch");

        public static bool operator ==(RemoteAddressOperator left, RemoteAddressOperator right) => left.Equals(right);
        public static bool operator !=(RemoteAddressOperator left, RemoteAddressOperator right) => !left.Equals(right);

        public static explicit operator string(RemoteAddressOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RemoteAddressOperator other && Equals(other);
        public bool Equals(RemoteAddressOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestBodyOperator : IEquatable<RequestBodyOperator>
    {
        private readonly string _value;

        private RequestBodyOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestBodyOperator Any { get; } = new RequestBodyOperator("Any");
        public static RequestBodyOperator Equal { get; } = new RequestBodyOperator("Equal");
        public static RequestBodyOperator Contains { get; } = new RequestBodyOperator("Contains");
        public static RequestBodyOperator BeginsWith { get; } = new RequestBodyOperator("BeginsWith");
        public static RequestBodyOperator EndsWith { get; } = new RequestBodyOperator("EndsWith");
        public static RequestBodyOperator LessThan { get; } = new RequestBodyOperator("LessThan");
        public static RequestBodyOperator LessThanOrEqual { get; } = new RequestBodyOperator("LessThanOrEqual");
        public static RequestBodyOperator GreaterThan { get; } = new RequestBodyOperator("GreaterThan");
        public static RequestBodyOperator GreaterThanOrEqual { get; } = new RequestBodyOperator("GreaterThanOrEqual");
        public static RequestBodyOperator RegEx { get; } = new RequestBodyOperator("RegEx");

        public static bool operator ==(RequestBodyOperator left, RequestBodyOperator right) => left.Equals(right);
        public static bool operator !=(RequestBodyOperator left, RequestBodyOperator right) => !left.Equals(right);

        public static explicit operator string(RequestBodyOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestBodyOperator other && Equals(other);
        public bool Equals(RequestBodyOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestHeaderOperator : IEquatable<RequestHeaderOperator>
    {
        private readonly string _value;

        private RequestHeaderOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestHeaderOperator Any { get; } = new RequestHeaderOperator("Any");
        public static RequestHeaderOperator Equal { get; } = new RequestHeaderOperator("Equal");
        public static RequestHeaderOperator Contains { get; } = new RequestHeaderOperator("Contains");
        public static RequestHeaderOperator BeginsWith { get; } = new RequestHeaderOperator("BeginsWith");
        public static RequestHeaderOperator EndsWith { get; } = new RequestHeaderOperator("EndsWith");
        public static RequestHeaderOperator LessThan { get; } = new RequestHeaderOperator("LessThan");
        public static RequestHeaderOperator LessThanOrEqual { get; } = new RequestHeaderOperator("LessThanOrEqual");
        public static RequestHeaderOperator GreaterThan { get; } = new RequestHeaderOperator("GreaterThan");
        public static RequestHeaderOperator GreaterThanOrEqual { get; } = new RequestHeaderOperator("GreaterThanOrEqual");
        public static RequestHeaderOperator RegEx { get; } = new RequestHeaderOperator("RegEx");

        public static bool operator ==(RequestHeaderOperator left, RequestHeaderOperator right) => left.Equals(right);
        public static bool operator !=(RequestHeaderOperator left, RequestHeaderOperator right) => !left.Equals(right);

        public static explicit operator string(RequestHeaderOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestHeaderOperator other && Equals(other);
        public bool Equals(RequestHeaderOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestMethodOperator : IEquatable<RequestMethodOperator>
    {
        private readonly string _value;

        private RequestMethodOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestMethodOperator Equal { get; } = new RequestMethodOperator("Equal");

        public static bool operator ==(RequestMethodOperator left, RequestMethodOperator right) => left.Equals(right);
        public static bool operator !=(RequestMethodOperator left, RequestMethodOperator right) => !left.Equals(right);

        public static explicit operator string(RequestMethodOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestMethodOperator other && Equals(other);
        public bool Equals(RequestMethodOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestUriOperator : IEquatable<RequestUriOperator>
    {
        private readonly string _value;

        private RequestUriOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestUriOperator Any { get; } = new RequestUriOperator("Any");
        public static RequestUriOperator Equal { get; } = new RequestUriOperator("Equal");
        public static RequestUriOperator Contains { get; } = new RequestUriOperator("Contains");
        public static RequestUriOperator BeginsWith { get; } = new RequestUriOperator("BeginsWith");
        public static RequestUriOperator EndsWith { get; } = new RequestUriOperator("EndsWith");
        public static RequestUriOperator LessThan { get; } = new RequestUriOperator("LessThan");
        public static RequestUriOperator LessThanOrEqual { get; } = new RequestUriOperator("LessThanOrEqual");
        public static RequestUriOperator GreaterThan { get; } = new RequestUriOperator("GreaterThan");
        public static RequestUriOperator GreaterThanOrEqual { get; } = new RequestUriOperator("GreaterThanOrEqual");
        public static RequestUriOperator RegEx { get; } = new RequestUriOperator("RegEx");

        public static bool operator ==(RequestUriOperator left, RequestUriOperator right) => left.Equals(right);
        public static bool operator !=(RequestUriOperator left, RequestUriOperator right) => !left.Equals(right);

        public static explicit operator string(RequestUriOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestUriOperator other && Equals(other);
        public bool Equals(RequestUriOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Caching behavior for the requests
    /// </summary>
    [EnumType]
    public readonly struct RuleCacheBehavior : IEquatable<RuleCacheBehavior>
    {
        private readonly string _value;

        private RuleCacheBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleCacheBehavior HonorOrigin { get; } = new RuleCacheBehavior("HonorOrigin");
        public static RuleCacheBehavior OverrideAlways { get; } = new RuleCacheBehavior("OverrideAlways");
        public static RuleCacheBehavior OverrideIfOriginMissing { get; } = new RuleCacheBehavior("OverrideIfOriginMissing");

        public static bool operator ==(RuleCacheBehavior left, RuleCacheBehavior right) => left.Equals(right);
        public static bool operator !=(RuleCacheBehavior left, RuleCacheBehavior right) => !left.Equals(right);

        public static explicit operator string(RuleCacheBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleCacheBehavior other && Equals(other);
        public bool Equals(RuleCacheBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB.
    /// </summary>
    [EnumType]
    public readonly struct RuleIsCompressionEnabled : IEquatable<RuleIsCompressionEnabled>
    {
        private readonly string _value;

        private RuleIsCompressionEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleIsCompressionEnabled Enabled { get; } = new RuleIsCompressionEnabled("Enabled");
        public static RuleIsCompressionEnabled Disabled { get; } = new RuleIsCompressionEnabled("Disabled");

        public static bool operator ==(RuleIsCompressionEnabled left, RuleIsCompressionEnabled right) => left.Equals(right);
        public static bool operator !=(RuleIsCompressionEnabled left, RuleIsCompressionEnabled right) => !left.Equals(right);

        public static explicit operator string(RuleIsCompressionEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleIsCompressionEnabled other && Equals(other);
        public bool Equals(RuleIsCompressionEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.
    /// </summary>
    [EnumType]
    public readonly struct RuleQueryStringCachingBehavior : IEquatable<RuleQueryStringCachingBehavior>
    {
        private readonly string _value;

        private RuleQueryStringCachingBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleQueryStringCachingBehavior IgnoreQueryString { get; } = new RuleQueryStringCachingBehavior("IgnoreQueryString");
        public static RuleQueryStringCachingBehavior UseQueryString { get; } = new RuleQueryStringCachingBehavior("UseQueryString");
        public static RuleQueryStringCachingBehavior IgnoreSpecifiedQueryStrings { get; } = new RuleQueryStringCachingBehavior("IgnoreSpecifiedQueryStrings");
        public static RuleQueryStringCachingBehavior IncludeSpecifiedQueryStrings { get; } = new RuleQueryStringCachingBehavior("IncludeSpecifiedQueryStrings");

        public static bool operator ==(RuleQueryStringCachingBehavior left, RuleQueryStringCachingBehavior right) => left.Equals(right);
        public static bool operator !=(RuleQueryStringCachingBehavior left, RuleQueryStringCachingBehavior right) => !left.Equals(right);

        public static explicit operator string(RuleQueryStringCachingBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleQueryStringCachingBehavior other && Equals(other);
        public bool Equals(RuleQueryStringCachingBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct ServerPortOperator : IEquatable<ServerPortOperator>
    {
        private readonly string _value;

        private ServerPortOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerPortOperator Any { get; } = new ServerPortOperator("Any");
        public static ServerPortOperator Equal { get; } = new ServerPortOperator("Equal");
        public static ServerPortOperator Contains { get; } = new ServerPortOperator("Contains");
        public static ServerPortOperator BeginsWith { get; } = new ServerPortOperator("BeginsWith");
        public static ServerPortOperator EndsWith { get; } = new ServerPortOperator("EndsWith");
        public static ServerPortOperator LessThan { get; } = new ServerPortOperator("LessThan");
        public static ServerPortOperator LessThanOrEqual { get; } = new ServerPortOperator("LessThanOrEqual");
        public static ServerPortOperator GreaterThan { get; } = new ServerPortOperator("GreaterThan");
        public static ServerPortOperator GreaterThanOrEqual { get; } = new ServerPortOperator("GreaterThanOrEqual");
        public static ServerPortOperator RegEx { get; } = new ServerPortOperator("RegEx");

        public static bool operator ==(ServerPortOperator left, ServerPortOperator right) => left.Equals(right);
        public static bool operator !=(ServerPortOperator left, ServerPortOperator right) => !left.Equals(right);

        public static explicit operator string(ServerPortOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerPortOperator other && Equals(other);
        public bool Equals(ServerPortOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the shared private link resource. Can be Pending, Approved, Rejected, Disconnected, or Timeout.
    /// </summary>
    [EnumType]
    public readonly struct SharedPrivateLinkResourceStatus : IEquatable<SharedPrivateLinkResourceStatus>
    {
        private readonly string _value;

        private SharedPrivateLinkResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SharedPrivateLinkResourceStatus Pending { get; } = new SharedPrivateLinkResourceStatus("Pending");
        public static SharedPrivateLinkResourceStatus Approved { get; } = new SharedPrivateLinkResourceStatus("Approved");
        public static SharedPrivateLinkResourceStatus Rejected { get; } = new SharedPrivateLinkResourceStatus("Rejected");
        public static SharedPrivateLinkResourceStatus Disconnected { get; } = new SharedPrivateLinkResourceStatus("Disconnected");
        public static SharedPrivateLinkResourceStatus Timeout { get; } = new SharedPrivateLinkResourceStatus("Timeout");

        public static bool operator ==(SharedPrivateLinkResourceStatus left, SharedPrivateLinkResourceStatus right) => left.Equals(right);
        public static bool operator !=(SharedPrivateLinkResourceStatus left, SharedPrivateLinkResourceStatus right) => !left.Equals(right);

        public static explicit operator string(SharedPrivateLinkResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SharedPrivateLinkResourceStatus other && Equals(other);
        public bool Equals(SharedPrivateLinkResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the pricing tier.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Standard_Verizon { get; } = new SkuName("Standard_Verizon");
        public static SkuName Premium_Verizon { get; } = new SkuName("Premium_Verizon");
        public static SkuName Custom_Verizon { get; } = new SkuName("Custom_Verizon");
        public static SkuName Standard_Akamai { get; } = new SkuName("Standard_Akamai");
        public static SkuName Standard_ChinaCdn { get; } = new SkuName("Standard_ChinaCdn");
        public static SkuName Standard_Microsoft { get; } = new SkuName("Standard_Microsoft");
        public static SkuName Standard_AzureFrontDoor { get; } = new SkuName("Standard_AzureFrontDoor");
        public static SkuName Premium_AzureFrontDoor { get; } = new SkuName("Premium_AzureFrontDoor");
        public static SkuName Standard_955BandWidth_ChinaCdn { get; } = new SkuName("Standard_955BandWidth_ChinaCdn");
        public static SkuName Standard_AvgBandWidth_ChinaCdn { get; } = new SkuName("Standard_AvgBandWidth_ChinaCdn");
        public static SkuName StandardPlus_ChinaCdn { get; } = new SkuName("StandardPlus_ChinaCdn");
        public static SkuName StandardPlus_955BandWidth_ChinaCdn { get; } = new SkuName("StandardPlus_955BandWidth_ChinaCdn");
        public static SkuName StandardPlus_AvgBandWidth_ChinaCdn { get; } = new SkuName("StandardPlus_AvgBandWidth_ChinaCdn");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct SocketAddrOperator : IEquatable<SocketAddrOperator>
    {
        private readonly string _value;

        private SocketAddrOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SocketAddrOperator Any { get; } = new SocketAddrOperator("Any");
        public static SocketAddrOperator IPMatch { get; } = new SocketAddrOperator("IPMatch");

        public static bool operator ==(SocketAddrOperator left, SocketAddrOperator right) => left.Equals(right);
        public static bool operator !=(SocketAddrOperator left, SocketAddrOperator right) => !left.Equals(right);

        public static explicit operator string(SocketAddrOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SocketAddrOperator other && Equals(other);
        public bool Equals(SocketAddrOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of an established TLS connection.
    /// </summary>
    [EnumType]
    public readonly struct SslProtocol : IEquatable<SslProtocol>
    {
        private readonly string _value;

        private SslProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslProtocol TLSv1 { get; } = new SslProtocol("TLSv1");
        public static SslProtocol TLSv1_1 { get; } = new SslProtocol("TLSv1.1");
        public static SslProtocol TLSv1_2 { get; } = new SslProtocol("TLSv1.2");

        public static bool operator ==(SslProtocol left, SslProtocol right) => left.Equals(right);
        public static bool operator !=(SslProtocol left, SslProtocol right) => !left.Equals(right);

        public static explicit operator string(SslProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslProtocol other && Equals(other);
        public bool Equals(SslProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct SslProtocolOperator : IEquatable<SslProtocolOperator>
    {
        private readonly string _value;

        private SslProtocolOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslProtocolOperator Equal { get; } = new SslProtocolOperator("Equal");

        public static bool operator ==(SslProtocolOperator left, SslProtocolOperator right) => left.Equals(right);
        public static bool operator !=(SslProtocolOperator left, SslProtocolOperator right) => !left.Equals(right);

        public static explicit operator string(SslProtocolOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslProtocolOperator other && Equals(other);
        public bool Equals(SslProtocolOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what transforms are applied before matching
    /// </summary>
    [EnumType]
    public readonly struct Transform : IEquatable<Transform>
    {
        private readonly string _value;

        private Transform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Transform Lowercase { get; } = new Transform("Lowercase");
        public static Transform Uppercase { get; } = new Transform("Uppercase");
        public static Transform Trim { get; } = new Transform("Trim");
        public static Transform UrlDecode { get; } = new Transform("UrlDecode");
        public static Transform UrlEncode { get; } = new Transform("UrlEncode");
        public static Transform RemoveNulls { get; } = new Transform("RemoveNulls");

        public static bool operator ==(Transform left, Transform right) => left.Equals(right);
        public static bool operator !=(Transform left, Transform right) => !left.Equals(right);

        public static explicit operator string(Transform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Transform other && Equals(other);
        public bool Equals(Transform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct UrlFileExtensionOperator : IEquatable<UrlFileExtensionOperator>
    {
        private readonly string _value;

        private UrlFileExtensionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UrlFileExtensionOperator Any { get; } = new UrlFileExtensionOperator("Any");
        public static UrlFileExtensionOperator Equal { get; } = new UrlFileExtensionOperator("Equal");
        public static UrlFileExtensionOperator Contains { get; } = new UrlFileExtensionOperator("Contains");
        public static UrlFileExtensionOperator BeginsWith { get; } = new UrlFileExtensionOperator("BeginsWith");
        public static UrlFileExtensionOperator EndsWith { get; } = new UrlFileExtensionOperator("EndsWith");
        public static UrlFileExtensionOperator LessThan { get; } = new UrlFileExtensionOperator("LessThan");
        public static UrlFileExtensionOperator LessThanOrEqual { get; } = new UrlFileExtensionOperator("LessThanOrEqual");
        public static UrlFileExtensionOperator GreaterThan { get; } = new UrlFileExtensionOperator("GreaterThan");
        public static UrlFileExtensionOperator GreaterThanOrEqual { get; } = new UrlFileExtensionOperator("GreaterThanOrEqual");
        public static UrlFileExtensionOperator RegEx { get; } = new UrlFileExtensionOperator("RegEx");

        public static bool operator ==(UrlFileExtensionOperator left, UrlFileExtensionOperator right) => left.Equals(right);
        public static bool operator !=(UrlFileExtensionOperator left, UrlFileExtensionOperator right) => !left.Equals(right);

        public static explicit operator string(UrlFileExtensionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UrlFileExtensionOperator other && Equals(other);
        public bool Equals(UrlFileExtensionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct UrlFileNameOperator : IEquatable<UrlFileNameOperator>
    {
        private readonly string _value;

        private UrlFileNameOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UrlFileNameOperator Any { get; } = new UrlFileNameOperator("Any");
        public static UrlFileNameOperator Equal { get; } = new UrlFileNameOperator("Equal");
        public static UrlFileNameOperator Contains { get; } = new UrlFileNameOperator("Contains");
        public static UrlFileNameOperator BeginsWith { get; } = new UrlFileNameOperator("BeginsWith");
        public static UrlFileNameOperator EndsWith { get; } = new UrlFileNameOperator("EndsWith");
        public static UrlFileNameOperator LessThan { get; } = new UrlFileNameOperator("LessThan");
        public static UrlFileNameOperator LessThanOrEqual { get; } = new UrlFileNameOperator("LessThanOrEqual");
        public static UrlFileNameOperator GreaterThan { get; } = new UrlFileNameOperator("GreaterThan");
        public static UrlFileNameOperator GreaterThanOrEqual { get; } = new UrlFileNameOperator("GreaterThanOrEqual");
        public static UrlFileNameOperator RegEx { get; } = new UrlFileNameOperator("RegEx");

        public static bool operator ==(UrlFileNameOperator left, UrlFileNameOperator right) => left.Equals(right);
        public static bool operator !=(UrlFileNameOperator left, UrlFileNameOperator right) => !left.Equals(right);

        public static explicit operator string(UrlFileNameOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UrlFileNameOperator other && Equals(other);
        public bool Equals(UrlFileNameOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct UrlPathOperator : IEquatable<UrlPathOperator>
    {
        private readonly string _value;

        private UrlPathOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UrlPathOperator Any { get; } = new UrlPathOperator("Any");
        public static UrlPathOperator Equal { get; } = new UrlPathOperator("Equal");
        public static UrlPathOperator Contains { get; } = new UrlPathOperator("Contains");
        public static UrlPathOperator BeginsWith { get; } = new UrlPathOperator("BeginsWith");
        public static UrlPathOperator EndsWith { get; } = new UrlPathOperator("EndsWith");
        public static UrlPathOperator LessThan { get; } = new UrlPathOperator("LessThan");
        public static UrlPathOperator LessThanOrEqual { get; } = new UrlPathOperator("LessThanOrEqual");
        public static UrlPathOperator GreaterThan { get; } = new UrlPathOperator("GreaterThan");
        public static UrlPathOperator GreaterThanOrEqual { get; } = new UrlPathOperator("GreaterThanOrEqual");
        public static UrlPathOperator Wildcard { get; } = new UrlPathOperator("Wildcard");
        public static UrlPathOperator RegEx { get; } = new UrlPathOperator("RegEx");

        public static bool operator ==(UrlPathOperator left, UrlPathOperator right) => left.Equals(right);
        public static bool operator !=(UrlPathOperator left, UrlPathOperator right) => !left.Equals(right);

        public static explicit operator string(UrlPathOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UrlPathOperator other && Equals(other);
        public bool Equals(UrlPathOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
