// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HDInsight.V20210601
{
    /// <summary>
    /// The HDInsight cluster application
    /// 
    /// ## Example Usage
    /// ### Create Application
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var application = new AzureNative.HDInsight.V20210601.Application("application", new()
    ///     {
    ///         ApplicationName = "hue",
    ///         ClusterName = "cluster1",
    ///         Properties = new AzureNative.HDInsight.V20210601.Inputs.ApplicationPropertiesArgs
    ///         {
    ///             ApplicationType = "CustomApplication",
    ///             ComputeProfile = new AzureNative.HDInsight.V20210601.Inputs.ComputeProfileArgs
    ///             {
    ///                 Roles = new[]
    ///                 {
    ///                     new AzureNative.HDInsight.V20210601.Inputs.RoleArgs
    ///                     {
    ///                         HardwareProfile = new AzureNative.HDInsight.V20210601.Inputs.HardwareProfileArgs
    ///                         {
    ///                             VmSize = "Standard_D12_v2",
    ///                         },
    ///                         Name = "edgenode",
    ///                         TargetInstanceCount = 1,
    ///                     },
    ///                 },
    ///             },
    ///             Errors = new[] {},
    ///             HttpsEndpoints = new[]
    ///             {
    ///                 new AzureNative.HDInsight.V20210601.Inputs.ApplicationGetHttpsEndpointArgs
    ///                 {
    ///                     AccessModes = new[]
    ///                     {
    ///                         "WebPage",
    ///                     },
    ///                     DestinationPort = 20000,
    ///                     SubDomainSuffix = "dss",
    ///                 },
    ///             },
    ///             InstallScriptActions = new[]
    ///             {
    ///                 new AzureNative.HDInsight.V20210601.Inputs.RuntimeScriptActionArgs
    ///                 {
    ///                     Name = "app-install-app1",
    ///                     Parameters = "-version latest -port 20000",
    ///                     Roles = new[]
    ///                     {
    ///                         "edgenode",
    ///                     },
    ///                     Uri = "https://.../install.sh",
    ///                 },
    ///             },
    ///             UninstallScriptActions = new[] {},
    ///         },
    ///         ResourceGroupName = "rg1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:hdinsight/v20210601:Application hue /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.HDInsight/clusters/cluster1/applications/hue 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:hdinsight/v20210601:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ETag for the application
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The properties of the application.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.ApplicationPropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The tags for the application.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:hdinsight/v20210601:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:hdinsight/v20210601:Application", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:hdinsight:Application"},
                    new global::Pulumi.Alias { Type = "azure-native:hdinsight/v20150301preview:Application"},
                    new global::Pulumi.Alias { Type = "azure-native:hdinsight/v20180601preview:Application"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Application(name, id, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The constant value for the application name.
        /// </summary>
        [Input("applicationName")]
        public Input<string>? ApplicationName { get; set; }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The properties of the application.
        /// </summary>
        [Input("properties")]
        public Input<Inputs.ApplicationPropertiesArgs>? Properties { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags for the application.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }
}
