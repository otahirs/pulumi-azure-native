// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads.V20230401
{
    /// <summary>
    /// configuration associated with SAP Landscape Monitor Dashboard.
    /// 
    /// ## Example Usage
    /// ### Create for SAP Landscape monitor Dashboard
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sapLandscapeMonitor = new AzureNative.Workloads.V20230401.SapLandscapeMonitor("sapLandscapeMonitor", new()
    ///     {
    ///         Grouping = new AzureNative.Workloads.V20230401.Inputs.SapLandscapeMonitorPropertiesGroupingArgs
    ///         {
    ///             Landscape = new[]
    ///             {
    ///                 new AzureNative.Workloads.V20230401.Inputs.SapLandscapeMonitorSidMappingArgs
    ///                 {
    ///                     Name = "Prod",
    ///                     TopSid = new[]
    ///                     {
    ///                         "SID1",
    ///                         "SID2",
    ///                     },
    ///                 },
    ///             },
    ///             SapApplication = new[]
    ///             {
    ///                 new AzureNative.Workloads.V20230401.Inputs.SapLandscapeMonitorSidMappingArgs
    ///                 {
    ///                     Name = "ERP1",
    ///                     TopSid = new[]
    ///                     {
    ///                         "SID1",
    ///                         "SID2",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         MonitorName = "mySapMonitor",
    ///         ResourceGroupName = "myResourceGroup",
    ///         TopMetricsThresholds = new[]
    ///         {
    ///             new AzureNative.Workloads.V20230401.Inputs.SapLandscapeMonitorMetricThresholdsArgs
    ///             {
    ///                 Green = 90,
    ///                 Name = "Instance Availability",
    ///                 Red = 50,
    ///                 Yellow = 75,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:workloads/v20230401:SapLandscapeMonitor default /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/myMonitor/sapLandscapeMonitor/default 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:workloads/v20230401:SapLandscapeMonitor")]
    public partial class SapLandscapeMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets the SID groupings by landscape and Environment.
        /// </summary>
        [Output("grouping")]
        public Output<Outputs.SapLandscapeMonitorPropertiesResponseGrouping?> Grouping { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of provisioning of the SAP monitor.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard
        /// </summary>
        [Output("topMetricsThresholds")]
        public Output<ImmutableArray<Outputs.SapLandscapeMonitorMetricThresholdsResponse>> TopMetricsThresholds { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SapLandscapeMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SapLandscapeMonitor(string name, SapLandscapeMonitorArgs args, CustomResourceOptions? options = null)
            : base("azure-native:workloads/v20230401:SapLandscapeMonitor", name, args ?? new SapLandscapeMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SapLandscapeMonitor(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:workloads/v20230401:SapLandscapeMonitor", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:workloads:SapLandscapeMonitor"},
                    new global::Pulumi.Alias { Type = "azure-native:workloads/v20221101preview:SapLandscapeMonitor"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SapLandscapeMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SapLandscapeMonitor Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SapLandscapeMonitor(name, id, options);
        }
    }

    public sealed class SapLandscapeMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Gets or sets the SID groupings by landscape and Environment.
        /// </summary>
        [Input("grouping")]
        public Input<Inputs.SapLandscapeMonitorPropertiesGroupingArgs>? Grouping { get; set; }

        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("monitorName", required: true)]
        public Input<string> MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("topMetricsThresholds")]
        private InputList<Inputs.SapLandscapeMonitorMetricThresholdsArgs>? _topMetricsThresholds;

        /// <summary>
        /// Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard
        /// </summary>
        public InputList<Inputs.SapLandscapeMonitorMetricThresholdsArgs> TopMetricsThresholds
        {
            get => _topMetricsThresholds ?? (_topMetricsThresholds = new InputList<Inputs.SapLandscapeMonitorMetricThresholdsArgs>());
            set => _topMetricsThresholds = value;
        }

        public SapLandscapeMonitorArgs()
        {
        }
        public static new SapLandscapeMonitorArgs Empty => new SapLandscapeMonitorArgs();
    }
}
