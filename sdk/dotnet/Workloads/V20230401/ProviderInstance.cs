// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads.V20230401
{
    /// <summary>
    /// A provider instance associated with SAP monitor.
    /// 
    /// ## Example Usage
    /// ### Create a Db2 provider
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.DB2ProviderInstancePropertiesArgs
    ///         {
    ///             DbName = "dbName",
    ///             DbPassword = "password",
    ///             DbPasswordUri = "",
    ///             DbPort = "dbPort",
    ///             DbUsername = "username",
    ///             Hostname = "hostname",
    ///             ProviderType = "Db2",
    ///             SapSid = "SID",
    ///             SslCertificateUri = "https://storageaccount.blob.core.windows.net/containername/filename",
    ///             SslPreference = "ServerCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a Db2 provider with Root Certificate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.DB2ProviderInstancePropertiesArgs
    ///         {
    ///             DbName = "dbName",
    ///             DbPassword = "password",
    ///             DbPasswordUri = "",
    ///             DbPort = "dbPort",
    ///             DbUsername = "username",
    ///             Hostname = "hostname",
    ///             ProviderType = "Db2",
    ///             SapSid = "SID",
    ///             SslPreference = "RootCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a MsSqlServer provider
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.MsSqlServerProviderInstancePropertiesArgs
    ///         {
    ///             DbPassword = "****",
    ///             DbPasswordUri = "",
    ///             DbPort = "5912",
    ///             DbUsername = "user",
    ///             Hostname = "hostname",
    ///             ProviderType = "MsSqlServer",
    ///             SapSid = "sid",
    ///             SslCertificateUri = "https://storageaccount.blob.core.windows.net/containername/filename",
    ///             SslPreference = "ServerCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a MsSqlServer provider with Root Certificate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.MsSqlServerProviderInstancePropertiesArgs
    ///         {
    ///             DbPassword = "****",
    ///             DbPasswordUri = "",
    ///             DbPort = "5912",
    ///             DbUsername = "user",
    ///             Hostname = "hostname",
    ///             ProviderType = "MsSqlServer",
    ///             SapSid = "sid",
    ///             SslPreference = "RootCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a OS provider
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.PrometheusOSProviderInstancePropertiesArgs
    ///         {
    ///             PrometheusUrl = "http://192.168.0.0:9090/metrics",
    ///             ProviderType = "PrometheusOS",
    ///             SapSid = "SID",
    ///             SslCertificateUri = "https://storageaccount.blob.core.windows.net/containername/filename",
    ///             SslPreference = "ServerCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a OS provider with Root Certificate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.PrometheusOSProviderInstancePropertiesArgs
    ///         {
    ///             PrometheusUrl = "http://192.168.0.0:9090/metrics",
    ///             ProviderType = "PrometheusOS",
    ///             SapSid = "SID",
    ///             SslPreference = "RootCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a PrometheusHaCluster provider
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.PrometheusHaClusterProviderInstancePropertiesArgs
    ///         {
    ///             ClusterName = "clusterName",
    ///             Hostname = "hostname",
    ///             PrometheusUrl = "http://192.168.0.0:9090/metrics",
    ///             ProviderType = "PrometheusHaCluster",
    ///             Sid = "sid",
    ///             SslCertificateUri = "https://storageaccount.blob.core.windows.net/containername/filename",
    ///             SslPreference = "ServerCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a PrometheusHaCluster provider with Root Certificate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.PrometheusHaClusterProviderInstancePropertiesArgs
    ///         {
    ///             ClusterName = "clusterName",
    ///             Hostname = "hostname",
    ///             PrometheusUrl = "http://192.168.0.0:9090/metrics",
    ///             ProviderType = "PrometheusHaCluster",
    ///             Sid = "sid",
    ///             SslPreference = "RootCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a SAP monitor Hana provider
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.HanaDbProviderInstancePropertiesArgs
    ///         {
    ///             DbName = "db",
    ///             DbPassword = "****",
    ///             DbPasswordUri = "",
    ///             DbUsername = "user",
    ///             Hostname = "name",
    ///             InstanceNumber = "00",
    ///             ProviderType = "SapHana",
    ///             SapSid = "SID",
    ///             SqlPort = "0000",
    ///             SslCertificateUri = "https://storageaccount.blob.core.windows.net/containername/filename",
    ///             SslHostNameInCertificate = "xyz.domain.com",
    ///             SslPreference = "ServerCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a SAP monitor Hana provider with Root Certificate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.HanaDbProviderInstancePropertiesArgs
    ///         {
    ///             DbName = "db",
    ///             DbPassword = "****",
    ///             DbPasswordUri = "",
    ///             DbUsername = "user",
    ///             Hostname = "name",
    ///             InstanceNumber = "00",
    ///             ProviderType = "SapHana",
    ///             SapSid = "SID",
    ///             SqlPort = "0000",
    ///             SslHostNameInCertificate = "xyz.domain.com",
    ///             SslPreference = "RootCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a SAP monitor NetWeaver provider
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.SapNetWeaverProviderInstancePropertiesArgs
    ///         {
    ///             ProviderType = "SapNetWeaver",
    ///             SapClientId = "111",
    ///             SapHostFileEntries = new[]
    ///             {
    ///                 "127.0.0.1 name fqdn",
    ///             },
    ///             SapHostname = "name",
    ///             SapInstanceNr = "00",
    ///             SapPassword = "****",
    ///             SapPasswordUri = "",
    ///             SapPortNumber = "1234",
    ///             SapSid = "SID",
    ///             SapUsername = "username",
    ///             SslCertificateUri = "https://storageaccount.blob.core.windows.net/containername/filename",
    ///             SslPreference = "ServerCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a SAP monitor NetWeaver provider with Root Certificate
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var providerInstance = new AzureNative.Workloads.V20230401.ProviderInstance("providerInstance", new()
    ///     {
    ///         MonitorName = "mySapMonitor",
    ///         ProviderInstanceName = "myProviderInstance",
    ///         ProviderSettings = new AzureNative.Workloads.V20230401.Inputs.SapNetWeaverProviderInstancePropertiesArgs
    ///         {
    ///             ProviderType = "SapNetWeaver",
    ///             SapClientId = "111",
    ///             SapHostFileEntries = new[]
    ///             {
    ///                 "127.0.0.1 name fqdn",
    ///             },
    ///             SapHostname = "name",
    ///             SapInstanceNr = "00",
    ///             SapPassword = "****",
    ///             SapPasswordUri = "",
    ///             SapPortNumber = "1234",
    ///             SapSid = "SID",
    ///             SapUsername = "username",
    ///             SslPreference = "RootCertificate",
    ///         },
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:workloads/v20230401:ProviderInstance myProviderInstance /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:workloads/v20230401:ProviderInstance")]
    public partial class ProviderInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines the provider instance errors.
        /// </summary>
        [Output("errors")]
        public Output<Outputs.ProviderInstancePropertiesResponseErrors> Errors { get; private set; } = null!;

        /// <summary>
        /// [currently not in use] Managed service identity(user assigned identities)
        /// </summary>
        [Output("identity")]
        public Output<Outputs.UserAssignedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defines the provider specific properties.
        /// </summary>
        [Output("providerSettings")]
        public Output<object?> ProviderSettings { get; private set; } = null!;

        /// <summary>
        /// State of provisioning of the provider instance
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ProviderInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProviderInstance(string name, ProviderInstanceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:workloads/v20230401:ProviderInstance", name, args ?? new ProviderInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProviderInstance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:workloads/v20230401:ProviderInstance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:workloads:ProviderInstance"},
                    new global::Pulumi.Alias { Type = "azure-native:workloads/v20211201preview:ProviderInstance"},
                    new global::Pulumi.Alias { Type = "azure-native:workloads/v20221101preview:ProviderInstance"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProviderInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProviderInstance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ProviderInstance(name, id, options);
        }
    }

    public sealed class ProviderInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [currently not in use] Managed service identity(user assigned identities)
        /// </summary>
        [Input("identity")]
        public Input<Inputs.UserAssignedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("monitorName", required: true)]
        public Input<string> MonitorName { get; set; } = null!;

        /// <summary>
        /// Name of the provider instance.
        /// </summary>
        [Input("providerInstanceName")]
        public Input<string>? ProviderInstanceName { get; set; }

        /// <summary>
        /// Defines the provider specific properties.
        /// </summary>
        [Input("providerSettings")]
        public object? ProviderSettings { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ProviderInstanceArgs()
        {
        }
        public static new ProviderInstanceArgs Empty => new ProviderInstanceArgs();
    }
}
