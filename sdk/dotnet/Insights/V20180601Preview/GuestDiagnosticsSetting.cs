// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20180601Preview
{
    /// <summary>
    /// Virtual machine guest diagnostics settings resource.
    /// 
    /// ## Example Usage
    /// ### Create or update a guest diagnostic settings
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var guestDiagnosticsSetting = new AzureNative.Insights.V20180601Preview.GuestDiagnosticsSetting("guestDiagnosticsSetting", new()
    ///     {
    ///         DataSources = new[]
    ///         {
    ///             new AzureNative.Insights.V20180601Preview.Inputs.DataSourceArgs
    ///             {
    ///                 Configuration = new AzureNative.Insights.V20180601Preview.Inputs.DataSourceConfigurationArgs
    ///                 {
    ///                     PerfCounters = new[]
    ///                     {
    ///                         new AzureNative.Insights.V20180601Preview.Inputs.PerformanceCounterConfigurationArgs
    ///                         {
    ///                             Name = "\\Process(_Total)\\%Processor Time",
    ///                             SamplingPeriod = "PT1M",
    ///                         },
    ///                         new AzureNative.Insights.V20180601Preview.Inputs.PerformanceCounterConfigurationArgs
    ///                         {
    ///                             Name = "\\Process(_Total)\\Working Set",
    ///                             SamplingPeriod = "PT1M",
    ///                         },
    ///                     },
    ///                 },
    ///                 Kind = "PerformanceCounter",
    ///                 Sinks = new[]
    ///                 {
    ///                     new AzureNative.Insights.V20180601Preview.Inputs.SinkConfigurationArgs
    ///                     {
    ///                         Kind = "LogAnalytics",
    ///                     },
    ///                 },
    ///             },
    ///             new AzureNative.Insights.V20180601Preview.Inputs.DataSourceArgs
    ///             {
    ///                 Configuration = new AzureNative.Insights.V20180601Preview.Inputs.DataSourceConfigurationArgs
    ///                 {
    ///                     Providers = new[]
    ///                     {
    ///                         new AzureNative.Insights.V20180601Preview.Inputs.EtwProviderConfigurationArgs
    ///                         {
    ///                             Id = "1",
    ///                         },
    ///                         new AzureNative.Insights.V20180601Preview.Inputs.EtwProviderConfigurationArgs
    ///                         {
    ///                             Id = "2",
    ///                         },
    ///                     },
    ///                 },
    ///                 Kind = "ETWProviders",
    ///                 Sinks = new[]
    ///                 {
    ///                     new AzureNative.Insights.V20180601Preview.Inputs.SinkConfigurationArgs
    ///                     {
    ///                         Kind = "LogAnalytics",
    ///                     },
    ///                 },
    ///             },
    ///             new AzureNative.Insights.V20180601Preview.Inputs.DataSourceArgs
    ///             {
    ///                 Configuration = new AzureNative.Insights.V20180601Preview.Inputs.DataSourceConfigurationArgs
    ///                 {
    ///                     EventLogs = new[]
    ///                     {
    ///                         new AzureNative.Insights.V20180601Preview.Inputs.EventLogConfigurationArgs
    ///                         {
    ///                             Filter = "SourceName == Xyz AND EventId = \"100\" AND  $Xpath/Column=\"DCName\" = \"CatWoman\"",
    ///                             LogName = "Application",
    ///                         },
    ///                         new AzureNative.Insights.V20180601Preview.Inputs.EventLogConfigurationArgs
    ///                         {
    ///                             Filter = "SourceName == Xyz AND EventId = \"100\" AND  $Xpath/Column=\"DCName\" = \"BatMan\"",
    ///                             LogName = "Application",
    ///                         },
    ///                     },
    ///                 },
    ///                 Kind = "WindowsEventLogs",
    ///                 Sinks = new[]
    ///                 {
    ///                     new AzureNative.Insights.V20180601Preview.Inputs.SinkConfigurationArgs
    ///                     {
    ///                         Kind = "LogAnalytics",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         DiagnosticSettingsName = "SampleDiagSetting",
    ///         Location = "Global",
    ///         OsType = "Windows",
    ///         ResourceGroupName = "Default-ResourceGroup",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:insights/v20180601preview:guestDiagnosticsSetting productionMachineSetting /subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/Default-ResourceGroup/providers/microsoft.insights/guestDiagnosticSettings/SampleDiagSetting 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:insights/v20180601preview:guestDiagnosticsSetting")]
    public partial class GuestDiagnosticsSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the array of data source object which are configured to collect and send data
        /// </summary>
        [Output("dataSources")]
        public Output<ImmutableArray<Outputs.DataSourceResponse>> DataSources { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Azure resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Operating system type for the configuration
        /// </summary>
        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        [Output("proxySetting")]
        public Output<string?> ProxySetting { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Azure resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GuestDiagnosticsSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GuestDiagnosticsSetting(string name, GuestDiagnosticsSettingArgs args, CustomResourceOptions? options = null)
            : base("azure-native:insights/v20180601preview:guestDiagnosticsSetting", name, args ?? new GuestDiagnosticsSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GuestDiagnosticsSetting(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:insights/v20180601preview:guestDiagnosticsSetting", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GuestDiagnosticsSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GuestDiagnosticsSetting Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GuestDiagnosticsSetting(name, id, options);
        }
    }

    public sealed class GuestDiagnosticsSettingArgs : global::Pulumi.ResourceArgs
    {
        [Input("dataSources")]
        private InputList<Inputs.DataSourceArgs>? _dataSources;

        /// <summary>
        /// the array of data source object which are configured to collect and send data
        /// </summary>
        public InputList<Inputs.DataSourceArgs> DataSources
        {
            get => _dataSources ?? (_dataSources = new InputList<Inputs.DataSourceArgs>());
            set => _dataSources = value;
        }

        /// <summary>
        /// The name of the diagnostic setting.
        /// </summary>
        [Input("diagnosticSettingsName")]
        public Input<string>? DiagnosticSettingsName { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Operating system type for the configuration
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("proxySetting")]
        public Input<string>? ProxySetting { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GuestDiagnosticsSettingArgs()
        {
        }
        public static new GuestDiagnosticsSettingArgs Empty => new GuestDiagnosticsSettingArgs();
    }
}
