// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20220601
{
    /// <summary>
    /// Definition of ARM tracked top level resource.
    /// 
    /// ## Example Usage
    /// ### Create or update data collection rule
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataCollectionRule = new AzureNative.Insights.V20220601.DataCollectionRule("dataCollectionRule", new()
    ///     {
    ///         DataCollectionRuleName = "myCollectionRule",
    ///         DataFlows = new[]
    ///         {
    ///             new AzureNative.Insights.V20220601.Inputs.DataFlowArgs
    ///             {
    ///                 Destinations = new[]
    ///                 {
    ///                     "centralWorkspace",
    ///                 },
    ///                 Streams = new[]
    ///                 {
    ///                     "Microsoft-Perf",
    ///                     "Microsoft-Syslog",
    ///                     "Microsoft-WindowsEvent",
    ///                 },
    ///             },
    ///         },
    ///         DataSources = new AzureNative.Insights.V20220601.Inputs.DataCollectionRuleDataSourcesArgs
    ///         {
    ///             PerformanceCounters = new[]
    ///             {
    ///                 new AzureNative.Insights.V20220601.Inputs.PerfCounterDataSourceArgs
    ///                 {
    ///                     CounterSpecifiers = new[]
    ///                     {
    ///                         "\\Processor(_Total)\\% Processor Time",
    ///                         "\\Memory\\Committed Bytes",
    ///                         "\\LogicalDisk(_Total)\\Free Megabytes",
    ///                         "\\PhysicalDisk(_Total)\\Avg. Disk Queue Length",
    ///                     },
    ///                     Name = "cloudTeamCoreCounters",
    ///                     SamplingFrequencyInSeconds = 15,
    ///                     Streams = new[]
    ///                     {
    ///                         "Microsoft-Perf",
    ///                     },
    ///                 },
    ///                 new AzureNative.Insights.V20220601.Inputs.PerfCounterDataSourceArgs
    ///                 {
    ///                     CounterSpecifiers = new[]
    ///                     {
    ///                         "\\Process(_Total)\\Thread Count",
    ///                     },
    ///                     Name = "appTeamExtraCounters",
    ///                     SamplingFrequencyInSeconds = 30,
    ///                     Streams = new[]
    ///                     {
    ///                         "Microsoft-Perf",
    ///                     },
    ///                 },
    ///             },
    ///             Syslog = new[]
    ///             {
    ///                 new AzureNative.Insights.V20220601.Inputs.SyslogDataSourceArgs
    ///                 {
    ///                     FacilityNames = new[]
    ///                     {
    ///                         "cron",
    ///                     },
    ///                     LogLevels = new[]
    ///                     {
    ///                         "Debug",
    ///                         "Critical",
    ///                         "Emergency",
    ///                     },
    ///                     Name = "cronSyslog",
    ///                     Streams = new[]
    ///                     {
    ///                         "Microsoft-Syslog",
    ///                     },
    ///                 },
    ///                 new AzureNative.Insights.V20220601.Inputs.SyslogDataSourceArgs
    ///                 {
    ///                     FacilityNames = new[]
    ///                     {
    ///                         "syslog",
    ///                     },
    ///                     LogLevels = new[]
    ///                     {
    ///                         "Alert",
    ///                         "Critical",
    ///                         "Emergency",
    ///                     },
    ///                     Name = "syslogBase",
    ///                     Streams = new[]
    ///                     {
    ///                         "Microsoft-Syslog",
    ///                     },
    ///                 },
    ///             },
    ///             WindowsEventLogs = new[]
    ///             {
    ///                 new AzureNative.Insights.V20220601.Inputs.WindowsEventLogDataSourceArgs
    ///                 {
    ///                     Name = "cloudSecurityTeamEvents",
    ///                     Streams = new[]
    ///                     {
    ///                         "Microsoft-WindowsEvent",
    ///                     },
    ///                     XPathQueries = new[]
    ///                     {
    ///                         "Security!",
    ///                     },
    ///                 },
    ///                 new AzureNative.Insights.V20220601.Inputs.WindowsEventLogDataSourceArgs
    ///                 {
    ///                     Name = "appTeam1AppEvents",
    ///                     Streams = new[]
    ///                     {
    ///                         "Microsoft-WindowsEvent",
    ///                     },
    ///                     XPathQueries = new[]
    ///                     {
    ///                         "System![System[(Level = 1 or Level = 2 or Level = 3)]]",
    ///                         "Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Destinations = new AzureNative.Insights.V20220601.Inputs.DataCollectionRuleDestinationsArgs
    ///         {
    ///             LogAnalytics = new[]
    ///             {
    ///                 new AzureNative.Insights.V20220601.Inputs.LogAnalyticsDestinationArgs
    ///                 {
    ///                     Name = "centralWorkspace",
    ///                     WorkspaceResourceId = "/subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.OperationalInsights/workspaces/centralTeamWorkspace",
    ///                 },
    ///             },
    ///         },
    ///         Location = "eastus",
    ///         ResourceGroupName = "myResourceGroup",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:insights/v20220601:DataCollectionRule myCollectionRule /subscriptions/703362b3-f278-4e4b-9179-c76eaf41ffc2/resourceGroups/myResourceGroup/providers/Microsoft.Insights/dataCollectionRules/myCollectionRule 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:insights/v20220601:DataCollectionRule")]
    public partial class DataCollectionRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The resource ID of the data collection endpoint that this rule can be used with.
        /// </summary>
        [Output("dataCollectionEndpointId")]
        public Output<string?> DataCollectionEndpointId { get; private set; } = null!;

        /// <summary>
        /// The specification of data flows.
        /// </summary>
        [Output("dataFlows")]
        public Output<ImmutableArray<Outputs.DataFlowResponse>> DataFlows { get; private set; } = null!;

        /// <summary>
        /// The specification of data sources. 
        /// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        [Output("dataSources")]
        public Output<Outputs.DataCollectionRuleResponseDataSources?> DataSources { get; private set; } = null!;

        /// <summary>
        /// Description of the data collection rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The specification of destinations.
        /// </summary>
        [Output("destinations")]
        public Output<Outputs.DataCollectionRuleResponseDestinations?> Destinations { get; private set; } = null!;

        /// <summary>
        /// Resource entity tag (ETag).
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Managed service identity of the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.DataCollectionRuleResourceResponseIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The immutable ID of this data collection rule. This property is READ-ONLY.
        /// </summary>
        [Output("immutableId")]
        public Output<string> ImmutableId { get; private set; } = null!;

        /// <summary>
        /// The kind of the resource.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Metadata about the resource
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.DataCollectionRuleResponseMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Declaration of custom streams used in this rule.
        /// </summary>
        [Output("streamDeclarations")]
        public Output<ImmutableDictionary<string, Outputs.StreamDeclarationResponse>?> StreamDeclarations { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.DataCollectionRuleResourceResponseSystemData> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DataCollectionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataCollectionRule(string name, DataCollectionRuleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:insights/v20220601:DataCollectionRule", name, args ?? new DataCollectionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataCollectionRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:insights/v20220601:DataCollectionRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:insights:DataCollectionRule"},
                    new global::Pulumi.Alias { Type = "azure-native:insights/v20191101preview:DataCollectionRule"},
                    new global::Pulumi.Alias { Type = "azure-native:insights/v20210401:DataCollectionRule"},
                    new global::Pulumi.Alias { Type = "azure-native:insights/v20210901preview:DataCollectionRule"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataCollectionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataCollectionRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DataCollectionRule(name, id, options);
        }
    }

    public sealed class DataCollectionRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the data collection endpoint that this rule can be used with.
        /// </summary>
        [Input("dataCollectionEndpointId")]
        public Input<string>? DataCollectionEndpointId { get; set; }

        /// <summary>
        /// The name of the data collection rule. The name is case insensitive.
        /// </summary>
        [Input("dataCollectionRuleName")]
        public Input<string>? DataCollectionRuleName { get; set; }

        [Input("dataFlows")]
        private InputList<Inputs.DataFlowArgs>? _dataFlows;

        /// <summary>
        /// The specification of data flows.
        /// </summary>
        public InputList<Inputs.DataFlowArgs> DataFlows
        {
            get => _dataFlows ?? (_dataFlows = new InputList<Inputs.DataFlowArgs>());
            set => _dataFlows = value;
        }

        /// <summary>
        /// The specification of data sources. 
        /// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        [Input("dataSources")]
        public Input<Inputs.DataCollectionRuleDataSourcesArgs>? DataSources { get; set; }

        /// <summary>
        /// Description of the data collection rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The specification of destinations.
        /// </summary>
        [Input("destinations")]
        public Input<Inputs.DataCollectionRuleDestinationsArgs>? Destinations { get; set; }

        /// <summary>
        /// Managed service identity of the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DataCollectionRuleResourceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The kind of the resource.
        /// </summary>
        [Input("kind")]
        public InputUnion<string, Pulumi.AzureNative.Insights.V20220601.KnownDataCollectionRuleResourceKind>? Kind { get; set; }

        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("streamDeclarations")]
        private InputMap<Inputs.StreamDeclarationArgs>? _streamDeclarations;

        /// <summary>
        /// Declaration of custom streams used in this rule.
        /// </summary>
        public InputMap<Inputs.StreamDeclarationArgs> StreamDeclarations
        {
            get => _streamDeclarations ?? (_streamDeclarations = new InputMap<Inputs.StreamDeclarationArgs>());
            set => _streamDeclarations = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DataCollectionRuleArgs()
        {
        }
        public static new DataCollectionRuleArgs Empty => new DataCollectionRuleArgs();
    }
}
