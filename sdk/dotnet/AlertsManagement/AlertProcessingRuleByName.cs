// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AlertsManagement
{
    /// <summary>
    /// Alert processing rule object containing target scopes, conditions and scheduling logic.
    /// API Version: 2021-08-08.
    /// 
    /// ## Example Usage
    /// ### Create or update a rule that adds an action group to all alerts in a subscription
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alertProcessingRuleByName = new AzureNative.AlertsManagement.AlertProcessingRuleByName("alertProcessingRuleByName", new()
    ///     {
    ///         AlertProcessingRuleName = "AddActionGroupToSubscription",
    ///         Location = "Global",
    ///         Properties = new AzureNative.AlertsManagement.Inputs.AlertProcessingRulePropertiesArgs
    ///         {
    ///             Actions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.AddActionGroupsArgs
    ///                 {
    ///                     ActionGroupIds = new[]
    ///                     {
    ///                         "/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/ActionGroup1",
    ///                     },
    ///                     ActionType = "AddActionGroups",
    ///                 },
    ///             },
    ///             Description = "Add ActionGroup1 to all alerts in the subscription",
    ///             Enabled = true,
    ///             Scopes = new[]
    ///             {
    ///                 "/subscriptions/subId1",
    ///             },
    ///         },
    ///         ResourceGroupName = "alertscorrelationrg",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a rule that adds two action groups to all Sev0 and Sev1 alerts in two resource groups
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alertProcessingRuleByName = new AzureNative.AlertsManagement.AlertProcessingRuleByName("alertProcessingRuleByName", new()
    ///     {
    ///         AlertProcessingRuleName = "AddActionGroupsBySeverity",
    ///         Location = "Global",
    ///         Properties = new AzureNative.AlertsManagement.Inputs.AlertProcessingRulePropertiesArgs
    ///         {
    ///             Actions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.AddActionGroupsArgs
    ///                 {
    ///                     ActionGroupIds = new[]
    ///                     {
    ///                         "/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId1",
    ///                         "/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId2",
    ///                     },
    ///                     ActionType = "AddActionGroups",
    ///                 },
    ///             },
    ///             Conditions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.ConditionArgs
    ///                 {
    ///                     Field = "Severity",
    ///                     Operator = "Equals",
    ///                     Values = new[]
    ///                     {
    ///                         "sev0",
    ///                         "sev1",
    ///                     },
    ///                 },
    ///             },
    ///             Description = "Add AGId1 and AGId2 to all Sev0 and Sev1 alerts in these resourceGroups",
    ///             Enabled = true,
    ///             Scopes = new[]
    ///             {
    ///                 "/subscriptions/subId1/resourceGroups/RGId1",
    ///                 "/subscriptions/subId1/resourceGroups/RGId2",
    ///             },
    ///         },
    ///         ResourceGroupName = "alertscorrelationrg",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a rule that removes all action groups from alerts on a specific VM during a one-off maintenance window (1800-2000 at a specific date, Pacific Standard Time)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alertProcessingRuleByName = new AzureNative.AlertsManagement.AlertProcessingRuleByName("alertProcessingRuleByName", new()
    ///     {
    ///         AlertProcessingRuleName = "RemoveActionGroupsMaintenanceWindow",
    ///         Location = "Global",
    ///         Properties = new AzureNative.AlertsManagement.Inputs.AlertProcessingRulePropertiesArgs
    ///         {
    ///             Actions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.RemoveAllActionGroupsArgs
    ///                 {
    ///                     ActionType = "RemoveAllActionGroups",
    ///                 },
    ///             },
    ///             Description = "Removes all ActionGroups from all Alerts on VMName during the maintenance window",
    ///             Enabled = true,
    ///             Schedule = new AzureNative.AlertsManagement.Inputs.ScheduleArgs
    ///             {
    ///                 EffectiveFrom = "2021-04-15T18:00:00",
    ///                 EffectiveUntil = "2021-04-15T20:00:00",
    ///                 TimeZone = "Pacific Standard Time",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "/subscriptions/subId1/resourceGroups/RGId1/providers/Microsoft.Compute/virtualMachines/VMName",
    ///             },
    ///         },
    ///         ResourceGroupName = "alertscorrelationrg",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a rule that removes all action groups from all alerts in a subscription coming from a specific alert rule
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alertProcessingRuleByName = new AzureNative.AlertsManagement.AlertProcessingRuleByName("alertProcessingRuleByName", new()
    ///     {
    ///         AlertProcessingRuleName = "RemoveActionGroupsSpecificAlertRule",
    ///         Location = "Global",
    ///         Properties = new AzureNative.AlertsManagement.Inputs.AlertProcessingRulePropertiesArgs
    ///         {
    ///             Actions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.RemoveAllActionGroupsArgs
    ///                 {
    ///                     ActionType = "RemoveAllActionGroups",
    ///                 },
    ///             },
    ///             Conditions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.ConditionArgs
    ///                 {
    ///                     Field = "AlertRuleId",
    ///                     Operator = "Equals",
    ///                     Values = new[]
    ///                     {
    ///                         "/subscriptions/suubId1/resourceGroups/Rgid2/providers/microsoft.insights/activityLogAlerts/RuleName",
    ///                     },
    ///                 },
    ///             },
    ///             Description = "Removes all ActionGroups from all Alerts that fire on above AlertRule",
    ///             Enabled = true,
    ///             Scopes = new[]
    ///             {
    ///                 "/subscriptions/subId1",
    ///             },
    ///         },
    ///         ResourceGroupName = "alertscorrelationrg",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a rule that removes all action groups from all alerts on any VM in two resource groups during a recurring maintenance window (2200-0400 every Sat and Sun, India Standard Time)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alertProcessingRuleByName = new AzureNative.AlertsManagement.AlertProcessingRuleByName("alertProcessingRuleByName", new()
    ///     {
    ///         AlertProcessingRuleName = "RemoveActionGroupsRecurringMaintenance",
    ///         Location = "Global",
    ///         Properties = new AzureNative.AlertsManagement.Inputs.AlertProcessingRulePropertiesArgs
    ///         {
    ///             Actions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.RemoveAllActionGroupsArgs
    ///                 {
    ///                     ActionType = "RemoveAllActionGroups",
    ///                 },
    ///             },
    ///             Conditions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.ConditionArgs
    ///                 {
    ///                     Field = "TargetResourceType",
    ///                     Operator = "Equals",
    ///                     Values = new[]
    ///                     {
    ///                         "microsoft.compute/virtualmachines",
    ///                     },
    ///                 },
    ///             },
    ///             Description = "Remove all ActionGroups from all Vitual machine Alerts during the recurring maintenance",
    ///             Enabled = true,
    ///             Schedule = new AzureNative.AlertsManagement.Inputs.ScheduleArgs
    ///             {
    ///                 Recurrences = new[]
    ///                 {
    ///                     new AzureNative.AlertsManagement.Inputs.WeeklyRecurrenceArgs
    ///                     {
    ///                         DaysOfWeek = new[]
    ///                         {
    ///                             "Saturday",
    ///                             "Sunday",
    ///                         },
    ///                         EndTime = "04:00:00",
    ///                         RecurrenceType = "Weekly",
    ///                         StartTime = "22:00:00",
    ///                     },
    ///                 },
    ///                 TimeZone = "India Standard Time",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "/subscriptions/subId1/resourceGroups/RGId1",
    ///                 "/subscriptions/subId1/resourceGroups/RGId2",
    ///             },
    ///         },
    ///         ResourceGroupName = "alertscorrelationrg",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create or update a rule that removes all action groups outside business hours (Mon-Fri 09:00-17:00, Eastern Standard Time)
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var alertProcessingRuleByName = new AzureNative.AlertsManagement.AlertProcessingRuleByName("alertProcessingRuleByName", new()
    ///     {
    ///         AlertProcessingRuleName = "RemoveActionGroupsOutsideBusinessHours",
    ///         Location = "Global",
    ///         Properties = new AzureNative.AlertsManagement.Inputs.AlertProcessingRulePropertiesArgs
    ///         {
    ///             Actions = new[]
    ///             {
    ///                 new AzureNative.AlertsManagement.Inputs.RemoveAllActionGroupsArgs
    ///                 {
    ///                     ActionType = "RemoveAllActionGroups",
    ///                 },
    ///             },
    ///             Description = "Remove all ActionGroups outside business hours",
    ///             Enabled = true,
    ///             Schedule = new AzureNative.AlertsManagement.Inputs.ScheduleArgs
    ///             {
    ///                 Recurrences = 
    ///                 {
    ///                     new AzureNative.AlertsManagement.Inputs.DailyRecurrenceArgs
    ///                     {
    ///                         EndTime = "09:00:00",
    ///                         RecurrenceType = "Daily",
    ///                         StartTime = "17:00:00",
    ///                     },
    ///                     new AzureNative.AlertsManagement.Inputs.WeeklyRecurrenceArgs
    ///                     {
    ///                         DaysOfWeek = new[]
    ///                         {
    ///                             "Saturday",
    ///                             "Sunday",
    ///                         },
    ///                         RecurrenceType = "Weekly",
    ///                     },
    ///                 },
    ///                 TimeZone = "Eastern Standard Time",
    ///             },
    ///             Scopes = new[]
    ///             {
    ///                 "/subscriptions/subId1",
    ///             },
    ///         },
    ///         ResourceGroupName = "alertscorrelationrg",
    ///         Tags = null,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:alertsmanagement:AlertProcessingRuleByName RemoveActionGroupsOutsideBusinessHours /subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/RemoveActionGroupsOutsideBusinessHours 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:alertsmanagement:AlertProcessingRuleByName")]
    public partial class AlertProcessingRuleByName : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Azure resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Alert processing rule properties.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.AlertProcessingRulePropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// Alert processing rule system data.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Azure resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AlertProcessingRuleByName resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertProcessingRuleByName(string name, AlertProcessingRuleByNameArgs args, CustomResourceOptions? options = null)
            : base("azure-native:alertsmanagement:AlertProcessingRuleByName", name, args ?? new AlertProcessingRuleByNameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertProcessingRuleByName(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:alertsmanagement:AlertProcessingRuleByName", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:alertsmanagement/v20181102privatepreview:AlertProcessingRuleByName"},
                    new global::Pulumi.Alias { Type = "azure-native:alertsmanagement/v20190505preview:AlertProcessingRuleByName"},
                    new global::Pulumi.Alias { Type = "azure-native:alertsmanagement/v20210808:AlertProcessingRuleByName"},
                    new global::Pulumi.Alias { Type = "azure-native:alertsmanagement/v20210808preview:AlertProcessingRuleByName"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertProcessingRuleByName resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertProcessingRuleByName Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AlertProcessingRuleByName(name, id, options);
        }
    }

    public sealed class AlertProcessingRuleByNameArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the alert processing rule that needs to be created/updated.
        /// </summary>
        [Input("alertProcessingRuleName")]
        public Input<string>? AlertProcessingRuleName { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Alert processing rule properties.
        /// </summary>
        [Input("properties")]
        public Input<Inputs.AlertProcessingRulePropertiesArgs>? Properties { get; set; }

        /// <summary>
        /// Resource group name where the resource is created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AlertProcessingRuleByNameArgs()
        {
        }
        public static new AlertProcessingRuleByNameArgs Empty => new AlertProcessingRuleByNameArgs();
    }
}
