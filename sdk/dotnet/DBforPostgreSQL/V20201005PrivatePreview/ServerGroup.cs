// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20201005PrivatePreview
{
    /// <summary>
    /// Represents a server group for create.
    /// 
    /// ## Example Usage
    /// ### Create a new server group
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serverGroup = new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.ServerGroup("serverGroup", new()
    ///     {
    ///         AdministratorLogin = "citus",
    ///         AdministratorLoginPassword = "password",
    ///         AvailabilityZone = "1",
    ///         BackupRetentionDays = 35,
    ///         CitusVersion = "9.5",
    ///         DelegatedSubnetArguments = new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.Inputs.ServerGroupPropertiesDelegatedSubnetArgumentsArgs
    ///         {
    ///             SubnetArmResourceId = "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet",
    ///         },
    ///         EnableMx = true,
    ///         EnableZfs = false,
    ///         Location = "westus",
    ///         PostgresqlVersion = "12",
    ///         PrivateDnsZoneArguments = new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.Inputs.ServerGroupPropertiesPrivateDnsZoneArgumentsArgs
    ///         {
    ///             PrivateDnsZoneArmResourceId = "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone",
    ///         },
    ///         ResourceGroupName = "TestGroup",
    ///         ServerGroupName = "hsctestsg",
    ///         ServerRoleGroups = new[]
    ///         {
    ///             new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.Inputs.ServerRoleGroupArgs
    ///             {
    ///                 EnableHa = true,
    ///                 Name = "",
    ///                 Role = "Coordinator",
    ///                 ServerCount = 1,
    ///                 ServerEdition = "GeneralPurpose",
    ///                 StorageQuotaInMb = 524288,
    ///                 VCores = 4,
    ///             },
    ///             new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.Inputs.ServerRoleGroupArgs
    ///             {
    ///                 EnableHa = false,
    ///                 Name = "",
    ///                 Role = "Worker",
    ///                 ServerCount = 3,
    ///                 ServerEdition = "MemoryOptimized",
    ///                 StorageQuotaInMb = 524288,
    ///                 VCores = 4,
    ///             },
    ///         },
    ///         StandbyAvailabilityZone = "2",
    ///         Tags = 
    ///         {
    ///             { "ElasticServer", "1" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a new server group as a point in time restore
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serverGroup = new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.ServerGroup("serverGroup", new()
    ///     {
    ///         CreateMode = "PointInTimeRestore",
    ///         EnableMx = true,
    ///         EnableZfs = false,
    ///         Location = "westus",
    ///         PointInTimeUTC = "2017-12-14T00:00:37.467Z",
    ///         ResourceGroupName = "TestGroup",
    ///         ServerGroupName = "hsctestsg",
    ///         SourceLocation = "eastus",
    ///         SourceResourceGroupName = "SourceGroup",
    ///         SourceServerGroupName = "pgtests-source-server-group",
    ///         SourceSubscriptionId = "dddddddd-dddd-dddd-dddd-dddddddddddd",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Create a new server group as a read replica
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serverGroup = new AzureNative.DBforPostgreSQL.V20201005PrivatePreview.ServerGroup("serverGroup", new()
    ///     {
    ///         CreateMode = "ReadReplica",
    ///         Location = "westus",
    ///         ResourceGroupName = "TestGroup",
    ///         ServerGroupName = "hsctestsg",
    ///         SourceLocation = "eastus",
    ///         SourceResourceGroupName = "SourceGroup",
    ///         SourceServerGroupName = "pgtests-source-server-group",
    ///         SourceSubscriptionId = "dddddddd-dddd-dddd-dddd-dddddddddddd",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup hsctestsg /subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestResourceGroup/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/hsctestsg 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
        /// </summary>
        [Output("administratorLogin")]
        public Output<string?> AdministratorLogin { get; private set; } = null!;

        /// <summary>
        /// Availability Zone information of the server group.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The backup retention days for server group.
        /// </summary>
        [Output("backupRetentionDays")]
        public Output<int?> BackupRetentionDays { get; private set; } = null!;

        /// <summary>
        /// The Citus version of server group.
        /// </summary>
        [Output("citusVersion")]
        public Output<string?> CitusVersion { get; private set; } = null!;

        /// <summary>
        /// The delegated subnet arguments for a server group.
        /// </summary>
        [Output("delegatedSubnetArguments")]
        public Output<Outputs.ServerGroupPropertiesResponseDelegatedSubnetArguments?> DelegatedSubnetArguments { get; private set; } = null!;

        /// <summary>
        /// The earliest restore point time (ISO8601 format) for server group.
        /// </summary>
        [Output("earliestRestoreTime")]
        public Output<string> EarliestRestoreTime { get; private set; } = null!;

        /// <summary>
        /// If Citus MX is enabled or not for the server group.
        /// </summary>
        [Output("enableMx")]
        public Output<bool?> EnableMx { get; private set; } = null!;

        /// <summary>
        /// If shards on coordinator is enabled or not for the server group.
        /// </summary>
        [Output("enableShardsOnCoordinator")]
        public Output<bool?> EnableShardsOnCoordinator { get; private set; } = null!;

        /// <summary>
        /// If ZFS compression is enabled or not for the server group.
        /// </summary>
        [Output("enableZfs")]
        public Output<bool?> EnableZfs { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Maintenance window of a server group.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.MaintenanceWindowResponse?> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The PostgreSQL version of server group.
        /// </summary>
        [Output("postgresqlVersion")]
        public Output<string?> PostgresqlVersion { get; private set; } = null!;

        /// <summary>
        /// The private dns zone arguments for a server group.
        /// </summary>
        [Output("privateDnsZoneArguments")]
        public Output<Outputs.ServerGroupPropertiesResponsePrivateDnsZoneArguments?> PrivateDnsZoneArguments { get; private set; } = null!;

        /// <summary>
        /// The array of read replica server groups.
        /// </summary>
        [Output("readReplicas")]
        public Output<ImmutableArray<string>> ReadReplicas { get; private set; } = null!;

        /// <summary>
        /// The resource provider type of server group.
        /// </summary>
        [Output("resourceProviderType")]
        public Output<string> ResourceProviderType { get; private set; } = null!;

        /// <summary>
        /// The list of server role groups.
        /// </summary>
        [Output("serverRoleGroups")]
        public Output<ImmutableArray<Outputs.ServerRoleGroupResponse>> ServerRoleGroups { get; private set; } = null!;

        /// <summary>
        /// The source server group id for read replica server groups.
        /// </summary>
        [Output("sourceServerGroup")]
        public Output<string> SourceServerGroup { get; private set; } = null!;

        /// <summary>
        /// Standby Availability Zone information of the server group.
        /// </summary>
        [Output("standbyAvailabilityZone")]
        public Output<string?> StandbyAvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// A state of a server group that is visible to user.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to this resource
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql:ServerGroup"},
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20221108:ServerGroup"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
        /// </summary>
        [Input("administratorLogin")]
        public Input<string>? AdministratorLogin { get; set; }

        /// <summary>
        /// The password of the administrator login.
        /// </summary>
        [Input("administratorLoginPassword")]
        public Input<string>? AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Availability Zone information of the server group.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The backup retention days for server group.
        /// </summary>
        [Input("backupRetentionDays")]
        public Input<int>? BackupRetentionDays { get; set; }

        /// <summary>
        /// The Citus version of server group.
        /// </summary>
        [Input("citusVersion")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20201005PrivatePreview.CitusVersion>? CitusVersion { get; set; }

        /// <summary>
        /// The mode to create a new server group.
        /// </summary>
        [Input("createMode")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20201005PrivatePreview.CreateMode>? CreateMode { get; set; }

        /// <summary>
        /// The delegated subnet arguments for a server group.
        /// </summary>
        [Input("delegatedSubnetArguments")]
        public Input<Inputs.ServerGroupPropertiesDelegatedSubnetArgumentsArgs>? DelegatedSubnetArguments { get; set; }

        /// <summary>
        /// If Citus MX is enabled or not for the server group.
        /// </summary>
        [Input("enableMx")]
        public Input<bool>? EnableMx { get; set; }

        /// <summary>
        /// If shards on coordinator is enabled or not for the server group.
        /// </summary>
        [Input("enableShardsOnCoordinator")]
        public Input<bool>? EnableShardsOnCoordinator { get; set; }

        /// <summary>
        /// If ZFS compression is enabled or not for the server group.
        /// </summary>
        [Input("enableZfs")]
        public Input<bool>? EnableZfs { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maintenance window of a server group.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// Restore point creation time (ISO8601 format), specifying the time to restore from. It's required when 'createMode' is 'PointInTimeRestore'
        /// </summary>
        [Input("pointInTimeUTC")]
        public Input<string>? PointInTimeUTC { get; set; }

        /// <summary>
        /// The PostgreSQL version of server group.
        /// </summary>
        [Input("postgresqlVersion")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20201005PrivatePreview.PostgreSQLVersion>? PostgresqlVersion { get; set; }

        /// <summary>
        /// The private dns zone arguments for a server group.
        /// </summary>
        [Input("privateDnsZoneArguments")]
        public Input<Inputs.ServerGroupPropertiesPrivateDnsZoneArgumentsArgs>? PrivateDnsZoneArguments { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server group.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        [Input("serverRoleGroups")]
        private InputList<Inputs.ServerRoleGroupArgs>? _serverRoleGroups;

        /// <summary>
        /// The list of server role groups.
        /// </summary>
        public InputList<Inputs.ServerRoleGroupArgs> ServerRoleGroups
        {
            get => _serverRoleGroups ?? (_serverRoleGroups = new InputList<Inputs.ServerRoleGroupArgs>());
            set => _serverRoleGroups = value;
        }

        /// <summary>
        /// The source server group location to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// The source resource group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
        /// </summary>
        [Input("sourceResourceGroupName")]
        public Input<string>? SourceResourceGroupName { get; set; }

        /// <summary>
        /// The source server group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
        /// </summary>
        [Input("sourceServerGroupName")]
        public Input<string>? SourceServerGroupName { get; set; }

        /// <summary>
        /// The source subscription id to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
        /// </summary>
        [Input("sourceSubscriptionId")]
        public Input<string>? SourceSubscriptionId { get; set; }

        /// <summary>
        /// Standby Availability Zone information of the server group.
        /// </summary>
        [Input("standbyAvailabilityZone")]
        public Input<string>? StandbyAvailabilityZone { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }
}
