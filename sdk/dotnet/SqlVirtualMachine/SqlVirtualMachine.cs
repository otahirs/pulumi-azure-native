// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SqlVirtualMachine
{
    /// <summary>
    /// A SQL virtual machine.
    /// API Version: 2022-02-01.
    /// Previous API Version: 2017-03-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/TODO for information on migrating from v1 to v2 of the provider.
    /// 
    /// ## Example Usage
    /// ### Creates or updates a SQL virtual machine and joins it to a SQL virtual machine group.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlVirtualMachine = new AzureNative.SqlVirtualMachine.SqlVirtualMachine("sqlVirtualMachine", new()
    ///     {
    ///         Location = "northeurope",
    ///         ResourceGroupName = "testrg",
    ///         SqlVirtualMachineGroupResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup",
    ///         SqlVirtualMachineName = "testvm",
    ///         VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm2",
    ///         WsfcDomainCredentials = new AzureNative.SqlVirtualMachine.Inputs.WsfcDomainCredentialsArgs
    ///         {
    ///             ClusterBootstrapAccountPassword = "&lt;Password&gt;",
    ///             ClusterOperatorAccountPassword = "&lt;Password&gt;",
    ///             SqlServiceAccountPassword = "&lt;Password&gt;",
    ///         },
    ///         WsfcStaticIp = "10.0.0.7",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates or updates a SQL virtual machine for Automated Back up Settings with Weekly and Days of the week to run the back up.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlVirtualMachine = new AzureNative.SqlVirtualMachine.SqlVirtualMachine("sqlVirtualMachine", new()
    ///     {
    ///         AutoBackupSettings = new AzureNative.SqlVirtualMachine.Inputs.AutoBackupSettingsArgs
    ///         {
    ///             BackupScheduleType = "Manual",
    ///             BackupSystemDbs = true,
    ///             DaysOfWeek = new[]
    ///             {
    ///                 "Monday",
    ///                 "Friday",
    ///             },
    ///             Enable = true,
    ///             EnableEncryption = true,
    ///             FullBackupFrequency = "Weekly",
    ///             FullBackupStartTime = 6,
    ///             FullBackupWindowHours = 11,
    ///             LogBackupFrequency = 10,
    ///             Password = "&lt;Password&gt;",
    ///             RetentionPeriod = 17,
    ///             StorageAccessKey = "&lt;primary storage access key&gt;",
    ///             StorageAccountUrl = "https://teststorage.blob.core.windows.net/",
    ///             StorageContainerName = "testcontainer",
    ///         },
    ///         AutoPatchingSettings = new AzureNative.SqlVirtualMachine.Inputs.AutoPatchingSettingsArgs
    ///         {
    ///             DayOfWeek = AzureNative.SqlVirtualMachine.DayOfWeek.Sunday,
    ///             Enable = true,
    ///             MaintenanceWindowDuration = 60,
    ///             MaintenanceWindowStartingHour = 2,
    ///         },
    ///         KeyVaultCredentialSettings = new AzureNative.SqlVirtualMachine.Inputs.KeyVaultCredentialSettingsArgs
    ///         {
    ///             Enable = false,
    ///         },
    ///         Location = "northeurope",
    ///         ResourceGroupName = "testrg",
    ///         ServerConfigurationsManagementSettings = new AzureNative.SqlVirtualMachine.Inputs.ServerConfigurationsManagementSettingsArgs
    ///         {
    ///             AdditionalFeaturesServerConfigurations = new AzureNative.SqlVirtualMachine.Inputs.AdditionalFeaturesServerConfigurationsArgs
    ///             {
    ///                 IsRServicesEnabled = false,
    ///             },
    ///             SqlConnectivityUpdateSettings = new AzureNative.SqlVirtualMachine.Inputs.SqlConnectivityUpdateSettingsArgs
    ///             {
    ///                 ConnectivityType = "PRIVATE",
    ///                 Port = 1433,
    ///                 SqlAuthUpdatePassword = "&lt;password&gt;",
    ///                 SqlAuthUpdateUserName = "sqllogin",
    ///             },
    ///             SqlStorageUpdateSettings = new AzureNative.SqlVirtualMachine.Inputs.SqlStorageUpdateSettingsArgs
    ///             {
    ///                 DiskConfigurationType = "NEW",
    ///                 DiskCount = 1,
    ///                 StartingDeviceId = 2,
    ///             },
    ///             SqlWorkloadTypeUpdateSettings = new AzureNative.SqlVirtualMachine.Inputs.SqlWorkloadTypeUpdateSettingsArgs
    ///             {
    ///                 SqlWorkloadType = "OLTP",
    ///             },
    ///         },
    ///         SqlImageSku = "Enterprise",
    ///         SqlManagement = "Full",
    ///         SqlServerLicenseType = "PAYG",
    ///         SqlVirtualMachineName = "testvm",
    ///         VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates or updates a SQL virtual machine for Storage Configuration Settings to EXTEND Data, Log or TempDB storage pool.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlVirtualMachine = new AzureNative.SqlVirtualMachine.SqlVirtualMachine("sqlVirtualMachine", new()
    ///     {
    ///         Location = "northeurope",
    ///         ResourceGroupName = "testrg",
    ///         SqlVirtualMachineName = "testvm",
    ///         StorageConfigurationSettings = new AzureNative.SqlVirtualMachine.Inputs.StorageConfigurationSettingsArgs
    ///         {
    ///             DiskConfigurationType = "EXTEND",
    ///             SqlDataSettings = new AzureNative.SqlVirtualMachine.Inputs.SQLStorageSettingsArgs
    ///             {
    ///                 Luns = new[]
    ///                 {
    ///                     2,
    ///                 },
    ///             },
    ///         },
    ///         VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates or updates a SQL virtual machine for Storage Configuration Settings to NEW Data, Log and TempDB storage pool.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlVirtualMachine = new AzureNative.SqlVirtualMachine.SqlVirtualMachine("sqlVirtualMachine", new()
    ///     {
    ///         Location = "northeurope",
    ///         ResourceGroupName = "testrg",
    ///         SqlVirtualMachineName = "testvm",
    ///         StorageConfigurationSettings = new AzureNative.SqlVirtualMachine.Inputs.StorageConfigurationSettingsArgs
    ///         {
    ///             DiskConfigurationType = "NEW",
    ///             SqlDataSettings = new AzureNative.SqlVirtualMachine.Inputs.SQLStorageSettingsArgs
    ///             {
    ///                 DefaultFilePath = "F:\\folderpath\\",
    ///                 Luns = new[]
    ///                 {
    ///                     0,
    ///                 },
    ///             },
    ///             SqlLogSettings = new AzureNative.SqlVirtualMachine.Inputs.SQLStorageSettingsArgs
    ///             {
    ///                 DefaultFilePath = "G:\\folderpath\\",
    ///                 Luns = new[]
    ///                 {
    ///                     1,
    ///                 },
    ///             },
    ///             SqlSystemDbOnDataDisk = true,
    ///             SqlTempDbSettings = new AzureNative.SqlVirtualMachine.Inputs.SQLTempDbSettingsArgs
    ///             {
    ///                 DataFileCount = 8,
    ///                 DataFileSize = 256,
    ///                 DataGrowth = 512,
    ///                 DefaultFilePath = "D:\\TEMP",
    ///                 LogFileSize = 256,
    ///                 LogGrowth = 512,
    ///             },
    ///             StorageWorkloadType = "OLTP",
    ///         },
    ///         VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates or updates a SQL virtual machine with max parameters.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlVirtualMachine = new AzureNative.SqlVirtualMachine.SqlVirtualMachine("sqlVirtualMachine", new()
    ///     {
    ///         AssessmentSettings = new AzureNative.SqlVirtualMachine.Inputs.AssessmentSettingsArgs
    ///         {
    ///             Enable = true,
    ///             RunImmediately = true,
    ///             Schedule = new AzureNative.SqlVirtualMachine.Inputs.ScheduleArgs
    ///             {
    ///                 DayOfWeek = AzureNative.SqlVirtualMachine.AssessmentDayOfWeek.Sunday,
    ///                 Enable = true,
    ///                 StartTime = "23:17",
    ///                 WeeklyInterval = 1,
    ///             },
    ///         },
    ///         AutoBackupSettings = new AzureNative.SqlVirtualMachine.Inputs.AutoBackupSettingsArgs
    ///         {
    ///             BackupScheduleType = "Manual",
    ///             BackupSystemDbs = true,
    ///             Enable = true,
    ///             EnableEncryption = true,
    ///             FullBackupFrequency = "Daily",
    ///             FullBackupStartTime = 6,
    ///             FullBackupWindowHours = 11,
    ///             LogBackupFrequency = 10,
    ///             Password = "&lt;Password&gt;",
    ///             RetentionPeriod = 17,
    ///             StorageAccessKey = "&lt;primary storage access key&gt;",
    ///             StorageAccountUrl = "https://teststorage.blob.core.windows.net/",
    ///             StorageContainerName = "testcontainer",
    ///         },
    ///         AutoPatchingSettings = new AzureNative.SqlVirtualMachine.Inputs.AutoPatchingSettingsArgs
    ///         {
    ///             DayOfWeek = AzureNative.SqlVirtualMachine.DayOfWeek.Sunday,
    ///             Enable = true,
    ///             MaintenanceWindowDuration = 60,
    ///             MaintenanceWindowStartingHour = 2,
    ///         },
    ///         KeyVaultCredentialSettings = new AzureNative.SqlVirtualMachine.Inputs.KeyVaultCredentialSettingsArgs
    ///         {
    ///             Enable = false,
    ///         },
    ///         Location = "northeurope",
    ///         ResourceGroupName = "testrg",
    ///         ServerConfigurationsManagementSettings = new AzureNative.SqlVirtualMachine.Inputs.ServerConfigurationsManagementSettingsArgs
    ///         {
    ///             AdditionalFeaturesServerConfigurations = new AzureNative.SqlVirtualMachine.Inputs.AdditionalFeaturesServerConfigurationsArgs
    ///             {
    ///                 IsRServicesEnabled = false,
    ///             },
    ///             SqlConnectivityUpdateSettings = new AzureNative.SqlVirtualMachine.Inputs.SqlConnectivityUpdateSettingsArgs
    ///             {
    ///                 ConnectivityType = "PRIVATE",
    ///                 Port = 1433,
    ///                 SqlAuthUpdatePassword = "&lt;password&gt;",
    ///                 SqlAuthUpdateUserName = "sqllogin",
    ///             },
    ///             SqlInstanceSettings = new AzureNative.SqlVirtualMachine.Inputs.SQLInstanceSettingsArgs
    ///             {
    ///                 Collation = "SQL_Latin1_General_CP1_CI_AS",
    ///                 IsIfiEnabled = true,
    ///                 IsLpimEnabled = true,
    ///                 IsOptimizeForAdHocWorkloadsEnabled = true,
    ///                 MaxDop = 8,
    ///                 MaxServerMemoryMB = 128,
    ///                 MinServerMemoryMB = 0,
    ///             },
    ///             SqlStorageUpdateSettings = new AzureNative.SqlVirtualMachine.Inputs.SqlStorageUpdateSettingsArgs
    ///             {
    ///                 DiskConfigurationType = "NEW",
    ///                 DiskCount = 1,
    ///                 StartingDeviceId = 2,
    ///             },
    ///             SqlWorkloadTypeUpdateSettings = new AzureNative.SqlVirtualMachine.Inputs.SqlWorkloadTypeUpdateSettingsArgs
    ///             {
    ///                 SqlWorkloadType = "OLTP",
    ///             },
    ///         },
    ///         SqlImageSku = "Enterprise",
    ///         SqlManagement = "Full",
    ///         SqlServerLicenseType = "PAYG",
    ///         SqlVirtualMachineName = "testvm",
    ///         VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Creates or updates a SQL virtual machine with min parameters.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sqlVirtualMachine = new AzureNative.SqlVirtualMachine.SqlVirtualMachine("sqlVirtualMachine", new()
    ///     {
    ///         Location = "northeurope",
    ///         ResourceGroupName = "testrg",
    ///         SqlVirtualMachineName = "testvm",
    ///         VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:sqlvirtualmachine:SqlVirtualMachine testvm /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/testvm 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:sqlvirtualmachine:SqlVirtualMachine")]
    public partial class SqlVirtualMachine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Assessment Settings.
        /// </summary>
        [Output("assessmentSettings")]
        public Output<Outputs.AssessmentSettingsResponse?> AssessmentSettings { get; private set; } = null!;

        /// <summary>
        /// Auto backup settings for SQL Server.
        /// </summary>
        [Output("autoBackupSettings")]
        public Output<Outputs.AutoBackupSettingsResponse?> AutoBackupSettings { get; private set; } = null!;

        /// <summary>
        /// Auto patching settings for applying critical security updates to SQL virtual machine.
        /// </summary>
        [Output("autoPatchingSettings")]
        public Output<Outputs.AutoPatchingSettingsResponse?> AutoPatchingSettings { get; private set; } = null!;

        /// <summary>
        /// Azure Active Directory identity of the server.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ResourceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Key vault credential settings.
        /// </summary>
        [Output("keyVaultCredentialSettings")]
        public Output<Outputs.KeyVaultCredentialSettingsResponse?> KeyVaultCredentialSettings { get; private set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state to track the async operation status.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// SQL Server configuration management settings.
        /// </summary>
        [Output("serverConfigurationsManagementSettings")]
        public Output<Outputs.ServerConfigurationsManagementSettingsResponse?> ServerConfigurationsManagementSettings { get; private set; } = null!;

        /// <summary>
        /// SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.
        /// </summary>
        [Output("sqlImageOffer")]
        public Output<string?> SqlImageOffer { get; private set; } = null!;

        /// <summary>
        /// SQL Server edition type.
        /// </summary>
        [Output("sqlImageSku")]
        public Output<string?> SqlImageSku { get; private set; } = null!;

        /// <summary>
        /// SQL Server Management type.
        /// </summary>
        [Output("sqlManagement")]
        public Output<string?> SqlManagement { get; private set; } = null!;

        /// <summary>
        /// SQL Server license type.
        /// </summary>
        [Output("sqlServerLicenseType")]
        public Output<string?> SqlServerLicenseType { get; private set; } = null!;

        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        [Output("sqlVirtualMachineGroupResourceId")]
        public Output<string?> SqlVirtualMachineGroupResourceId { get; private set; } = null!;

        /// <summary>
        /// Storage Configuration Settings.
        /// </summary>
        [Output("storageConfigurationSettings")]
        public Output<Outputs.StorageConfigurationSettingsResponse?> StorageConfigurationSettings { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        [Output("virtualMachineResourceId")]
        public Output<string?> VirtualMachineResourceId { get; private set; } = null!;

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Output("wsfcDomainCredentials")]
        public Output<Outputs.WsfcDomainCredentialsResponse?> WsfcDomainCredentials { get; private set; } = null!;

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Output("wsfcStaticIp")]
        public Output<string?> WsfcStaticIp { get; private set; } = null!;


        /// <summary>
        /// Create a SqlVirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlVirtualMachine(string name, SqlVirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("azure-native:sqlvirtualmachine:SqlVirtualMachine", name, args ?? new SqlVirtualMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlVirtualMachine(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:sqlvirtualmachine:SqlVirtualMachine", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:sqlvirtualmachine/v20170301preview:SqlVirtualMachine"},
                    new global::Pulumi.Alias { Type = "azure-native:sqlvirtualmachine/v20211101preview:SqlVirtualMachine"},
                    new global::Pulumi.Alias { Type = "azure-native:sqlvirtualmachine/v20220201:SqlVirtualMachine"},
                    new global::Pulumi.Alias { Type = "azure-native:sqlvirtualmachine/v20220201preview:SqlVirtualMachine"},
                    new global::Pulumi.Alias { Type = "azure-native:sqlvirtualmachine/v20220701preview:SqlVirtualMachine"},
                    new global::Pulumi.Alias { Type = "azure-native:sqlvirtualmachine/v20220801preview:SqlVirtualMachine"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlVirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlVirtualMachine Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SqlVirtualMachine(name, id, options);
        }
    }

    public sealed class SqlVirtualMachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Assessment Settings.
        /// </summary>
        [Input("assessmentSettings")]
        public Input<Inputs.AssessmentSettingsArgs>? AssessmentSettings { get; set; }

        /// <summary>
        /// Auto backup settings for SQL Server.
        /// </summary>
        [Input("autoBackupSettings")]
        public Input<Inputs.AutoBackupSettingsArgs>? AutoBackupSettings { get; set; }

        /// <summary>
        /// Auto patching settings for applying critical security updates to SQL virtual machine.
        /// </summary>
        [Input("autoPatchingSettings")]
        public Input<Inputs.AutoPatchingSettingsArgs>? AutoPatchingSettings { get; set; }

        /// <summary>
        /// Azure Active Directory identity of the server.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ResourceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Key vault credential settings.
        /// </summary>
        [Input("keyVaultCredentialSettings")]
        public Input<Inputs.KeyVaultCredentialSettingsArgs>? KeyVaultCredentialSettings { get; set; }

        /// <summary>
        /// Resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SQL Server configuration management settings.
        /// </summary>
        [Input("serverConfigurationsManagementSettings")]
        public Input<Inputs.ServerConfigurationsManagementSettingsArgs>? ServerConfigurationsManagementSettings { get; set; }

        /// <summary>
        /// SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.
        /// </summary>
        [Input("sqlImageOffer")]
        public Input<string>? SqlImageOffer { get; set; }

        /// <summary>
        /// SQL Server edition type.
        /// </summary>
        [Input("sqlImageSku")]
        public InputUnion<string, Pulumi.AzureNative.SqlVirtualMachine.SqlImageSku>? SqlImageSku { get; set; }

        /// <summary>
        /// SQL Server Management type.
        /// </summary>
        [Input("sqlManagement")]
        public InputUnion<string, Pulumi.AzureNative.SqlVirtualMachine.SqlManagementMode>? SqlManagement { get; set; }

        /// <summary>
        /// SQL Server license type.
        /// </summary>
        [Input("sqlServerLicenseType")]
        public InputUnion<string, Pulumi.AzureNative.SqlVirtualMachine.SqlServerLicenseType>? SqlServerLicenseType { get; set; }

        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        [Input("sqlVirtualMachineGroupResourceId")]
        public Input<string>? SqlVirtualMachineGroupResourceId { get; set; }

        /// <summary>
        /// Name of the SQL virtual machine.
        /// </summary>
        [Input("sqlVirtualMachineName")]
        public Input<string>? SqlVirtualMachineName { get; set; }

        /// <summary>
        /// Storage Configuration Settings.
        /// </summary>
        [Input("storageConfigurationSettings")]
        public Input<Inputs.StorageConfigurationSettingsArgs>? StorageConfigurationSettings { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        [Input("virtualMachineResourceId")]
        public Input<string>? VirtualMachineResourceId { get; set; }

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Input("wsfcDomainCredentials")]
        public Input<Inputs.WsfcDomainCredentialsArgs>? WsfcDomainCredentials { get; set; }

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Input("wsfcStaticIp")]
        public Input<string>? WsfcStaticIp { get; set; }

        public SqlVirtualMachineArgs()
        {
        }
        public static new SqlVirtualMachineArgs Empty => new SqlVirtualMachineArgs();
    }
}
