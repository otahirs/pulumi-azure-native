// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20230301
{
    /// <summary>
    /// Describes a virtual machine scale set virtual machine.
    /// 
    /// ## Example Usage
    /// ### VirtualMachineScaleSetVM_Update_MaximumSet_Gen
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var virtualMachineScaleSetVM = new AzureNative.Compute.V20230301.VirtualMachineScaleSetVM("virtualMachineScaleSetVM", new()
    ///     {
    ///         AdditionalCapabilities = new AzureNative.Compute.V20230301.Inputs.AdditionalCapabilitiesArgs
    ///         {
    ///             HibernationEnabled = true,
    ///             UltraSSDEnabled = true,
    ///         },
    ///         AvailabilitySet = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///         {
    ///             Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///         },
    ///         DiagnosticsProfile = new AzureNative.Compute.V20230301.Inputs.DiagnosticsProfileArgs
    ///         {
    ///             BootDiagnostics = new AzureNative.Compute.V20230301.Inputs.BootDiagnosticsArgs
    ///             {
    ///                 Enabled = true,
    ///                 StorageUri = "aaaaaaaaaaaaa",
    ///             },
    ///         },
    ///         HardwareProfile = new AzureNative.Compute.V20230301.Inputs.HardwareProfileArgs
    ///         {
    ///             VmSize = "Basic_A0",
    ///             VmSizeProperties = new AzureNative.Compute.V20230301.Inputs.VMSizePropertiesArgs
    ///             {
    ///                 VCPUsAvailable = 9,
    ///                 VCPUsPerCore = 12,
    ///             },
    ///         },
    ///         InstanceId = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    ///         LicenseType = "aaaaaaaaaa",
    ///         Location = "westus",
    ///         NetworkProfile = new AzureNative.Compute.V20230301.Inputs.NetworkProfileArgs
    ///         {
    ///             NetworkApiVersion = "2020-11-01",
    ///             NetworkInterfaceConfigurations = new[]
    ///             {
    ///                 new AzureNative.Compute.V20230301.Inputs.VirtualMachineNetworkInterfaceConfigurationArgs
    ///                 {
    ///                     DeleteOption = "Delete",
    ///                     DnsSettings = new AzureNative.Compute.V20230301.Inputs.VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs
    ///                     {
    ///                         DnsServers = new[]
    ///                         {
    ///                             "aaaaaa",
    ///                         },
    ///                     },
    ///                     DscpConfiguration = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                     },
    ///                     EnableAcceleratedNetworking = true,
    ///                     EnableFpga = true,
    ///                     EnableIPForwarding = true,
    ///                     IpConfigurations = new[]
    ///                     {
    ///                         new AzureNative.Compute.V20230301.Inputs.VirtualMachineNetworkInterfaceIPConfigurationArgs
    ///                         {
    ///                             ApplicationGatewayBackendAddressPools = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             ApplicationSecurityGroups = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             LoadBalancerBackendAddressPools = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             Name = "aa",
    ///                             Primary = true,
    ///                             PrivateIPAddressVersion = "IPv4",
    ///                             PublicIPAddressConfiguration = new AzureNative.Compute.V20230301.Inputs.VirtualMachinePublicIPAddressConfigurationArgs
    ///                             {
    ///                                 DeleteOption = "Delete",
    ///                                 DnsSettings = new AzureNative.Compute.V20230301.Inputs.VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs
    ///                                 {
    ///                                     DomainNameLabel = "aaaaaaaaaaaaaaaaaaaaaaaaa",
    ///                                 },
    ///                                 IdleTimeoutInMinutes = 2,
    ///                                 IpTags = new[]
    ///                                 {
    ///                                     new AzureNative.Compute.V20230301.Inputs.VirtualMachineIpTagArgs
    ///                                     {
    ///                                         IpTagType = "aaaaaaaaaaaaaaaaaaaaaaaaa",
    ///                                         Tag = "aaaaaaaaaaaaaaaaaaaa",
    ///                                     },
    ///                                 },
    ///                                 Name = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    ///                                 PublicIPAddressVersion = "IPv4",
    ///                                 PublicIPAllocationMethod = "Dynamic",
    ///                                 PublicIPPrefix = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                                 Sku = new AzureNative.Compute.V20230301.Inputs.PublicIPAddressSkuArgs
    ///                                 {
    ///                                     Name = "Basic",
    ///                                     Tier = "Regional",
    ///                                 },
    ///                             },
    ///                             Subnet = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                             {
    ///                                 Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                             },
    ///                         },
    ///                     },
    ///                     Name = "aaaaaaaaaaa",
    ///                     NetworkSecurityGroup = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                     },
    ///                     Primary = true,
    ///                 },
    ///             },
    ///             NetworkInterfaces = new[]
    ///             {
    ///                 new AzureNative.Compute.V20230301.Inputs.NetworkInterfaceReferenceArgs
    ///                 {
    ///                     DeleteOption = "Delete",
    ///                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415",
    ///                     Primary = true,
    ///                 },
    ///             },
    ///         },
    ///         NetworkProfileConfiguration = new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetVMNetworkProfileConfigurationArgs
    ///         {
    ///             NetworkInterfaceConfigurations = new[]
    ///             {
    ///                 new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetNetworkConfigurationArgs
    ///                 {
    ///                     DeleteOption = "Delete",
    ///                     DnsSettings = new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs
    ///                     {
    ///                         DnsServers = new[] {},
    ///                     },
    ///                     EnableAcceleratedNetworking = true,
    ///                     EnableFpga = true,
    ///                     EnableIPForwarding = true,
    ///                     IpConfigurations = new[]
    ///                     {
    ///                         new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetIPConfigurationArgs
    ///                         {
    ///                             ApplicationGatewayBackendAddressPools = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             ApplicationSecurityGroups = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             LoadBalancerBackendAddressPools = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             LoadBalancerInboundNatPools = new[]
    ///                             {
    ///                                 new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                             },
    ///                             Name = "vmsstestnetconfig9693",
    ///                             Primary = true,
    ///                             PrivateIPAddressVersion = "IPv4",
    ///                             PublicIPAddressConfiguration = new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetPublicIPAddressConfigurationArgs
    ///                             {
    ///                                 DeleteOption = "Delete",
    ///                                 DnsSettings = new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs
    ///                                 {
    ///                                     DomainNameLabel = "aaaaaaaaaaaaaaaaaa",
    ///                                 },
    ///                                 IdleTimeoutInMinutes = 18,
    ///                                 IpTags = new[]
    ///                                 {
    ///                                     new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetIpTagArgs
    ///                                     {
    ///                                         IpTagType = "aaaaaaa",
    ///                                         Tag = "aaaaaaaaaaaaaaaaaaaaaaaaaaa",
    ///                                     },
    ///                                 },
    ///                                 Name = "aaaaaaaaaaaaaaaaaa",
    ///                                 PublicIPAddressVersion = "IPv4",
    ///                                 PublicIPPrefix = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                                 {
    ///                                     Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                                 },
    ///                                 Sku = new AzureNative.Compute.V20230301.Inputs.PublicIPAddressSkuArgs
    ///                                 {
    ///                                     Name = "Basic",
    ///                                     Tier = "Regional",
    ///                                 },
    ///                             },
    ///                             Subnet = new AzureNative.Compute.V20230301.Inputs.ApiEntityReferenceArgs
    ///                             {
    ///                                 Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503",
    ///                             },
    ///                         },
    ///                     },
    ///                     Name = "vmsstestnetconfig5415",
    ///                     NetworkSecurityGroup = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                     },
    ///                     Primary = true,
    ///                 },
    ///             },
    ///         },
    ///         OsProfile = new AzureNative.Compute.V20230301.Inputs.OSProfileArgs
    ///         {
    ///             AdminPassword = "aaaaaaaaaaaaaaaa",
    ///             AdminUsername = "Foo12",
    ///             AllowExtensionOperations = true,
    ///             ComputerName = "test000000",
    ///             CustomData = "aaaa",
    ///             LinuxConfiguration = new AzureNative.Compute.V20230301.Inputs.LinuxConfigurationArgs
    ///             {
    ///                 DisablePasswordAuthentication = true,
    ///                 PatchSettings = new AzureNative.Compute.V20230301.Inputs.LinuxPatchSettingsArgs
    ///                 {
    ///                     AssessmentMode = "ImageDefault",
    ///                     PatchMode = "ImageDefault",
    ///                 },
    ///                 ProvisionVMAgent = true,
    ///                 Ssh = new AzureNative.Compute.V20230301.Inputs.SshConfigurationArgs
    ///                 {
    ///                     PublicKeys = new[]
    ///                     {
    ///                         new AzureNative.Compute.V20230301.Inputs.SshPublicKeyArgs
    ///                         {
    ///                             KeyData = "aaaaaa",
    ///                             Path = "aaa",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             RequireGuestProvisionSignal = true,
    ///             Secrets = new[] {},
    ///             WindowsConfiguration = new AzureNative.Compute.V20230301.Inputs.WindowsConfigurationArgs
    ///             {
    ///                 AdditionalUnattendContent = new[]
    ///                 {
    ///                     new AzureNative.Compute.V20230301.Inputs.AdditionalUnattendContentArgs
    ///                     {
    ///                         ComponentName = AzureNative.Compute.V20230301.ComponentNames.Microsoft_Windows_Shell_Setup,
    ///                         Content = "aaaaaaaaaaaaaaaaaaaa",
    ///                         PassName = AzureNative.Compute.V20230301.PassNames.OobeSystem,
    ///                         SettingName = AzureNative.Compute.V20230301.SettingNames.AutoLogon,
    ///                     },
    ///                 },
    ///                 EnableAutomaticUpdates = true,
    ///                 PatchSettings = new AzureNative.Compute.V20230301.Inputs.PatchSettingsArgs
    ///                 {
    ///                     AssessmentMode = "ImageDefault",
    ///                     EnableHotpatching = true,
    ///                     PatchMode = "Manual",
    ///                 },
    ///                 ProvisionVMAgent = true,
    ///                 TimeZone = "aaaaaaaaaaaaaaaaaaaaaaaaaaa",
    ///                 WinRM = new AzureNative.Compute.V20230301.Inputs.WinRMConfigurationArgs
    ///                 {
    ///                     Listeners = new[]
    ///                     {
    ///                         new AzureNative.Compute.V20230301.Inputs.WinRMListenerArgs
    ///                         {
    ///                             CertificateUrl = "aaaaaaaaaaaaaaaaaaaaaa",
    ///                             Protocol = AzureNative.Compute.V20230301.ProtocolTypes.Http,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Plan = new AzureNative.Compute.V20230301.Inputs.PlanArgs
    ///         {
    ///             Name = "aaaaaaaaaa",
    ///             Product = "aaaaaaaaaaaaaaaaaaaa",
    ///             PromotionCode = "aaaaaaaaaaaaaaaaaaaa",
    ///             Publisher = "aaaaaaaaaaaaaaaaaaaaaa",
    ///         },
    ///         ProtectionPolicy = new AzureNative.Compute.V20230301.Inputs.VirtualMachineScaleSetVMProtectionPolicyArgs
    ///         {
    ///             ProtectFromScaleIn = true,
    ///             ProtectFromScaleSetActions = true,
    ///         },
    ///         ResourceGroupName = "rgcompute",
    ///         SecurityProfile = new AzureNative.Compute.V20230301.Inputs.SecurityProfileArgs
    ///         {
    ///             EncryptionAtHost = true,
    ///             SecurityType = "TrustedLaunch",
    ///             UefiSettings = new AzureNative.Compute.V20230301.Inputs.UefiSettingsArgs
    ///             {
    ///                 SecureBootEnabled = true,
    ///                 VTpmEnabled = true,
    ///             },
    ///         },
    ///         StorageProfile = new AzureNative.Compute.V20230301.Inputs.StorageProfileArgs
    ///         {
    ///             DataDisks = new[]
    ///             {
    ///                 new AzureNative.Compute.V20230301.Inputs.DataDiskArgs
    ///                 {
    ///                     Caching = AzureNative.Compute.V20230301.CachingTypes.None,
    ///                     CreateOption = "Empty",
    ///                     DeleteOption = "Delete",
    ///                     DetachOption = "ForceDetach",
    ///                     DiskSizeGB = 128,
    ///                     Image = new AzureNative.Compute.V20230301.Inputs.VirtualHardDiskArgs
    ///                     {
    ///                         Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
    ///                     },
    ///                     Lun = 1,
    ///                     ManagedDisk = new AzureNative.Compute.V20230301.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         DiskEncryptionSet = new AzureNative.Compute.V20230301.Inputs.DiskEncryptionSetParametersArgs
    ///                         {
    ///                             Id = "aaaaaaaaaaaa",
    ///                         },
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d",
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d",
    ///                     ToBeDetached = true,
    ///                     Vhd = new AzureNative.Compute.V20230301.Inputs.VirtualHardDiskArgs
    ///                     {
    ///                         Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
    ///                     },
    ///                     WriteAcceleratorEnabled = true,
    ///                 },
    ///             },
    ///             ImageReference = new AzureNative.Compute.V20230301.Inputs.ImageReferenceArgs
    ///             {
    ///                 Id = "a",
    ///                 Offer = "WindowsServer",
    ///                 Publisher = "MicrosoftWindowsServer",
    ///                 SharedGalleryImageId = "aaaaaaaaaaaaaaaaaaaa",
    ///                 Sku = "2012-R2-Datacenter",
    ///                 Version = "4.127.20180315",
    ///             },
    ///             OsDisk = new AzureNative.Compute.V20230301.Inputs.OSDiskArgs
    ///             {
    ///                 Caching = AzureNative.Compute.V20230301.CachingTypes.None,
    ///                 CreateOption = "FromImage",
    ///                 DeleteOption = "Delete",
    ///                 DiffDiskSettings = new AzureNative.Compute.V20230301.Inputs.DiffDiskSettingsArgs
    ///                 {
    ///                     Option = "Local",
    ///                     Placement = "CacheDisk",
    ///                 },
    ///                 DiskSizeGB = 127,
    ///                 EncryptionSettings = new AzureNative.Compute.V20230301.Inputs.DiskEncryptionSettingsArgs
    ///                 {
    ///                     DiskEncryptionKey = new AzureNative.Compute.V20230301.Inputs.KeyVaultSecretReferenceArgs
    ///                     {
    ///                         SecretUrl = "aaaaaaaa",
    ///                         SourceVault = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                         {
    ///                             Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                         },
    ///                     },
    ///                     Enabled = true,
    ///                     KeyEncryptionKey = new AzureNative.Compute.V20230301.Inputs.KeyVaultKeyReferenceArgs
    ///                     {
    ///                         KeyUrl = "aaaaaaaaaaaaaa",
    ///                         SourceVault = new AzureNative.Compute.V20230301.Inputs.SubResourceArgs
    ///                         {
    ///                             Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
    ///                         },
    ///                     },
    ///                 },
    ///                 Image = new AzureNative.Compute.V20230301.Inputs.VirtualHardDiskArgs
    ///                 {
    ///                     Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
    ///                 },
    ///                 ManagedDisk = new AzureNative.Compute.V20230301.Inputs.ManagedDiskParametersArgs
    ///                 {
    ///                     DiskEncryptionSet = new AzureNative.Compute.V20230301.Inputs.DiskEncryptionSetParametersArgs
    ///                     {
    ///                         Id = "aaaaaaaaaaaa",
    ///                     },
    ///                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc",
    ///                     StorageAccountType = "Standard_LRS",
    ///                 },
    ///                 Name = "vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc",
    ///                 OsType = AzureNative.Compute.V20230301.OperatingSystemTypes.Windows,
    ///                 Vhd = new AzureNative.Compute.V20230301.Inputs.VirtualHardDiskArgs
    ///                 {
    ///                     Uri = "https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd",
    ///                 },
    ///                 WriteAcceleratorEnabled = true,
    ///             },
    ///         },
    ///         Tags = null,
    ///         UserData = "RXhhbXBsZSBVc2VyRGF0YQ==",
    ///         VmScaleSetName = "aaaaaaaaaaaaaa",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### VirtualMachineScaleSetVM_Update_MinimumSet_Gen
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var virtualMachineScaleSetVM = new AzureNative.Compute.V20230301.VirtualMachineScaleSetVM("virtualMachineScaleSetVM", new()
    ///     {
    ///         InstanceId = "aaaaaaaaaaaaaaaaaaaa",
    ///         Location = "westus",
    ///         ResourceGroupName = "rgcompute",
    ///         VmScaleSetName = "aaaaaaaaaaaaaaaaaa",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:compute/v20230301:VirtualMachineScaleSetVM {vmss-vm-name} /subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:compute/v20230301:VirtualMachineScaleSetVM")]
    public partial class VirtualMachineScaleSetVM : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.AdditionalCapabilitiesResponse?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates). Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
        /// </summary>
        [Output("availabilitySet")]
        public Output<Outputs.SubResourceResponse?> AvailabilitySet { get; private set; } = null!;

        /// <summary>
        /// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
        /// </summary>
        [Output("diagnosticsProfile")]
        public Output<Outputs.DiagnosticsProfileResponse?> DiagnosticsProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies the hardware settings for the virtual machine.
        /// </summary>
        [Output("hardwareProfile")]
        public Output<Outputs.HardwareProfileResponse?> HardwareProfile { get; private set; } = null!;

        /// <summary>
        /// The identity of the virtual machine, if configured.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.VirtualMachineIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The virtual machine instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The virtual machine instance view.
        /// </summary>
        [Output("instanceView")]
        public Output<Outputs.VirtualMachineScaleSetVMInstanceViewResponse> InstanceView { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the latest model has been applied to the virtual machine.
        /// </summary>
        [Output("latestModelApplied")]
        public Output<bool> LatestModelApplied { get; private set; } = null!;

        /// <summary>
        /// Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or the customized model for the virtual machine.
        /// </summary>
        [Output("modelDefinitionApplied")]
        public Output<string> ModelDefinitionApplied { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the network interfaces of the virtual machine.
        /// </summary>
        [Output("networkProfile")]
        public Output<Outputs.NetworkProfileResponse?> NetworkProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies the network profile configuration of the virtual machine.
        /// </summary>
        [Output("networkProfileConfiguration")]
        public Output<Outputs.VirtualMachineScaleSetVMNetworkProfileConfigurationResponse?> NetworkProfileConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies the operating system settings for the virtual machine.
        /// </summary>
        [Output("osProfile")]
        public Output<Outputs.OSProfileResponse?> OsProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.PlanResponse?> Plan { get; private set; } = null!;

        /// <summary>
        /// Specifies the protection policy of the virtual machine.
        /// </summary>
        [Output("protectionPolicy")]
        public Output<Outputs.VirtualMachineScaleSetVMProtectionPolicyResponse?> ProtectionPolicy { get; private set; } = null!;

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The virtual machine child extension resources.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.VirtualMachineExtensionResponse>> Resources { get; private set; } = null!;

        /// <summary>
        /// Specifies the Security related profile settings for the virtual machine.
        /// </summary>
        [Output("securityProfile")]
        public Output<Outputs.SecurityProfileResponse?> SecurityProfile { get; private set; } = null!;

        /// <summary>
        /// The virtual machine SKU.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse> Sku { get; private set; } = null!;

        /// <summary>
        /// Specifies the storage settings for the virtual machine disks.
        /// </summary>
        [Output("storageProfile")]
        public Output<Outputs.StorageProfileResponse?> StorageProfile { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Azure VM unique ID.
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;

        /// <summary>
        /// The virtual machine zones.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineScaleSetVM resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineScaleSetVM(string name, VirtualMachineScaleSetVMArgs args, CustomResourceOptions? options = null)
            : base("azure-native:compute/v20230301:VirtualMachineScaleSetVM", name, args ?? new VirtualMachineScaleSetVMArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineScaleSetVM(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:compute/v20230301:VirtualMachineScaleSetVM", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:compute:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20171201:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20180401:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20180601:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20181001:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20190301:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20190701:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20191201:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20200601:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20201201:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20210301:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20210401:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20210701:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20211101:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20220301:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20220801:VirtualMachineScaleSetVM"},
                    new global::Pulumi.Alias { Type = "azure-native:compute/v20221101:VirtualMachineScaleSetVM"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineScaleSetVM resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineScaleSetVM Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualMachineScaleSetVM(name, id, options);
        }
    }

    public sealed class VirtualMachineScaleSetVMArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.AdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        /// <summary>
        /// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates). Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
        /// </summary>
        [Input("availabilitySet")]
        public Input<Inputs.SubResourceArgs>? AvailabilitySet { get; set; }

        /// <summary>
        /// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
        /// </summary>
        [Input("diagnosticsProfile")]
        public Input<Inputs.DiagnosticsProfileArgs>? DiagnosticsProfile { get; set; }

        /// <summary>
        /// Specifies the hardware settings for the virtual machine.
        /// </summary>
        [Input("hardwareProfile")]
        public Input<Inputs.HardwareProfileArgs>? HardwareProfile { get; set; }

        /// <summary>
        /// The identity of the virtual machine, if configured.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VirtualMachineIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The instance ID of the virtual machine.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the network interfaces of the virtual machine.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.NetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// Specifies the network profile configuration of the virtual machine.
        /// </summary>
        [Input("networkProfileConfiguration")]
        public Input<Inputs.VirtualMachineScaleSetVMNetworkProfileConfigurationArgs>? NetworkProfileConfiguration { get; set; }

        /// <summary>
        /// Specifies the operating system settings for the virtual machine.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.OSProfileArgs>? OsProfile { get; set; }

        /// <summary>
        /// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.PlanArgs>? Plan { get; set; }

        /// <summary>
        /// Specifies the protection policy of the virtual machine.
        /// </summary>
        [Input("protectionPolicy")]
        public Input<Inputs.VirtualMachineScaleSetVMProtectionPolicyArgs>? ProtectionPolicy { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the Security related profile settings for the virtual machine.
        /// </summary>
        [Input("securityProfile")]
        public Input<Inputs.SecurityProfileArgs>? SecurityProfile { get; set; }

        /// <summary>
        /// Specifies the storage settings for the virtual machine disks.
        /// </summary>
        [Input("storageProfile")]
        public Input<Inputs.StorageProfileArgs>? StorageProfile { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The name of the VM scale set where the extension should be create or updated.
        /// </summary>
        [Input("vmScaleSetName", required: true)]
        public Input<string> VmScaleSetName { get; set; } = null!;

        public VirtualMachineScaleSetVMArgs()
        {
        }
        public static new VirtualMachineScaleSetVMArgs Empty => new VirtualMachineScaleSetVMArgs();
    }
}
