// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoIndexer.V20220801
{
    /// <summary>
    /// An Azure Video Indexer account.
    /// 
    /// ## Example Usage
    /// ### Put example #1
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #10
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = null,
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #2
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #3
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #4
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #5
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #6
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #7
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.Media/mediaservices/contoso-videoanalyzer-ms",
    ///             UserAssignedIdentity = "/subscriptions/xxx/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-videoanalyzer-mi",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #8
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         Identity = new AzureNative.VideoIndexer.V20220801.Inputs.ManagedServiceIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             UserAssignedIdentities = 
    ///             {
    ///                 { "subscriptions/24237b72-8546-4da5-b204-8c3cb76dd930/resourceGroups/uratzmon-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/talshoham", null },
    ///             },
    ///         },
    ///         Location = "NorthEurope",
    ///         MediaServices = new AzureNative.VideoIndexer.V20220801.Inputs.MediaServicesForPutRequestArgs
    ///         {
    ///             ResourceId = "/subscriptions/24237b72-8546-4da5-b204-8c3cb76dd930/resourceGroups/uratzmon-rg/providers/Microsoft.Media/mediaservices/talshoham",
    ///         },
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Put example #9
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using AzureNative = Pulumi.AzureNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var account = new AzureNative.VideoIndexer.V20220801.Account("account", new()
    ///     {
    ///         AccountName = "contosto-videoanalyzer",
    ///         ResourceGroupName = "contosto-videoanalyzer-rg",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing resource can be imported using its type token, name, and identifier, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure-native:videoindexer/v20220801:Account contosto-videoanalyzer /subscriptions/586d4f48-8f08-4a4e-96b7-e1892d6dba9e/resourceGroups/contoso-videoanalyzer-rg/providers/Microsoft.VideoIndexer/accounts/contosto-videoanalyzer 
    /// ```
    /// </summary>
    [AzureNativeResourceType("azure-native:videoindexer/v20220801:Account")]
    public partial class Account : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account's data-plane ID. This can be set only when connecting an existing classic account
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The account's name
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// Managed service identity (system assigned and/or user assigned identities)
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The media services details
        /// </summary>
        [Output("mediaServices")]
        public Output<Outputs.MediaServicesForPutRequestResponse?> MediaServices { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets the status of the account at the time the operation was called.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The account's tenant id
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// An integer representing the total seconds that have been indexed on the account
        /// </summary>
        [Output("totalSecondsIndexed")]
        public Output<int> TotalSecondsIndexed { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Account resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Account(string name, AccountArgs args, CustomResourceOptions? options = null)
            : base("azure-native:videoindexer/v20220801:Account", name, args ?? new AccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Account(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:videoindexer/v20220801:Account", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:videoindexer:Account"},
                    new global::Pulumi.Alias { Type = "azure-native:videoindexer/v20211018preview:Account"},
                    new global::Pulumi.Alias { Type = "azure-native:videoindexer/v20211027preview:Account"},
                    new global::Pulumi.Alias { Type = "azure-native:videoindexer/v20211110preview:Account"},
                    new global::Pulumi.Alias { Type = "azure-native:videoindexer/v20220413preview:Account"},
                    new global::Pulumi.Alias { Type = "azure-native:videoindexer/v20220720preview:Account"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Account resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Account Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Account(name, id, options);
        }
    }

    public sealed class AccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account's data-plane ID. This can be set only when connecting an existing classic account
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The name of the Azure Video Indexer account.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// Managed service identity (system assigned and/or user assigned identities)
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The media services details
        /// </summary>
        [Input("mediaServices")]
        public Input<Inputs.MediaServicesForPutRequestArgs>? MediaServices { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AccountArgs()
        {
            AccountId = "00000000-0000-0000-0000-000000000000";
        }
        public static new AccountArgs Empty => new AccountArgs();
    }
}
